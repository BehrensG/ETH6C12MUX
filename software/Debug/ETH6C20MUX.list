
ETH6C20MUX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148a8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d68  08014aa8  08014aa8  00024aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017810  08017810  0003024c  2**0
                  CONTENTS
  4 .ARM          00000008  08017810  08017810  00027810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017818  08017818  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017818  08017818  00027818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801781c  0801781c  0002781c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08017820  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007480  2000024c  08017a6c  0003024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200076cc  08017a6c  000376cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003db31  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006e3d  00000000  00000000  0006dda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  00074be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  000766e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000333a6  00000000  00000000  00077ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022bb1  00000000  00000000  000ab39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001031e6  00000000  00000000  000cdf4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d1135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078e0  00000000  00000000  001d11b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000024c 	.word	0x2000024c
 800021c:	00000000 	.word	0x00000000
 8000220:	08014a90 	.word	0x08014a90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000250 	.word	0x20000250
 800023c:	08014a90 	.word	0x08014a90

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <BOARD_CreateDefaultData>:
  * @brief  The application entry point.
  * @retval int
  */

void BOARD_CreateDefaultData()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	default_board.scpi_info.manufacturer = (int8_t)malloc(SCPI_MANUFACTURER_STRING_LENGTH*sizeof(int8_t));
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f012 fc41 	bl	8012e9c <malloc>
 800061a:	4603      	mov	r3, r0
 800061c:	b25b      	sxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	4b7a      	ldr	r3, [pc, #488]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000622:	639a      	str	r2, [r3, #56]	; 0x38
	default_board.scpi_info.device = (int8_t)malloc(SCPI_DEVICE_STRING_LENGTH*sizeof(int8_t));
 8000624:	200b      	movs	r0, #11
 8000626:	f012 fc39 	bl	8012e9c <malloc>
 800062a:	4603      	mov	r3, r0
 800062c:	b25b      	sxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	4b76      	ldr	r3, [pc, #472]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000632:	63da      	str	r2, [r3, #60]	; 0x3c
	default_board.scpi_info.serial_number = (int8_t)malloc(SCPI_SERIALNUMBER_STRING_LENGTH*sizeof(int8_t));
 8000634:	2041      	movs	r0, #65	; 0x41
 8000636:	f012 fc31 	bl	8012e9c <malloc>
 800063a:	4603      	mov	r3, r0
 800063c:	b25b      	sxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	4b72      	ldr	r3, [pc, #456]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000642:	641a      	str	r2, [r3, #64]	; 0x40
	default_board.scpi_info.software_version = (int8_t)malloc(SCPI_SOFTWAREVERSION_STRING_LENGTH*sizeof(int8_t));
 8000644:	2041      	movs	r0, #65	; 0x41
 8000646:	f012 fc29 	bl	8012e9c <malloc>
 800064a:	4603      	mov	r3, r0
 800064c:	b25b      	sxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	4b6e      	ldr	r3, [pc, #440]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000652:	645a      	str	r2, [r3, #68]	; 0x44
	default_board.security.password = (int8_t)malloc(PASSWORD_LENGTH*sizeof(int8_t));
 8000654:	200b      	movs	r0, #11
 8000656:	f012 fc21 	bl	8012e9c <malloc>
 800065a:	4603      	mov	r3, r0
 800065c:	b25b      	sxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	4b6a      	ldr	r3, [pc, #424]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000662:	651a      	str	r2, [r3, #80]	; 0x50
	default_board.ip4_current.hostname = (int8_t)malloc(NET_HOSTNAME*sizeof(int8_t));
 8000664:	20ff      	movs	r0, #255	; 0xff
 8000666:	f012 fc19 	bl	8012e9c <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	b25b      	sxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	4b66      	ldr	r3, [pc, #408]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000672:	615a      	str	r2, [r3, #20]
	default_board.ip4_static.hostname = (int8_t)malloc(NET_HOSTNAME*sizeof(int8_t));
 8000674:	20ff      	movs	r0, #255	; 0xff
 8000676:	f012 fc11 	bl	8012e9c <malloc>
 800067a:	4603      	mov	r3, r0
 800067c:	b25b      	sxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	4b62      	ldr	r3, [pc, #392]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000682:	631a      	str	r2, [r3, #48]	; 0x30

	default_board.scpi_info.manufacturer = SCPI_IDN1;
 8000684:	4b61      	ldr	r3, [pc, #388]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000686:	4a62      	ldr	r2, [pc, #392]	; (8000810 <BOARD_CreateDefaultData+0x200>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38
	default_board.scpi_info.device = SCPI_IDN2;
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800068c:	4a61      	ldr	r2, [pc, #388]	; (8000814 <BOARD_CreateDefaultData+0x204>)
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
	default_board.scpi_info.serial_number = SCPI_IDN3;
 8000690:	4b5e      	ldr	r3, [pc, #376]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000692:	4a61      	ldr	r2, [pc, #388]	; (8000818 <BOARD_CreateDefaultData+0x208>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
	default_board.scpi_info.software_version = SCPI_IDN4;
 8000696:	4b5d      	ldr	r3, [pc, #372]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000698:	4a60      	ldr	r2, [pc, #384]	; (800081c <BOARD_CreateDefaultData+0x20c>)
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

	default_board.security.on = SECURITY_ON;
 800069c:	4b5b      	ldr	r3, [pc, #364]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800069e:	2201      	movs	r2, #1
 80006a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	default_board.security.password = PASSWORD;
 80006a4:	4b59      	ldr	r3, [pc, #356]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006a6:	4a5b      	ldr	r2, [pc, #364]	; (8000814 <BOARD_CreateDefaultData+0x204>)
 80006a8:	651a      	str	r2, [r3, #80]	; 0x50

	default_board.module.detected = FALSE;
 80006aa:	4b58      	ldr	r3, [pc, #352]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	default_board.ip4_static.hostname = default_board.ip4_current.hostname = SCPI_IDN2;
 80006b2:	4b56      	ldr	r3, [pc, #344]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006b4:	4a57      	ldr	r2, [pc, #348]	; (8000814 <BOARD_CreateDefaultData+0x204>)
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	4b54      	ldr	r3, [pc, #336]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a53      	ldr	r2, [pc, #332]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
	default_board.ip4_static.ip[0] = default_board.ip4_current.ip[0] = IP_ADDRESS0;
 80006c0:	4b52      	ldr	r3, [pc, #328]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006c2:	22c0      	movs	r2, #192	; 0xc0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	4b51      	ldr	r3, [pc, #324]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b50      	ldr	r3, [pc, #320]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006cc:	771a      	strb	r2, [r3, #28]
	default_board.ip4_static.ip[1] = default_board.ip4_current.ip[1] = IP_ADDRESS1;
 80006ce:	4b4f      	ldr	r3, [pc, #316]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	705a      	strb	r2, [r3, #1]
 80006d4:	4b4d      	ldr	r3, [pc, #308]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006d6:	785a      	ldrb	r2, [r3, #1]
 80006d8:	4b4c      	ldr	r3, [pc, #304]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006da:	775a      	strb	r2, [r3, #29]
	default_board.ip4_static.ip[2] = default_board.ip4_current.ip[2] = IP_ADDRESS2;
 80006dc:	4b4b      	ldr	r3, [pc, #300]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006de:	2202      	movs	r2, #2
 80006e0:	709a      	strb	r2, [r3, #2]
 80006e2:	4b4a      	ldr	r3, [pc, #296]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006e4:	789a      	ldrb	r2, [r3, #2]
 80006e6:	4b49      	ldr	r3, [pc, #292]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006e8:	779a      	strb	r2, [r3, #30]
	default_board.ip4_static.ip[3] = default_board.ip4_current.ip[3] = IP_ADDRESS3;
 80006ea:	4b48      	ldr	r3, [pc, #288]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	70da      	strb	r2, [r3, #3]
 80006f0:	4b46      	ldr	r3, [pc, #280]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006f2:	78da      	ldrb	r2, [r3, #3]
 80006f4:	4b45      	ldr	r3, [pc, #276]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006f6:	77da      	strb	r2, [r3, #31]

	default_board.ip4_static.netmask[0] = default_board.ip4_current.netmask[0] = NETMASK_ADDRESS0;
 80006f8:	4b44      	ldr	r3, [pc, #272]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	711a      	strb	r2, [r3, #4]
 80006fe:	4b43      	ldr	r3, [pc, #268]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000700:	791a      	ldrb	r2, [r3, #4]
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
	default_board.ip4_static.netmask[1] = default_board.ip4_current.netmask[1] = NETMASK_ADDRESS1;
 8000708:	4b40      	ldr	r3, [pc, #256]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	715a      	strb	r2, [r3, #5]
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000710:	795a      	ldrb	r2, [r3, #5]
 8000712:	4b3e      	ldr	r3, [pc, #248]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	default_board.ip4_static.netmask[2] = default_board.ip4_current.netmask[2] = NETMASK_ADDRESS2;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800071a:	22ff      	movs	r2, #255	; 0xff
 800071c:	719a      	strb	r2, [r3, #6]
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000720:	799a      	ldrb	r2, [r3, #6]
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000724:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	default_board.ip4_static.netmask[3] = default_board.ip4_current.netmask[3] = NETMASK_ADDRESS3;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800072a:	2200      	movs	r2, #0
 800072c:	71da      	strb	r2, [r3, #7]
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000730:	79da      	ldrb	r2, [r3, #7]
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000734:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	default_board.ip4_static.gateway[0] = default_board.ip4_current.gateway[0] = GATEWAY_ADDRESS0;
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	721a      	strb	r2, [r3, #8]
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000740:	7a1a      	ldrb	r2, [r3, #8]
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	default_board.ip4_static.gateway[1] = default_board.ip4_current.gateway[1] = GATEWAY_ADDRESS1;
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800074a:	2200      	movs	r2, #0
 800074c:	725a      	strb	r2, [r3, #9]
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000750:	7a5a      	ldrb	r2, [r3, #9]
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	default_board.ip4_static.gateway[2] = default_board.ip4_current.gateway[2] = GATEWAY_ADDRESS2;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800075a:	2202      	movs	r2, #2
 800075c:	729a      	strb	r2, [r3, #10]
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000760:	7a9a      	ldrb	r2, [r3, #10]
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000764:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	default_board.ip4_static.gateway[3] = default_board.ip4_current.gateway[3] = GATEWAY_ADDRESS3;
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800076a:	2201      	movs	r2, #1
 800076c:	72da      	strb	r2, [r3, #11]
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000770:	7ada      	ldrb	r2, [r3, #11]
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000774:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	default_board.ip4_static.port = default_board.ip4_current.port = TCPIP_PORT;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800077a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800077e:	831a      	strh	r2, [r3, #24]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000782:	8b1a      	ldrh	r2, [r3, #24]
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000786:	869a      	strh	r2, [r3, #52]	; 0x34

	default_board.ip4_static.MAC[0] = default_board.ip4_current.MAC[0] = MAC0;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800078a:	2200      	movs	r2, #0
 800078c:	731a      	strb	r2, [r3, #12]
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000790:	7b1a      	ldrb	r2, [r3, #12]
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 8000794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	default_board.ip4_static.MAC[1] = default_board.ip4_current.MAC[1] = MAC1;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	735a      	strb	r2, [r3, #13]
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007a0:	7b5a      	ldrb	r2, [r3, #13]
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	default_board.ip4_static.MAC[2] = default_board.ip4_current.MAC[2] = MAC2;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007aa:	22e1      	movs	r2, #225	; 0xe1
 80007ac:	739a      	strb	r2, [r3, #14]
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007b0:	7b9a      	ldrb	r2, [r3, #14]
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	default_board.ip4_static.MAC[3] = default_board.ip4_current.MAC[3] = MAC3;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	73da      	strb	r2, [r3, #15]
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007c0:	7bda      	ldrb	r2, [r3, #15]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	default_board.ip4_static.MAC[4] = default_board.ip4_current.MAC[4] = MAC4;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	741a      	strb	r2, [r3, #16]
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007d0:	7c1a      	ldrb	r2, [r3, #16]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	default_board.ip4_static.MAC[5] = default_board.ip4_current.MAC[5] = MAC5;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	745a      	strb	r2, [r3, #17]
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007e0:	7c5a      	ldrb	r2, [r3, #17]
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	default_board.default_config = DEFAULT_OFF;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	default_board.dhcp = OFF;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	board = default_board;
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <BOARD_CreateDefaultData+0x210>)
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <BOARD_CreateDefaultData+0x1fc>)
 80007fc:	4610      	mov	r0, r2
 80007fe:	4619      	mov	r1, r3
 8000800:	2358      	movs	r3, #88	; 0x58
 8000802:	461a      	mov	r2, r3
 8000804:	f012 fb73 	bl	8012eee <memcpy>

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000514 	.word	0x20000514
 8000810:	08014aa8 	.word	0x08014aa8
 8000814:	08014ab4 	.word	0x08014ab4
 8000818:	08014ac0 	.word	0x08014ac0
 800081c:	08014ad0 	.word	0x08014ad0
 8000820:	20000458 	.word	0x20000458

08000824 <BOARD_DetectDefaultConfig>:

void BOARD_DetectDefaultConfig()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	board.default_config = HAL_GPIO_ReadPin(MCU_DEFAULT_GPIO_Port, MCU_DEFAULT_Pin);
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <BOARD_DetectDefaultConfig+0x1c>)
 800082e:	f003 fb75 	bl	8003f1c <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	4b03      	ldr	r3, [pc, #12]	; (8000844 <BOARD_DetectDefaultConfig+0x20>)
 8000838:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40020400 	.word	0x40020400
 8000844:	20000458 	.word	0x20000458

08000848 <main>:

int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af08      	add	r7, sp, #32

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800084e:	f002 f8e2 	bl	8002a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f83f 	bl	80008d4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000856:	f000 f963 	bl	8000b20 <MX_GPIO_Init>
  MX_SPI5_Init();
 800085a:	f000 f923 	bl	8000aa4 <MX_SPI5_Init>
  MX_LWIP_Init();
 800085e:	f004 fec5 	bl	80055ec <MX_LWIP_Init>
  MX_SPI3_Init();
 8000862:	f000 f8a3 	bl	80009ac <MX_SPI3_Init>
  MX_SPI4_Init();
 8000866:	f000 f8df 	bl	8000a28 <MX_SPI4_Init>
  tcp_raw_init();
 800086a:	f001 fe57 	bl	800251c <tcp_raw_init>

  BOARD_CreateDefaultData();
 800086e:	f7ff fecf 	bl	8000610 <BOARD_CreateDefaultData>
  BOARD_DetectDefaultConfig();
 8000872:	f7ff ffd7 	bl	8000824 <BOARD_DetectDefaultConfig>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCPI_Init(&scpi_context,
 8000876:	2318      	movs	r3, #24
 8000878:	9307      	str	r3, [sp, #28]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <main+0x64>)
 800087c:	9306      	str	r3, [sp, #24]
 800087e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000882:	9305      	str	r3, [sp, #20]
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <main+0x68>)
 8000886:	9304      	str	r3, [sp, #16]
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <main+0x6c>)
 800088a:	9303      	str	r3, [sp, #12]
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <main+0x70>)
 800088e:	9302      	str	r3, [sp, #8]
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <main+0x74>)
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <main+0x78>)
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <main+0x7c>)
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <main+0x80>)
 800089c:	490b      	ldr	r1, [pc, #44]	; (80008cc <main+0x84>)
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <main+0x88>)
 80008a0:	f010 ff5a 	bl	8011758 <SCPI_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80008a4:	f004 ffce 	bl	8005844 <MX_LWIP_Process>
 80008a8:	e7fc      	b.n	80008a4 <main+0x5c>
 80008aa:	bf00      	nop
 80008ac:	20000e9c 	.word	0x20000e9c
 80008b0:	20000c9c 	.word	0x20000c9c
 80008b4:	08014ad0 	.word	0x08014ad0
 80008b8:	08014ac0 	.word	0x08014ac0
 80008bc:	08014ab4 	.word	0x08014ab4
 80008c0:	08014aa8 	.word	0x08014aa8
 80008c4:	080174a0 	.word	0x080174a0
 80008c8:	20000058 	.word	0x20000058
 80008cc:	08017138 	.word	0x08017138
 80008d0:	20000c04 	.word	0x20000c04

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	; 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f012 fb27 	bl	8012f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <SystemClock_Config+0xd0>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <SystemClock_Config+0xd0>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <SystemClock_Config+0xd4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <SystemClock_Config+0xd4>)
 8000916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <SystemClock_Config+0xd4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000940:	23d8      	movs	r3, #216	; 0xd8
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fb65 	bl	8004020 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800095c:	f000 f9c6 	bl	8000cec <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000960:	f003 fb0e 	bl	8003f80 <HAL_PWREx_EnableOverDrive>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800096a:	f000 f9bf 	bl	8000cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800097a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2107      	movs	r1, #7
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fdb9 	bl	8004504 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000998:	f000 f9a8 	bl	8000cec <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	3750      	adds	r7, #80	; 0x50
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_SPI3_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_SPI3_Init+0x74>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_SPI3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_SPI3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_SPI3_Init+0x74>)
 8000a0c:	f003 ff46 	bl	800489c <HAL_SPI_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f969 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200004b0 	.word	0x200004b0
 8000a24:	40003c00 	.word	0x40003c00

08000a28 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_SPI4_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a38:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a46:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a5e:	2218      	movs	r2, #24
 8000a60:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a76:	2207      	movs	r2, #7
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_SPI4_Init+0x74>)
 8000a88:	f003 ff08 	bl	800489c <HAL_SPI_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f92b 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000056c 	.word	0x2000056c
 8000aa0:	40013400 	.word	0x40013400

08000aa4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_SPI5_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000abe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ada:	2218      	movs	r2, #24
 8000adc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_SPI5_Init+0x74>)
 8000b04:	f003 feca 	bl	800489c <HAL_SPI_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 f8ed 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200003f4 	.word	0x200003f4
 8000b1c:	40015000 	.word	0x40015000

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	4b68      	ldr	r3, [pc, #416]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a67      	ldr	r2, [pc, #412]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b65      	ldr	r3, [pc, #404]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4e:	4b62      	ldr	r3, [pc, #392]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a61      	ldr	r2, [pc, #388]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5b      	ldr	r2, [pc, #364]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a55      	ldr	r2, [pc, #340]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a4f      	ldr	r2, [pc, #316]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a43      	ldr	r2, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <MX_GPIO_Init+0x1b8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY1_nRST_GPIO_Port, RELAY1_nRST_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	483e      	ldr	r0, [pc, #248]	; (8000cdc <MX_GPIO_Init+0x1bc>)
 8000be4:	f003 f9b2 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_FLASH1_CS_Pin|MCU_FLASH2_CS_Pin|RELAY1_nCS4_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000bee:	483c      	ldr	r0, [pc, #240]	; (8000ce0 <MX_GPIO_Init+0x1c0>)
 8000bf0:	f003 f9ac 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RELAY1_nCS3_Pin|RELAY1_nCS2_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <MX_GPIO_Init+0x1c4>)
 8000bfa:	f003 f9a7 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY1_nCS1_Pin|RELAY1_nCS0_Pin|RELAY2_nRST_Pin|RELAY2_nCS0_Pin 
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f64f 5180 	movw	r1, #64896	; 0xfd80
 8000c04:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x1c8>)
 8000c06:	f003 f9a1 	bl	8003f4c <HAL_GPIO_WritePin>
                          |RELAY2_nCS1_Pin|RELAY2_nCS2_Pin|RELAY2_nCS3_Pin|RELAY2_nCS4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : RELAY1_nRST_Pin */
  GPIO_InitStruct.Pin = RELAY1_nRST_Pin;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RELAY1_nRST_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	482e      	ldr	r0, [pc, #184]	; (8000cdc <MX_GPIO_Init+0x1bc>)
 8000c22:	f002 ffd1 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FLASH1_CS_Pin MCU_FLASH2_CS_Pin RELAY1_nCS4_Pin */
  GPIO_InitStruct.Pin = MCU_FLASH1_CS_Pin|MCU_FLASH2_CS_Pin|RELAY1_nCS4_Pin;
 8000c26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0x1c0>)
 8000c40:	f002 ffc2 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_nCS3_Pin RELAY1_nCS2_Pin */
  GPIO_InitStruct.Pin = RELAY1_nCS3_Pin|RELAY1_nCS2_Pin;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0x1c4>)
 8000c5c:	f002 ffb4 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_nCS1_Pin RELAY1_nCS0_Pin RELAY2_nRST_Pin RELAY2_nCS0_Pin 
                           RELAY2_nCS1_Pin RELAY2_nCS3_Pin RELAY2_nCS4_Pin */
  GPIO_InitStruct.Pin = RELAY1_nCS1_Pin|RELAY1_nCS0_Pin|RELAY2_nRST_Pin|RELAY2_nCS0_Pin 
 8000c60:	f64d 5380 	movw	r3, #56704	; 0xdd80
 8000c64:	61fb      	str	r3, [r7, #28]
                          |RELAY2_nCS1_Pin|RELAY2_nCS3_Pin|RELAY2_nCS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <MX_GPIO_Init+0x1c8>)
 8000c7a:	f002 ffa5 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY2_nCS2_Pin */
  GPIO_InitStruct.Pin = RELAY2_nCS2_Pin;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RELAY2_nCS2_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0x1c8>)
 8000c98:	f002 ff96 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODULE_DETECT1_Pin MODULE_DETECT0_Pin */
  GPIO_InitStruct.Pin = MODULE_DETECT1_Pin|MODULE_DETECT0_Pin;
 8000c9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480a      	ldr	r0, [pc, #40]	; (8000cdc <MX_GPIO_Init+0x1bc>)
 8000cb2:	f002 ff89 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_DEFAULT_Pin */
  GPIO_InitStruct.Pin = MCU_DEFAULT_Pin;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_DEFAULT_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0x1bc>)
 8000ccc:	f002 ff7c 	bl	8003bc8 <HAL_GPIO_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	3730      	adds	r7, #48	; 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40021400 	.word	0x40021400
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	40021000 	.word	0x40021000

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d00:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <__NVIC_SystemReset+0x20>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d0c:	4903      	ldr	r1, [pc, #12]	; (8000d1c <__NVIC_SystemReset+0x20>)
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_SystemReset+0x24>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60cb      	str	r3, [r1, #12]
 8000d14:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <__NVIC_SystemReset+0x1c>
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	05fa0004 	.word	0x05fa0004

08000d24 <SCPI_StringToIP4Array>:
        return SCPI_RES_OK;
}


uint8_t SCPI_StringToIP4Array (const int8_t* ip_string, uint8_t* ip_array)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]

    /* A pointer to the next digit to process. */
    const int8_t* start;

    start = ip_string;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < 4; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	74fb      	strb	r3, [r7, #19]
 8000d36:	e035      	b.n	8000da4 <SCPI_StringToIP4Array+0x80>
    {
        /* The digit being processed. */
        uint8_t c;
        /* The value of this byte. */
        uint16_t n = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	823b      	strh	r3, [r7, #16]
        while (1)
        {
            c = * start;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d42:	73fb      	strb	r3, [r7, #15]
            start++;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
            if (c >= '0' && c <= '9')
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d4e:	d910      	bls.n	8000d72 <SCPI_StringToIP4Array+0x4e>
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b39      	cmp	r3, #57	; 0x39
 8000d54:	d80d      	bhi.n	8000d72 <SCPI_StringToIP4Array+0x4e>
            {
                n *= 10;
 8000d56:	8a3b      	ldrh	r3, [r7, #16]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	823b      	strh	r3, [r7, #16]
                n += c - '0';
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	8a3b      	ldrh	r3, [r7, #16]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	3b30      	subs	r3, #48	; 0x30
 8000d6e:	823b      	strh	r3, [r7, #16]
            c = * start;
 8000d70:	e7e4      	b.n	8000d3c <SCPI_StringToIP4Array+0x18>
            }
            /* We insist on stopping at "." if we are still parsing
               the first, second, or third numbers. If we have reached
               the end of the numbers, we will allow any character. */
            else if ((i < 3 && c == '.') || i == 3)
 8000d72:	7cfb      	ldrb	r3, [r7, #19]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d802      	bhi.n	8000d7e <SCPI_StringToIP4Array+0x5a>
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8000d7c:	d004      	beq.n	8000d88 <SCPI_StringToIP4Array+0x64>
 8000d7e:	7cfb      	ldrb	r3, [r7, #19]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d001      	beq.n	8000d88 <SCPI_StringToIP4Array+0x64>
            {
                break;
            }
            else
            {
                return NET_STR_WRONG_FORMAT;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e011      	b.n	8000dac <SCPI_StringToIP4Array+0x88>
            }
        }
        if (n >= 256)
 8000d88:	8a3b      	ldrh	r3, [r7, #16]
 8000d8a:	2bff      	cmp	r3, #255	; 0xff
 8000d8c:	d901      	bls.n	8000d92 <SCPI_StringToIP4Array+0x6e>
        {
            return NET_STR_WRONG_NUMBER;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e00c      	b.n	8000dac <SCPI_StringToIP4Array+0x88>
        }
        ip_array[i] = n;
 8000d92:	7cfb      	ldrb	r3, [r7, #19]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	8a3a      	ldrh	r2, [r7, #16]
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
 8000da0:	3301      	adds	r3, #1
 8000da2:	74fb      	strb	r3, [r7, #19]
 8000da4:	7cfb      	ldrb	r3, [r7, #19]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d9c6      	bls.n	8000d38 <SCPI_StringToIP4Array+0x14>
    }

    return NET_STR_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SCPI_StringToMACArray>:

uint8_t SCPI_StringToMACArray(const uint8_t* MAC_string, uint8_t* MAC_array)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af04      	add	r7, sp, #16
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    int32_t values[6];

    if(6 == sscanf(MAC_string, "%x:%x:%x:%x:%x:%x%*c",
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	1d19      	adds	r1, r3, #4
 8000dc8:	f107 020c 	add.w	r2, r7, #12
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	9303      	str	r3, [sp, #12]
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	3310      	adds	r3, #16
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	330c      	adds	r3, #12
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	3308      	adds	r3, #8
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	460b      	mov	r3, r1
 8000dee:	4930      	ldr	r1, [pc, #192]	; (8000eb0 <SCPI_StringToMACArray+0xf8>)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f012 fc61 	bl	80136b8 <siscanf>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b06      	cmp	r3, #6
 8000dfa:	d11b      	bne.n	8000e34 <SCPI_StringToMACArray+0x7c>
    &values[0], &values[1], &values[2],
    &values[3], &values[4], &values[5]))
    {
        for (uint8_t i = 0; i < 6; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e02:	e012      	b.n	8000e2a <SCPI_StringToMACArray+0x72>
        MAC_array[i] = (uint8_t)values[i];
 8000e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e0e:	4413      	add	r3, r2
 8000e10:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8000e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2ca      	uxtb	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < 6; i++)
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d9e8      	bls.n	8000e04 <SCPI_StringToMACArray+0x4c>
 8000e32:	e037      	b.n	8000ea4 <SCPI_StringToMACArray+0xec>
    }
    else if (6 == sscanf(MAC_string, "%x-%x-%x-%x-%x-%x%*c",
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	1d19      	adds	r1, r3, #4
 8000e3a:	f107 020c 	add.w	r2, r7, #12
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	3314      	adds	r3, #20
 8000e44:	9303      	str	r3, [sp, #12]
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	3310      	adds	r3, #16
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	330c      	adds	r3, #12
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4914      	ldr	r1, [pc, #80]	; (8000eb4 <SCPI_StringToMACArray+0xfc>)
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f012 fc28 	bl	80136b8 <siscanf>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d11a      	bne.n	8000ea4 <SCPI_StringToMACArray+0xec>
    &values[0], &values[1], &values[2],
    &values[3], &values[4], &values[5]))
    {
        for (uint8_t i = 0; i < 6; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e74:	e012      	b.n	8000e9c <SCPI_StringToMACArray+0xe4>
        MAC_array[i] = (uint8_t)values[i];
 8000e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e80:	4413      	add	r3, r2
 8000e82:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8000e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < 6; i++)
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e96:	3301      	adds	r3, #1
 8000e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d9e8      	bls.n	8000e76 <SCPI_StringToMACArray+0xbe>
    }
    else
    {}

    return NET_STR_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	08014adc 	.word	0x08014adc
 8000eb4:	08014af4 	.word	0x08014af4

08000eb8 <SCPI_Write>:

size_t SCPI_Write(scpi_t* context, const char * data, size_t len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    (void) context;
    //err_t wr_err = ERR_OK;

    strcat(es_scpi->p->payload, data);
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <SCPI_Write+0x44>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f012 fc61 	bl	8013796 <strcat>

    es_scpi->p->len += len;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <SCPI_Write+0x44>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	8959      	ldrh	r1, [r3, #10]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SCPI_Write+0x44>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	440a      	add	r2, r1
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	815a      	strh	r2, [r3, #10]
    return es_scpi->p->len;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <SCPI_Write+0x44>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	895b      	ldrh	r3, [r3, #10]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000ed8 	.word	0x20000ed8

08000f00 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t* context)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    (void) context;

    return SCPI_RES_OK;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SCPI_Error>:

int SCPI_Error(scpi_t* context, int_fast16_t err)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    (void) context;

    fprintf(stderr, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <SCPI_Error+0x38>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68dc      	ldr	r4, [r3, #12]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	461d      	mov	r5, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00e fc8a 	bl	800f84c <SCPI_ErrorTranslate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	462a      	mov	r2, r5
 8000f3c:	4905      	ldr	r1, [pc, #20]	; (8000f54 <SCPI_Error+0x3c>)
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f011 ff64 	bl	8012e0c <fiprintf>
    return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000007c 	.word	0x2000007c
 8000f54:	08014b0c 	.word	0x08014b0c

08000f58 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t* context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	803b      	strh	r3, [r7, #0]
    (void) context;

    if (SCPI_CTRL_SRQ == ctrl) {
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d108      	bne.n	8000f80 <SCPI_Control+0x28>
        fprintf(stderr, "**SRQ: 0x%X (%d)\r\n", val, val);
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <SCPI_Control+0x48>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68d8      	ldr	r0, [r3, #12]
 8000f74:	883a      	ldrh	r2, [r7, #0]
 8000f76:	883b      	ldrh	r3, [r7, #0]
 8000f78:	490a      	ldr	r1, [pc, #40]	; (8000fa4 <SCPI_Control+0x4c>)
 8000f7a:	f011 ff47 	bl	8012e0c <fiprintf>
 8000f7e:	e00a      	b.n	8000f96 <SCPI_Control+0x3e>
    } else {
        fprintf(stderr, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <SCPI_Control+0x48>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68d8      	ldr	r0, [r3, #12]
 8000f86:	78fa      	ldrb	r2, [r7, #3]
 8000f88:	8839      	ldrh	r1, [r7, #0]
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <SCPI_Control+0x50>)
 8000f92:	f011 ff3b 	bl	8012e0c <fiprintf>
    }
    return SCPI_RES_OK;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000007c 	.word	0x2000007c
 8000fa4:	08014b20 	.word	0x08014b20
 8000fa8:	08014b34 	.word	0x08014b34

08000fac <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t* context)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    (void) context;

    NVIC_SystemReset();
 8000fb4:	f7ff fea2 	bl	8000cfc <__NVIC_SystemReset>

08000fb8 <My_CoreTstQ>:
    return SCPI_RES_OK;
}

static scpi_result_t My_CoreTstQ(scpi_t* context)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

    SCPI_ResultInt32(context, 0);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f010 fd2b 	bl	8011a1e <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <SCPI_RouteClose>:


static scpi_result_t SCPI_RouteClose(scpi_t* context)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]

    return SCPI_RES_OK;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SCPI_RouteCloseQ>:

static scpi_result_t SCPI_RouteCloseQ(scpi_t* context)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

    return SCPI_RES_OK;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SCPI_RouteOpen>:

static scpi_result_t SCPI_RouteOpen(scpi_t* context)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]

    return SCPI_RES_OK;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SCPI_RouteOpenQ>:

static scpi_result_t SCPI_RouteOpenQ(scpi_t* context)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

    return SCPI_RES_OK;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <SCPI_RouteScan>:

static scpi_result_t SCPI_RouteScan(scpi_t* context)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]

    return SCPI_RES_OK;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SCPI_SystemCommunicationLanDHCP>:
    SCPI_CHOICE_LIST_END
};


static scpi_result_t SCPI_SystemCommunicationLanDHCP(scpi_t* context) //done
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	int32_t state;
	if(!SCPI_ParamChoice(context, DHCP_state_select, &state, TRUE))
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	2301      	movs	r3, #1
 800104e:	490b      	ldr	r1, [pc, #44]	; (800107c <SCPI_SystemCommunicationLanDHCP+0x3c>)
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f011 f8b7 	bl	80121c4 <SCPI_ParamChoice>
 8001056:	4603      	mov	r3, r0
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <SCPI_SystemCommunicationLanDHCP+0x28>
	{
		return SCPI_RES_ERR;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001066:	e005      	b.n	8001074 <SCPI_SystemCommunicationLanDHCP+0x34>
	}

	board.dhcp = (uint8_t)state;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SCPI_SystemCommunicationLanDHCP+0x40>)
 800106e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    return SCPI_RES_OK;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000458 	.word	0x20000458

08001084 <SCPI_SystemCommunicationLanDHCPQ>:

static scpi_result_t SCPI_SystemCommunicationLanDHCPQ(scpi_t* context) //done
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	SCPI_ResultBool(context, board.dhcp);
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SCPI_SystemCommunicationLanDHCPQ+0x2c>)
 800108e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f010 fdfc 	bl	8011c9c <SCPI_ResultBool>
    return SCPI_RES_OK;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000458 	.word	0x20000458

080010b4 <SCPI_SystemCommunicationLanGateway>:
    {"STATic", 1},
    SCPI_CHOICE_LIST_END
};

static scpi_result_t SCPI_SystemCommunicationLanGateway(scpi_t* context) //done
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t gateway_str[16] = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
	uint8_t gateway_numb[4] = {0};
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
	size_t len = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
	uint8_t conv_result = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!SCPI_ParamCopyText(context,gateway_str, 16, &len, TRUE))
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	f107 0114 	add.w	r1, r7, #20
 80010e0:	2301      	movs	r3, #1
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	2210      	movs	r2, #16
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f010 ff8d 	bl	8012008 <SCPI_ParamCopyText>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <SCPI_SystemCommunicationLanGateway+0x4c>
	{
		return SCPI_RES_ERR;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	e02f      	b.n	8001160 <SCPI_SystemCommunicationLanGateway+0xac>
	}

	conv_result = SCPI_StringToIP4Array(gateway_str, gateway_numb);
 8001100:	f107 0210 	add.w	r2, r7, #16
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe0a 	bl	8000d24 <SCPI_StringToIP4Array>
 8001110:	4603      	mov	r3, r0
 8001112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 8001116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111a:	2b01      	cmp	r3, #1
 800111c:	d010      	beq.n	8001140 <SCPI_SystemCommunicationLanGateway+0x8c>
 800111e:	2b02      	cmp	r3, #2
 8001120:	d014      	beq.n	800114c <SCPI_SystemCommunicationLanGateway+0x98>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d118      	bne.n	8001158 <SCPI_SystemCommunicationLanGateway+0xa4>
	{
	case NET_STR_OK:
	{
		board.ip4_current.gateway[0] = gateway_numb[0];
 8001126:	7c3a      	ldrb	r2, [r7, #16]
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <SCPI_SystemCommunicationLanGateway+0xb4>)
 800112a:	721a      	strb	r2, [r3, #8]
		board.ip4_current.gateway[1] = gateway_numb[1];
 800112c:	7c7a      	ldrb	r2, [r7, #17]
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <SCPI_SystemCommunicationLanGateway+0xb4>)
 8001130:	725a      	strb	r2, [r3, #9]
		board.ip4_current.gateway[2] = gateway_numb[2];
 8001132:	7cba      	ldrb	r2, [r7, #18]
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <SCPI_SystemCommunicationLanGateway+0xb4>)
 8001136:	729a      	strb	r2, [r3, #10]
		board.ip4_current.gateway[3] = gateway_numb[3];
 8001138:	7cfa      	ldrb	r2, [r7, #19]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <SCPI_SystemCommunicationLanGateway+0xb4>)
 800113c:	72da      	strb	r2, [r3, #11]
	}break;
 800113e:	e00e      	b.n	800115e <SCPI_SystemCommunicationLanGateway+0xaa>
	case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 8001140:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f00e fb6f 	bl	800f828 <SCPI_ErrorPush>
 800114a:	e008      	b.n	800115e <SCPI_SystemCommunicationLanGateway+0xaa>
	case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 800114c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f00e fb69 	bl	800f828 <SCPI_ErrorPush>
 8001156:	e002      	b.n	800115e <SCPI_SystemCommunicationLanGateway+0xaa>
	default: return SCPI_RES_ERR; break;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115c:	e000      	b.n	8001160 <SCPI_SystemCommunicationLanGateway+0xac>
	}

	return SCPI_RES_OK;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000458 	.word	0x20000458

0800116c <SCPI_SystemCommunicationLanGatewayQ>:

static scpi_result_t SCPI_SystemCommunicationLanGatewayQ(scpi_t* context) //done
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
	int32_t value;
	uint8_t str[16] = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, TRUE))
 8001182:	f107 021c 	add.w	r2, r7, #28
 8001186:	2301      	movs	r3, #1
 8001188:	4928      	ldr	r1, [pc, #160]	; (800122c <SCPI_SystemCommunicationLanGatewayQ+0xc0>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f011 f81a 	bl	80121c4 <SCPI_ParamChoice>
 8001190:	4603      	mov	r3, r0
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <SCPI_SystemCommunicationLanGatewayQ+0x36>
	{
		return SCPI_RES_ERR;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a0:	e03f      	b.n	8001222 <SCPI_SystemCommunicationLanGatewayQ+0xb6>
	}
	if(CURRENT == value)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d114      	bne.n	80011d2 <SCPI_SystemCommunicationLanGatewayQ+0x66>
	{
		sprintf(str, "%d.%d.%d.%d", board.ip4_current.gateway[0],board.ip4_current.gateway[1], board.ip4_current.gateway[2], board.ip4_current.gateway[3]);
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011aa:	7a1b      	ldrb	r3, [r3, #8]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011b0:	7a5b      	ldrb	r3, [r3, #9]
 80011b2:	461c      	mov	r4, r3
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011b6:	7a9b      	ldrb	r3, [r3, #10]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011bc:	7adb      	ldrb	r3, [r3, #11]
 80011be:	f107 000c 	add.w	r0, r7, #12
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	4623      	mov	r3, r4
 80011c8:	460a      	mov	r2, r1
 80011ca:	491a      	ldr	r1, [pc, #104]	; (8001234 <SCPI_SystemCommunicationLanGatewayQ+0xc8>)
 80011cc:	f012 fa54 	bl	8013678 <siprintf>
 80011d0:	e01a      	b.n	8001208 <SCPI_SystemCommunicationLanGatewayQ+0x9c>
	}
	else if(STATIC == value)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d117      	bne.n	8001208 <SCPI_SystemCommunicationLanGatewayQ+0x9c>
	{
		sprintf(str, "%d.%d.%d.%d", board.ip4_static.gateway[0],board.ip4_static.gateway[1], board.ip4_static.gateway[2], board.ip4_static.gateway[3]);
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e6:	461c      	mov	r4, r3
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <SCPI_SystemCommunicationLanGatewayQ+0xc4>)
 80011f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80011f6:	f107 000c 	add.w	r0, r7, #12
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	9200      	str	r2, [sp, #0]
 80011fe:	4623      	mov	r3, r4
 8001200:	460a      	mov	r2, r1
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <SCPI_SystemCommunicationLanGatewayQ+0xc8>)
 8001204:	f012 fa38 	bl	8013678 <siprintf>
	}
	SCPI_ResultMnemonic(context, str);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f821 	bl	8000254 <strlen>
 8001212:	4602      	mov	r2, r0
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f010 fb76 	bl	801190c <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	20000028 	.word	0x20000028
 8001230:	20000458 	.word	0x20000458
 8001234:	08014b70 	.word	0x08014b70

08001238 <SCPI_SystemCommunicationLanHostname>:

static scpi_result_t SCPI_SystemCommunicationLanHostname(scpi_t* context)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0c6      	sub	sp, #280	; 0x118
 800123c:	af02      	add	r7, sp, #8
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	6018      	str	r0, [r3, #0]
	int8_t hostname[NET_HOSTNAME] = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4618      	mov	r0, r3
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	461a      	mov	r2, r3
 800124c:	2100      	movs	r1, #0
 800124e:	f011 fe72 	bl	8012f36 <memset>
	size_t length = 0;
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]

	if(!SCPI_ParamCopyText(context, hostname, NET_HOSTNAME, &length, TRUE))
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	f107 0110 	add.w	r1, r7, #16
 8001262:	1d38      	adds	r0, r7, #4
 8001264:	2301      	movs	r3, #1
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	22ff      	movs	r2, #255	; 0xff
 800126c:	6800      	ldr	r0, [r0, #0]
 800126e:	f010 fecb 	bl	8012008 <SCPI_ParamCopyText>
 8001272:	4603      	mov	r3, r0
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <SCPI_SystemCommunicationLanHostname+0x4c>
	{
		return SCPI_RES_ERR;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	e000      	b.n	8001286 <SCPI_SystemCommunicationLanHostname+0x4e>
	}

	return SCPI_RES_OK;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <SCPI_SystemCommunicationLanHostnameQ>:

static scpi_result_t SCPI_SystemCommunicationLanHostnameQ(scpi_t* context)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b0c5      	sub	sp, #276	; 0x114
 8001294:	af00      	add	r7, sp, #0
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	6018      	str	r0, [r3, #0]
	int32_t value;
	uint8_t str[255] = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4618      	mov	r0, r3
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f011 fe46 	bl	8012f36 <memset>

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, TRUE))
 80012aa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80012ae:	1d38      	adds	r0, r7, #4
 80012b0:	2301      	movs	r3, #1
 80012b2:	491b      	ldr	r1, [pc, #108]	; (8001320 <SCPI_SystemCommunicationLanHostnameQ+0x90>)
 80012b4:	6800      	ldr	r0, [r0, #0]
 80012b6:	f010 ff85 	bl	80121c4 <SCPI_ParamChoice>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f083 0301 	eor.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <SCPI_SystemCommunicationLanHostnameQ+0x3c>
	{
		return SCPI_RES_ERR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ca:	e023      	b.n	8001314 <SCPI_SystemCommunicationLanHostnameQ+0x84>
	}
	if(CURRENT == value)
 80012cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10d      	bne.n	80012f0 <SCPI_SystemCommunicationLanHostnameQ+0x60>
	{
		SCPI_ResultMnemonic(context, (char*)board.ip4_current.hostname);
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <SCPI_SystemCommunicationLanHostnameQ+0x94>)
 80012d6:	695c      	ldr	r4, [r3, #20]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <SCPI_SystemCommunicationLanHostnameQ+0x94>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ffb9 	bl	8000254 <strlen>
 80012e2:	4602      	mov	r2, r0
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4621      	mov	r1, r4
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	f010 fb0f 	bl	801190c <SCPI_ResultCharacters>
 80012ee:	e010      	b.n	8001312 <SCPI_SystemCommunicationLanHostnameQ+0x82>
	}
	else if(STATIC == value)
 80012f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d10c      	bne.n	8001312 <SCPI_SystemCommunicationLanHostnameQ+0x82>
	{
		SCPI_ResultMnemonic(context, (char*)board.ip4_static.hostname);
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <SCPI_SystemCommunicationLanHostnameQ+0x94>)
 80012fa:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <SCPI_SystemCommunicationLanHostnameQ+0x94>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ffa7 	bl	8000254 <strlen>
 8001306:	4602      	mov	r2, r0
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4621      	mov	r1, r4
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f010 fafd 	bl	801190c <SCPI_ResultCharacters>
	}
    return SCPI_RES_OK;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000028 	.word	0x20000028
 8001324:	20000458 	.word	0x20000458

08001328 <SCPI_SystemCommunicationLanIPAddress>:

static scpi_result_t SCPI_SystemCommunicationLanIPAddress(scpi_t* context) //done
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t str[16] = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
	uint8_t numb[4] = {0};
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
	size_t len = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
	uint8_t conv_result = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!SCPI_ParamCopyText(context,(char*)str, 16, &len, TRUE))
 800134c:	f107 020c 	add.w	r2, r7, #12
 8001350:	f107 0114 	add.w	r1, r7, #20
 8001354:	2301      	movs	r3, #1
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	2210      	movs	r2, #16
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f010 fe53 	bl	8012008 <SCPI_ParamCopyText>
 8001362:	4603      	mov	r3, r0
 8001364:	f083 0301 	eor.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <SCPI_SystemCommunicationLanIPAddress+0x4c>
	{
		return SCPI_RES_ERR;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001372:	e02f      	b.n	80013d4 <SCPI_SystemCommunicationLanIPAddress+0xac>
	}

	conv_result = SCPI_StringToIP4Array(str, numb);
 8001374:	f107 0210 	add.w	r2, r7, #16
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fcd0 	bl	8000d24 <SCPI_StringToIP4Array>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 800138a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800138e:	2b01      	cmp	r3, #1
 8001390:	d010      	beq.n	80013b4 <SCPI_SystemCommunicationLanIPAddress+0x8c>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d014      	beq.n	80013c0 <SCPI_SystemCommunicationLanIPAddress+0x98>
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <SCPI_SystemCommunicationLanIPAddress+0xa4>
	{
	case NET_STR_OK:
	{
		board.ip4_current.ip[0] = numb[0];
 800139a:	7c3a      	ldrb	r2, [r7, #16]
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <SCPI_SystemCommunicationLanIPAddress+0xb4>)
 800139e:	701a      	strb	r2, [r3, #0]
		board.ip4_current.ip[1] = numb[1];
 80013a0:	7c7a      	ldrb	r2, [r7, #17]
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <SCPI_SystemCommunicationLanIPAddress+0xb4>)
 80013a4:	705a      	strb	r2, [r3, #1]
		board.ip4_current.ip[2] = numb[2];
 80013a6:	7cba      	ldrb	r2, [r7, #18]
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <SCPI_SystemCommunicationLanIPAddress+0xb4>)
 80013aa:	709a      	strb	r2, [r3, #2]
		board.ip4_current.ip[3] = numb[3];
 80013ac:	7cfa      	ldrb	r2, [r7, #19]
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <SCPI_SystemCommunicationLanIPAddress+0xb4>)
 80013b0:	70da      	strb	r2, [r3, #3]
	}break;
 80013b2:	e00e      	b.n	80013d2 <SCPI_SystemCommunicationLanIPAddress+0xaa>
	case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 80013b4:	f06f 0167 	mvn.w	r1, #103	; 0x67
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f00e fa35 	bl	800f828 <SCPI_ErrorPush>
 80013be:	e008      	b.n	80013d2 <SCPI_SystemCommunicationLanIPAddress+0xaa>
	case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 80013c0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f00e fa2f 	bl	800f828 <SCPI_ErrorPush>
 80013ca:	e002      	b.n	80013d2 <SCPI_SystemCommunicationLanIPAddress+0xaa>
	default: return SCPI_RES_ERR; break;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d0:	e000      	b.n	80013d4 <SCPI_SystemCommunicationLanIPAddress+0xac>
	}

	return SCPI_RES_OK;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000458 	.word	0x20000458

080013e0 <SCPI_SystemCommunicationLanIPAddressQ>:

static scpi_result_t SCPI_SystemCommunicationLanIPAddressQ(scpi_t* context)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
	int32_t value;
	uint8_t str[16] = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, TRUE))
 80013f6:	f107 021c 	add.w	r2, r7, #28
 80013fa:	2301      	movs	r3, #1
 80013fc:	4926      	ldr	r1, [pc, #152]	; (8001498 <SCPI_SystemCommunicationLanIPAddressQ+0xb8>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f010 fee0 	bl	80121c4 <SCPI_ParamChoice>
 8001404:	4603      	mov	r3, r0
 8001406:	f083 0301 	eor.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <SCPI_SystemCommunicationLanIPAddressQ+0x36>
	{
		return SCPI_RES_ERR;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001414:	e03b      	b.n	800148e <SCPI_SystemCommunicationLanIPAddressQ+0xae>
	}
	if(CURRENT == value)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d114      	bne.n	8001446 <SCPI_SystemCommunicationLanIPAddressQ+0x66>
	{
		sprintf(str, "%d.%d.%d.%d", board.ip4_current.ip[0],board.ip4_current.ip[1], board.ip4_current.ip[2], board.ip4_current.ip[3]);
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	461c      	mov	r4, r3
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	461a      	mov	r2, r3
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	f107 000c 	add.w	r0, r7, #12
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	9200      	str	r2, [sp, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	460a      	mov	r2, r1
 800143e:	4918      	ldr	r1, [pc, #96]	; (80014a0 <SCPI_SystemCommunicationLanIPAddressQ+0xc0>)
 8001440:	f012 f91a 	bl	8013678 <siprintf>
 8001444:	e016      	b.n	8001474 <SCPI_SystemCommunicationLanIPAddressQ+0x94>
	}
	else if(STATIC == value)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d113      	bne.n	8001474 <SCPI_SystemCommunicationLanIPAddressQ+0x94>
	{
		sprintf(str, "%d.%d.%d.%d", board.ip4_static.ip[0],board.ip4_static.ip[1], board.ip4_static.ip[2], board.ip4_static.ip[3]);
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 800144e:	7f1b      	ldrb	r3, [r3, #28]
 8001450:	4619      	mov	r1, r3
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 8001454:	7f5b      	ldrb	r3, [r3, #29]
 8001456:	461c      	mov	r4, r3
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 800145a:	7f9b      	ldrb	r3, [r3, #30]
 800145c:	461a      	mov	r2, r3
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <SCPI_SystemCommunicationLanIPAddressQ+0xbc>)
 8001460:	7fdb      	ldrb	r3, [r3, #31]
 8001462:	f107 000c 	add.w	r0, r7, #12
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	9200      	str	r2, [sp, #0]
 800146a:	4623      	mov	r3, r4
 800146c:	460a      	mov	r2, r1
 800146e:	490c      	ldr	r1, [pc, #48]	; (80014a0 <SCPI_SystemCommunicationLanIPAddressQ+0xc0>)
 8001470:	f012 f902 	bl	8013678 <siprintf>
	}
	SCPI_ResultMnemonic(context, (char*)str);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe feeb 	bl	8000254 <strlen>
 800147e:	4602      	mov	r2, r0
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f010 fa40 	bl	801190c <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000028 	.word	0x20000028
 800149c:	20000458 	.word	0x20000458
 80014a0:	08014b70 	.word	0x08014b70

080014a4 <SCPI_SystemCommunicationLanMACQ>:

static scpi_result_t SCPI_SystemCommunicationLanMACQ(scpi_t* context)
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	b08d      	sub	sp, #52	; 0x34
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
	uint8_t str[18] = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	821a      	strh	r2, [r3, #16]
	if(!board.default_config)
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11c      	bne.n	8001500 <SCPI_SystemCommunicationLanMACQ+0x5c>
	{
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x", board.ip4_current.MAC[0],board.ip4_current.MAC[1], board.ip4_current.MAC[2], board.ip4_current.MAC[3],
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014c8:	7b1b      	ldrb	r3, [r3, #12]
 80014ca:	461d      	mov	r5, r3
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014ce:	7b5b      	ldrb	r3, [r3, #13]
 80014d0:	461e      	mov	r6, r3
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014d4:	7b9b      	ldrb	r3, [r3, #14]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014da:	7bdb      	ldrb	r3, [r3, #15]
 80014dc:	4619      	mov	r1, r3
														board.ip4_current.MAC[4], board.ip4_current.MAC[5]);
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014e0:	7c1b      	ldrb	r3, [r3, #16]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x", board.ip4_current.MAC[0],board.ip4_current.MAC[1], board.ip4_current.MAC[2], board.ip4_current.MAC[3],
 80014e2:	461c      	mov	r4, r3
														board.ip4_current.MAC[4], board.ip4_current.MAC[5]);
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 80014e6:	7c5b      	ldrb	r3, [r3, #17]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x", board.ip4_current.MAC[0],board.ip4_current.MAC[1], board.ip4_current.MAC[2], board.ip4_current.MAC[3],
 80014e8:	f107 000c 	add.w	r0, r7, #12
 80014ec:	9303      	str	r3, [sp, #12]
 80014ee:	9402      	str	r4, [sp, #8]
 80014f0:	9101      	str	r1, [sp, #4]
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	4633      	mov	r3, r6
 80014f6:	462a      	mov	r2, r5
 80014f8:	491c      	ldr	r1, [pc, #112]	; (800156c <SCPI_SystemCommunicationLanMACQ+0xc8>)
 80014fa:	f012 f8bd 	bl	8013678 <siprintf>
 80014fe:	e021      	b.n	8001544 <SCPI_SystemCommunicationLanMACQ+0xa0>
	}
	else
	{
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x", board.ip4_static.MAC[0],board.ip4_static.MAC[1], board.ip4_static.MAC[2], board.ip4_static.MAC[3],
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 8001502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001506:	461d      	mov	r5, r3
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 800150a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800150e:	461e      	mov	r6, r3
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 8001512:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001516:	461a      	mov	r2, r3
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 800151a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800151e:	4619      	mov	r1, r3
														board.ip4_static.MAC[4], board.ip4_static.MAC[5]);
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 8001522:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x", board.ip4_static.MAC[0],board.ip4_static.MAC[1], board.ip4_static.MAC[2], board.ip4_static.MAC[3],
 8001526:	461c      	mov	r4, r3
														board.ip4_static.MAC[4], board.ip4_static.MAC[5]);
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <SCPI_SystemCommunicationLanMACQ+0xc4>)
 800152a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x", board.ip4_static.MAC[0],board.ip4_static.MAC[1], board.ip4_static.MAC[2], board.ip4_static.MAC[3],
 800152e:	f107 000c 	add.w	r0, r7, #12
 8001532:	9303      	str	r3, [sp, #12]
 8001534:	9402      	str	r4, [sp, #8]
 8001536:	9101      	str	r1, [sp, #4]
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	4633      	mov	r3, r6
 800153c:	462a      	mov	r2, r5
 800153e:	490b      	ldr	r1, [pc, #44]	; (800156c <SCPI_SystemCommunicationLanMACQ+0xc8>)
 8001540:	f012 f89a 	bl	8013678 <siprintf>
	}

	SCPI_ResultMnemonic(context, (char*)str);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fe83 	bl	8000254 <strlen>
 800154e:	4602      	mov	r2, r0
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f010 f9d8 	bl	801190c <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001566:	bf00      	nop
 8001568:	20000458 	.word	0x20000458
 800156c:	08014b7c 	.word	0x08014b7c

08001570 <SCPI_SystemCommunicationLanSmask>:



static scpi_result_t SCPI_SystemCommunicationLanSmask(scpi_t* context)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af02      	add	r7, sp, #8
 8001576:	6078      	str	r0, [r7, #4]
	uint8_t str[16] = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
	uint8_t numb[4] = {0};
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
	size_t len = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
	uint8_t conv_result = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!SCPI_ParamCopyText(context,(char*)str, 16, &len, TRUE))
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	f107 0114 	add.w	r1, r7, #20
 800159c:	2301      	movs	r3, #1
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	2210      	movs	r2, #16
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f010 fd2f 	bl	8012008 <SCPI_ParamCopyText>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f083 0301 	eor.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <SCPI_SystemCommunicationLanSmask+0x4c>
	{
		return SCPI_RES_ERR;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	e02f      	b.n	800161c <SCPI_SystemCommunicationLanSmask+0xac>
	}

	conv_result = SCPI_StringToIP4Array(str, numb);
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fbac 	bl	8000d24 <SCPI_StringToIP4Array>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 80015d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d010      	beq.n	80015fc <SCPI_SystemCommunicationLanSmask+0x8c>
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d014      	beq.n	8001608 <SCPI_SystemCommunicationLanSmask+0x98>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <SCPI_SystemCommunicationLanSmask+0xa4>
	{
	case NET_STR_OK:
	{
		board.ip4_current.netmask[0] = numb[0];
 80015e2:	7c3a      	ldrb	r2, [r7, #16]
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <SCPI_SystemCommunicationLanSmask+0xb4>)
 80015e6:	711a      	strb	r2, [r3, #4]
		board.ip4_current.netmask[1] = numb[1];
 80015e8:	7c7a      	ldrb	r2, [r7, #17]
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <SCPI_SystemCommunicationLanSmask+0xb4>)
 80015ec:	715a      	strb	r2, [r3, #5]
		board.ip4_current.netmask[2] = numb[2];
 80015ee:	7cba      	ldrb	r2, [r7, #18]
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <SCPI_SystemCommunicationLanSmask+0xb4>)
 80015f2:	719a      	strb	r2, [r3, #6]
		board.ip4_current.netmask[3] = numb[3];
 80015f4:	7cfa      	ldrb	r2, [r7, #19]
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <SCPI_SystemCommunicationLanSmask+0xb4>)
 80015f8:	71da      	strb	r2, [r3, #7]
	}break;
 80015fa:	e00e      	b.n	800161a <SCPI_SystemCommunicationLanSmask+0xaa>
	case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 80015fc:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f00e f911 	bl	800f828 <SCPI_ErrorPush>
 8001606:	e008      	b.n	800161a <SCPI_SystemCommunicationLanSmask+0xaa>
	case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 8001608:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f00e f90b 	bl	800f828 <SCPI_ErrorPush>
 8001612:	e002      	b.n	800161a <SCPI_SystemCommunicationLanSmask+0xaa>
	default: return SCPI_RES_ERR; break;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001618:	e000      	b.n	800161c <SCPI_SystemCommunicationLanSmask+0xac>
	}

	return SCPI_RES_OK;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000458 	.word	0x20000458

08001628 <SCPI_SystemCommunicationLanSmaskQ>:


static scpi_result_t SCPI_SystemCommunicationLanSmaskQ(scpi_t* context)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af02      	add	r7, sp, #8
 800162e:	6078      	str	r0, [r7, #4]
	int32_t value;
	uint8_t str[16] = {0};
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, TRUE))
 800163e:	f107 021c 	add.w	r2, r7, #28
 8001642:	2301      	movs	r3, #1
 8001644:	4928      	ldr	r1, [pc, #160]	; (80016e8 <SCPI_SystemCommunicationLanSmaskQ+0xc0>)
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f010 fdbc 	bl	80121c4 <SCPI_ParamChoice>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <SCPI_SystemCommunicationLanSmaskQ+0x36>
	{
		return SCPI_RES_ERR;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165c:	e03f      	b.n	80016de <SCPI_SystemCommunicationLanSmaskQ+0xb6>
	}
	if(CURRENT == value)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d114      	bne.n	800168e <SCPI_SystemCommunicationLanSmaskQ+0x66>
	{
		sprintf(str, "%d.%d.%d.%d", board.ip4_current.netmask[0],board.ip4_current.netmask[1], board.ip4_current.netmask[2], board.ip4_current.netmask[3]);
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	4619      	mov	r1, r3
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 800166c:	795b      	ldrb	r3, [r3, #5]
 800166e:	461c      	mov	r4, r3
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 8001672:	799b      	ldrb	r3, [r3, #6]
 8001674:	461a      	mov	r2, r3
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 8001678:	79db      	ldrb	r3, [r3, #7]
 800167a:	f107 000c 	add.w	r0, r7, #12
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	9200      	str	r2, [sp, #0]
 8001682:	4623      	mov	r3, r4
 8001684:	460a      	mov	r2, r1
 8001686:	491a      	ldr	r1, [pc, #104]	; (80016f0 <SCPI_SystemCommunicationLanSmaskQ+0xc8>)
 8001688:	f011 fff6 	bl	8013678 <siprintf>
 800168c:	e01a      	b.n	80016c4 <SCPI_SystemCommunicationLanSmaskQ+0x9c>
	}
	else if(STATIC == value)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d117      	bne.n	80016c4 <SCPI_SystemCommunicationLanSmaskQ+0x9c>
	{
		sprintf(str, "%d.%d.%d.%d", board.ip4_static.netmask[0],board.ip4_static.netmask[1], board.ip4_static.netmask[2], board.ip4_static.netmask[3]);
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	4619      	mov	r1, r3
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 800169e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a2:	461c      	mov	r4, r3
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 80016a6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <SCPI_SystemCommunicationLanSmaskQ+0xc4>)
 80016ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016b2:	f107 000c 	add.w	r0, r7, #12
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	460a      	mov	r2, r1
 80016be:	490c      	ldr	r1, [pc, #48]	; (80016f0 <SCPI_SystemCommunicationLanSmaskQ+0xc8>)
 80016c0:	f011 ffda 	bl	8013678 <siprintf>
	}
	SCPI_ResultMnemonic(context, (char*)str);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fdc3 	bl	8000254 <strlen>
 80016ce:	4602      	mov	r2, r0
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f010 f918 	bl	801190c <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000028 	.word	0x20000028
 80016ec:	20000458 	.word	0x20000458
 80016f0:	08014b70 	.word	0x08014b70

080016f4 <SCPI_SystemCommunicationLanUpdate>:

static scpi_result_t SCPI_SystemCommunicationLanUpdate(scpi_t* context)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	SPI_FLASH_BoardUpdate();
 80016fc:	f000 fbf0 	bl	8001ee0 <SPI_FLASH_BoardUpdate>
    return SCPI_RES_OK;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <SCPI_SystemCommunicationLanPort>:

static scpi_result_t SCPI_SystemCommunicationLanPort(scpi_t* context)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	uint32_t port = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]

	if(!SCPI_ParamUInt32(context, &port, TRUE))
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f010 fc5f 	bl	8011fe4 <SCPI_ParamUInt32>
 8001726:	4603      	mov	r3, r0
 8001728:	f083 0301 	eor.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <SCPI_SystemCommunicationLanPort+0x2c>
	{
		return SCPI_RES_ERR;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001736:	e010      	b.n	800175a <SCPI_SystemCommunicationLanPort+0x4e>
	}

	if(port > ETH_PORT_VAL)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d307      	bcc.n	8001750 <SCPI_SystemCommunicationLanPort+0x44>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_TOO_MANY_DIGITS);
 8001740:	f06f 017b 	mvn.w	r1, #123	; 0x7b
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f00e f86f 	bl	800f828 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174e:	e004      	b.n	800175a <SCPI_SystemCommunicationLanPort+0x4e>
	}

	board.ip4_current.port = (uint16_t)port;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <SCPI_SystemCommunicationLanPort+0x58>)
 8001756:	831a      	strh	r2, [r3, #24]

    return SCPI_RES_OK;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000458 	.word	0x20000458

08001768 <SCPI_SystemCommunicationLanPortQ>:

static scpi_result_t SCPI_SystemCommunicationLanPortQ(scpi_t* context)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	SCPI_ResultUInt16(context, board.ip4_current.port);
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SCPI_SystemCommunicationLanPortQ+0x20>)
 8001772:	8b1b      	ldrh	r3, [r3, #24]
 8001774:	220a      	movs	r2, #10
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f010 f960 	bl	8011a3e <SCPI_ResultUInt32Base>
    return SCPI_RES_OK;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000458 	.word	0x20000458

0800178c <SCPI_SystemServiceLanMAC>:

static scpi_result_t SCPI_SystemServiceLanMAC(scpi_t* context)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af02      	add	r7, sp, #8
 8001792:	6078      	str	r0, [r7, #4]
	uint8_t str[18] = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	821a      	strh	r2, [r3, #16]
	uint8_t numb[6] = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	809a      	strh	r2, [r3, #4]
	size_t len = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
	uint8_t conv_result = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(board.security.on)
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 80017ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <SCPI_SystemServiceLanMAC+0x46>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_MODE_SECURE);
 80017c2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f00e f82e 	bl	800f828 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d0:	e049      	b.n	8001866 <SCPI_SystemServiceLanMAC+0xda>
	}

	if(!SCPI_ParamCopyText(context,(char*)str, 18, &len, TRUE))
 80017d2:	f107 0208 	add.w	r2, r7, #8
 80017d6:	f107 0114 	add.w	r1, r7, #20
 80017da:	2301      	movs	r3, #1
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4613      	mov	r3, r2
 80017e0:	2212      	movs	r2, #18
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f010 fc10 	bl	8012008 <SCPI_ParamCopyText>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <SCPI_SystemServiceLanMAC+0x6e>
	{
		return SCPI_RES_ERR;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f8:	e035      	b.n	8001866 <SCPI_SystemServiceLanMAC+0xda>
	}

	conv_result = SCPI_StringToMACArray(str, numb);
 80017fa:	f107 020c 	add.w	r2, r7, #12
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fad7 	bl	8000db8 <SCPI_StringToMACArray>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 8001810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001814:	2b01      	cmp	r3, #1
 8001816:	d016      	beq.n	8001846 <SCPI_SystemServiceLanMAC+0xba>
 8001818:	2b02      	cmp	r3, #2
 800181a:	d01a      	beq.n	8001852 <SCPI_SystemServiceLanMAC+0xc6>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11e      	bne.n	800185e <SCPI_SystemServiceLanMAC+0xd2>
	{
	case NET_STR_OK:
	{
		board.ip4_current.MAC[0] = numb[0];
 8001820:	7b3a      	ldrb	r2, [r7, #12]
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 8001824:	731a      	strb	r2, [r3, #12]
		board.ip4_current.MAC[1] = numb[1];
 8001826:	7b7a      	ldrb	r2, [r7, #13]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 800182a:	735a      	strb	r2, [r3, #13]
		board.ip4_current.MAC[2] = numb[2];
 800182c:	7bba      	ldrb	r2, [r7, #14]
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 8001830:	739a      	strb	r2, [r3, #14]
		board.ip4_current.MAC[3] = numb[3];
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 8001836:	73da      	strb	r2, [r3, #15]
		board.ip4_current.MAC[4] = numb[4];
 8001838:	7c3a      	ldrb	r2, [r7, #16]
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 800183c:	741a      	strb	r2, [r3, #16]
		board.ip4_current.MAC[5] = numb[5];
 800183e:	7c7a      	ldrb	r2, [r7, #17]
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <SCPI_SystemServiceLanMAC+0xe4>)
 8001842:	745a      	strb	r2, [r3, #17]
	}break;
 8001844:	e00e      	b.n	8001864 <SCPI_SystemServiceLanMAC+0xd8>
	case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 8001846:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f00d ffec 	bl	800f828 <SCPI_ErrorPush>
 8001850:	e008      	b.n	8001864 <SCPI_SystemServiceLanMAC+0xd8>
	case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 8001852:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f00d ffe6 	bl	800f828 <SCPI_ErrorPush>
 800185c:	e002      	b.n	8001864 <SCPI_SystemServiceLanMAC+0xd8>
	default: return SCPI_RES_ERR; break;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001862:	e000      	b.n	8001866 <SCPI_SystemServiceLanMAC+0xda>
	}

	return SCPI_RES_OK;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000458 	.word	0x20000458

08001874 <SCPI_SystemServiceDefault>:

static scpi_result_t SCPI_SystemServiceDefault(scpi_t* context)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	if(board.security.on)
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <SCPI_SystemServiceDefault+0x34>)
 800187e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <SCPI_SystemServiceDefault+0x22>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_MODE_SECURE);
 8001886:	f44f 7148 	mov.w	r1, #800	; 0x320
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f00d ffcc 	bl	800f828 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001894:	e004      	b.n	80018a0 <SCPI_SystemServiceDefault+0x2c>
	}

	SPI_FLASH_BoardDefault(TRUE, 0);
 8001896:	2100      	movs	r1, #0
 8001898:	2001      	movs	r0, #1
 800189a:	f000 fa1b 	bl	8001cd4 <SPI_FLASH_BoardDefault>
    return SCPI_RES_OK;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000458 	.word	0x20000458

080018ac <SCPI_SystemSecureState>:
    {"ON", 1},
    SCPI_CHOICE_LIST_END
};

static scpi_result_t SCPI_SystemSecureState(scpi_t* context)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
	int32_t state;
	int8_t password_read[PASSWORD_LENGTH];
	size_t length = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
	int8_t* password_reference = board.security.password;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <SCPI_SystemSecureState+0x90>)
 80018ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018bc:	61fb      	str	r3, [r7, #28]

	if(!SCPI_ParamChoice(context, security_state_select, &state, TRUE))
 80018be:	f107 0218 	add.w	r2, r7, #24
 80018c2:	2301      	movs	r3, #1
 80018c4:	491e      	ldr	r1, [pc, #120]	; (8001940 <SCPI_SystemSecureState+0x94>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f010 fc7c 	bl	80121c4 <SCPI_ParamChoice>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <SCPI_SystemSecureState+0x32>
	{
		return SCPI_RES_ERR;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018dc:	e02a      	b.n	8001934 <SCPI_SystemSecureState+0x88>
	}

	if(!SCPI_ParamCopyText(context, (char*)password_read, PASSWORD_LENGTH, &length, TRUE))
 80018de:	f107 0208 	add.w	r2, r7, #8
 80018e2:	f107 010c 	add.w	r1, r7, #12
 80018e6:	2301      	movs	r3, #1
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	220b      	movs	r2, #11
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f010 fb8a 	bl	8012008 <SCPI_ParamCopyText>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <SCPI_SystemSecureState+0x5a>
	{
		return SCPI_RES_ERR;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001904:	e016      	b.n	8001934 <SCPI_SystemSecureState+0x88>
	}

	if(!strcmp((const char*)password_read, (const char*)password_reference))
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	69f9      	ldr	r1, [r7, #28]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fc97 	bl	8000240 <strcmp>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <SCPI_SystemSecureState+0x7a>
	{
		board.security.on = SECURITY_OFF;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <SCPI_SystemSecureState+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return SCPI_RES_ERR;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001924:	e006      	b.n	8001934 <SCPI_SystemSecureState+0x88>
	}
	else
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_INVALID_PASSWORD);
 8001926:	f240 3121 	movw	r1, #801	; 0x321
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f00d ff7c 	bl	800f828 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	return SCPI_RES_ERR;
}
 8001934:	4618      	mov	r0, r3
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000458 	.word	0x20000458
 8001940:	20000040 	.word	0x20000040

08001944 <SCPI_SystemSecureStateQ>:

static scpi_result_t SCPI_SystemSecureStateQ(scpi_t* context)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	SCPI_ResultBool(context, board.security.on);
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <SCPI_SystemSecureStateQ+0x2c>)
 800194e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f010 f99c 	bl	8011c9c <SCPI_ResultBool>
    return SCPI_RES_OK;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000458 	.word	0x20000458

08001974 <SCPI_TSQ>:

static scpi_result_t SCPI_TSQ(scpi_t* context)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	SCPI_ResultBool(context, HAL_GPIO_ReadPin(MCU_DEFAULT_GPIO_Port, MCU_DEFAULT_Pin));
 800197c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <SCPI_TSQ+0x30>)
 8001982:	f002 facb 	bl	8003f1c <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f010 f981 	bl	8011c9c <SCPI_ResultBool>
	return SCPI_RES_OK;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020400 	.word	0x40020400

080019a8 <SPI_FLASH_Select>:

extern struct _board board;
extern struct _board default_board;

static void SPI_FLASH_Select(uint8_t id)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]

  if(id==0) HAL_GPIO_WritePin(MCU_FLASH1_CS_GPIO_Port, MCU_FLASH1_CS_Pin, GPIO_PIN_RESET);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <SPI_FLASH_Select+0x1c>
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019be:	480e      	ldr	r0, [pc, #56]	; (80019f8 <SPI_FLASH_Select+0x50>)
 80019c0:	f002 fac4 	bl	8003f4c <HAL_GPIO_WritePin>
  if(id==1) HAL_GPIO_WritePin(MCU_FLASH2_CS_GPIO_Port, MCU_FLASH2_CS_Pin, GPIO_PIN_RESET);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <SPI_FLASH_Select+0x2e>
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <SPI_FLASH_Select+0x50>)
 80019d2:	f002 fabb 	bl	8003f4c <HAL_GPIO_WritePin>

  if(id==0) flash0_busy_flg=1;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <SPI_FLASH_Select+0x3a>
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <SPI_FLASH_Select+0x54>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
  if(id==1) flash1_busy_flg=1;
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <SPI_FLASH_Select+0x46>
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SPI_FLASH_Select+0x58>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021400 	.word	0x40021400
 80019fc:	20000ecc 	.word	0x20000ecc
 8001a00:	20000ed0 	.word	0x20000ed0

08001a04 <SPI_FLASH_Deselect>:

static void SPI_FLASH_Deselect(uint8_t id)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]

  if(id==0) HAL_GPIO_WritePin(MCU_FLASH1_CS_GPIO_Port, MCU_FLASH1_CS_Pin, GPIO_PIN_SET);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <SPI_FLASH_Deselect+0x1c>
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	480e      	ldr	r0, [pc, #56]	; (8001a54 <SPI_FLASH_Deselect+0x50>)
 8001a1c:	f002 fa96 	bl	8003f4c <HAL_GPIO_WritePin>
  if(id==1) HAL_GPIO_WritePin(MCU_FLASH2_CS_GPIO_Port, MCU_FLASH2_CS_Pin, GPIO_PIN_SET);
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d105      	bne.n	8001a32 <SPI_FLASH_Deselect+0x2e>
 8001a26:	2201      	movs	r2, #1
 8001a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <SPI_FLASH_Deselect+0x50>)
 8001a2e:	f002 fa8d 	bl	8003f4c <HAL_GPIO_WritePin>

  if(id==0) flash0_busy_flg=1;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <SPI_FLASH_Deselect+0x3a>
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <SPI_FLASH_Deselect+0x54>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  if(id==1) flash1_busy_flg=1;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d102      	bne.n	8001a4a <SPI_FLASH_Deselect+0x46>
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SPI_FLASH_Deselect+0x58>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021400 	.word	0x40021400
 8001a58:	20000ecc 	.word	0x20000ecc
 8001a5c:	20000ed0 	.word	0x20000ed0

08001a60 <SPI_FLASH_IsBusy>:

  return manf_id;
}

static uint8_t SPI_FLASH_IsBusy(uint8_t id)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 1000;
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	60fb      	str	r3, [r7, #12]
	uint8_t instruction = FLASH_RDSR;
 8001a70:	2305      	movs	r3, #5
 8001a72:	72fb      	strb	r3, [r7, #11]
	uint8_t busy;

	SPI_FLASH_Select(id);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff96 	bl	80019a8 <SPI_FLASH_Select>
	HAL_SPI_Transmit(&hspi3, &instruction, 1, timeout);
 8001a7c:	f107 010b 	add.w	r1, r7, #11
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <SPI_FLASH_IsBusy+0x58>)
 8001a86:	f002 ff9b 	bl	80049c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &busy, 1, timeout);
 8001a8a:	f107 010a 	add.w	r1, r7, #10
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <SPI_FLASH_IsBusy+0x58>)
 8001a94:	f003 f8fa 	bl	8004c8c <HAL_SPI_Receive>
	SPI_FLASH_Deselect(id);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffb2 	bl	8001a04 <SPI_FLASH_Deselect>

	if(busy & FLASH_BUSY)
 8001aa0:	7abb      	ldrb	r3, [r7, #10]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SPI_FLASH_IsBusy+0x4e>
	{
		return 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <SPI_FLASH_IsBusy+0x50>
	}else
	{
		return 0;
 8001aae:	2300      	movs	r3, #0
	}
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200004b0 	.word	0x200004b0

08001abc <SPI_FLASH_Wait>:

static void SPI_FLASH_Wait(uint8_t id)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	while(SPI_FLASH_IsBusy(id))
 8001ac6:	bf00      	nop
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ffc8 	bl	8001a60 <SPI_FLASH_IsBusy>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f8      	bne.n	8001ac8 <SPI_FLASH_Wait+0xc>
	{}
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <SPI_FLASH_WriteByte>:
	SPI_FLASH_Deselect(id);

}

void SPI_FLASH_WriteByte(uint32_t address, uint8_t val, uint8_t id)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
 8001aec:	4613      	mov	r3, r2
 8001aee:	70bb      	strb	r3, [r7, #2]
	uint32_t timeout = 1000;
 8001af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af4:	60fb      	str	r3, [r7, #12]
	uint8_t instruction = FLASH_WREN;
 8001af6:	2306      	movs	r3, #6
 8001af8:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_data = 0xFF;
 8001afa:	23ff      	movs	r3, #255	; 0xff
 8001afc:	72bb      	strb	r3, [r7, #10]
	//uint8_t rx_data = val;

	SPI_FLASH_Wait(id);
 8001afe:	78bb      	ldrb	r3, [r7, #2]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ffdb 	bl	8001abc <SPI_FLASH_Wait>

	SPI_FLASH_Select(id);
 8001b06:	78bb      	ldrb	r3, [r7, #2]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff4d 	bl	80019a8 <SPI_FLASH_Select>
	HAL_SPI_Transmit(&hspi3, &instruction, 1, timeout);
 8001b0e:	f107 010b 	add.w	r1, r7, #11
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	4822      	ldr	r0, [pc, #136]	; (8001ba0 <SPI_FLASH_WriteByte+0xc0>)
 8001b18:	f002 ff52 	bl	80049c0 <HAL_SPI_Transmit>
	SPI_FLASH_Deselect(id);
 8001b1c:	78bb      	ldrb	r3, [r7, #2]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff70 	bl	8001a04 <SPI_FLASH_Deselect>

	SPI_FLASH_Select(id);
 8001b24:	78bb      	ldrb	r3, [r7, #2]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff3e 	bl	80019a8 <SPI_FLASH_Select>
	instruction = FLASH_BYTE_PGM;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi3, &instruction, 1, timeout);
 8001b30:	f107 010b 	add.w	r1, r7, #11
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <SPI_FLASH_WriteByte+0xc0>)
 8001b3a:	f002 ff41 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data  = (address >> 16) & 0xFF;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001b46:	f107 010a 	add.w	r1, r7, #10
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <SPI_FLASH_WriteByte+0xc0>)
 8001b50:	f002 ff36 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = (address >> 8) & 0xFF;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001b5c:	f107 010a 	add.w	r1, r7, #10
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <SPI_FLASH_WriteByte+0xc0>)
 8001b66:	f002 ff2b 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = address & 0xFF;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001b70:	f107 010a 	add.w	r1, r7, #10
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <SPI_FLASH_WriteByte+0xc0>)
 8001b7a:	f002 ff21 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = val;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001b82:	f107 010a 	add.w	r1, r7, #10
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <SPI_FLASH_WriteByte+0xc0>)
 8001b8c:	f002 ff18 	bl	80049c0 <HAL_SPI_Transmit>

	SPI_FLASH_Deselect(id);
 8001b90:	78bb      	ldrb	r3, [r7, #2]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff36 	bl	8001a04 <SPI_FLASH_Deselect>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200004b0 	.word	0x200004b0

08001ba4 <SPI_FLASH_DefaultStatus>:
		return 0;
	}
}

uint8_t SPI_FLASH_DefaultStatus(uint8_t id)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 1000;
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	617b      	str	r3, [r7, #20]
	uint8_t instruction = FLASH_READ;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data = 0x00;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73bb      	strb	r3, [r7, #14]
	uint8_t rx_data = 0xFF;
 8001bbc:	23ff      	movs	r3, #255	; 0xff
 8001bbe:	737b      	strb	r3, [r7, #13]
	uint32_t address = 0x00000000;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]

	SPI_FLASH_Wait(id);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff78 	bl	8001abc <SPI_FLASH_Wait>

	SPI_FLASH_Select(id);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff feea 	bl	80019a8 <SPI_FLASH_Select>

	HAL_SPI_Transmit(&hspi3, &instruction, 1, timeout);
 8001bd4:	f107 010f 	add.w	r1, r7, #15
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4819      	ldr	r0, [pc, #100]	; (8001c44 <SPI_FLASH_DefaultStatus+0xa0>)
 8001bde:	f002 feef 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = address >> 16;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001bea:	f107 010e 	add.w	r1, r7, #14
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4814      	ldr	r0, [pc, #80]	; (8001c44 <SPI_FLASH_DefaultStatus+0xa0>)
 8001bf4:	f002 fee4 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = address >> 8;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001c00:	f107 010e 	add.w	r1, r7, #14
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2201      	movs	r2, #1
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <SPI_FLASH_DefaultStatus+0xa0>)
 8001c0a:	f002 fed9 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = address & 0xFF;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001c14:	f107 010e 	add.w	r1, r7, #14
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <SPI_FLASH_DefaultStatus+0xa0>)
 8001c1e:	f002 fecf 	bl	80049c0 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi3, &rx_data, 1, timeout);
 8001c22:	f107 010d 	add.w	r1, r7, #13
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <SPI_FLASH_DefaultStatus+0xa0>)
 8001c2c:	f003 f82e 	bl	8004c8c <HAL_SPI_Receive>

	SPI_FLASH_Deselect(id);
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fee6 	bl	8001a04 <SPI_FLASH_Deselect>

	return rx_data;
 8001c38:	7b7b      	ldrb	r3, [r7, #13]

}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200004b0 	.word	0x200004b0

08001c48 <SPI_FLASH_Erase4k>:

static void SPI_FLASH_Erase4k(uint32_t address, uint8_t id)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
	uint8_t instruction = FLASH_WREN;
 8001c54:	2306      	movs	r3, #6
 8001c56:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_data = 0xFF;
 8001c58:	23ff      	movs	r3, #255	; 0xff
 8001c5a:	72bb      	strb	r3, [r7, #10]
	uint32_t timeout = 1000;
 8001c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c60:	60fb      	str	r3, [r7, #12]

	SPI_FLASH_Wait(id);
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff29 	bl	8001abc <SPI_FLASH_Wait>

	SPI_FLASH_Select(id);
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe9b 	bl	80019a8 <SPI_FLASH_Select>
	HAL_SPI_Transmit(&hspi3, &instruction, 1, timeout);
 8001c72:	f107 010b 	add.w	r1, r7, #11
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <SPI_FLASH_Erase4k+0x88>)
 8001c7c:	f002 fea0 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = (address >> 16) & 0xFF;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001c88:	f107 010a 	add.w	r1, r7, #10
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <SPI_FLASH_Erase4k+0x88>)
 8001c92:	f002 fe95 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = (address >> 8) & 0xFF;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001c9e:	f107 010a 	add.w	r1, r7, #10
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	480a      	ldr	r0, [pc, #40]	; (8001cd0 <SPI_FLASH_Erase4k+0x88>)
 8001ca8:	f002 fe8a 	bl	80049c0 <HAL_SPI_Transmit>
	tx_data = address & 0xFF;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi3, &tx_data, 1, timeout);
 8001cb2:	f107 010a 	add.w	r1, r7, #10
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <SPI_FLASH_Erase4k+0x88>)
 8001cbc:	f002 fe80 	bl	80049c0 <HAL_SPI_Transmit>
	SPI_FLASH_Deselect(id);
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe9e 	bl	8001a04 <SPI_FLASH_Deselect>
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200004b0 	.word	0x200004b0

08001cd4 <SPI_FLASH_BoardDefault>:

void SPI_FLASH_BoardDefault(uint8_t force, uint8_t id)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460a      	mov	r2, r1
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	71bb      	strb	r3, [r7, #6]
	uint32_t index = 0x00000000;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
	uint8_t tx_data = 0xFF;
 8001ce8:	23ff      	movs	r3, #255	; 0xff
 8001cea:	727b      	strb	r3, [r7, #9]

	if(FALSE == force)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <SPI_FLASH_BoardDefault+0x2c>
	{
		if (SPI_FLASH_DEFAULT_STATUS == SPI_FLASH_DefaultStatus(id))
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff55 	bl	8001ba4 <SPI_FLASH_DefaultStatus>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	e0e8      	b.n	8001ed2 <SPI_FLASH_BoardDefault+0x1fe>
			return;
		}
	}
	else
	{
		for(uint16_t i = 0; i < SCPI_MANUFACTURER_STRING_LENGTH; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	837b      	strh	r3, [r7, #26]
 8001d04:	e011      	b.n	8001d2a <SPI_FLASH_BoardDefault+0x56>
		{
			SPI_FLASH_WriteByte(index, default_board.scpi_info.manufacturer[i], 0);
 8001d06:	4b74      	ldr	r3, [pc, #464]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0a:	8b7b      	ldrh	r3, [r7, #26]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	4619      	mov	r1, r3
 8001d18:	69f8      	ldr	r0, [r7, #28]
 8001d1a:	f7ff fee1 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < SCPI_MANUFACTURER_STRING_LENGTH; i++)
 8001d24:	8b7b      	ldrh	r3, [r7, #26]
 8001d26:	3301      	adds	r3, #1
 8001d28:	837b      	strh	r3, [r7, #26]
 8001d2a:	8b7b      	ldrh	r3, [r7, #26]
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d9ea      	bls.n	8001d06 <SPI_FLASH_BoardDefault+0x32>
		}

		for(uint16_t i = 0; i < SCPI_DEVICE_STRING_LENGTH; i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	833b      	strh	r3, [r7, #24]
 8001d34:	e011      	b.n	8001d5a <SPI_FLASH_BoardDefault+0x86>
		{
			SPI_FLASH_WriteByte(index, default_board.scpi_info.device[i], 0);
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3a:	8b3b      	ldrh	r3, [r7, #24]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	69f8      	ldr	r0, [r7, #28]
 8001d4a:	f7ff fec9 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < SCPI_DEVICE_STRING_LENGTH; i++)
 8001d54:	8b3b      	ldrh	r3, [r7, #24]
 8001d56:	3301      	adds	r3, #1
 8001d58:	833b      	strh	r3, [r7, #24]
 8001d5a:	8b3b      	ldrh	r3, [r7, #24]
 8001d5c:	2b0a      	cmp	r3, #10
 8001d5e:	d9ea      	bls.n	8001d36 <SPI_FLASH_BoardDefault+0x62>
		}

		for(uint16_t i = 0; i < SCPI_SOFTWAREVERSION_STRING_LENGTH; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	82fb      	strh	r3, [r7, #22]
 8001d64:	e011      	b.n	8001d8a <SPI_FLASH_BoardDefault+0xb6>
		{
			SPI_FLASH_WriteByte(index, default_board.scpi_info.software_version[i], 0);
 8001d66:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d6a:	8afb      	ldrh	r3, [r7, #22]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	69f8      	ldr	r0, [r7, #28]
 8001d7a:	f7ff feb1 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < SCPI_SOFTWAREVERSION_STRING_LENGTH; i++)
 8001d84:	8afb      	ldrh	r3, [r7, #22]
 8001d86:	3301      	adds	r3, #1
 8001d88:	82fb      	strh	r3, [r7, #22]
 8001d8a:	8afb      	ldrh	r3, [r7, #22]
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d9ea      	bls.n	8001d66 <SPI_FLASH_BoardDefault+0x92>
		}

		for(uint16_t i = 0; i < 4; i++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	82bb      	strh	r3, [r7, #20]
 8001d94:	e00e      	b.n	8001db4 <SPI_FLASH_BoardDefault+0xe0>
		{
			SPI_FLASH_WriteByte(index, default_board.ip4_static.ip[i], 0);
 8001d96:	8abb      	ldrh	r3, [r7, #20]
 8001d98:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	7f1b      	ldrb	r3, [r3, #28]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	69f8      	ldr	r0, [r7, #28]
 8001da4:	f7ff fe9c 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < 4; i++)
 8001dae:	8abb      	ldrh	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	82bb      	strh	r3, [r7, #20]
 8001db4:	8abb      	ldrh	r3, [r7, #20]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d9ed      	bls.n	8001d96 <SPI_FLASH_BoardDefault+0xc2>
		}

		for(uint16_t i = 0; i < 4; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	827b      	strh	r3, [r7, #18]
 8001dbe:	e00f      	b.n	8001de0 <SPI_FLASH_BoardDefault+0x10c>
		{
			SPI_FLASH_WriteByte(index, default_board.ip4_static.netmask[i], 0);
 8001dc0:	8a7b      	ldrh	r3, [r7, #18]
 8001dc2:	4a45      	ldr	r2, [pc, #276]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	69f8      	ldr	r0, [r7, #28]
 8001dd0:	f7ff fe86 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < 4; i++)
 8001dda:	8a7b      	ldrh	r3, [r7, #18]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	827b      	strh	r3, [r7, #18]
 8001de0:	8a7b      	ldrh	r3, [r7, #18]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d9ec      	bls.n	8001dc0 <SPI_FLASH_BoardDefault+0xec>
		}

		for(uint16_t i = 0; i < 4; i++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	823b      	strh	r3, [r7, #16]
 8001dea:	e00f      	b.n	8001e0c <SPI_FLASH_BoardDefault+0x138>
		{
			SPI_FLASH_WriteByte(index, default_board.ip4_static.gateway[i], 0);
 8001dec:	8a3b      	ldrh	r3, [r7, #16]
 8001dee:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001df0:	4413      	add	r3, r2
 8001df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df6:	2200      	movs	r2, #0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	69f8      	ldr	r0, [r7, #28]
 8001dfc:	f7ff fe70 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3301      	adds	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < 4; i++)
 8001e06:	8a3b      	ldrh	r3, [r7, #16]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	823b      	strh	r3, [r7, #16]
 8001e0c:	8a3b      	ldrh	r3, [r7, #16]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d9ec      	bls.n	8001dec <SPI_FLASH_BoardDefault+0x118>
		}


		tx_data = board.ip4_static.port >> 8;
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <SPI_FLASH_BoardDefault+0x208>)
 8001e14:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	727b      	strb	r3, [r7, #9]
		SPI_FLASH_WriteByte(index, tx_data, 0);
 8001e1c:	7a7b      	ldrb	r3, [r7, #9]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	69f8      	ldr	r0, [r7, #28]
 8001e24:	f7ff fe5c 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]

		tx_data = board.ip4_static.port;
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <SPI_FLASH_BoardDefault+0x208>)
 8001e30:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e32:	727b      	strb	r3, [r7, #9]
		SPI_FLASH_WriteByte(index, tx_data, 0);
 8001e34:	7a7b      	ldrb	r3, [r7, #9]
 8001e36:	2200      	movs	r2, #0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	69f8      	ldr	r0, [r7, #28]
 8001e3c:	f7ff fe50 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3301      	adds	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]

		for(uint16_t i = 0; i < SCPI_SERIALNUMBER_STRING_LENGTH; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	81fb      	strh	r3, [r7, #14]
 8001e4a:	e011      	b.n	8001e70 <SPI_FLASH_BoardDefault+0x19c>
		{
			SPI_FLASH_WriteByte(index, default_board.scpi_info.serial_number[i], 0);
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	4413      	add	r3, r2
 8001e54:	f993 3000 	ldrsb.w	r3, [r3]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	69f8      	ldr	r0, [r7, #28]
 8001e60:	f7ff fe3e 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < SCPI_SERIALNUMBER_STRING_LENGTH; i++)
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	81fb      	strh	r3, [r7, #14]
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d9ea      	bls.n	8001e4c <SPI_FLASH_BoardDefault+0x178>
		}

		for(uint16_t i = 0; i < 6; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	81bb      	strh	r3, [r7, #12]
 8001e7a:	e00f      	b.n	8001e9c <SPI_FLASH_BoardDefault+0x1c8>
		{
			SPI_FLASH_WriteByte(index, default_board.ip4_static.MAC[i], 0);
 8001e7c:	89bb      	ldrh	r3, [r7, #12]
 8001e7e:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001e80:	4413      	add	r3, r2
 8001e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	69f8      	ldr	r0, [r7, #28]
 8001e8c:	f7ff fe28 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3301      	adds	r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < 6; i++)
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	81bb      	strh	r3, [r7, #12]
 8001e9c:	89bb      	ldrh	r3, [r7, #12]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d9ec      	bls.n	8001e7c <SPI_FLASH_BoardDefault+0x1a8>
		}

		for(uint16_t i = 0; i < PASSWORD_LENGTH; i++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	817b      	strh	r3, [r7, #10]
 8001ea6:	e011      	b.n	8001ecc <SPI_FLASH_BoardDefault+0x1f8>
		{
			SPI_FLASH_WriteByte(index, default_board.security.password[i], 0);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <SPI_FLASH_BoardDefault+0x204>)
 8001eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	69f8      	ldr	r0, [r7, #28]
 8001ebc:	f7ff fe10 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < PASSWORD_LENGTH; i++)
 8001ec6:	897b      	ldrh	r3, [r7, #10]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	817b      	strh	r3, [r7, #10]
 8001ecc:	897b      	ldrh	r3, [r7, #10]
 8001ece:	2b0a      	cmp	r3, #10
 8001ed0:	d9ea      	bls.n	8001ea8 <SPI_FLASH_BoardDefault+0x1d4>
		}
	}
}
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000514 	.word	0x20000514
 8001edc:	20000458 	.word	0x20000458

08001ee0 <SPI_FLASH_BoardUpdate>:

void SPI_FLASH_BoardUpdate()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
	uint32_t index = 0x00000000;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
	uint8_t tx_data = 0xFF;
 8001eea:	23ff      	movs	r3, #255	; 0xff
 8001eec:	70fb      	strb	r3, [r7, #3]

	SPI_FLASH_Erase4k(index, 0);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	69f8      	ldr	r0, [r7, #28]
 8001ef2:	f7ff fea9 	bl	8001c48 <SPI_FLASH_Erase4k>

	SPI_FLASH_WriteByte(index, SPI_FLASH_DEFAULT_STATUS, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2110      	movs	r1, #16
 8001efa:	69f8      	ldr	r0, [r7, #28]
 8001efc:	f7ff fdf0 	bl	8001ae0 <SPI_FLASH_WriteByte>
	index++;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3301      	adds	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]

	for(uint16_t i = 0; i < SCPI_MANUFACTURER_STRING_LENGTH; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	837b      	strh	r3, [r7, #26]
 8001f0a:	e011      	b.n	8001f30 <SPI_FLASH_BoardUpdate+0x50>
	{
		SPI_FLASH_WriteByte(index, board.scpi_info.manufacturer[i], 0);
 8001f0c:	4b9a      	ldr	r3, [pc, #616]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8001f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f10:	8b7b      	ldrh	r3, [r7, #26]
 8001f12:	4413      	add	r3, r2
 8001f14:	f993 3000 	ldrsb.w	r3, [r3]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	69f8      	ldr	r0, [r7, #28]
 8001f20:	f7ff fdde 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
	for(uint16_t i = 0; i < SCPI_MANUFACTURER_STRING_LENGTH; i++)
 8001f2a:	8b7b      	ldrh	r3, [r7, #26]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	837b      	strh	r3, [r7, #26]
 8001f30:	8b7b      	ldrh	r3, [r7, #26]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d9ea      	bls.n	8001f0c <SPI_FLASH_BoardUpdate+0x2c>
	}

	for(uint16_t i = 0; i < SCPI_DEVICE_STRING_LENGTH; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	833b      	strh	r3, [r7, #24]
 8001f3a:	e011      	b.n	8001f60 <SPI_FLASH_BoardUpdate+0x80>
	{
		SPI_FLASH_WriteByte(index, board.scpi_info.device[i], 0);
 8001f3c:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8001f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f40:	8b3b      	ldrh	r3, [r7, #24]
 8001f42:	4413      	add	r3, r2
 8001f44:	f993 3000 	ldrsb.w	r3, [r3]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	69f8      	ldr	r0, [r7, #28]
 8001f50:	f7ff fdc6 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	3301      	adds	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
	for(uint16_t i = 0; i < SCPI_DEVICE_STRING_LENGTH; i++)
 8001f5a:	8b3b      	ldrh	r3, [r7, #24]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	833b      	strh	r3, [r7, #24]
 8001f60:	8b3b      	ldrh	r3, [r7, #24]
 8001f62:	2b0a      	cmp	r3, #10
 8001f64:	d9ea      	bls.n	8001f3c <SPI_FLASH_BoardUpdate+0x5c>
	}

	for(uint16_t i = 0; i < SCPI_SOFTWAREVERSION_STRING_LENGTH; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	82fb      	strh	r3, [r7, #22]
 8001f6a:	e011      	b.n	8001f90 <SPI_FLASH_BoardUpdate+0xb0>
	{
		SPI_FLASH_WriteByte(index, board.scpi_info.software_version[i], 0);
 8001f6c:	4b82      	ldr	r3, [pc, #520]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8001f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f70:	8afb      	ldrh	r3, [r7, #22]
 8001f72:	4413      	add	r3, r2
 8001f74:	f993 3000 	ldrsb.w	r3, [r3]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	69f8      	ldr	r0, [r7, #28]
 8001f80:	f7ff fdae 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
	for(uint16_t i = 0; i < SCPI_SOFTWAREVERSION_STRING_LENGTH; i++)
 8001f8a:	8afb      	ldrh	r3, [r7, #22]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	82fb      	strh	r3, [r7, #22]
 8001f90:	8afb      	ldrh	r3, [r7, #22]
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d9ea      	bls.n	8001f6c <SPI_FLASH_BoardUpdate+0x8c>
	}

	for(uint16_t i = 0; i < 4; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	82bb      	strh	r3, [r7, #20]
 8001f9a:	e00d      	b.n	8001fb8 <SPI_FLASH_BoardUpdate+0xd8>
	{
		SPI_FLASH_WriteByte(index, board.ip4_current.ip[i], 0);
 8001f9c:	8abb      	ldrh	r3, [r7, #20]
 8001f9e:	4a76      	ldr	r2, [pc, #472]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	69f8      	ldr	r0, [r7, #28]
 8001fa8:	f7ff fd9a 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
	for(uint16_t i = 0; i < 4; i++)
 8001fb2:	8abb      	ldrh	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	82bb      	strh	r3, [r7, #20]
 8001fb8:	8abb      	ldrh	r3, [r7, #20]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d9ee      	bls.n	8001f9c <SPI_FLASH_BoardUpdate+0xbc>
	}

	for(uint16_t i = 0; i < 4; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	827b      	strh	r3, [r7, #18]
 8001fc2:	e00e      	b.n	8001fe2 <SPI_FLASH_BoardUpdate+0x102>
	{
		SPI_FLASH_WriteByte(index, board.ip4_current.netmask[i], 0);
 8001fc4:	8a7b      	ldrh	r3, [r7, #18]
 8001fc6:	4a6c      	ldr	r2, [pc, #432]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	791b      	ldrb	r3, [r3, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	69f8      	ldr	r0, [r7, #28]
 8001fd2:	f7ff fd85 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
	for(uint16_t i = 0; i < 4; i++)
 8001fdc:	8a7b      	ldrh	r3, [r7, #18]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	827b      	strh	r3, [r7, #18]
 8001fe2:	8a7b      	ldrh	r3, [r7, #18]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d9ed      	bls.n	8001fc4 <SPI_FLASH_BoardUpdate+0xe4>
	}

	for(uint16_t i = 0; i < 4; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	823b      	strh	r3, [r7, #16]
 8001fec:	e00e      	b.n	800200c <SPI_FLASH_BoardUpdate+0x12c>
	{
		SPI_FLASH_WriteByte(index, board.ip4_current.gateway[i], 0);
 8001fee:	8a3b      	ldrh	r3, [r7, #16]
 8001ff0:	4a61      	ldr	r2, [pc, #388]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	7a1b      	ldrb	r3, [r3, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	69f8      	ldr	r0, [r7, #28]
 8001ffc:	f7ff fd70 	bl	8001ae0 <SPI_FLASH_WriteByte>
		index++;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
	for(uint16_t i = 0; i < 4; i++)
 8002006:	8a3b      	ldrh	r3, [r7, #16]
 8002008:	3301      	adds	r3, #1
 800200a:	823b      	strh	r3, [r7, #16]
 800200c:	8a3b      	ldrh	r3, [r7, #16]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d9ed      	bls.n	8001fee <SPI_FLASH_BoardUpdate+0x10e>
	}

	tx_data = board.ip4_current.port >> 8;
 8002012:	4b59      	ldr	r3, [pc, #356]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8002014:	8b1b      	ldrh	r3, [r3, #24]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	70fb      	strb	r3, [r7, #3]
	SPI_FLASH_WriteByte(index, tx_data, 0);
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	69f8      	ldr	r0, [r7, #28]
 8002024:	f7ff fd5c 	bl	8001ae0 <SPI_FLASH_WriteByte>
	index++;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]

	tx_data = board.ip4_current.port;
 800202e:	4b52      	ldr	r3, [pc, #328]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8002030:	8b1b      	ldrh	r3, [r3, #24]
 8002032:	70fb      	strb	r3, [r7, #3]
	SPI_FLASH_WriteByte(index, tx_data, 0);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2200      	movs	r2, #0
 8002038:	4619      	mov	r1, r3
 800203a:	69f8      	ldr	r0, [r7, #28]
 800203c:	f7ff fd50 	bl	8001ae0 <SPI_FLASH_WriteByte>
	index++;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]

	if(SECURITY_OFF == board.security.on)
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8002048:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d145      	bne.n	80020dc <SPI_FLASH_BoardUpdate+0x1fc>
	{

		for(uint16_t i = 0; i < SCPI_SERIALNUMBER_STRING_LENGTH; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	81fb      	strh	r3, [r7, #14]
 8002054:	e011      	b.n	800207a <SPI_FLASH_BoardUpdate+0x19a>
		{
			SPI_FLASH_WriteByte(index, board.scpi_info.serial_number[i], 0);
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 8002058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205a:	89fb      	ldrh	r3, [r7, #14]
 800205c:	4413      	add	r3, r2
 800205e:	f993 3000 	ldrsb.w	r3, [r3]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2200      	movs	r2, #0
 8002066:	4619      	mov	r1, r3
 8002068:	69f8      	ldr	r0, [r7, #28]
 800206a:	f7ff fd39 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < SCPI_SERIALNUMBER_STRING_LENGTH; i++)
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	3301      	adds	r3, #1
 8002078:	81fb      	strh	r3, [r7, #14]
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d9ea      	bls.n	8002056 <SPI_FLASH_BoardUpdate+0x176>
		}

		for(uint16_t i = 0; i < 6; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	81bb      	strh	r3, [r7, #12]
 8002084:	e00e      	b.n	80020a4 <SPI_FLASH_BoardUpdate+0x1c4>
		{
			SPI_FLASH_WriteByte(index, board.ip4_current.MAC[i], 0);
 8002086:	89bb      	ldrh	r3, [r7, #12]
 8002088:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 800208a:	4413      	add	r3, r2
 800208c:	7b1b      	ldrb	r3, [r3, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	69f8      	ldr	r0, [r7, #28]
 8002094:	f7ff fd24 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < 6; i++)
 800209e:	89bb      	ldrh	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	81bb      	strh	r3, [r7, #12]
 80020a4:	89bb      	ldrh	r3, [r7, #12]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d9ed      	bls.n	8002086 <SPI_FLASH_BoardUpdate+0x1a6>
		}

		for(uint16_t i = 0; i < PASSWORD_LENGTH; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	817b      	strh	r3, [r7, #10]
 80020ae:	e011      	b.n	80020d4 <SPI_FLASH_BoardUpdate+0x1f4>
		{
			SPI_FLASH_WriteByte(index, board.security.password[i], 0);
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 80020b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	4413      	add	r3, r2
 80020b8:	f993 3000 	ldrsb.w	r3, [r3]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	4619      	mov	r1, r3
 80020c2:	69f8      	ldr	r0, [r7, #28]
 80020c4:	f7ff fd0c 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < PASSWORD_LENGTH; i++)
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	3301      	adds	r3, #1
 80020d2:	817b      	strh	r3, [r7, #10]
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	2b0a      	cmp	r3, #10
 80020d8:	d9ea      	bls.n	80020b0 <SPI_FLASH_BoardUpdate+0x1d0>
			index++;
		}

	}

}
 80020da:	e049      	b.n	8002170 <SPI_FLASH_BoardUpdate+0x290>
	else if(SECURITY_ON == board.security.on)
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <SPI_FLASH_BoardUpdate+0x298>)
 80020de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d144      	bne.n	8002170 <SPI_FLASH_BoardUpdate+0x290>
		for(uint16_t i = 0; i < SCPI_SERIALNUMBER_STRING_LENGTH; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	813b      	strh	r3, [r7, #8]
 80020ea:	e011      	b.n	8002110 <SPI_FLASH_BoardUpdate+0x230>
			SPI_FLASH_WriteByte(index, default_board.scpi_info.serial_number[i], 0);
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <SPI_FLASH_BoardUpdate+0x29c>)
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	893b      	ldrh	r3, [r7, #8]
 80020f2:	4413      	add	r3, r2
 80020f4:	f993 3000 	ldrsb.w	r3, [r3]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	69f8      	ldr	r0, [r7, #28]
 8002100:	f7ff fcee 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < SCPI_SERIALNUMBER_STRING_LENGTH; i++)
 800210a:	893b      	ldrh	r3, [r7, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	813b      	strh	r3, [r7, #8]
 8002110:	893b      	ldrh	r3, [r7, #8]
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d9ea      	bls.n	80020ec <SPI_FLASH_BoardUpdate+0x20c>
		for(uint16_t i = 0; i < 6; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	e00e      	b.n	800213a <SPI_FLASH_BoardUpdate+0x25a>
			SPI_FLASH_WriteByte(index, default_board.ip4_current.MAC[i], 0);
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <SPI_FLASH_BoardUpdate+0x29c>)
 8002120:	4413      	add	r3, r2
 8002122:	7b1b      	ldrb	r3, [r3, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	4619      	mov	r1, r3
 8002128:	69f8      	ldr	r0, [r7, #28]
 800212a:	f7ff fcd9 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < 6; i++)
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	3301      	adds	r3, #1
 8002138:	80fb      	strh	r3, [r7, #6]
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d9ed      	bls.n	800211c <SPI_FLASH_BoardUpdate+0x23c>
		for(uint16_t i = 0; i < PASSWORD_LENGTH; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	80bb      	strh	r3, [r7, #4]
 8002144:	e011      	b.n	800216a <SPI_FLASH_BoardUpdate+0x28a>
			SPI_FLASH_WriteByte(index, default_board.security.password[i], 0);
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <SPI_FLASH_BoardUpdate+0x29c>)
 8002148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214a:	88bb      	ldrh	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	f993 3000 	ldrsb.w	r3, [r3]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	69f8      	ldr	r0, [r7, #28]
 800215a:	f7ff fcc1 	bl	8001ae0 <SPI_FLASH_WriteByte>
			index++;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0; i < PASSWORD_LENGTH; i++)
 8002164:	88bb      	ldrh	r3, [r7, #4]
 8002166:	3301      	adds	r3, #1
 8002168:	80bb      	strh	r3, [r7, #4]
 800216a:	88bb      	ldrh	r3, [r7, #4]
 800216c:	2b0a      	cmp	r3, #10
 800216e:	d9ea      	bls.n	8002146 <SPI_FLASH_BoardUpdate+0x266>
}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000458 	.word	0x20000458
 800217c:	20000514 	.word	0x20000514

08002180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_MspInit+0x44>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_MspInit+0x44>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_MspInit+0x44>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_MspInit+0x44>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_MspInit+0x44>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_MspInit+0x44>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a46      	ldr	r2, [pc, #280]	; (8002300 <HAL_SPI_MspInit+0x138>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d129      	bne.n	800223e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ea:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a45      	ldr	r2, [pc, #276]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80021f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a3f      	ldr	r2, [pc, #252]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800221a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800222c:	2306      	movs	r3, #6
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	4834      	ldr	r0, [pc, #208]	; (8002308 <HAL_SPI_MspInit+0x140>)
 8002238:	f001 fcc6 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800223c:	e05b      	b.n	80022f6 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_SPI_MspInit+0x144>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d128      	bne.n	800229a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	4a2d      	ldr	r2, [pc, #180]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 800224e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002252:	6453      	str	r3, [r2, #68]	; 0x44
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002278:	2364      	movs	r3, #100	; 0x64
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002288:	2305      	movs	r3, #5
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	481f      	ldr	r0, [pc, #124]	; (8002310 <HAL_SPI_MspInit+0x148>)
 8002294:	f001 fc98 	bl	8003bc8 <HAL_GPIO_Init>
}
 8002298:	e02d      	b.n	80022f6 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI5)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_SPI_MspInit+0x14c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d128      	bne.n	80022f6 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ae:	6453      	str	r3, [r2, #68]	; 0x44
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80022c2:	f043 0320 	orr.w	r3, r3, #32
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_SPI_MspInit+0x13c>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022e6:	2305      	movs	r3, #5
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4809      	ldr	r0, [pc, #36]	; (8002318 <HAL_SPI_MspInit+0x150>)
 80022f2:	f001 fc69 	bl	8003bc8 <HAL_GPIO_Init>
}
 80022f6:	bf00      	nop
 80022f8:	3738      	adds	r7, #56	; 0x38
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40003c00 	.word	0x40003c00
 8002304:	40023800 	.word	0x40023800
 8002308:	40020800 	.word	0x40020800
 800230c:	40013400 	.word	0x40013400
 8002310:	40021000 	.word	0x40021000
 8002314:	40015000 	.word	0x40015000
 8002318:	40021400 	.word	0x40021400

0800231c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <HardFault_Handler+0x4>

08002330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <MemManage_Handler+0x4>

08002336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <BusFault_Handler+0x4>

0800233c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <UsageFault_Handler+0x4>

08002342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002370:	f000 fb8e 	bl	8002a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
	}

return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
	}
	return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002412:	605a      	str	r2, [r3, #4]
	return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:

int _isatty(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x50>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x16>
		heap_end = &end;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <_sbrk+0x50>)
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <_sbrk+0x54>)
 8002468:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <_sbrk+0x50>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <_sbrk+0x50>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	466a      	mov	r2, sp
 800247a:	4293      	cmp	r3, r2
 800247c:	d905      	bls.n	800248a <_sbrk+0x36>
	{
		errno = ENOMEM;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <_sbrk+0x58>)
 8002480:	220c      	movs	r2, #12
 8002482:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002488:	e006      	b.n	8002498 <_sbrk+0x44>
	}

	heap_end += incr;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <_sbrk+0x50>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <_sbrk+0x50>)
 8002494:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	20000268 	.word	0x20000268
 80024a8:	200076d0 	.word	0x200076d0
 80024ac:	200076c8 	.word	0x200076c8

080024b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <SystemInit+0x5c>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <SystemInit+0x5c>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <SystemInit+0x60>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <SystemInit+0x60>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <SystemInit+0x60>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <SystemInit+0x60>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <SystemInit+0x60>)
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <SystemInit+0x64>)
 80024de:	4013      	ands	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <SystemInit+0x60>)
 80024e4:	4a0c      	ldr	r2, [pc, #48]	; (8002518 <SystemInit+0x68>)
 80024e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <SystemInit+0x60>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <SystemInit+0x60>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <SystemInit+0x60>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <SystemInit+0x5c>)
 80024fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002500:	609a      	str	r2, [r3, #8]
#endif
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	40023800 	.word	0x40023800
 8002514:	fef6ffff 	.word	0xfef6ffff
 8002518:	24003010 	.word	0x24003010

0800251c <tcp_raw_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_raw_init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_raw_pcb = tcp_new();
 8002522:	f006 fb07 	bl	8008b34 <tcp_new>
 8002526:	4602      	mov	r2, r0
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <tcp_raw_init+0x5c>)
 800252a:	601a      	str	r2, [r3, #0]

  if (tcp_raw_pcb != NULL)
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <tcp_raw_init+0x5c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01c      	beq.n	800256e <tcp_raw_init+0x52>
  {
    err_t err;


      err = tcp_bind(tcp_raw_pcb, IP_ADDR_ANY, 5025);
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <tcp_raw_init+0x5c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f241 32a1 	movw	r2, #5025	; 0x13a1
 800253c:	490f      	ldr	r1, [pc, #60]	; (800257c <tcp_raw_init+0x60>)
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fb7c 	bl	8007c3c <tcp_bind>
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <tcp_raw_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_raw_pcb = tcp_listen(tcp_raw_pcb);
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <tcp_raw_init+0x5c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	21ff      	movs	r1, #255	; 0xff
 8002556:	4618      	mov	r0, r3
 8002558:	f005 fc12 	bl	8007d80 <tcp_listen_with_backlog>
 800255c:	4602      	mov	r2, r0
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <tcp_raw_init+0x5c>)
 8002560:	601a      	str	r2, [r3, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_raw_pcb, tcp_raw_accept);
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <tcp_raw_init+0x5c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4906      	ldr	r1, [pc, #24]	; (8002580 <tcp_raw_init+0x64>)
 8002568:	4618      	mov	r0, r3
 800256a:	f006 fb61 	bl	8008c30 <tcp_accept>
  }
  else
  {
   // printf("Can not create new pcb\n");
  }
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000ed4 	.word	0x20000ed4
 800257c:	08017454 	.word	0x08017454
 8002580:	08002585 	.word	0x08002585

08002584 <tcp_raw_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_raw_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8002592:	2101      	movs	r1, #1
 8002594:	68b8      	ldr	r0, [r7, #8]
 8002596:	f006 f942 	bl	800881e <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_raw_struct *)mem_malloc(sizeof(struct tcp_raw_struct));
 800259a:	200c      	movs	r0, #12
 800259c:	f003 fe92 	bl	80062c4 <mem_malloc>
 80025a0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01c      	beq.n	80025e2 <tcp_raw_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80025ba:	6939      	ldr	r1, [r7, #16]
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f006 fac1 	bl	8008b44 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_raw_recv);
 80025c2:	490c      	ldr	r1, [pc, #48]	; (80025f4 <tcp_raw_accept+0x70>)
 80025c4:	68b8      	ldr	r0, [r7, #8]
 80025c6:	f006 facf 	bl	8008b68 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_raw_error);
 80025ca:	490b      	ldr	r1, [pc, #44]	; (80025f8 <tcp_raw_accept+0x74>)
 80025cc:	68b8      	ldr	r0, [r7, #8]
 80025ce:	f006 fb0d 	bl	8008bec <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_raw_poll, 1);
 80025d2:	2201      	movs	r2, #1
 80025d4:	4909      	ldr	r1, [pc, #36]	; (80025fc <tcp_raw_accept+0x78>)
 80025d6:	68b8      	ldr	r0, [r7, #8]
 80025d8:	f006 fb42 	bl	8008c60 <tcp_poll>

    ret_err = ERR_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	75fb      	strb	r3, [r7, #23]
 80025e0:	e001      	b.n	80025e6 <tcp_raw_accept+0x62>
  }
  else
  {
    /* return memory error */
    ret_err = ERR_MEM;
 80025e2:	23ff      	movs	r3, #255	; 0xff
 80025e4:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80025e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	08002601 	.word	0x08002601
 80025f8:	08002819 	.word	0x08002819
 80025fc:	0800283d 	.word	0x0800283d

08002600 <tcp_raw_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_raw_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b0c7      	sub	sp, #284	; 0x11c
 8002604:	af00      	add	r7, sp, #0
 8002606:	f107 040c 	add.w	r4, r7, #12
 800260a:	6020      	str	r0, [r4, #0]
 800260c:	f107 0008 	add.w	r0, r7, #8
 8002610:	6001      	str	r1, [r0, #0]
 8002612:	1d39      	adds	r1, r7, #4
 8002614:	600a      	str	r2, [r1, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	1cfb      	adds	r3, r7, #3
 800261a:	701a      	strb	r2, [r3, #0]
  // struct tcp_raw_struct *es;
  err_t ret_err;
  uint8_t tmp_payload[256];
  uint16_t tmp_len = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114


  LWIP_ASSERT("arg != NULL",arg != NULL);
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <tcp_raw_recv+0x38>
 800262c:	4b74      	ldr	r3, [pc, #464]	; (8002800 <tcp_raw_recv+0x200>)
 800262e:	2283      	movs	r2, #131	; 0x83
 8002630:	4974      	ldr	r1, [pc, #464]	; (8002804 <tcp_raw_recv+0x204>)
 8002632:	4875      	ldr	r0, [pc, #468]	; (8002808 <tcp_raw_recv+0x208>)
 8002634:	f010 fff8 	bl	8013628 <iprintf>

  es_scpi = (struct tcp_raw_struct *)arg;
 8002638:	4a74      	ldr	r2, [pc, #464]	; (800280c <tcp_raw_recv+0x20c>)
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6013      	str	r3, [r2, #0]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d114      	bne.n	8002674 <tcp_raw_recv+0x74>
  {
    /* remote host closed connection */
    es_scpi->state = ES_CLOSING;
 800264a:	4b70      	ldr	r3, [pc, #448]	; (800280c <tcp_raw_recv+0x20c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2203      	movs	r2, #3
 8002650:	701a      	strb	r2, [r3, #0]
    if(es_scpi->p == NULL)
 8002652:	4b6e      	ldr	r3, [pc, #440]	; (800280c <tcp_raw_recv+0x20c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <tcp_raw_recv+0x6c>
    {
       /* we're done sending, close connection */
       tcp_raw_connection_close(tpcb, es_scpi);
 800265c:	4b6b      	ldr	r3, [pc, #428]	; (800280c <tcp_raw_recv+0x20c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	4611      	mov	r1, r2
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	f000 f984 	bl	8002974 <tcp_raw_connection_close>
      //tcp_sent(tpcb, tcp_raw_sent);

      /* send remaining data*/
      //tcp_raw_send(tpcb, es_scpi);
    }
    ret_err = ERR_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002672:	e0be      	b.n	80027f2 <tcp_raw_recv+0x1f2>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8002674:	1cfb      	adds	r3, r7, #3
 8002676:	f993 3000 	ldrsb.w	r3, [r3]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <tcp_raw_recv+0xa0>
  {
    /* free received pbuf*/
    if (p != NULL)
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <tcp_raw_recv+0x96>
    {
      es_scpi->p = NULL;
 8002686:	4b61      	ldr	r3, [pc, #388]	; (800280c <tcp_raw_recv+0x20c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f004 fcf3 	bl	800707c <pbuf_free>
    }
    ret_err = err;
 8002696:	1cfb      	adds	r3, r7, #3
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800269e:	e0a8      	b.n	80027f2 <tcp_raw_recv+0x1f2>
  }
  else if(es_scpi->state == ES_ACCEPTED)
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <tcp_raw_recv+0x20c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d141      	bne.n	800272e <tcp_raw_recv+0x12e>
  {
    /* first data chunk in p->payload */
    es_scpi->state = ES_RECEIVED;
 80026aa:	4b58      	ldr	r3, [pc, #352]	; (800280c <tcp_raw_recv+0x20c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es_scpi->p = p;
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <tcp_raw_recv+0x20c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1d3a      	adds	r2, r7, #4
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	609a      	str	r2, [r3, #8]

     /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_raw_sent);
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4953      	ldr	r1, [pc, #332]	; (8002810 <tcp_raw_recv+0x210>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f006 fa72 	bl	8008bac <tcp_sent>
    memcpy(tmp_payload, es_scpi->p->payload, es_scpi->p->len);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <tcp_raw_recv+0x20c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <tcp_raw_recv+0x20c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	895b      	ldrh	r3, [r3, #10]
 80026d8:	461a      	mov	r2, r3
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	4618      	mov	r0, r3
 80026e0:	f010 fc05 	bl	8012eee <memcpy>
    tmp_len = es_scpi->p->len;
 80026e4:	4b49      	ldr	r3, [pc, #292]	; (800280c <tcp_raw_recv+0x20c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	895b      	ldrh	r3, [r3, #10]
 80026ec:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
          es_scpi->p->len = 0;
 80026f0:	4b46      	ldr	r3, [pc, #280]	; (800280c <tcp_raw_recv+0x20c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	815a      	strh	r2, [r3, #10]
      strcpy(es_scpi->p->payload,"");
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <tcp_raw_recv+0x20c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
    SCPI_Input(&scpi_context, tmp_payload, tmp_len);
 8002706:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4619      	mov	r1, r3
 8002710:	4840      	ldr	r0, [pc, #256]	; (8002814 <tcp_raw_recv+0x214>)
 8002712:	f00f f85a 	bl	80117ca <SCPI_Input>


    /* send back the received data (echo) */
    tcp_raw_send(tpcb, es_scpi);
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <tcp_raw_recv+0x20c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	4611      	mov	r1, r2
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f000 f8d3 	bl	80028cc <tcp_raw_send>
    ret_err = ERR_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800272c:	e061      	b.n	80027f2 <tcp_raw_recv+0x1f2>
  }
  else if (es_scpi->state == ES_RECEIVED)
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <tcp_raw_recv+0x20c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d148      	bne.n	80027ca <tcp_raw_recv+0x1ca>
  {
    /* more data received from client and previous data has been already sent*/
    if(es_scpi->p == NULL)
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <tcp_raw_recv+0x20c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d134      	bne.n	80027ac <tcp_raw_recv+0x1ac>
    {
      es_scpi->p = p;
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <tcp_raw_recv+0x20c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1d3a      	adds	r2, r7, #4
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	609a      	str	r2, [r3, #8]

      /* send back received data */
    memcpy(tmp_payload, es_scpi->p->payload, es_scpi->p->len);
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <tcp_raw_recv+0x20c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <tcp_raw_recv+0x20c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	895b      	ldrh	r3, [r3, #10]
 800275c:	461a      	mov	r2, r3
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f010 fbc3 	bl	8012eee <memcpy>
      tmp_len = es_scpi->p->len;
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <tcp_raw_recv+0x20c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	895b      	ldrh	r3, [r3, #10]
 8002770:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
      es_scpi->p->len = 0;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <tcp_raw_recv+0x20c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	815a      	strh	r2, [r3, #10]
      strcpy(es_scpi->p->payload,"");
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <tcp_raw_recv+0x20c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    SCPI_Input(&scpi_context, tmp_payload, tmp_len);
 800278a:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800278e:	f107 0310 	add.w	r3, r7, #16
 8002792:	4619      	mov	r1, r3
 8002794:	481f      	ldr	r0, [pc, #124]	; (8002814 <tcp_raw_recv+0x214>)
 8002796:	f00f f818 	bl	80117ca <SCPI_Input>
    tcp_raw_send(tpcb, es_scpi);
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <tcp_raw_recv+0x20c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4611      	mov	r1, r2
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f000 f891 	bl	80028cc <tcp_raw_send>
 80027aa:	e00a      	b.n	80027c2 <tcp_raw_recv+0x1c2>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es_scpi->p;
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <tcp_raw_recv+0x20c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
      pbuf_chain(ptr,p);
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80027be:	f004 fd81 	bl	80072c4 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80027c8:	e013      	b.n	80027f2 <tcp_raw_recv+0x1f2>
  }
  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	891a      	ldrh	r2, [r3, #8]
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	4611      	mov	r1, r2
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f005 fbca 	bl	8007f70 <tcp_recved>

    /* free pbuf and do nothing */
    es_scpi->p = NULL;
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <tcp_raw_recv+0x20c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f004 fc48 	bl	800707c <pbuf_free>
    ret_err = ERR_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  }
  return ret_err;
 80027f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd90      	pop	{r4, r7, pc}
 8002800:	08014f30 	.word	0x08014f30
 8002804:	08014f48 	.word	0x08014f48
 8002808:	08014f54 	.word	0x08014f54
 800280c:	20000ed8 	.word	0x20000ed8
 8002810:	0800288f 	.word	0x0800288f
 8002814:	20000c04 	.word	0x20000c04

08002818 <tcp_raw_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_raw_error(void *arg, err_t err)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  struct tcp_raw_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_raw_struct *)arg;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <tcp_raw_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f003 fc0a 	bl	8006048 <mem_free>
  }
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <tcp_raw_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_raw_poll(void *arg, struct tcp_pcb *tpcb)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_raw_struct *es;

  es = (struct tcp_raw_struct *)arg;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <tcp_raw_poll+0x3c>
  {
    if (es->p != NULL)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <tcp_raw_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_raw_send(tpcb, es);
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	f000 f836 	bl	80028cc <tcp_raw_send>
 8002860:	e007      	b.n	8002872 <tcp_raw_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d103      	bne.n	8002872 <tcp_raw_poll+0x36>
      {
        /*  close tcp connection */
        tcp_raw_connection_close(tpcb, es);
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f000 f881 	bl	8002974 <tcp_raw_connection_close>
      }
    }
    ret_err = ERR_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e004      	b.n	8002882 <tcp_raw_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	f005 f9d3 	bl	8007c24 <tcp_abort>
    ret_err = ERR_ABRT;
 800287e:	23f3      	movs	r3, #243	; 0xf3
 8002880:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <tcp_raw_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
err_t tcp_raw_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
  struct tcp_raw_struct *es;
  LWIP_UNUSED_ARG(len);

  es = (struct tcp_raw_struct *)arg;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <tcp_raw_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_raw_send(tpcb, es);
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	68b8      	ldr	r0, [r7, #8]
 80028ac:	f000 f80e 	bl	80028cc <tcp_raw_send>
 80028b0:	e007      	b.n	80028c2 <tcp_raw_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d103      	bne.n	80028c2 <tcp_raw_sent+0x34>
      tcp_raw_connection_close(tpcb, es);
 80028ba:	6979      	ldr	r1, [r7, #20]
 80028bc:	68b8      	ldr	r0, [r7, #8]
 80028be:	f000 f859 	bl	8002974 <tcp_raw_connection_close>
  }
  return ERR_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <tcp_raw_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
void tcp_raw_send(struct tcp_pcb *tpcb, struct tcp_raw_struct *es)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  uint16_t pbuf_size = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	82bb      	strh	r3, [r7, #20]

  err_t wr_err = ERR_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
  pbuf_size = tcp_sndbuf(tpcb);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80028e4:	82bb      	strh	r3, [r7, #20]

  while ((wr_err == ERR_OK) &&
 80028e6:	e031      	b.n	800294c <tcp_raw_send+0x80>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	613b      	str	r3, [r7, #16]
    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	895a      	ldrh	r2, [r3, #10]
 80028f6:	2301      	movs	r3, #1
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f008 ff65 	bl	800b7c8 <tcp_write>
 80028fe:	4603      	mov	r3, r0
 8002900:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8002902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <tcp_raw_send+0x70>
    {
      u16_t plen;

      plen = ptr->len;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	895b      	ldrh	r3, [r3, #10]
 800290e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <tcp_raw_send+0x5e>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f004 fc55 	bl	80071d4 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 800292a:	6938      	ldr	r0, [r7, #16]
 800292c:	f004 fba6 	bl	800707c <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f005 fb1b 	bl	8007f70 <tcp_recved>
 800293a:	e007      	b.n	800294c <tcp_raw_send+0x80>
   }
   else if(wr_err == ERR_MEM)
 800293c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002944:	d102      	bne.n	800294c <tcp_raw_send+0x80>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800294c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <tcp_raw_send+0xa0>
         (es->p != NULL) &&
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <tcp_raw_send+0xa0>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	895a      	ldrh	r2, [r3, #10]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8002968:	429a      	cmp	r2, r3
 800296a:	d9bd      	bls.n	80028e8 <tcp_raw_send+0x1c>
   else
   {
     /* other problem ?? */
   }
  }
}
 800296c:	bf00      	nop
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <tcp_raw_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_raw_connection_close(struct tcp_pcb *tpcb, struct tcp_raw_struct *es)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800297e:	2100      	movs	r1, #0
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f006 f8df 	bl	8008b44 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8002986:	2100      	movs	r1, #0
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f006 f90f 	bl	8008bac <tcp_sent>
  tcp_recv(tpcb, NULL);
 800298e:	2100      	movs	r1, #0
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f006 f8e9 	bl	8008b68 <tcp_recv>
  tcp_err(tpcb, NULL);
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f006 f927 	bl	8008bec <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f006 f95c 	bl	8008c60 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <tcp_raw_connection_close+0x40>
  {
    mem_free(es);
 80029ae:	6838      	ldr	r0, [r7, #0]
 80029b0:	f003 fb4a 	bl	8006048 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f005 f86b 	bl	8007a90 <tcp_close>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ca:	e003      	b.n	80029d4 <LoopCopyDataInit>

080029cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029d2:	3104      	adds	r1, #4

080029d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029dc:	d3f6      	bcc.n	80029cc <CopyDataInit>
  ldr  r2, =_sbss
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029e0:	e002      	b.n	80029e8 <LoopFillZerobss>

080029e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e4:	f842 3b04 	str.w	r3, [r2], #4

080029e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029ec:	d3f9      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ee:	f7ff fd5f 	bl	80024b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f2:	f010 fa1d 	bl	8012e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f6:	f7fd ff27 	bl	8000848 <main>
  bx  lr    
 80029fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029fc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002a00:	08017820 	.word	0x08017820
  ldr  r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a08:	2000024c 	.word	0x2000024c
  ldr  r2, =_sbss
 8002a0c:	2000024c 	.word	0x2000024c
  ldr  r3, = _ebss
 8002a10:	200076cc 	.word	0x200076cc

08002a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC_IRQHandler>

08002a16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f000 f92c 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f000 f805 	bl	8002a30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a26:	f7ff fbab 	bl	8002180 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_InitTick+0x54>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_InitTick+0x58>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	4619      	mov	r1, r3
 8002a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f939 	bl	8002cc6 <HAL_SYSTICK_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00e      	b.n	8002a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	d80a      	bhi.n	8002a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a64:	2200      	movs	r2, #0
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a6c:	f000 f90f 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a70:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <HAL_InitTick+0x5c>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000006c 	.word	0x2000006c
 8002a88:	20000074 	.word	0x20000074
 8002a8c:	20000070 	.word	0x20000070

08002a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_IncTick+0x20>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x24>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_IncTick+0x24>)
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000074 	.word	0x20000074
 8002ab4:	20000ee0 	.word	0x20000ee0

08002ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return uwTick;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_GetTick+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000ee0 	.word	0x20000ee0

08002ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7ff ffee 	bl	8002ab8 <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae8:	d005      	beq.n	8002af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_Delay+0x40>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002af6:	bf00      	nop
 8002af8:	f7ff ffde 	bl	8002ab8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d8f7      	bhi.n	8002af8 <HAL_Delay+0x28>
  {
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000074 	.word	0x20000074

08002b14 <__NVIC_SetPriorityGrouping>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <__NVIC_SetPriorityGrouping+0x40>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x40>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00
 8002b58:	05fa0000 	.word	0x05fa0000

08002b5c <__NVIC_GetPriorityGrouping>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_SetPriority>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff47 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff5c 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffb0 	bl	8002c34 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002cf0:	4ba9      	ldr	r3, [pc, #676]	; (8002f98 <HAL_ETH_Init+0x2b8>)
 8002cf2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e183      	b.n	800300e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f002 fd9e 	bl	800585c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d20:	4b9e      	ldr	r3, [pc, #632]	; (8002f9c <HAL_ETH_Init+0x2bc>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	4a9d      	ldr	r2, [pc, #628]	; (8002f9c <HAL_ETH_Init+0x2bc>)
 8002d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2c:	4b9b      	ldr	r3, [pc, #620]	; (8002f9c <HAL_ETH_Init+0x2bc>)
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d38:	4b99      	ldr	r3, [pc, #612]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a98      	ldr	r2, [pc, #608]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d42:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d44:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4994      	ldr	r1, [pc, #592]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d68:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d6a:	f7ff fea5 	bl	8002ab8 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d70:	e011      	b.n	8002d96 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002d72:	f7ff fea1 	bl	8002ab8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d80:	d909      	bls.n	8002d96 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e13b      	b.n	800300e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e4      	bne.n	8002d72 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f023 031c 	bic.w	r3, r3, #28
 8002db6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002db8:	f001 fd64 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8002dbc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	; (8002fa4 <HAL_ETH_Init+0x2c4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d908      	bls.n	8002dd8 <HAL_ETH_Init+0xf8>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4a77      	ldr	r2, [pc, #476]	; (8002fa8 <HAL_ETH_Init+0x2c8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d804      	bhi.n	8002dd8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e027      	b.n	8002e28 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4a73      	ldr	r2, [pc, #460]	; (8002fa8 <HAL_ETH_Init+0x2c8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d908      	bls.n	8002df2 <HAL_ETH_Init+0x112>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4a72      	ldr	r2, [pc, #456]	; (8002fac <HAL_ETH_Init+0x2cc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d804      	bhi.n	8002df2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f043 030c 	orr.w	r3, r3, #12
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	e01a      	b.n	8002e28 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4a6d      	ldr	r2, [pc, #436]	; (8002fac <HAL_ETH_Init+0x2cc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d903      	bls.n	8002e02 <HAL_ETH_Init+0x122>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_ETH_Init+0x2d0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d911      	bls.n	8002e26 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <HAL_ETH_Init+0x2d0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d908      	bls.n	8002e1c <HAL_ETH_Init+0x13c>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_ETH_Init+0x2d4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d804      	bhi.n	8002e1c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e005      	b.n	8002e28 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	e000      	b.n	8002e28 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e26:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fb9a 	bl	8003570 <HAL_ETH_WritePHYRegister>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002e46:	6939      	ldr	r1, [r7, #16]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fc27 	bl	800369c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0d9      	b.n	800300e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002e5a:	20ff      	movs	r0, #255	; 0xff
 8002e5c:	f7ff fe38 	bl	8002ad0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a7 	beq.w	8002fb8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6a:	f7ff fe25 	bl	8002ab8 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	461a      	mov	r2, r3
 8002e76:	2101      	movs	r1, #1
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb11 	bl	80034a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002e7e:	f7ff fe1b 	bl	8002ab8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d90f      	bls.n	8002eb0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e94:	6939      	ldr	r1, [r7, #16]
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fc00 	bl	800369c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0ae      	b.n	800300e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0da      	beq.n	8002e70 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb55 	bl	8003570 <HAL_ETH_WritePHYRegister>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ed0:	6939      	ldr	r1, [r7, #16]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fbe2 	bl	800369c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e094      	b.n	800300e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee4:	f7ff fde8 	bl	8002ab8 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fad4 	bl	80034a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002ef8:	f7ff fdde 	bl	8002ab8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d90f      	bls.n	8002f2a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f0e:	6939      	ldr	r1, [r7, #16]
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fbc3 	bl	800369c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e071      	b.n	800300e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0da      	beq.n	8002eea <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	461a      	mov	r2, r3
 8002f3a:	211f      	movs	r1, #31
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 faaf 	bl	80034a0 <HAL_ETH_ReadPHYRegister>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f4c:	6939      	ldr	r1, [r7, #16]
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fba4 	bl	800369c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e056      	b.n	800300e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	e002      	b.n	8002f7a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	e037      	b.n	8002ffc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	e032      	b.n	8002ffc <HAL_ETH_Init+0x31c>
 8002f96:	bf00      	nop
 8002f98:	03938700 	.word	0x03938700
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	01312cff 	.word	0x01312cff
 8002fa8:	02160ebf 	.word	0x02160ebf
 8002fac:	039386ff 	.word	0x039386ff
 8002fb0:	05f5e0ff 	.word	0x05f5e0ff
 8002fb4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2100      	movs	r1, #0
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 facd 	bl	8003570 <HAL_ETH_WritePHYRegister>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fe0:	6939      	ldr	r1, [r7, #16]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fb5a 	bl	800369c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00c      	b.n	800300e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002ff4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002ff8:	f7ff fd6a 	bl	8002ad0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002ffc:	6939      	ldr	r1, [r7, #16]
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fb4c 	bl	800369c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop

08003018 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ETH_DMATxDescListInit+0x20>
 8003034:	2302      	movs	r3, #2
 8003036:	e052      	b.n	80030de <HAL_ETH_DMATxDescListInit+0xc6>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e030      	b.n	80030b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4413      	add	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003064:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	461a      	mov	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	3b01      	subs	r3, #1
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	429a      	cmp	r2, r3
 8003096:	d208      	bcs.n	80030aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	015b      	lsls	r3, r3, #5
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	461a      	mov	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	60da      	str	r2, [r3, #12]
 80030a8:	e002      	b.n	80030b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3301      	adds	r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3ca      	bcc.n	8003054 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f241 0310 	movw	r3, #4112	; 0x1010
 80030c8:	440b      	add	r3, r1
 80030ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b087      	sub	sp, #28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_ETH_DMARxDescListInit+0x20>
 8003106:	2302      	movs	r3, #2
 8003108:	e056      	b.n	80031b8 <HAL_ETH_DMARxDescListInit+0xce>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e034      	b.n	8003190 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	015b      	lsls	r3, r3, #5
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4413      	add	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003136:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800313e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	461a      	mov	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	3b01      	subs	r3, #1
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	429a      	cmp	r2, r3
 8003170:	d208      	bcs.n	8003184 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3301      	adds	r3, #1
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	4413      	add	r3, r2
 800317c:	461a      	mov	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	e002      	b.n	800318a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3301      	adds	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3c6      	bcc.n	8003126 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	f241 030c 	movw	r3, #4108	; 0x100c
 80031a2:	440b      	add	r3, r1
 80031a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_ETH_TransmitFrame+0x24>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0cd      	b.n	8003384 <HAL_ETH_TransmitFrame+0x1c0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800320e:	2301      	movs	r3, #1
 8003210:	e0b8      	b.n	8003384 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	da09      	bge.n	8003230 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2212      	movs	r2, #18
 8003220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0a9      	b.n	8003384 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003236:	4293      	cmp	r3, r2
 8003238:	d915      	bls.n	8003266 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	4a54      	ldr	r2, [pc, #336]	; (8003390 <HAL_ETH_TransmitFrame+0x1cc>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0a9b      	lsrs	r3, r3, #10
 8003244:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4b51      	ldr	r3, [pc, #324]	; (8003390 <HAL_ETH_TransmitFrame+0x1cc>)
 800324a:	fba3 1302 	umull	r1, r3, r3, r2
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e001      	b.n	800326a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d11c      	bne.n	80032aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800327e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800328a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800329a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a8:	e04b      	b.n	8003342 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e044      	b.n	800333a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032be:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d116      	bne.n	8003318 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80032f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a25      	ldr	r2, [pc, #148]	; (8003394 <HAL_ETH_TransmitFrame+0x1d0>)
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4413      	add	r3, r2
 8003306:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800330a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003316:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003326:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	3301      	adds	r3, #1
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	429a      	cmp	r2, r3
 8003340:	d3b6      	bcc.n	80032b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f241 0314 	movw	r3, #4116	; 0x1014
 800334a:	4413      	add	r3, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f241 0314 	movw	r3, #4116	; 0x1014
 800335e:	4413      	add	r3, r2
 8003360:	2204      	movs	r2, #4
 8003362:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	f241 0304 	movw	r3, #4100	; 0x1004
 800336c:	4413      	add	r3, r2
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	ac02b00b 	.word	0xac02b00b
 8003394:	fffffa0c 	.word	0xfffffa0c

08003398 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ETH_GetReceivedFrame+0x1a>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e070      	b.n	8003494 <HAL_ETH_GetReceivedFrame+0xfc>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db5a      	blt.n	8003482 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d030      	beq.n	800343c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d103      	bne.n	80033f4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003408:	3b04      	subs	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e02b      	b.n	8003494 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
 800346a:	e00a      	b.n	8003482 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	461a      	mov	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	460b      	mov	r3, r1
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b82      	cmp	r3, #130	; 0x82
 80034c0:	d101      	bne.n	80034c6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
 80034c4:	e050      	b.n	8003568 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2282      	movs	r2, #130	; 0x82
 80034ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 031c 	and.w	r3, r3, #28
 80034dc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8a1b      	ldrh	r3, [r3, #16]
 80034e2:	02db      	lsls	r3, r3, #11
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	019b      	lsls	r3, r3, #6
 80034f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 0302 	bic.w	r3, r3, #2
 8003500:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003512:	f7ff fad1 	bl	8002ab8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003518:	e015      	b.n	8003546 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800351a:	f7ff facd 	bl	8002ab8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d309      	bcc.n	800353e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e014      	b.n	8003568 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e4      	bne.n	800351a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	460b      	mov	r3, r1
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b42      	cmp	r3, #66	; 0x42
 8003590:	d101      	bne.n	8003596 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	e04e      	b.n	8003634 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2242      	movs	r2, #66	; 0x42
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 031c 	and.w	r3, r3, #28
 80035ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8a1b      	ldrh	r3, [r3, #16]
 80035b2:	02db      	lsls	r3, r3, #11
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80035bc:	897b      	ldrh	r3, [r7, #10]
 80035be:	019b      	lsls	r3, r3, #6
 80035c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80035ec:	f7ff fa64 	bl	8002ab8 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035f2:	e015      	b.n	8003620 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80035f4:	f7ff fa60 	bl	8002ab8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003602:	d309      	bcc.n	8003618 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e00d      	b.n	8003634 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e4      	bne.n	80035f4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_ETH_Start+0x16>
 800364e:	2302      	movs	r3, #2
 8003650:	e01f      	b.n	8003692 <HAL_ETH_Start+0x56>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa1c 	bl	8003aa0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fa36 	bl	8003ada <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa80 	bl	8003b74 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fa4d 	bl	8003b14 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa62 	bl	8003b44 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b0b0      	sub	sp, #192	; 0xc0
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80036ca:	2300      	movs	r3, #0
 80036cc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80036e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
 80036e8:	e001      	b.n	80036ee <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80036ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80036f8:	2300      	movs	r3, #0
 80036fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003708:	2340      	movs	r3, #64	; 0x40
 800370a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003770:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003774:	4bab      	ldr	r3, [pc, #684]	; (8003a24 <ETH_MACDMAConfig+0x388>)
 8003776:	4013      	ands	r3, r2
 8003778:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800377c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800377e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003780:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003784:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003788:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800378e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003792:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003796:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800379c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800379e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80037a0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80037a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80037a4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80037a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80037a8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80037ac:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80037b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80037b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7ff f97d 	bl	8002ad0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037de:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80037e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037e4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80037e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80037e8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80037ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80037ee:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80037f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80037f4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80037f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80037fa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80037fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003800:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003804:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800380c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800380e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800381a:	2001      	movs	r0, #1
 800381c:	f7ff f958 	bl	8002ad0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003828:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003832:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800383c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003848:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800384c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003850:	4013      	ands	r3, r2
 8003852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003856:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800385a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800385c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003860:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003866:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800386c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800386e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003872:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003878:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800387a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800388c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003898:	2001      	movs	r0, #1
 800389a:	f7ff f919 	bl	8002ad0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038a6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038a8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80038ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7ff f904 	bl	8002ad0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038d0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80038d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038da:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80038e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038e4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80038f6:	2304      	movs	r3, #4
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80038fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800390c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003916:	2300      	movs	r3, #0
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800391a:	2300      	movs	r3, #0
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f241 0318 	movw	r3, #4120	; 0x1018
 8003926:	4413      	add	r3, r2
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800392e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <ETH_MACDMAConfig+0x38c>)
 8003934:	4013      	ands	r3, r2
 8003936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800393a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800393c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800393e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003940:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003942:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003944:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003946:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003948:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800394a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800394c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800394e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003950:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003952:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003956:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800395a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800395c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f241 0318 	movw	r3, #4120	; 0x1018
 800396e:	4413      	add	r3, r2
 8003970:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003974:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	f241 0318 	movw	r3, #4120	; 0x1018
 800397e:	4413      	add	r3, r2
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003986:	2001      	movs	r0, #1
 8003988:	f7ff f8a2 	bl	8002ad0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	f241 0318 	movw	r3, #4120	; 0x1018
 8003994:	4413      	add	r3, r2
 8003996:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800399a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800399c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039a0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80039a4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039a8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80039aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80039ac:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80039ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80039b2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80039b6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f7ff f87b 	bl	8002ad0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039e6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	f241 031c 	movw	r3, #4124	; 0x101c
 80039f8:	4413      	add	r3, r2
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6811      	ldr	r1, [r2, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <ETH_MACDMAConfig+0x390>)
 8003a02:	431a      	orrs	r2, r3
 8003a04:	f241 031c 	movw	r3, #4124	; 0x101c
 8003a08:	440b      	add	r3, r1
 8003a0a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	461a      	mov	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f80b 	bl	8003a30 <ETH_MACAddressConfig>
}
 8003a1a:	bf00      	nop
 8003a1c:	37c0      	adds	r7, #192	; 0xc0
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	ff20810f 	.word	0xff20810f
 8003a28:	f8de3f23 	.word	0xf8de3f23
 8003a2c:	00010040 	.word	0x00010040

08003a30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3305      	adds	r3, #5
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	3204      	adds	r2, #4
 8003a48:	7812      	ldrb	r2, [r2, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <ETH_MACAddressConfig+0x68>)
 8003a52:	4413      	add	r3, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3303      	adds	r3, #3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	061a      	lsls	r2, r3, #24
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3302      	adds	r3, #2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	4313      	orrs	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <ETH_MACAddressConfig+0x6c>)
 8003a82:	4413      	add	r3, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40028040 	.word	0x40028040
 8003a9c:	40028044 	.word	0x40028044

08003aa0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0208 	orr.w	r2, r2, #8
 8003aba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f7ff f803 	bl	8002ad0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0204 	orr.w	r2, r2, #4
 8003af4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003afe:	2001      	movs	r0, #1
 8003b00:	f7fe ffe6 	bl	8002ad0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b24:	4413      	add	r3, r2
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6811      	ldr	r1, [r2, #0]
 8003b2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b30:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b34:	440b      	add	r3, r1
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b54:	4413      	add	r3, r2
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6811      	ldr	r1, [r2, #0]
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b64:	440b      	add	r3, r1
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b88:	4413      	add	r3, r2
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6811      	ldr	r1, [r2, #0]
 8003b90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b94:	f241 0318 	movw	r3, #4120	; 0x1018
 8003b98:	440b      	add	r3, r1
 8003b9a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	f241 0318 	movw	r3, #4120	; 0x1018
 8003ba4:	4413      	add	r3, r2
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fe ff90 	bl	8002ad0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	f241 0318 	movw	r3, #4120	; 0x1018
 8003bba:	440b      	add	r3, r1
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e175      	b.n	8003ed4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 8164 	bne.w	8003ece <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x4e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b12      	cmp	r3, #18
 8003c14:	d123      	bne.n	8003c5e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	08da      	lsrs	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3208      	adds	r2, #8
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0203 	and.w	r2, r3, #3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d00b      	beq.n	8003cb2 <HAL_GPIO_Init+0xea>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ca6:	2b11      	cmp	r3, #17
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b12      	cmp	r3, #18
 8003cb0:	d130      	bne.n	8003d14 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 0201 	and.w	r2, r3, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2203      	movs	r2, #3
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80be 	beq.w	8003ece <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_GPIO_Init+0x320>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4a64      	ldr	r2, [pc, #400]	; (8003ee8 <HAL_GPIO_Init+0x320>)
 8003d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5e:	4b62      	ldr	r3, [pc, #392]	; (8003ee8 <HAL_GPIO_Init+0x320>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d6a:	4a60      	ldr	r2, [pc, #384]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3302      	adds	r3, #2
 8003d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_GPIO_Init+0x328>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d037      	beq.n	8003e06 <HAL_GPIO_Init+0x23e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a56      	ldr	r2, [pc, #344]	; (8003ef4 <HAL_GPIO_Init+0x32c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d031      	beq.n	8003e02 <HAL_GPIO_Init+0x23a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a55      	ldr	r2, [pc, #340]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <HAL_GPIO_Init+0x236>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a54      	ldr	r2, [pc, #336]	; (8003efc <HAL_GPIO_Init+0x334>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d025      	beq.n	8003dfa <HAL_GPIO_Init+0x232>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a53      	ldr	r2, [pc, #332]	; (8003f00 <HAL_GPIO_Init+0x338>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <HAL_GPIO_Init+0x22e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_GPIO_Init+0x33c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d019      	beq.n	8003df2 <HAL_GPIO_Init+0x22a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a51      	ldr	r2, [pc, #324]	; (8003f08 <HAL_GPIO_Init+0x340>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_GPIO_Init+0x226>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a50      	ldr	r2, [pc, #320]	; (8003f0c <HAL_GPIO_Init+0x344>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00d      	beq.n	8003dea <HAL_GPIO_Init+0x222>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4f      	ldr	r2, [pc, #316]	; (8003f10 <HAL_GPIO_Init+0x348>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x21e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4e      	ldr	r2, [pc, #312]	; (8003f14 <HAL_GPIO_Init+0x34c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_GPIO_Init+0x21a>
 8003dde:	2309      	movs	r3, #9
 8003de0:	e012      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003de2:	230a      	movs	r3, #10
 8003de4:	e010      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003de6:	2308      	movs	r3, #8
 8003de8:	e00e      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e00c      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e00a      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003df2:	2305      	movs	r3, #5
 8003df4:	e008      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e006      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e004      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e002      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003e06:	2300      	movs	r3, #0
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	f002 0203 	and.w	r2, r2, #3
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	4093      	lsls	r3, r2
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e18:	4934      	ldr	r1, [pc, #208]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	3302      	adds	r3, #2
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e26:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4a:	4a33      	ldr	r2, [pc, #204]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e74:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7a:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec8:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_GPIO_Init+0x350>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	f67f ae86 	bls.w	8003be8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003edc:	bf00      	nop
 8003ede:	3724      	adds	r7, #36	; 0x24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	40020400 	.word	0x40020400
 8003ef8:	40020800 	.word	0x40020800
 8003efc:	40020c00 	.word	0x40020c00
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40021400 	.word	0x40021400
 8003f08:	40021800 	.word	0x40021800
 8003f0c:	40021c00 	.word	0x40021c00
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40022400 	.word	0x40022400
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e001      	b.n	8003f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f68:	e003      	b.n	8003f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a22      	ldr	r2, [pc, #136]	; (8004018 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fae:	f7fe fd83 	bl	8002ab8 <HAL_GetTick>
 8003fb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fb4:	e009      	b.n	8003fca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fb6:	f7fe fd7f 	bl	8002ab8 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fc4:	d901      	bls.n	8003fca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e022      	b.n	8004010 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d1ee      	bne.n	8003fb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0f      	ldr	r2, [pc, #60]	; (800401c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe4:	f7fe fd68 	bl	8002ab8 <HAL_GetTick>
 8003fe8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fea:	e009      	b.n	8004000 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fec:	f7fe fd64 	bl	8002ab8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ffa:	d901      	bls.n	8004000 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e007      	b.n	8004010 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400c:	d1ee      	bne.n	8003fec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	40007000 	.word	0x40007000

08004020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e25e      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8087 	beq.w	8004152 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004044:	4b96      	ldr	r3, [pc, #600]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b04      	cmp	r3, #4
 800404e:	d00c      	beq.n	800406a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004050:	4b93      	ldr	r3, [pc, #588]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	d112      	bne.n	8004082 <HAL_RCC_OscConfig+0x62>
 800405c:	4b90      	ldr	r3, [pc, #576]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004068:	d10b      	bne.n	8004082 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406a:	4b8d      	ldr	r3, [pc, #564]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d06c      	beq.n	8004150 <HAL_RCC_OscConfig+0x130>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d168      	bne.n	8004150 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e238      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x7a>
 800408c:	4b84      	ldr	r3, [pc, #528]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e02e      	b.n	80040f8 <HAL_RCC_OscConfig+0xd8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x9c>
 80040a2:	4b7f      	ldr	r3, [pc, #508]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a7e      	ldr	r2, [pc, #504]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b7c      	ldr	r3, [pc, #496]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7b      	ldr	r2, [pc, #492]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e01d      	b.n	80040f8 <HAL_RCC_OscConfig+0xd8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0xc0>
 80040c6:	4b76      	ldr	r3, [pc, #472]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a75      	ldr	r2, [pc, #468]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b73      	ldr	r3, [pc, #460]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a72      	ldr	r2, [pc, #456]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0xd8>
 80040e0:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6e      	ldr	r2, [pc, #440]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b6c      	ldr	r3, [pc, #432]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6b      	ldr	r2, [pc, #428]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe fcda 	bl	8002ab8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fcd6 	bl	8002ab8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1ec      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0xe8>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe fcc6 	bl	8002ab8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe fcc2 	bl	8002ab8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1d8      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	4b57      	ldr	r3, [pc, #348]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x110>
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d069      	beq.n	8004232 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800415e:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416a:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b08      	cmp	r3, #8
 8004174:	d11c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x190>
 8004176:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d116      	bne.n	80041b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RCC_OscConfig+0x17a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e1ac      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	493d      	ldr	r1, [pc, #244]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	e040      	b.n	8004232 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d023      	beq.n	8004200 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b8:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a38      	ldr	r2, [pc, #224]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fe fc78 	bl	8002ab8 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f7fe fc74 	bl	8002ab8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e18a      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041de:	4b30      	ldr	r3, [pc, #192]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4929      	ldr	r1, [pc, #164]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
 80041fe:	e018      	b.n	8004232 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fe fc54 	bl	8002ab8 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004214:	f7fe fc50 	bl	8002ab8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e166      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d038      	beq.n	80042b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d019      	beq.n	800427a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004246:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fe fc31 	bl	8002ab8 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425a:	f7fe fc2d 	bl	8002ab8 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e143      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x23a>
 8004278:	e01a      	b.n	80042b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 800427c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427e:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <HAL_RCC_OscConfig+0x280>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fe fc17 	bl	8002ab8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428e:	f7fe fc13 	bl	8002ab8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d903      	bls.n	80042a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e129      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
 80042a0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a4:	4b95      	ldr	r3, [pc, #596]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80042a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ee      	bne.n	800428e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80a4 	beq.w	8004406 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	4b8f      	ldr	r3, [pc, #572]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4b8c      	ldr	r3, [pc, #560]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4a8b      	ldr	r2, [pc, #556]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	; 0x40
 80042d6:	4b89      	ldr	r3, [pc, #548]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b86      	ldr	r3, [pc, #536]	; (8004500 <HAL_RCC_OscConfig+0x4e0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042f2:	4b83      	ldr	r3, [pc, #524]	; (8004500 <HAL_RCC_OscConfig+0x4e0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a82      	ldr	r2, [pc, #520]	; (8004500 <HAL_RCC_OscConfig+0x4e0>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fe fbdb 	bl	8002ab8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fe fbd7 	bl	8002ab8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	; 0x64
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0ed      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004318:	4b79      	ldr	r3, [pc, #484]	; (8004500 <HAL_RCC_OscConfig+0x4e0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x31a>
 800432c:	4b73      	ldr	r3, [pc, #460]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a72      	ldr	r2, [pc, #456]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
 8004338:	e02d      	b.n	8004396 <HAL_RCC_OscConfig+0x376>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x33c>
 8004342:	4b6e      	ldr	r3, [pc, #440]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a6d      	ldr	r2, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	4b6b      	ldr	r3, [pc, #428]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a6a      	ldr	r2, [pc, #424]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
 800435a:	e01c      	b.n	8004396 <HAL_RCC_OscConfig+0x376>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b05      	cmp	r3, #5
 8004362:	d10c      	bne.n	800437e <HAL_RCC_OscConfig+0x35e>
 8004364:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	4a64      	ldr	r2, [pc, #400]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6713      	str	r3, [r2, #112]	; 0x70
 8004370:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a61      	ldr	r2, [pc, #388]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
 800437c:	e00b      	b.n	8004396 <HAL_RCC_OscConfig+0x376>
 800437e:	4b5f      	ldr	r3, [pc, #380]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a5e      	ldr	r2, [pc, #376]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	4b5c      	ldr	r3, [pc, #368]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a5b      	ldr	r2, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d015      	beq.n	80043ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fe fb8b 	bl	8002ab8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fe fb87 	bl	8002ab8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e09b      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	4b4f      	ldr	r3, [pc, #316]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ee      	beq.n	80043a6 <HAL_RCC_OscConfig+0x386>
 80043c8:	e014      	b.n	80043f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fe fb75 	bl	8002ab8 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fe fb71 	bl	8002ab8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e085      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ee      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fa:	4b40      	ldr	r3, [pc, #256]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a3f      	ldr	r2, [pc, #252]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d071      	beq.n	80044f2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b08      	cmp	r3, #8
 8004418:	d069      	beq.n	80044ee <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d14b      	bne.n	80044ba <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fe fb43 	bl	8002ab8 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004436:	f7fe fb3f 	bl	8002ab8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e055      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004448:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f0      	bne.n	8004436 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	019b      	lsls	r3, r3, #6
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	3b01      	subs	r3, #1
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	491e      	ldr	r1, [pc, #120]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 800448c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fe fb11 	bl	8002ab8 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449a:	f7fe fb0d 	bl	8002ab8 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e023      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x47a>
 80044b8:	e01b      	b.n	80044f2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0f      	ldr	r2, [pc, #60]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80044c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe faf7 	bl	8002ab8 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe faf3 	bl	8002ab8 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e009      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCC_OscConfig+0x4dc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x4ae>
 80044ec:	e001      	b.n	80044f2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0ce      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800451c:	4b69      	ldr	r3, [pc, #420]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d910      	bls.n	800454c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 020f 	bic.w	r2, r3, #15
 8004532:	4964      	ldr	r1, [pc, #400]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0b6      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004564:	4b58      	ldr	r3, [pc, #352]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a57      	ldr	r2, [pc, #348]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800457c:	4b52      	ldr	r3, [pc, #328]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a51      	ldr	r2, [pc, #324]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	494c      	ldr	r1, [pc, #304]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d040      	beq.n	8004628 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d115      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07d      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e071      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d6:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e069      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4935      	ldr	r1, [pc, #212]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fe fa5e 	bl	8002ab8 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fe fa5a 	bl	8002ab8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e051      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d210      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 020f 	bic.w	r2, r3, #15
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e030      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4915      	ldr	r1, [pc, #84]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	490d      	ldr	r1, [pc, #52]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004696:	f000 f81d 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 800469a:	4601      	mov	r1, r0
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	5cd3      	ldrb	r3, [r2, r3]
 80046aa:	fa21 f303 	lsr.w	r3, r1, r3
 80046ae:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <HAL_RCC_ClockConfig+0x1cc>)
 80046b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fe f9bc 	bl	8002a30 <HAL_InitTick>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08017354 	.word	0x08017354
 80046d0:	2000006c 	.word	0x2000006c

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	2300      	movs	r3, #0
 80046e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ea:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d007      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x32>
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d008      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x38>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 80b4 	bne.w	8004868 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b5e      	ldr	r3, [pc, #376]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004702:	60bb      	str	r3, [r7, #8]
       break;
 8004704:	e0b3      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004706:	4b5e      	ldr	r3, [pc, #376]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004708:	60bb      	str	r3, [r7, #8]
      break;
 800470a:	e0b0      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800470c:	4b5a      	ldr	r3, [pc, #360]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004714:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004716:	4b58      	ldr	r3, [pc, #352]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04a      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004722:	4b55      	ldr	r3, [pc, #340]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	f04f 0400 	mov.w	r4, #0
 800472c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	ea03 0501 	and.w	r5, r3, r1
 8004738:	ea04 0602 	and.w	r6, r4, r2
 800473c:	4629      	mov	r1, r5
 800473e:	4632      	mov	r2, r6
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	0154      	lsls	r4, r2, #5
 800474a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800474e:	014b      	lsls	r3, r1, #5
 8004750:	4619      	mov	r1, r3
 8004752:	4622      	mov	r2, r4
 8004754:	1b49      	subs	r1, r1, r5
 8004756:	eb62 0206 	sbc.w	r2, r2, r6
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	f04f 0400 	mov.w	r4, #0
 8004762:	0194      	lsls	r4, r2, #6
 8004764:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004768:	018b      	lsls	r3, r1, #6
 800476a:	1a5b      	subs	r3, r3, r1
 800476c:	eb64 0402 	sbc.w	r4, r4, r2
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	00e2      	lsls	r2, r4, #3
 800477a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800477e:	00d9      	lsls	r1, r3, #3
 8004780:	460b      	mov	r3, r1
 8004782:	4614      	mov	r4, r2
 8004784:	195b      	adds	r3, r3, r5
 8004786:	eb44 0406 	adc.w	r4, r4, r6
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	0262      	lsls	r2, r4, #9
 8004794:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004798:	0259      	lsls	r1, r3, #9
 800479a:	460b      	mov	r3, r1
 800479c:	4614      	mov	r4, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	4621      	mov	r1, r4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f04f 0400 	mov.w	r4, #0
 80047a8:	461a      	mov	r2, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	f7fb fdb0 	bl	8000310 <__aeabi_uldivmod>
 80047b0:	4603      	mov	r3, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e049      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	f04f 0400 	mov.w	r4, #0
 80047c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	ea03 0501 	and.w	r5, r3, r1
 80047ce:	ea04 0602 	and.w	r6, r4, r2
 80047d2:	4629      	mov	r1, r5
 80047d4:	4632      	mov	r2, r6
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	f04f 0400 	mov.w	r4, #0
 80047de:	0154      	lsls	r4, r2, #5
 80047e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047e4:	014b      	lsls	r3, r1, #5
 80047e6:	4619      	mov	r1, r3
 80047e8:	4622      	mov	r2, r4
 80047ea:	1b49      	subs	r1, r1, r5
 80047ec:	eb62 0206 	sbc.w	r2, r2, r6
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	f04f 0400 	mov.w	r4, #0
 80047f8:	0194      	lsls	r4, r2, #6
 80047fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047fe:	018b      	lsls	r3, r1, #6
 8004800:	1a5b      	subs	r3, r3, r1
 8004802:	eb64 0402 	sbc.w	r4, r4, r2
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	00e2      	lsls	r2, r4, #3
 8004810:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004814:	00d9      	lsls	r1, r3, #3
 8004816:	460b      	mov	r3, r1
 8004818:	4614      	mov	r4, r2
 800481a:	195b      	adds	r3, r3, r5
 800481c:	eb44 0406 	adc.w	r4, r4, r6
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	02a2      	lsls	r2, r4, #10
 800482a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800482e:	0299      	lsls	r1, r3, #10
 8004830:	460b      	mov	r3, r1
 8004832:	4614      	mov	r4, r2
 8004834:	4618      	mov	r0, r3
 8004836:	4621      	mov	r1, r4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f04f 0400 	mov.w	r4, #0
 800483e:	461a      	mov	r2, r3
 8004840:	4623      	mov	r3, r4
 8004842:	f7fb fd65 	bl	8000310 <__aeabi_uldivmod>
 8004846:	4603      	mov	r3, r0
 8004848:	460c      	mov	r4, r1
 800484a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	60bb      	str	r3, [r7, #8]
      break;
 8004866:	e002      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800486a:	60bb      	str	r3, [r7, #8]
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	68bb      	ldr	r3, [r7, #8]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000006c 	.word	0x2000006c

0800489c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e084      	b.n	80049b8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fd fc7d 	bl	80021c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ee:	d902      	bls.n	80048f6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e002      	b.n	80048fc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004904:	d007      	beq.n	8004916 <HAL_SPI_Init+0x7a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004926:	d903      	bls.n	8004930 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
 800492e:	e002      	b.n	8004936 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0204 	and.w	r2, r3, #4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	ea42 0103 	orr.w	r1, r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_SPI_Transmit+0x22>
 80049de:	2302      	movs	r3, #2
 80049e0:	e150      	b.n	8004c84 <HAL_SPI_Transmit+0x2c4>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ea:	f7fe f865 	bl	8002ab8 <HAL_GetTick>
 80049ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
 8004a02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a04:	e135      	b.n	8004c72 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Transmit+0x52>
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a16:	e12c      	b.n	8004c72 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a62:	d107      	bne.n	8004a74 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d007      	beq.n	8004a92 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a9a:	d94b      	bls.n	8004b34 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Transmit+0xea>
 8004aa4:	8afb      	ldrh	r3, [r7, #22]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d13e      	bne.n	8004b28 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	1c9a      	adds	r2, r3, #2
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ace:	e02b      	b.n	8004b28 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d112      	bne.n	8004b04 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	881a      	ldrh	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	1c9a      	adds	r2, r3, #2
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b02:	e011      	b.n	8004b28 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b04:	f7fd ffd8 	bl	8002ab8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d803      	bhi.n	8004b1c <HAL_SPI_Transmit+0x15c>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1a:	d102      	bne.n	8004b22 <HAL_SPI_Transmit+0x162>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b26:	e0a4      	b.n	8004c72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ce      	bne.n	8004ad0 <HAL_SPI_Transmit+0x110>
 8004b32:	e07c      	b.n	8004c2e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Transmit+0x182>
 8004b3c:	8afb      	ldrh	r3, [r7, #22]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d170      	bne.n	8004c24 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d912      	bls.n	8004b72 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b02      	subs	r3, #2
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b70:	e058      	b.n	8004c24 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b98:	e044      	b.n	8004c24 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d12b      	bne.n	8004c00 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d912      	bls.n	8004bd8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	1c9a      	adds	r2, r3, #2
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b02      	subs	r3, #2
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd6:	e025      	b.n	8004c24 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bfe:	e011      	b.n	8004c24 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c00:	f7fd ff5a 	bl	8002ab8 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d803      	bhi.n	8004c18 <HAL_SPI_Transmit+0x258>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c16:	d102      	bne.n	8004c1e <HAL_SPI_Transmit+0x25e>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c22:	e026      	b.n	8004c72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1b5      	bne.n	8004b9a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fc94 	bl	8005560 <SPI_EndRxTxTransaction>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]
 8004c6e:	e000      	b.n	8004c72 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004c70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca8:	d112      	bne.n	8004cd0 <HAL_SPI_Receive+0x44>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f908 	bl	8004edc <HAL_SPI_TransmitReceive>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	e101      	b.n	8004ed4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_SPI_Receive+0x52>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0fa      	b.n	8004ed4 <HAL_SPI_Receive+0x248>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce6:	f7fd fee7 	bl	8002ab8 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cfc:	e0e1      	b.n	8004ec2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_SPI_Receive+0x7e>
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d0e:	e0d8      	b.n	8004ec2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2204      	movs	r2, #4
 8004d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d5a:	d908      	bls.n	8004d6e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	e007      	b.n	8004d7e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d7c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d86:	d107      	bne.n	8004d98 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d007      	beq.n	8004db6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dbe:	d867      	bhi.n	8004e90 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004dc0:	e030      	b.n	8004e24 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d117      	bne.n	8004e00 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f103 020c 	add.w	r2, r3, #12
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dfe:	e011      	b.n	8004e24 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e00:	f7fd fe5a 	bl	8002ab8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d803      	bhi.n	8004e18 <HAL_SPI_Receive+0x18c>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e16:	d102      	bne.n	8004e1e <HAL_SPI_Receive+0x192>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e22:	e04e      	b.n	8004ec2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1c8      	bne.n	8004dc2 <HAL_SPI_Receive+0x136>
 8004e30:	e034      	b.n	8004e9c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d115      	bne.n	8004e6c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e6a:	e011      	b.n	8004e90 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6c:	f7fd fe24 	bl	8002ab8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d803      	bhi.n	8004e84 <HAL_SPI_Receive+0x1f8>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e82:	d102      	bne.n	8004e8a <HAL_SPI_Receive+0x1fe>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e8e:	e018      	b.n	8004ec2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ca      	bne.n	8004e32 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fb05 	bl	80054b0 <SPI_EndRxTransaction>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
 8004ebe:	e000      	b.n	8004ec2 <HAL_SPI_Receive+0x236>
  }

error :
 8004ec0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eea:	2301      	movs	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x26>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e1fb      	b.n	80052fa <HAL_SPI_TransmitReceive+0x41e>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0a:	f7fd fdd5 	bl	8002ab8 <HAL_GetTick>
 8004f0e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f16:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f22:	887b      	ldrh	r3, [r7, #2]
 8004f24:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f26:	7efb      	ldrb	r3, [r7, #27]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d00e      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x6e>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d106      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x66>
 8004f3c:	7efb      	ldrb	r3, [r7, #27]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
 8004f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f48:	e1cd      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x80>
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f62:	e1c0      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d003      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2205      	movs	r2, #5
 8004f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	887a      	ldrh	r2, [r7, #2]
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fba:	d802      	bhi.n	8004fc2 <HAL_SPI_TransmitReceive+0xe6>
 8004fbc:	8a3b      	ldrh	r3, [r7, #16]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d908      	bls.n	8004fd4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e007      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d007      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800500a:	d97c      	bls.n	8005106 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_SPI_TransmitReceive+0x13e>
 8005014:	8a7b      	ldrh	r3, [r7, #18]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d169      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503e:	e056      	b.n	80050ee <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b02      	cmp	r3, #2
 800504c:	d11b      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x1aa>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d016      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x1aa>
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2b01      	cmp	r3, #1
 800505c:	d113      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	1c9a      	adds	r2, r3, #2
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b01      	cmp	r3, #1
 8005092:	d11c      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x1f2>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d016      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	b292      	uxth	r2, r2
 80050ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	1c9a      	adds	r2, r3, #2
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ca:	2301      	movs	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050ce:	f7fd fcf3 	bl	8002ab8 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	429a      	cmp	r2, r3
 80050dc:	d807      	bhi.n	80050ee <HAL_SPI_TransmitReceive+0x212>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e4:	d003      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050ec:	e0fb      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1a3      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x164>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d19d      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x164>
 8005104:	e0df      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_SPI_TransmitReceive+0x23a>
 800510e:	8a7b      	ldrh	r3, [r7, #18]
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 80cb 	bne.w	80052ac <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d912      	bls.n	8005146 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b02      	subs	r3, #2
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005144:	e0b2      	b.n	80052ac <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	7812      	ldrb	r2, [r2, #0]
 8005152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800516c:	e09e      	b.n	80052ac <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d134      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x30a>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d02f      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x30a>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b01      	cmp	r3, #1
 800518a:	d12c      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d912      	bls.n	80051bc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	881a      	ldrh	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	1c9a      	adds	r2, r3, #2
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b02      	subs	r3, #2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ba:	e012      	b.n	80051e2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d148      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x3aa>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d042      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d923      	bls.n	8005254 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	b292      	uxth	r2, r2
 8005218:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b02      	subs	r3, #2
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d81f      	bhi.n	8005282 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e016      	b.n	8005282 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f103 020c 	add.w	r2, r3, #12
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005282:	2301      	movs	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005286:	f7fd fc17 	bl	8002ab8 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005292:	429a      	cmp	r2, r3
 8005294:	d803      	bhi.n	800529e <HAL_SPI_TransmitReceive+0x3c2>
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x3c8>
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052aa:	e01c      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f47f af5b 	bne.w	800516e <HAL_SPI_TransmitReceive+0x292>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f47f af54 	bne.w	800516e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f948 	bl	8005560 <SPI_EndRxTxTransaction>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	661a      	str	r2, [r3, #96]	; 0x60
 80052e2:	e000      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80052e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3728      	adds	r7, #40	; 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005312:	e04c      	b.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800531a:	d048      	beq.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800531c:	f7fd fbcc 	bl	8002ab8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d902      	bls.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x30>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d13d      	bne.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534a:	d111      	bne.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005354:	d004      	beq.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d107      	bne.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005378:	d10f      	bne.n	800539a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00f      	b.n	80053ce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d1a3      	bne.n	8005314 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80053e4:	e057      	b.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053ec:	d106      	bne.n	80053fc <SPI_WaitFifoStateUntilTimeout+0x26>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005402:	d048      	beq.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005404:	f7fd fb58 	bl	8002ab8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d902      	bls.n	800541a <SPI_WaitFifoStateUntilTimeout+0x44>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d13d      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005432:	d111      	bne.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d004      	beq.n	8005448 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005446:	d107      	bne.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005460:	d10f      	bne.n	8005482 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e008      	b.n	80054a8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d19f      	bne.n	80053e6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c4:	d111      	bne.n	80054ea <SPI_EndRxTransaction+0x3a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ce:	d004      	beq.n	80054da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d107      	bne.n	80054ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff ff04 	bl	8005302 <SPI_WaitFlagStateUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e023      	b.n	8005558 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005518:	d11d      	bne.n	8005556 <SPI_EndRxTransaction+0xa6>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005522:	d004      	beq.n	800552e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552c:	d113      	bne.n	8005556 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff ff4b 	bl	80053d6 <SPI_WaitFifoStateUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e000      	b.n	8005558 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff ff2c 	bl	80053d6 <SPI_WaitFifoStateUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e027      	b.n	80055e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff feaf 	bl	8005302 <SPI_WaitFlagStateUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e014      	b.n	80055e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ff05 	bl	80053d6 <SPI_WaitFifoStateUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e000      	b.n	80055e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = IP_ADDRESS0;
 80055f2:	4b8b      	ldr	r3, [pc, #556]	; (8005820 <MX_LWIP_Init+0x234>)
 80055f4:	22c0      	movs	r2, #192	; 0xc0
 80055f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = IP_ADDRESS1;
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <MX_LWIP_Init+0x234>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = IP_ADDRESS2;
 80055fe:	4b88      	ldr	r3, [pc, #544]	; (8005820 <MX_LWIP_Init+0x234>)
 8005600:	2202      	movs	r2, #2
 8005602:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = IP_ADDRESS3;
 8005604:	4b86      	ldr	r3, [pc, #536]	; (8005820 <MX_LWIP_Init+0x234>)
 8005606:	2202      	movs	r2, #2
 8005608:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = NETMASK_ADDRESS0;
 800560a:	4b86      	ldr	r3, [pc, #536]	; (8005824 <MX_LWIP_Init+0x238>)
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = NETMASK_ADDRESS1;
 8005610:	4b84      	ldr	r3, [pc, #528]	; (8005824 <MX_LWIP_Init+0x238>)
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = NETMASK_ADDRESS2;
 8005616:	4b83      	ldr	r3, [pc, #524]	; (8005824 <MX_LWIP_Init+0x238>)
 8005618:	22ff      	movs	r2, #255	; 0xff
 800561a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = NETMASK_ADDRESS3;
 800561c:	4b81      	ldr	r3, [pc, #516]	; (8005824 <MX_LWIP_Init+0x238>)
 800561e:	2200      	movs	r2, #0
 8005620:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = GATEWAY_ADDRESS0;
 8005622:	4b81      	ldr	r3, [pc, #516]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005624:	22c0      	movs	r2, #192	; 0xc0
 8005626:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = GATEWAY_ADDRESS1;
 8005628:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <MX_LWIP_Init+0x23c>)
 800562a:	2200      	movs	r2, #0
 800562c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = GATEWAY_ADDRESS2;
 800562e:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005630:	2202      	movs	r2, #2
 8005632:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = GATEWAY_ADDRESS3;
 8005634:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005636:	2201      	movs	r2, #1
 8005638:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800563a:	f000 fc19 	bl	8005e70 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800563e:	4b78      	ldr	r3, [pc, #480]	; (8005820 <MX_LWIP_Init+0x234>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	061a      	lsls	r2, r3, #24
 8005644:	4b76      	ldr	r3, [pc, #472]	; (8005820 <MX_LWIP_Init+0x234>)
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	431a      	orrs	r2, r3
 800564c:	4b74      	ldr	r3, [pc, #464]	; (8005820 <MX_LWIP_Init+0x234>)
 800564e:	789b      	ldrb	r3, [r3, #2]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	4313      	orrs	r3, r2
 8005654:	4a72      	ldr	r2, [pc, #456]	; (8005820 <MX_LWIP_Init+0x234>)
 8005656:	78d2      	ldrb	r2, [r2, #3]
 8005658:	4313      	orrs	r3, r2
 800565a:	061a      	lsls	r2, r3, #24
 800565c:	4b70      	ldr	r3, [pc, #448]	; (8005820 <MX_LWIP_Init+0x234>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	0619      	lsls	r1, r3, #24
 8005662:	4b6f      	ldr	r3, [pc, #444]	; (8005820 <MX_LWIP_Init+0x234>)
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	4319      	orrs	r1, r3
 800566a:	4b6d      	ldr	r3, [pc, #436]	; (8005820 <MX_LWIP_Init+0x234>)
 800566c:	789b      	ldrb	r3, [r3, #2]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	430b      	orrs	r3, r1
 8005672:	496b      	ldr	r1, [pc, #428]	; (8005820 <MX_LWIP_Init+0x234>)
 8005674:	78c9      	ldrb	r1, [r1, #3]
 8005676:	430b      	orrs	r3, r1
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800567e:	431a      	orrs	r2, r3
 8005680:	4b67      	ldr	r3, [pc, #412]	; (8005820 <MX_LWIP_Init+0x234>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	0619      	lsls	r1, r3, #24
 8005686:	4b66      	ldr	r3, [pc, #408]	; (8005820 <MX_LWIP_Init+0x234>)
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	4319      	orrs	r1, r3
 800568e:	4b64      	ldr	r3, [pc, #400]	; (8005820 <MX_LWIP_Init+0x234>)
 8005690:	789b      	ldrb	r3, [r3, #2]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	430b      	orrs	r3, r1
 8005696:	4962      	ldr	r1, [pc, #392]	; (8005820 <MX_LWIP_Init+0x234>)
 8005698:	78c9      	ldrb	r1, [r1, #3]
 800569a:	430b      	orrs	r3, r1
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056a2:	431a      	orrs	r2, r3
 80056a4:	4b5e      	ldr	r3, [pc, #376]	; (8005820 <MX_LWIP_Init+0x234>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	0619      	lsls	r1, r3, #24
 80056aa:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <MX_LWIP_Init+0x234>)
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	4319      	orrs	r1, r3
 80056b2:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <MX_LWIP_Init+0x234>)
 80056b4:	789b      	ldrb	r3, [r3, #2]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	430b      	orrs	r3, r1
 80056ba:	4959      	ldr	r1, [pc, #356]	; (8005820 <MX_LWIP_Init+0x234>)
 80056bc:	78c9      	ldrb	r1, [r1, #3]
 80056be:	430b      	orrs	r3, r1
 80056c0:	0e1b      	lsrs	r3, r3, #24
 80056c2:	4313      	orrs	r3, r2
 80056c4:	4a59      	ldr	r2, [pc, #356]	; (800582c <MX_LWIP_Init+0x240>)
 80056c6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80056c8:	4b56      	ldr	r3, [pc, #344]	; (8005824 <MX_LWIP_Init+0x238>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	061a      	lsls	r2, r3, #24
 80056ce:	4b55      	ldr	r3, [pc, #340]	; (8005824 <MX_LWIP_Init+0x238>)
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	431a      	orrs	r2, r3
 80056d6:	4b53      	ldr	r3, [pc, #332]	; (8005824 <MX_LWIP_Init+0x238>)
 80056d8:	789b      	ldrb	r3, [r3, #2]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	4313      	orrs	r3, r2
 80056de:	4a51      	ldr	r2, [pc, #324]	; (8005824 <MX_LWIP_Init+0x238>)
 80056e0:	78d2      	ldrb	r2, [r2, #3]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	061a      	lsls	r2, r3, #24
 80056e6:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <MX_LWIP_Init+0x238>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	0619      	lsls	r1, r3, #24
 80056ec:	4b4d      	ldr	r3, [pc, #308]	; (8005824 <MX_LWIP_Init+0x238>)
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	4319      	orrs	r1, r3
 80056f4:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <MX_LWIP_Init+0x238>)
 80056f6:	789b      	ldrb	r3, [r3, #2]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	430b      	orrs	r3, r1
 80056fc:	4949      	ldr	r1, [pc, #292]	; (8005824 <MX_LWIP_Init+0x238>)
 80056fe:	78c9      	ldrb	r1, [r1, #3]
 8005700:	430b      	orrs	r3, r1
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005708:	431a      	orrs	r2, r3
 800570a:	4b46      	ldr	r3, [pc, #280]	; (8005824 <MX_LWIP_Init+0x238>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	0619      	lsls	r1, r3, #24
 8005710:	4b44      	ldr	r3, [pc, #272]	; (8005824 <MX_LWIP_Init+0x238>)
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	4319      	orrs	r1, r3
 8005718:	4b42      	ldr	r3, [pc, #264]	; (8005824 <MX_LWIP_Init+0x238>)
 800571a:	789b      	ldrb	r3, [r3, #2]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	430b      	orrs	r3, r1
 8005720:	4940      	ldr	r1, [pc, #256]	; (8005824 <MX_LWIP_Init+0x238>)
 8005722:	78c9      	ldrb	r1, [r1, #3]
 8005724:	430b      	orrs	r3, r1
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800572c:	431a      	orrs	r2, r3
 800572e:	4b3d      	ldr	r3, [pc, #244]	; (8005824 <MX_LWIP_Init+0x238>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	0619      	lsls	r1, r3, #24
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <MX_LWIP_Init+0x238>)
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	4319      	orrs	r1, r3
 800573c:	4b39      	ldr	r3, [pc, #228]	; (8005824 <MX_LWIP_Init+0x238>)
 800573e:	789b      	ldrb	r3, [r3, #2]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	430b      	orrs	r3, r1
 8005744:	4937      	ldr	r1, [pc, #220]	; (8005824 <MX_LWIP_Init+0x238>)
 8005746:	78c9      	ldrb	r1, [r1, #3]
 8005748:	430b      	orrs	r3, r1
 800574a:	0e1b      	lsrs	r3, r3, #24
 800574c:	4313      	orrs	r3, r2
 800574e:	4a38      	ldr	r2, [pc, #224]	; (8005830 <MX_LWIP_Init+0x244>)
 8005750:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005752:	4b35      	ldr	r3, [pc, #212]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	061a      	lsls	r2, r3, #24
 8005758:	4b33      	ldr	r3, [pc, #204]	; (8005828 <MX_LWIP_Init+0x23c>)
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	431a      	orrs	r2, r3
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005762:	789b      	ldrb	r3, [r3, #2]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	4313      	orrs	r3, r2
 8005768:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <MX_LWIP_Init+0x23c>)
 800576a:	78d2      	ldrb	r2, [r2, #3]
 800576c:	4313      	orrs	r3, r2
 800576e:	061a      	lsls	r2, r3, #24
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	0619      	lsls	r1, r3, #24
 8005776:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	4319      	orrs	r1, r3
 800577e:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005780:	789b      	ldrb	r3, [r3, #2]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	430b      	orrs	r3, r1
 8005786:	4928      	ldr	r1, [pc, #160]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005788:	78c9      	ldrb	r1, [r1, #3]
 800578a:	430b      	orrs	r3, r1
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005792:	431a      	orrs	r2, r3
 8005794:	4b24      	ldr	r3, [pc, #144]	; (8005828 <MX_LWIP_Init+0x23c>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	0619      	lsls	r1, r3, #24
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <MX_LWIP_Init+0x23c>)
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	4319      	orrs	r1, r3
 80057a2:	4b21      	ldr	r3, [pc, #132]	; (8005828 <MX_LWIP_Init+0x23c>)
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	430b      	orrs	r3, r1
 80057aa:	491f      	ldr	r1, [pc, #124]	; (8005828 <MX_LWIP_Init+0x23c>)
 80057ac:	78c9      	ldrb	r1, [r1, #3]
 80057ae:	430b      	orrs	r3, r1
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057b6:	431a      	orrs	r2, r3
 80057b8:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <MX_LWIP_Init+0x23c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	0619      	lsls	r1, r3, #24
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <MX_LWIP_Init+0x23c>)
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	041b      	lsls	r3, r3, #16
 80057c4:	4319      	orrs	r1, r3
 80057c6:	4b18      	ldr	r3, [pc, #96]	; (8005828 <MX_LWIP_Init+0x23c>)
 80057c8:	789b      	ldrb	r3, [r3, #2]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	430b      	orrs	r3, r1
 80057ce:	4916      	ldr	r1, [pc, #88]	; (8005828 <MX_LWIP_Init+0x23c>)
 80057d0:	78c9      	ldrb	r1, [r1, #3]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	0e1b      	lsrs	r3, r3, #24
 80057d6:	4313      	orrs	r3, r2
 80057d8:	4a16      	ldr	r2, [pc, #88]	; (8005834 <MX_LWIP_Init+0x248>)
 80057da:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80057dc:	4b16      	ldr	r3, [pc, #88]	; (8005838 <MX_LWIP_Init+0x24c>)
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <MX_LWIP_Init+0x250>)
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	2300      	movs	r3, #0
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <MX_LWIP_Init+0x248>)
 80057ea:	4a11      	ldr	r2, [pc, #68]	; (8005830 <MX_LWIP_Init+0x244>)
 80057ec:	490f      	ldr	r1, [pc, #60]	; (800582c <MX_LWIP_Init+0x240>)
 80057ee:	4814      	ldr	r0, [pc, #80]	; (8005840 <MX_LWIP_Init+0x254>)
 80057f0:	f000 ff44 	bl	800667c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80057f4:	4812      	ldr	r0, [pc, #72]	; (8005840 <MX_LWIP_Init+0x254>)
 80057f6:	f001 f829 	bl	800684c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <MX_LWIP_Init+0x254>)
 80057fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005800:	089b      	lsrs	r3, r3, #2
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800580c:	480c      	ldr	r0, [pc, #48]	; (8005840 <MX_LWIP_Init+0x254>)
 800580e:	f001 f82d 	bl	800686c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005812:	e002      	b.n	800581a <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8005814:	480a      	ldr	r0, [pc, #40]	; (8005840 <MX_LWIP_Init+0x254>)
 8005816:	f001 f86d 	bl	80068f4 <netif_set_down>
}
 800581a:	bf00      	nop
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000f20 	.word	0x20000f20
 8005824:	20000f1c 	.word	0x20000f1c
 8005828:	20000ee4 	.word	0x20000ee4
 800582c:	20000f18 	.word	0x20000f18
 8005830:	20000f24 	.word	0x20000f24
 8005834:	20000f28 	.word	0x20000f28
 8005838:	0800f3dd 	.word	0x0800f3dd
 800583c:	08005db9 	.word	0x08005db9
 8005840:	20000ee8 	.word	0x20000ee8

08005844 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005848:	4803      	ldr	r0, [pc, #12]	; (8005858 <MX_LWIP_Process+0x14>)
 800584a:	f000 fa95 	bl	8005d78 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 800584e:	f007 fa4b 	bl	800cce8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000ee8 	.word	0x20000ee8

0800585c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08e      	sub	sp, #56	; 0x38
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	609a      	str	r2, [r3, #8]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <HAL_ETH_MspInit+0x11c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d178      	bne.n	8005970 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800587e:	4b3f      	ldr	r3, [pc, #252]	; (800597c <HAL_ETH_MspInit+0x120>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	4a3e      	ldr	r2, [pc, #248]	; (800597c <HAL_ETH_MspInit+0x120>)
 8005884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005888:	6313      	str	r3, [r2, #48]	; 0x30
 800588a:	4b3c      	ldr	r3, [pc, #240]	; (800597c <HAL_ETH_MspInit+0x120>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	4b39      	ldr	r3, [pc, #228]	; (800597c <HAL_ETH_MspInit+0x120>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	4a38      	ldr	r2, [pc, #224]	; (800597c <HAL_ETH_MspInit+0x120>)
 800589c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a0:	6313      	str	r3, [r2, #48]	; 0x30
 80058a2:	4b36      	ldr	r3, [pc, #216]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4b33      	ldr	r3, [pc, #204]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	4a32      	ldr	r2, [pc, #200]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058b8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ba:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058cc:	f043 0304 	orr.w	r3, r3, #4
 80058d0:	6313      	str	r3, [r2, #48]	; 0x30
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a20      	ldr	r2, [pc, #128]	; (800597c <HAL_ETH_MspInit+0x120>)
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b1e      	ldr	r3, [pc, #120]	; (800597c <HAL_ETH_MspInit+0x120>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800590e:	2332      	movs	r3, #50	; 0x32
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005912:	2302      	movs	r3, #2
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005916:	2300      	movs	r3, #0
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800591a:	2303      	movs	r3, #3
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800591e:	230b      	movs	r3, #11
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005926:	4619      	mov	r1, r3
 8005928:	4815      	ldr	r0, [pc, #84]	; (8005980 <HAL_ETH_MspInit+0x124>)
 800592a:	f7fe f94d 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800592e:	2386      	movs	r3, #134	; 0x86
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005932:	2302      	movs	r3, #2
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2300      	movs	r3, #0
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593a:	2303      	movs	r3, #3
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800593e:	230b      	movs	r3, #11
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005946:	4619      	mov	r1, r3
 8005948:	480e      	ldr	r0, [pc, #56]	; (8005984 <HAL_ETH_MspInit+0x128>)
 800594a:	f7fe f93d 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800594e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005954:	2302      	movs	r3, #2
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595c:	2303      	movs	r3, #3
 800595e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005960:	230b      	movs	r3, #11
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005968:	4619      	mov	r1, r3
 800596a:	4807      	ldr	r0, [pc, #28]	; (8005988 <HAL_ETH_MspInit+0x12c>)
 800596c:	f7fe f92c 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005970:	bf00      	nop
 8005972:	3738      	adds	r7, #56	; 0x38
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40028000 	.word	0x40028000
 800597c:	40023800 	.word	0x40023800
 8005980:	40020800 	.word	0x40020800
 8005984:	40020000 	.word	0x40020000
 8005988:	40021800 	.word	0x40021800

0800598c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005998:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <low_level_init+0x134>)
 800599a:	4a4a      	ldr	r2, [pc, #296]	; (8005ac4 <low_level_init+0x138>)
 800599c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800599e:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <low_level_init+0x134>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80059a4:	4b46      	ldr	r3, [pc, #280]	; (8005ac0 <low_level_init+0x134>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80059aa:	2300      	movs	r3, #0
 80059ac:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80059b2:	23e1      	movs	r3, #225	; 0xe1
 80059b4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80059b6:	2300      	movs	r3, #0
 80059b8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80059ba:	2300      	movs	r3, #0
 80059bc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80059be:	2300      	movs	r3, #0
 80059c0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80059c2:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <low_level_init+0x134>)
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80059ca:	4b3d      	ldr	r3, [pc, #244]	; (8005ac0 <low_level_init+0x134>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80059d0:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <low_level_init+0x134>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80059d6:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <low_level_init+0x134>)
 80059d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80059dc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80059de:	4838      	ldr	r0, [pc, #224]	; (8005ac0 <low_level_init+0x134>)
 80059e0:	f7fd f97e 	bl	8002ce0 <HAL_ETH_Init>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80059f4:	f043 0304 	orr.w	r3, r3, #4
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005a00:	2304      	movs	r3, #4
 8005a02:	4a31      	ldr	r2, [pc, #196]	; (8005ac8 <low_level_init+0x13c>)
 8005a04:	4931      	ldr	r1, [pc, #196]	; (8005acc <low_level_init+0x140>)
 8005a06:	482e      	ldr	r0, [pc, #184]	; (8005ac0 <low_level_init+0x134>)
 8005a08:	f7fd fb06 	bl	8003018 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <low_level_init+0x144>)
 8005a10:	4930      	ldr	r1, [pc, #192]	; (8005ad4 <low_level_init+0x148>)
 8005a12:	482b      	ldr	r0, [pc, #172]	; (8005ac0 <low_level_init+0x134>)
 8005a14:	f7fd fb69 	bl	80030ea <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2206      	movs	r2, #6
 8005a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <low_level_init+0x134>)
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005a2c:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <low_level_init+0x134>)
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	785a      	ldrb	r2, [r3, #1]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <low_level_init+0x134>)
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	789a      	ldrb	r2, [r3, #2]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005a44:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <low_level_init+0x134>)
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	78da      	ldrb	r2, [r3, #3]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <low_level_init+0x134>)
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	791a      	ldrb	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005a5c:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <low_level_init+0x134>)
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	795a      	ldrb	r2, [r3, #5]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a6e:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005a76:	f043 030a 	orr.w	r3, r3, #10
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005a82:	480f      	ldr	r0, [pc, #60]	; (8005ac0 <low_level_init+0x134>)
 8005a84:	f7fd fdda 	bl	800363c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005a88:	f107 0310 	add.w	r3, r7, #16
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	211d      	movs	r1, #29
 8005a90:	480b      	ldr	r0, [pc, #44]	; (8005ac0 <low_level_init+0x134>)
 8005a92:	f7fd fd05 	bl	80034a0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f043 030b 	orr.w	r3, r3, #11
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	211d      	movs	r1, #29
 8005aa4:	4806      	ldr	r0, [pc, #24]	; (8005ac0 <low_level_init+0x134>)
 8005aa6:	f7fd fd63 	bl	8003570 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005aaa:	f107 0310 	add.w	r3, r7, #16
 8005aae:	461a      	mov	r2, r3
 8005ab0:	211d      	movs	r1, #29
 8005ab2:	4803      	ldr	r0, [pc, #12]	; (8005ac0 <low_level_init+0x134>)
 8005ab4:	f7fd fcf4 	bl	80034a0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	200027fc 	.word	0x200027fc
 8005ac4:	40028000 	.word	0x40028000
 8005ac8:	20002844 	.word	0x20002844
 8005acc:	20000f2c 	.word	0x20000f2c
 8005ad0:	20000fac 	.word	0x20000fac
 8005ad4:	2000277c 	.word	0x2000277c

08005ad8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005ae2:	4b4b      	ldr	r3, [pc, #300]	; (8005c10 <low_level_output+0x138>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005afa:	4b45      	ldr	r3, [pc, #276]	; (8005c10 <low_level_output+0x138>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	e05a      	b.n	8005bc0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	da03      	bge.n	8005b1a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005b12:	23f8      	movs	r3, #248	; 0xf8
 8005b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005b18:	e05c      	b.n	8005bd4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	895b      	ldrh	r3, [r3, #10]
 8005b1e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005b24:	e02f      	b.n	8005b86 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	18d0      	adds	r0, r2, r3
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	18d1      	adds	r1, r2, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f00d f9d6 	bl	8012eee <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	da03      	bge.n	8005b58 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005b50:	23f8      	movs	r3, #248	; 0xf8
 8005b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005b56:	e03d      	b.n	8005bd4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005b68:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b74:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b80:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d8c8      	bhi.n	8005b26 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	18d0      	adds	r0, r2, r3
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f00d f9a2 	bl	8012eee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1a1      	bne.n	8005b0a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	4811      	ldr	r0, [pc, #68]	; (8005c10 <low_level_output+0x138>)
 8005bca:	f7fd fafb 	bl	80031c4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <low_level_output+0x138>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	f241 0314 	movw	r3, #4116	; 0x1014
 8005bdc:	4413      	add	r3, r2
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00d      	beq.n	8005c04 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <low_level_output+0x138>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f241 0314 	movw	r3, #4116	; 0x1014
 8005bf0:	4413      	add	r3, r2
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <low_level_output+0x138>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	f241 0304 	movw	r3, #4100	; 0x1004
 8005bfe:	4413      	add	r3, r2
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3728      	adds	r7, #40	; 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200027fc 	.word	0x200027fc

08005c14 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005c38:	484e      	ldr	r0, [pc, #312]	; (8005d74 <low_level_input+0x160>)
 8005c3a:	f7fd fbad 	bl	8003398 <HAL_ETH_GetReceivedFrame>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <low_level_input+0x34>
    return NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e091      	b.n	8005d6c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005c48:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <low_level_input+0x160>)
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005c4e:	4b49      	ldr	r3, [pc, #292]	; (8005d74 <low_level_input+0x160>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8005c54:	89fb      	ldrh	r3, [r7, #14]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	2004      	movs	r0, #4
 8005c62:	f000 fe99 	bl	8006998 <pbuf_alloc>
 8005c66:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d04b      	beq.n	8005d06 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005c6e:	4b41      	ldr	r3, [pc, #260]	; (8005d74 <low_level_input+0x160>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7c:	e040      	b.n	8005d00 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	895b      	ldrh	r3, [r3, #10]
 8005c82:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005c88:	e021      	b.n	8005cce <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	18d0      	adds	r0, r2, r3
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	18d1      	adds	r1, r2, r3
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f00d f924 	bl	8012eee <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005cbc:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005cc8:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d8d6      	bhi.n	8005c8a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	18d0      	adds	r0, r2, r3
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4619      	mov	r1, r3
 8005cee:	f00d f8fe 	bl	8012eee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1bb      	bne.n	8005c7e <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005d06:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <low_level_input+0x160>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e00b      	b.n	8005d2a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <low_level_input+0x160>)
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3ee      	bcc.n	8005d12 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <low_level_input+0x160>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8005d3a:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <low_level_input+0x160>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d42:	4413      	add	r3, r2
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00d      	beq.n	8005d6a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005d4e:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <low_level_input+0x160>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d56:	4413      	add	r3, r2
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <low_level_input+0x160>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f241 0308 	movw	r3, #4104	; 0x1008
 8005d64:	4413      	add	r3, r2
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3730      	adds	r7, #48	; 0x30
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200027fc 	.word	0x200027fc

08005d78 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff47 	bl	8005c14 <low_level_input>
 8005d86:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d010      	beq.n	8005db0 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	4798      	blx	r3
 8005d98:	4603      	mov	r3, r0
 8005d9a:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8005d9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d006      	beq.n	8005db2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f001 f969 	bl	800707c <pbuf_free>
    p = NULL;    
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e000      	b.n	8005db2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005db0:	bf00      	nop
  }
}
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <ethernetif_init+0x1c>
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <ethernetif_init+0x48>)
 8005dc8:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005dcc:	490d      	ldr	r1, [pc, #52]	; (8005e04 <ethernetif_init+0x4c>)
 8005dce:	480e      	ldr	r0, [pc, #56]	; (8005e08 <ethernetif_init+0x50>)
 8005dd0:	f00d fc2a 	bl	8013628 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2273      	movs	r2, #115	; 0x73
 8005dd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2274      	movs	r2, #116	; 0x74
 8005de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <ethernetif_init+0x54>)
 8005de8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <ethernetif_init+0x58>)
 8005dee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff fdcb 	bl	800598c <low_level_init>

  return ERR_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08014f7c 	.word	0x08014f7c
 8005e04:	08014f98 	.word	0x08014f98
 8005e08:	08014fa8 	.word	0x08014fa8
 8005e0c:	0800d911 	.word	0x0800d911
 8005e10:	08005ad9 	.word	0x08005ad9

08005e14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e18:	f7fc fe4e 	bl	8002ab8 <HAL_GetTick>
 8005e1c:	4603      	mov	r3, r0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	ba5b      	rev16	r3, r3
 8005e30:	b29b      	uxth	r3, r3
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	061a      	lsls	r2, r3, #24
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0e1b      	lsrs	r3, r3, #24
 8005e62:	4313      	orrs	r3, r2
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005e7a:	f000 f8a7 	bl	8005fcc <mem_init>
  memp_init();
 8005e7e:	f000 fb3b 	bl	80064f8 <memp_init>
  pbuf_init();
  netif_init();
 8005e82:	f000 fbf3 	bl	800666c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005e86:	f006 ff81 	bl	800cd8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005e8a:	f001 fc43 	bl	8007714 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8005e8e:	f006 fe5f 	bl	800cb50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005ea4:	4b40      	ldr	r3, [pc, #256]	; (8005fa8 <plug_holes+0x10c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d206      	bcs.n	8005ebc <plug_holes+0x20>
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <plug_holes+0x110>)
 8005eb0:	f240 125d 	movw	r2, #349	; 0x15d
 8005eb4:	493e      	ldr	r1, [pc, #248]	; (8005fb0 <plug_holes+0x114>)
 8005eb6:	483f      	ldr	r0, [pc, #252]	; (8005fb4 <plug_holes+0x118>)
 8005eb8:	f00d fbb6 	bl	8013628 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005ebc:	4b3e      	ldr	r3, [pc, #248]	; (8005fb8 <plug_holes+0x11c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d306      	bcc.n	8005ed4 <plug_holes+0x38>
 8005ec6:	4b39      	ldr	r3, [pc, #228]	; (8005fac <plug_holes+0x110>)
 8005ec8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005ecc:	493b      	ldr	r1, [pc, #236]	; (8005fbc <plug_holes+0x120>)
 8005ece:	4839      	ldr	r0, [pc, #228]	; (8005fb4 <plug_holes+0x118>)
 8005ed0:	f00d fbaa 	bl	8013628 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <plug_holes+0x4e>
 8005edc:	4b33      	ldr	r3, [pc, #204]	; (8005fac <plug_holes+0x110>)
 8005ede:	f240 125f 	movw	r2, #351	; 0x15f
 8005ee2:	4937      	ldr	r1, [pc, #220]	; (8005fc0 <plug_holes+0x124>)
 8005ee4:	4833      	ldr	r0, [pc, #204]	; (8005fb4 <plug_holes+0x118>)
 8005ee6:	f00d fb9f 	bl	8013628 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ef2:	d906      	bls.n	8005f02 <plug_holes+0x66>
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <plug_holes+0x110>)
 8005ef6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005efa:	4932      	ldr	r1, [pc, #200]	; (8005fc4 <plug_holes+0x128>)
 8005efc:	482d      	ldr	r0, [pc, #180]	; (8005fb4 <plug_holes+0x118>)
 8005efe:	f00d fb93 	bl	8013628 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <plug_holes+0x10c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d01f      	beq.n	8005f56 <plug_holes+0xba>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	791b      	ldrb	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11b      	bne.n	8005f56 <plug_holes+0xba>
 8005f1e:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <plug_holes+0x11c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d016      	beq.n	8005f56 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005f28:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <plug_holes+0x12c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d102      	bne.n	8005f38 <plug_holes+0x9c>
      lfree = mem;
 8005f32:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <plug_holes+0x12c>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <plug_holes+0x10c>)
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	1a99      	subs	r1, r3, r2
 8005f48:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <plug_holes+0x10c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	8812      	ldrh	r2, [r2, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	b28a      	uxth	r2, r1
 8005f54:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005f56:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <plug_holes+0x10c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	8852      	ldrh	r2, [r2, #2]
 8005f5e:	4413      	add	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d01a      	beq.n	8005fa0 <plug_holes+0x104>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	791b      	ldrb	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d116      	bne.n	8005fa0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <plug_holes+0x12c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d102      	bne.n	8005f82 <plug_holes+0xe6>
      lfree = pmem;
 8005f7c:	4a12      	ldr	r2, [pc, #72]	; (8005fc8 <plug_holes+0x12c>)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a06      	ldr	r2, [pc, #24]	; (8005fa8 <plug_holes+0x10c>)
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	1a99      	subs	r1, r3, r2
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <plug_holes+0x10c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	8812      	ldrh	r2, [r2, #0]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	b28a      	uxth	r2, r1
 8005f9e:	805a      	strh	r2, [r3, #2]
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	2000026c 	.word	0x2000026c
 8005fac:	08014fd0 	.word	0x08014fd0
 8005fb0:	08015000 	.word	0x08015000
 8005fb4:	08015018 	.word	0x08015018
 8005fb8:	20000270 	.word	0x20000270
 8005fbc:	08015040 	.word	0x08015040
 8005fc0:	0801505c 	.word	0x0801505c
 8005fc4:	08015078 	.word	0x08015078
 8005fc8:	20000274 	.word	0x20000274

08005fcc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005fd2:	4b19      	ldr	r3, [pc, #100]	; (8006038 <mem_init+0x6c>)
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b17      	ldr	r3, [pc, #92]	; (800603c <mem_init+0x70>)
 8005fde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005fe0:	4b16      	ldr	r3, [pc, #88]	; (800603c <mem_init+0x70>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005fec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <mem_init+0x70>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8006002:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <mem_init+0x74>)
 8006004:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006006:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <mem_init+0x74>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2201      	movs	r2, #1
 800600c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <mem_init+0x74>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006016:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <mem_init+0x74>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006020:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <mem_init+0x70>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a07      	ldr	r2, [pc, #28]	; (8006044 <mem_init+0x78>)
 8006028:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	2000402c 	.word	0x2000402c
 800603c:	2000026c 	.word	0x2000026c
 8006040:	20000270 	.word	0x20000270
 8006044:	20000274 	.word	0x20000274

08006048 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d043      	beq.n	80060de <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <mem_free+0x26>
 8006060:	4b22      	ldr	r3, [pc, #136]	; (80060ec <mem_free+0xa4>)
 8006062:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006066:	4922      	ldr	r1, [pc, #136]	; (80060f0 <mem_free+0xa8>)
 8006068:	4822      	ldr	r0, [pc, #136]	; (80060f4 <mem_free+0xac>)
 800606a:	f00d fadd 	bl	8013628 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800606e:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <mem_free+0xb0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d304      	bcc.n	8006082 <mem_free+0x3a>
 8006078:	4b20      	ldr	r3, [pc, #128]	; (80060fc <mem_free+0xb4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	429a      	cmp	r2, r3
 8006080:	d306      	bcc.n	8006090 <mem_free+0x48>
 8006082:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <mem_free+0xa4>)
 8006084:	f240 12af 	movw	r2, #431	; 0x1af
 8006088:	491d      	ldr	r1, [pc, #116]	; (8006100 <mem_free+0xb8>)
 800608a:	481a      	ldr	r0, [pc, #104]	; (80060f4 <mem_free+0xac>)
 800608c:	f00d facc 	bl	8013628 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006090:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <mem_free+0xb0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d323      	bcc.n	80060e2 <mem_free+0x9a>
 800609a:	4b18      	ldr	r3, [pc, #96]	; (80060fc <mem_free+0xb4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d21e      	bcs.n	80060e2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3b08      	subs	r3, #8
 80060a8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	791b      	ldrb	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <mem_free+0x78>
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <mem_free+0xa4>)
 80060b4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80060b8:	4912      	ldr	r1, [pc, #72]	; (8006104 <mem_free+0xbc>)
 80060ba:	480e      	ldr	r0, [pc, #56]	; (80060f4 <mem_free+0xac>)
 80060bc:	f00d fab4 	bl	8013628 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <mem_free+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d202      	bcs.n	80060d6 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80060d0:	4a0d      	ldr	r2, [pc, #52]	; (8006108 <mem_free+0xc0>)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fee0 	bl	8005e9c <plug_holes>
 80060dc:	e002      	b.n	80060e4 <mem_free+0x9c>
    return;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <mem_free+0x9c>
    return;
 80060e2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	08014fd0 	.word	0x08014fd0
 80060f0:	080150a4 	.word	0x080150a4
 80060f4:	08015018 	.word	0x08015018
 80060f8:	2000026c 	.word	0x2000026c
 80060fc:	20000270 	.word	0x20000270
 8006100:	080150c8 	.word	0x080150c8
 8006104:	080150e0 	.word	0x080150e0
 8006108:	20000274 	.word	0x20000274

0800610c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006118:	887b      	ldrh	r3, [r7, #2]
 800611a:	3303      	adds	r3, #3
 800611c:	b29b      	uxth	r3, r3
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	2b0b      	cmp	r3, #11
 8006128:	d801      	bhi.n	800612e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800612a:	230c      	movs	r3, #12
 800612c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006134:	d901      	bls.n	800613a <mem_trim+0x2e>
    return NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	e0b1      	b.n	800629e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800613a:	4b5b      	ldr	r3, [pc, #364]	; (80062a8 <mem_trim+0x19c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d304      	bcc.n	800614e <mem_trim+0x42>
 8006144:	4b59      	ldr	r3, [pc, #356]	; (80062ac <mem_trim+0x1a0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d306      	bcc.n	800615c <mem_trim+0x50>
 800614e:	4b58      	ldr	r3, [pc, #352]	; (80062b0 <mem_trim+0x1a4>)
 8006150:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006154:	4957      	ldr	r1, [pc, #348]	; (80062b4 <mem_trim+0x1a8>)
 8006156:	4858      	ldr	r0, [pc, #352]	; (80062b8 <mem_trim+0x1ac>)
 8006158:	f00d fa66 	bl	8013628 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800615c:	4b52      	ldr	r3, [pc, #328]	; (80062a8 <mem_trim+0x19c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d304      	bcc.n	8006170 <mem_trim+0x64>
 8006166:	4b51      	ldr	r3, [pc, #324]	; (80062ac <mem_trim+0x1a0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d301      	bcc.n	8006174 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	e094      	b.n	800629e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3b08      	subs	r3, #8
 8006178:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4a4a      	ldr	r2, [pc, #296]	; (80062a8 <mem_trim+0x19c>)
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	881a      	ldrh	r2, [r3, #0]
 8006188:	8a7b      	ldrh	r3, [r7, #18]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b08      	subs	r3, #8
 8006190:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	8a3b      	ldrh	r3, [r7, #16]
 8006196:	429a      	cmp	r2, r3
 8006198:	d906      	bls.n	80061a8 <mem_trim+0x9c>
 800619a:	4b45      	ldr	r3, [pc, #276]	; (80062b0 <mem_trim+0x1a4>)
 800619c:	f240 2206 	movw	r2, #518	; 0x206
 80061a0:	4946      	ldr	r1, [pc, #280]	; (80062bc <mem_trim+0x1b0>)
 80061a2:	4845      	ldr	r0, [pc, #276]	; (80062b8 <mem_trim+0x1ac>)
 80061a4:	f00d fa40 	bl	8013628 <iprintf>
  if (newsize > size) {
 80061a8:	887a      	ldrh	r2, [r7, #2]
 80061aa:	8a3b      	ldrh	r3, [r7, #16]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d901      	bls.n	80061b4 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e074      	b.n	800629e <mem_trim+0x192>
  }
  if (newsize == size) {
 80061b4:	887a      	ldrh	r2, [r7, #2]
 80061b6:	8a3b      	ldrh	r3, [r7, #16]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d101      	bne.n	80061c0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	e06e      	b.n	800629e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80061c0:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <mem_trim+0x19c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	4413      	add	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	791b      	ldrb	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d131      	bne.n	8006238 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80061da:	8a7a      	ldrh	r2, [r7, #18]
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	4413      	add	r3, r2
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3308      	adds	r3, #8
 80061e4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <mem_trim+0x1b4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d105      	bne.n	80061fc <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80061f0:	4b2d      	ldr	r3, [pc, #180]	; (80062a8 <mem_trim+0x19c>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	897b      	ldrh	r3, [r7, #10]
 80061f6:	4413      	add	r3, r2
 80061f8:	4a31      	ldr	r2, [pc, #196]	; (80062c0 <mem_trim+0x1b4>)
 80061fa:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80061fc:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <mem_trim+0x19c>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	897b      	ldrh	r3, [r7, #10]
 8006202:	4413      	add	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	893a      	ldrh	r2, [r7, #8]
 8006210:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8a7a      	ldrh	r2, [r7, #18]
 8006216:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	897a      	ldrh	r2, [r7, #10]
 800621c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006226:	d039      	beq.n	800629c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006228:	4b1f      	ldr	r3, [pc, #124]	; (80062a8 <mem_trim+0x19c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	8812      	ldrh	r2, [r2, #0]
 8006230:	4413      	add	r3, r2
 8006232:	897a      	ldrh	r2, [r7, #10]
 8006234:	805a      	strh	r2, [r3, #2]
 8006236:	e031      	b.n	800629c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	f103 0214 	add.w	r2, r3, #20
 800623e:	8a3b      	ldrh	r3, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d82b      	bhi.n	800629c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006244:	8a7a      	ldrh	r2, [r7, #18]
 8006246:	887b      	ldrh	r3, [r7, #2]
 8006248:	4413      	add	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	3308      	adds	r3, #8
 800624e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006250:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <mem_trim+0x19c>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	897b      	ldrh	r3, [r7, #10]
 8006256:	4413      	add	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800625a:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <mem_trim+0x1b4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d202      	bcs.n	800626a <mem_trim+0x15e>
      lfree = mem2;
 8006264:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <mem_trim+0x1b4>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8a7a      	ldrh	r2, [r7, #18]
 800627c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	897a      	ldrh	r2, [r7, #10]
 8006282:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800628c:	d006      	beq.n	800629c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <mem_trim+0x19c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	8812      	ldrh	r2, [r2, #0]
 8006296:	4413      	add	r3, r2
 8006298:	897a      	ldrh	r2, [r7, #10]
 800629a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800629c:	687b      	ldr	r3, [r7, #4]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	2000026c 	.word	0x2000026c
 80062ac:	20000270 	.word	0x20000270
 80062b0:	08014fd0 	.word	0x08014fd0
 80062b4:	080150f4 	.word	0x080150f4
 80062b8:	08015018 	.word	0x08015018
 80062bc:	0801510c 	.word	0x0801510c
 80062c0:	20000274 	.word	0x20000274

080062c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <mem_malloc+0x14>
    return NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e0c8      	b.n	800646a <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	3303      	adds	r3, #3
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	2b0b      	cmp	r3, #11
 80062e8:	d801      	bhi.n	80062ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80062ea:	230c      	movs	r3, #12
 80062ec:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80062f4:	d901      	bls.n	80062fa <mem_malloc+0x36>
    return NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e0b7      	b.n	800646a <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80062fa:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <mem_malloc+0x1b0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	4b5d      	ldr	r3, [pc, #372]	; (8006478 <mem_malloc+0x1b4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	83fb      	strh	r3, [r7, #30]
 8006308:	e0a7      	b.n	800645a <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800630a:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <mem_malloc+0x1b4>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	8bfb      	ldrh	r3, [r7, #30]
 8006310:	4413      	add	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	791b      	ldrb	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 8098 	bne.w	800644e <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	8bfb      	ldrh	r3, [r7, #30]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	f1a3 0208 	sub.w	r2, r3, #8
 800632c:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800632e:	429a      	cmp	r2, r3
 8006330:	f0c0 808d 	bcc.w	800644e <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	8bfb      	ldrh	r3, [r7, #30]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f1a3 0208 	sub.w	r2, r3, #8
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	3314      	adds	r3, #20
 8006346:	429a      	cmp	r2, r3
 8006348:	d327      	bcc.n	800639a <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800634a:	8bfa      	ldrh	r2, [r7, #30]
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	4413      	add	r3, r2
 8006350:	b29b      	uxth	r3, r3
 8006352:	3308      	adds	r3, #8
 8006354:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006356:	4b48      	ldr	r3, [pc, #288]	; (8006478 <mem_malloc+0x1b4>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	4413      	add	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	881a      	ldrh	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8bfa      	ldrh	r2, [r7, #30]
 8006372:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	8a7a      	ldrh	r2, [r7, #18]
 8006378:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2201      	movs	r2, #1
 800637e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006388:	d00a      	beq.n	80063a0 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800638a:	4b3b      	ldr	r3, [pc, #236]	; (8006478 <mem_malloc+0x1b4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	8812      	ldrh	r2, [r2, #0]
 8006392:	4413      	add	r3, r2
 8006394:	8a7a      	ldrh	r2, [r7, #18]
 8006396:	805a      	strh	r2, [r3, #2]
 8006398:	e002      	b.n	80063a0 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2201      	movs	r2, #1
 800639e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <mem_malloc+0x1b0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d127      	bne.n	80063fa <mem_malloc+0x136>
          struct mem *cur = lfree;
 80063aa:	4b32      	ldr	r3, [pc, #200]	; (8006474 <mem_malloc+0x1b0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80063b0:	e005      	b.n	80063be <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <mem_malloc+0x1b4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	8812      	ldrh	r2, [r2, #0]
 80063ba:	4413      	add	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <mem_malloc+0x10c>
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <mem_malloc+0x1b8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d1f0      	bne.n	80063b2 <mem_malloc+0xee>
          }
          lfree = cur;
 80063d0:	4a28      	ldr	r2, [pc, #160]	; (8006474 <mem_malloc+0x1b0>)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80063d6:	4b27      	ldr	r3, [pc, #156]	; (8006474 <mem_malloc+0x1b0>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b28      	ldr	r3, [pc, #160]	; (800647c <mem_malloc+0x1b8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d00b      	beq.n	80063fa <mem_malloc+0x136>
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <mem_malloc+0x1b0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	791b      	ldrb	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <mem_malloc+0x136>
 80063ec:	4b24      	ldr	r3, [pc, #144]	; (8006480 <mem_malloc+0x1bc>)
 80063ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80063f2:	4924      	ldr	r1, [pc, #144]	; (8006484 <mem_malloc+0x1c0>)
 80063f4:	4824      	ldr	r0, [pc, #144]	; (8006488 <mem_malloc+0x1c4>)
 80063f6:	f00d f917 	bl	8013628 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	3308      	adds	r3, #8
 8006402:	4a1e      	ldr	r2, [pc, #120]	; (800647c <mem_malloc+0x1b8>)
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	4293      	cmp	r3, r2
 8006408:	d906      	bls.n	8006418 <mem_malloc+0x154>
 800640a:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <mem_malloc+0x1bc>)
 800640c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8006410:	491e      	ldr	r1, [pc, #120]	; (800648c <mem_malloc+0x1c8>)
 8006412:	481d      	ldr	r0, [pc, #116]	; (8006488 <mem_malloc+0x1c4>)
 8006414:	f00d f908 	bl	8013628 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d006      	beq.n	8006430 <mem_malloc+0x16c>
 8006422:	4b17      	ldr	r3, [pc, #92]	; (8006480 <mem_malloc+0x1bc>)
 8006424:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006428:	4919      	ldr	r1, [pc, #100]	; (8006490 <mem_malloc+0x1cc>)
 800642a:	4817      	ldr	r0, [pc, #92]	; (8006488 <mem_malloc+0x1c4>)
 800642c:	f00d f8fc 	bl	8013628 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d006      	beq.n	8006448 <mem_malloc+0x184>
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <mem_malloc+0x1bc>)
 800643c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006440:	4914      	ldr	r1, [pc, #80]	; (8006494 <mem_malloc+0x1d0>)
 8006442:	4811      	ldr	r0, [pc, #68]	; (8006488 <mem_malloc+0x1c4>)
 8006444:	f00d f8f0 	bl	8013628 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	3308      	adds	r3, #8
 800644c:	e00d      	b.n	800646a <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <mem_malloc+0x1b4>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	8bfb      	ldrh	r3, [r7, #30]
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800645a:	8bfa      	ldrh	r2, [r7, #30]
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006462:	429a      	cmp	r2, r3
 8006464:	f4ff af51 	bcc.w	800630a <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000274 	.word	0x20000274
 8006478:	2000026c 	.word	0x2000026c
 800647c:	20000270 	.word	0x20000270
 8006480:	08014fd0 	.word	0x08014fd0
 8006484:	0801512c 	.word	0x0801512c
 8006488:	08015018 	.word	0x08015018
 800648c:	08015148 	.word	0x08015148
 8006490:	08015178 	.word	0x08015178
 8006494:	080151a8 	.word	0x080151a8

08006498 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	3303      	adds	r3, #3
 80064ae:	f023 0303 	bic.w	r3, r3, #3
 80064b2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e011      	b.n	80064de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	885b      	ldrh	r3, [r3, #2]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4293      	cmp	r3, r2
 80064e8:	dbe7      	blt.n	80064ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80064fe:	2300      	movs	r3, #0
 8006500:	80fb      	strh	r3, [r7, #6]
 8006502:	e009      	b.n	8006518 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	4a08      	ldr	r2, [pc, #32]	; (8006528 <memp_init+0x30>)
 8006508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ffc3 	bl	8006498 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	3301      	adds	r3, #1
 8006516:	80fb      	strh	r3, [r7, #6]
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	2b0a      	cmp	r3, #10
 800651c:	d9f2      	bls.n	8006504 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	080173e8 	.word	0x080173e8

0800652c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d012      	beq.n	8006568 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d006      	beq.n	8006564 <do_memp_malloc_pool+0x38>
 8006556:	4b07      	ldr	r3, [pc, #28]	; (8006574 <do_memp_malloc_pool+0x48>)
 8006558:	f240 1249 	movw	r2, #329	; 0x149
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <do_memp_malloc_pool+0x4c>)
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <do_memp_malloc_pool+0x50>)
 8006560:	f00d f862 	bl	8013628 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	e000      	b.n	800656a <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	080151cc 	.word	0x080151cc
 8006578:	080151fc 	.word	0x080151fc
 800657c:	08015220 	.word	0x08015220

08006580 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	2b0a      	cmp	r3, #10
 800658e:	d908      	bls.n	80065a2 <memp_malloc+0x22>
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <memp_malloc+0x3c>)
 8006592:	f240 1287 	movw	r2, #391	; 0x187
 8006596:	490a      	ldr	r1, [pc, #40]	; (80065c0 <memp_malloc+0x40>)
 8006598:	480a      	ldr	r0, [pc, #40]	; (80065c4 <memp_malloc+0x44>)
 800659a:	f00d f845 	bl	8013628 <iprintf>
 800659e:	2300      	movs	r3, #0
 80065a0:	e008      	b.n	80065b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <memp_malloc+0x48>)
 80065a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff ffbe 	bl	800652c <do_memp_malloc_pool>
 80065b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	080151cc 	.word	0x080151cc
 80065c0:	0801525c 	.word	0x0801525c
 80065c4:	08015220 	.word	0x08015220
 80065c8:	080173e8 	.word	0x080173e8

080065cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d006      	beq.n	80065ee <do_memp_free_pool+0x22>
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <do_memp_free_pool+0x40>)
 80065e2:	f240 129d 	movw	r2, #413	; 0x19d
 80065e6:	490a      	ldr	r1, [pc, #40]	; (8006610 <do_memp_free_pool+0x44>)
 80065e8:	480a      	ldr	r0, [pc, #40]	; (8006614 <do_memp_free_pool+0x48>)
 80065ea:	f00d f81d 	bl	8013628 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	080151cc 	.word	0x080151cc
 8006610:	0801527c 	.word	0x0801527c
 8006614:	08015220 	.word	0x08015220

08006618 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	2b0a      	cmp	r3, #10
 8006628:	d907      	bls.n	800663a <memp_free+0x22>
 800662a:	4b0c      	ldr	r3, [pc, #48]	; (800665c <memp_free+0x44>)
 800662c:	f240 12db 	movw	r2, #475	; 0x1db
 8006630:	490b      	ldr	r1, [pc, #44]	; (8006660 <memp_free+0x48>)
 8006632:	480c      	ldr	r0, [pc, #48]	; (8006664 <memp_free+0x4c>)
 8006634:	f00c fff8 	bl	8013628 <iprintf>
 8006638:	e00c      	b.n	8006654 <memp_free+0x3c>

  if (mem == NULL) {
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <memp_free+0x50>)
 8006644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff ffbe 	bl	80065cc <do_memp_free_pool>
 8006650:	e000      	b.n	8006654 <memp_free+0x3c>
    return;
 8006652:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	080151cc 	.word	0x080151cc
 8006660:	0801529c 	.word	0x0801529c
 8006664:	08015220 	.word	0x08015220
 8006668:	080173e8 	.word	0x080173e8

0800666c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006670:	bf00      	nop
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <netif_add+0x20>
 8006690:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <netif_add+0x94>)
 8006692:	22fb      	movs	r2, #251	; 0xfb
 8006694:	491f      	ldr	r1, [pc, #124]	; (8006714 <netif_add+0x98>)
 8006696:	4820      	ldr	r0, [pc, #128]	; (8006718 <netif_add+0x9c>)
 8006698:	f00c ffc6 	bl	8013628 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2203      	movs	r2, #3
 80066ba:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80066c4:	4b15      	ldr	r3, [pc, #84]	; (800671c <netif_add+0xa0>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	b2d1      	uxtb	r1, r2
 80066cc:	4a13      	ldr	r2, [pc, #76]	; (800671c <netif_add+0xa0>)
 80066ce:	7011      	strb	r1, [r2, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f81e 	bl	8006724 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	4798      	blx	r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <netif_add+0x7c>
    return NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e007      	b.n	8006708 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <netif_add+0xa4>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006700:	4a07      	ldr	r2, [pc, #28]	; (8006720 <netif_add+0xa4>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	080152b8 	.word	0x080152b8
 8006714:	080152ec 	.word	0x080152ec
 8006718:	08015304 	.word	0x08015304
 800671c:	200002a4 	.word	0x200002a4
 8006720:	2000769c 	.word	0x2000769c

08006724 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <netif_set_addr+0x1c>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10c      	bne.n	800675a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f81a 	bl	800677c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f86a 	bl	8006824 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f852 	bl	80067fc <netif_set_gw>
 8006758:	e00b      	b.n	8006772 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f861 	bl	8006824 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f849 	bl	80067fc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f805 	bl	800677c <netif_set_ipaddr>
  }
}
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <netif_set_ipaddr+0x18>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e002      	b.n	800679a <netif_set_ipaddr+0x1e>
 8006794:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <netif_set_ipaddr+0x7c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d024      	beq.n	80067f0 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	f107 020c 	add.w	r2, r7, #12
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f002 fb95 	bl	8008ee0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	f107 020c 	add.w	r2, r7, #12
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f006 fc0d 	bl	800cfe0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3304      	adds	r3, #4
 80067ca:	f107 020c 	add.w	r2, r7, #12
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 ff6f 	bl	80076b4 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <netif_set_ipaddr+0x66>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	e000      	b.n	80067e4 <netif_set_ipaddr+0x68>
 80067e2:	2300      	movs	r3, #0
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80067e8:	2101      	movs	r1, #1
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f861 	bl	80068b2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	08017454 	.word	0x08017454

080067fc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <netif_set_gw+0x16>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	e000      	b.n	8006814 <netif_set_gw+0x18>
 8006812:	2300      	movs	r3, #0
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <netif_set_netmask+0x16>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	e000      	b.n	800683c <netif_set_netmask+0x18>
 800683a:	2300      	movs	r3, #0
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006854:	4a04      	ldr	r2, [pc, #16]	; (8006868 <netif_set_default+0x1c>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	200076a0 	.word	0x200076a0

0800686c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d113      	bne.n	80068aa <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	b2da      	uxtb	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80068a2:	2103      	movs	r1, #3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f804 	bl	80068b2 <netif_issue_reports>
    }
  }
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d011      	beq.n	80068ec <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f007 fb48 	bl	800df7c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d012      	beq.n	8006930 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	b2da      	uxtb	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f006 fe9c 	bl	800d668 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <pbuf_free_ooseq+0x40>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006944:	4b0d      	ldr	r3, [pc, #52]	; (800697c <pbuf_free_ooseq+0x44>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	607b      	str	r3, [r7, #4]
 800694a:	e00f      	b.n	800696c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	4618      	mov	r0, r3
 800695a:	f001 ff34 	bl	80087c6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8006964:	e005      	b.n	8006972 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1ec      	bne.n	800694c <pbuf_free_ooseq+0x14>
    }
  }
}
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	200076a4 	.word	0x200076a4
 800697c:	200076ac 	.word	0x200076ac

08006980 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <pbuf_pool_is_empty+0x14>)
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800698a:	bf00      	nop
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	200076a4 	.word	0x200076a4

08006998 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
 80069a2:	460b      	mov	r3, r1
 80069a4:	80bb      	strh	r3, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d81c      	bhi.n	80069ea <pbuf_alloc+0x52>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <pbuf_alloc+0x20>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069cd 	.word	0x080069cd
 80069bc:	080069d3 	.word	0x080069d3
 80069c0:	080069d9 	.word	0x080069d9
 80069c4:	080069df 	.word	0x080069df
 80069c8:	080069e5 	.word	0x080069e5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80069cc:	2336      	movs	r3, #54	; 0x36
 80069ce:	82fb      	strh	r3, [r7, #22]
    break;
 80069d0:	e014      	b.n	80069fc <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80069d2:	2322      	movs	r3, #34	; 0x22
 80069d4:	82fb      	strh	r3, [r7, #22]
    break;
 80069d6:	e011      	b.n	80069fc <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80069d8:	230e      	movs	r3, #14
 80069da:	82fb      	strh	r3, [r7, #22]
    break;
 80069dc:	e00e      	b.n	80069fc <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80069de:	2300      	movs	r3, #0
 80069e0:	82fb      	strh	r3, [r7, #22]
    break;
 80069e2:	e00b      	b.n	80069fc <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	82fb      	strh	r3, [r7, #22]
    break;
 80069e8:	e008      	b.n	80069fc <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80069ea:	4ba5      	ldr	r3, [pc, #660]	; (8006c80 <pbuf_alloc+0x2e8>)
 80069ec:	f44f 728b 	mov.w	r2, #278	; 0x116
 80069f0:	49a4      	ldr	r1, [pc, #656]	; (8006c84 <pbuf_alloc+0x2ec>)
 80069f2:	48a5      	ldr	r0, [pc, #660]	; (8006c88 <pbuf_alloc+0x2f0>)
 80069f4:	f00c fe18 	bl	8013628 <iprintf>
    return NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e15d      	b.n	8006cb8 <pbuf_alloc+0x320>
  }

  switch (type) {
 80069fc:	79bb      	ldrb	r3, [r7, #6]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	f200 8134 	bhi.w	8006c6c <pbuf_alloc+0x2d4>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <pbuf_alloc+0x74>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006bad 	.word	0x08006bad
 8006a10:	08006c39 	.word	0x08006c39
 8006a14:	08006c39 	.word	0x08006c39
 8006a18:	08006a1d 	.word	0x08006a1d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006a1c:	200a      	movs	r0, #10
 8006a1e:	f7ff fdaf 	bl	8006580 <memp_malloc>
 8006a22:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8006a2a:	f7ff ffa9 	bl	8006980 <pbuf_pool_is_empty>
      return NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e142      	b.n	8006cb8 <pbuf_alloc+0x320>
    }
    p->type = type;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	79ba      	ldrb	r2, [r7, #6]
 8006a36:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006a3e:	8afb      	ldrh	r3, [r7, #22]
 8006a40:	3310      	adds	r3, #16
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	3303      	adds	r3, #3
 8006a48:	f023 0303 	bic.w	r3, r3, #3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <pbuf_alloc+0xd4>
 8006a5e:	4b88      	ldr	r3, [pc, #544]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006a60:	f240 1229 	movw	r2, #297	; 0x129
 8006a64:	4989      	ldr	r1, [pc, #548]	; (8006c8c <pbuf_alloc+0x2f4>)
 8006a66:	4888      	ldr	r0, [pc, #544]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006a68:	f00c fdde 	bl	8013628 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	88ba      	ldrh	r2, [r7, #4]
 8006a70:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006a72:	8afb      	ldrh	r3, [r7, #22]
 8006a74:	3303      	adds	r3, #3
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8006a7e:	88bb      	ldrh	r3, [r7, #4]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	bf28      	it	cs
 8006a84:	4613      	movcs	r3, r2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	8952      	ldrh	r2, [r2, #10]
 8006a94:	441a      	add	r2, r3
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d906      	bls.n	8006aae <pbuf_alloc+0x116>
 8006aa0:	4b77      	ldr	r3, [pc, #476]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006aa2:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006aa6:	497a      	ldr	r1, [pc, #488]	; (8006c90 <pbuf_alloc+0x2f8>)
 8006aa8:	4877      	ldr	r0, [pc, #476]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006aaa:	f00c fdbd 	bl	8013628 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006aae:	8afb      	ldrh	r3, [r7, #22]
 8006ab0:	3303      	adds	r3, #3
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006aba:	d106      	bne.n	8006aca <pbuf_alloc+0x132>
 8006abc:	4b70      	ldr	r3, [pc, #448]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006abe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8006ac2:	4974      	ldr	r1, [pc, #464]	; (8006c94 <pbuf_alloc+0x2fc>)
 8006ac4:	4870      	ldr	r0, [pc, #448]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006ac6:	f00c fdaf 	bl	8013628 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2201      	movs	r2, #1
 8006ace:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8006ad4:	88bb      	ldrh	r3, [r7, #4]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	8952      	ldrh	r2, [r2, #10]
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8006ade:	e061      	b.n	8006ba4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006ae0:	200a      	movs	r0, #10
 8006ae2:	f7ff fd4d 	bl	8006580 <memp_malloc>
 8006ae6:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8006aee:	f7ff ff47 	bl	8006980 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8006af2:	69f8      	ldr	r0, [r7, #28]
 8006af4:	f000 fac2 	bl	800707c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e0dd      	b.n	8006cb8 <pbuf_alloc+0x320>
      }
      q->type = type;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	79ba      	ldrb	r2, [r7, #6]
 8006b00:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	dd06      	ble.n	8006b2c <pbuf_alloc+0x194>
 8006b1e:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006b20:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006b24:	495c      	ldr	r1, [pc, #368]	; (8006c98 <pbuf_alloc+0x300>)
 8006b26:	4858      	ldr	r0, [pc, #352]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006b28:	f00c fd7e 	bl	8013628 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006b3c:	bf28      	it	cs
 8006b3e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f103 0210 	add.w	r2, r3, #16
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d006      	beq.n	8006b6c <pbuf_alloc+0x1d4>
 8006b5e:	4b48      	ldr	r3, [pc, #288]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006b60:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006b64:	494d      	ldr	r1, [pc, #308]	; (8006c9c <pbuf_alloc+0x304>)
 8006b66:	4848      	ldr	r0, [pc, #288]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006b68:	f00c fd5e 	bl	8013628 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	8952      	ldrh	r2, [r2, #10]
 8006b74:	441a      	add	r2, r3
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d906      	bls.n	8006b8e <pbuf_alloc+0x1f6>
 8006b80:	4b3f      	ldr	r3, [pc, #252]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006b82:	f240 1255 	movw	r2, #341	; 0x155
 8006b86:	4942      	ldr	r1, [pc, #264]	; (8006c90 <pbuf_alloc+0x2f8>)
 8006b88:	483f      	ldr	r0, [pc, #252]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006b8a:	f00c fd4d 	bl	8013628 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	895b      	ldrh	r3, [r3, #10]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dc9a      	bgt.n	8006ae0 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8006baa:	e07e      	b.n	8006caa <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006bac:	8afb      	ldrh	r3, [r7, #22]
 8006bae:	3313      	adds	r3, #19
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	88bb      	ldrh	r3, [r7, #4]
 8006bba:	3303      	adds	r3, #3
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006bc8:	897a      	ldrh	r2, [r7, #10]
 8006bca:	88bb      	ldrh	r3, [r7, #4]
 8006bcc:	3303      	adds	r3, #3
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d201      	bcs.n	8006bda <pbuf_alloc+0x242>
        return NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e06e      	b.n	8006cb8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006bda:	897b      	ldrh	r3, [r7, #10]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fb71 	bl	80062c4 <mem_malloc>
 8006be2:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <pbuf_alloc+0x256>
      return NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e064      	b.n	8006cb8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	3310      	adds	r3, #16
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3303      	adds	r3, #3
 8006bf8:	f023 0303 	bic.w	r3, r3, #3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	88ba      	ldrh	r2, [r7, #4]
 8006c06:	811a      	strh	r2, [r3, #8]
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	891a      	ldrh	r2, [r3, #8]
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	79ba      	ldrb	r2, [r7, #6]
 8006c1a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d03f      	beq.n	8006ca8 <pbuf_alloc+0x310>
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006c2a:	f240 1277 	movw	r2, #375	; 0x177
 8006c2e:	491c      	ldr	r1, [pc, #112]	; (8006ca0 <pbuf_alloc+0x308>)
 8006c30:	4815      	ldr	r0, [pc, #84]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006c32:	f00c fcf9 	bl	8013628 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8006c36:	e037      	b.n	8006ca8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006c38:	2009      	movs	r0, #9
 8006c3a:	f7ff fca1 	bl	8006580 <memp_malloc>
 8006c3e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e036      	b.n	8006cb8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	88ba      	ldrh	r2, [r7, #4]
 8006c54:	811a      	strh	r2, [r3, #8]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	891a      	ldrh	r2, [r3, #8]
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	79ba      	ldrb	r2, [r7, #6]
 8006c68:	731a      	strb	r2, [r3, #12]
    break;
 8006c6a:	e01e      	b.n	8006caa <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <pbuf_alloc+0x2e8>)
 8006c6e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006c72:	490c      	ldr	r1, [pc, #48]	; (8006ca4 <pbuf_alloc+0x30c>)
 8006c74:	4804      	ldr	r0, [pc, #16]	; (8006c88 <pbuf_alloc+0x2f0>)
 8006c76:	f00c fcd7 	bl	8013628 <iprintf>
    return NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e01c      	b.n	8006cb8 <pbuf_alloc+0x320>
 8006c7e:	bf00      	nop
 8006c80:	0801532c 	.word	0x0801532c
 8006c84:	0801535c 	.word	0x0801535c
 8006c88:	08015378 	.word	0x08015378
 8006c8c:	080153a0 	.word	0x080153a0
 8006c90:	080153d0 	.word	0x080153d0
 8006c94:	08015404 	.word	0x08015404
 8006c98:	08015438 	.word	0x08015438
 8006c9c:	0801544c 	.word	0x0801544c
 8006ca0:	0801547c 	.word	0x0801547c
 8006ca4:	080154a8 	.word	0x080154a8
    break;
 8006ca8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2201      	movs	r2, #1
 8006cae:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4603      	mov	r3, r0
 8006cca:	71fb      	strb	r3, [r7, #7]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	80bb      	strh	r3, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d81b      	bhi.n	8006d12 <pbuf_alloced_custom+0x52>
 8006cda:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <pbuf_alloced_custom+0x20>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006cf5 	.word	0x08006cf5
 8006ce4:	08006cfb 	.word	0x08006cfb
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006d07 	.word	0x08006d07
 8006cf0:	08006d0d 	.word	0x08006d0d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006cf4:	2336      	movs	r3, #54	; 0x36
 8006cf6:	81fb      	strh	r3, [r7, #14]
    break;
 8006cf8:	e014      	b.n	8006d24 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006cfa:	2322      	movs	r3, #34	; 0x22
 8006cfc:	81fb      	strh	r3, [r7, #14]
    break;
 8006cfe:	e011      	b.n	8006d24 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006d00:	230e      	movs	r3, #14
 8006d02:	81fb      	strh	r3, [r7, #14]
    break;
 8006d04:	e00e      	b.n	8006d24 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006d06:	2300      	movs	r3, #0
 8006d08:	81fb      	strh	r3, [r7, #14]
    break;
 8006d0a:	e00b      	b.n	8006d24 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	81fb      	strh	r3, [r7, #14]
    break;
 8006d10:	e008      	b.n	8006d24 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006d12:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <pbuf_alloced_custom+0xc8>)
 8006d14:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006d18:	491c      	ldr	r1, [pc, #112]	; (8006d8c <pbuf_alloced_custom+0xcc>)
 8006d1a:	481d      	ldr	r0, [pc, #116]	; (8006d90 <pbuf_alloced_custom+0xd0>)
 8006d1c:	f00c fc84 	bl	8013628 <iprintf>
    return NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e02d      	b.n	8006d80 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d24:	89fb      	ldrh	r3, [r7, #14]
 8006d26:	3303      	adds	r3, #3
 8006d28:	f023 0203 	bic.w	r2, r3, #3
 8006d2c:	88bb      	ldrh	r3, [r7, #4]
 8006d2e:	441a      	add	r2, r3
 8006d30:	8bbb      	ldrh	r3, [r7, #28]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d901      	bls.n	8006d3a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e022      	b.n	8006d80 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d46:	89fb      	ldrh	r3, [r7, #14]
 8006d48:	3303      	adds	r3, #3
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	441a      	add	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	e002      	b.n	8006d5e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2202      	movs	r2, #2
 8006d62:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88ba      	ldrh	r2, [r7, #4]
 8006d68:	811a      	strh	r2, [r3, #8]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	891a      	ldrh	r2, [r3, #8]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	79ba      	ldrb	r2, [r7, #6]
 8006d76:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8006d7e:	683b      	ldr	r3, [r7, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	0801532c 	.word	0x0801532c
 8006d8c:	080154c4 	.word	0x080154c4
 8006d90:	08015378 	.word	0x08015378

08006d94 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <pbuf_realloc+0x20>
 8006da6:	4b4b      	ldr	r3, [pc, #300]	; (8006ed4 <pbuf_realloc+0x140>)
 8006da8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006dac:	494a      	ldr	r1, [pc, #296]	; (8006ed8 <pbuf_realloc+0x144>)
 8006dae:	484b      	ldr	r0, [pc, #300]	; (8006edc <pbuf_realloc+0x148>)
 8006db0:	f00c fc3a 	bl	8013628 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7b1b      	ldrb	r3, [r3, #12]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d012      	beq.n	8006de2 <pbuf_realloc+0x4e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d00e      	beq.n	8006de2 <pbuf_realloc+0x4e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <pbuf_realloc+0x4e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	7b1b      	ldrb	r3, [r3, #12]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d006      	beq.n	8006de2 <pbuf_realloc+0x4e>
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <pbuf_realloc+0x140>)
 8006dd6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006dda:	4941      	ldr	r1, [pc, #260]	; (8006ee0 <pbuf_realloc+0x14c>)
 8006ddc:	483f      	ldr	r0, [pc, #252]	; (8006edc <pbuf_realloc+0x148>)
 8006dde:	f00c fc23 	bl	8013628 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	891b      	ldrh	r3, [r3, #8]
 8006de6:	887a      	ldrh	r2, [r7, #2]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d26f      	bcs.n	8006ecc <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8006dec:	887b      	ldrh	r3, [r7, #2]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	8912      	ldrh	r2, [r2, #8]
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	827b      	strh	r3, [r7, #18]
  q = p;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006dfe:	e025      	b.n	8006e4c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	895b      	ldrh	r3, [r3, #10]
 8006e04:	8a7a      	ldrh	r2, [r7, #18]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e10:	4293      	cmp	r3, r2
 8006e12:	dd06      	ble.n	8006e22 <pbuf_realloc+0x8e>
 8006e14:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <pbuf_realloc+0x140>)
 8006e16:	f240 220b 	movw	r2, #523	; 0x20b
 8006e1a:	4932      	ldr	r1, [pc, #200]	; (8006ee4 <pbuf_realloc+0x150>)
 8006e1c:	482f      	ldr	r0, [pc, #188]	; (8006edc <pbuf_realloc+0x148>)
 8006e1e:	f00c fc03 	bl	8013628 <iprintf>
    q->tot_len += (u16_t)grow;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	891a      	ldrh	r2, [r3, #8]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <pbuf_realloc+0xb8>
 8006e3e:	4b25      	ldr	r3, [pc, #148]	; (8006ed4 <pbuf_realloc+0x140>)
 8006e40:	f240 220f 	movw	r2, #527	; 0x20f
 8006e44:	4928      	ldr	r1, [pc, #160]	; (8006ee8 <pbuf_realloc+0x154>)
 8006e46:	4825      	ldr	r0, [pc, #148]	; (8006edc <pbuf_realloc+0x148>)
 8006e48:	f00c fbee 	bl	8013628 <iprintf>
  while (rem_len > q->len) {
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	895b      	ldrh	r3, [r3, #10]
 8006e50:	8a7a      	ldrh	r2, [r7, #18]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d8d4      	bhi.n	8006e00 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	7b1b      	ldrb	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d122      	bne.n	8006ea4 <pbuf_realloc+0x110>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	895b      	ldrh	r3, [r3, #10]
 8006e62:	8a7a      	ldrh	r2, [r7, #18]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d01d      	beq.n	8006ea4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	7b5b      	ldrb	r3, [r3, #13]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d117      	bne.n	8006ea4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	8a7b      	ldrh	r3, [r7, #18]
 8006e82:	4413      	add	r3, r2
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	6978      	ldr	r0, [r7, #20]
 8006e8a:	f7ff f93f 	bl	800610c <mem_trim>
 8006e8e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <pbuf_realloc+0x110>
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <pbuf_realloc+0x140>)
 8006e98:	f240 221d 	movw	r2, #541	; 0x21d
 8006e9c:	4913      	ldr	r1, [pc, #76]	; (8006eec <pbuf_realloc+0x158>)
 8006e9e:	480f      	ldr	r0, [pc, #60]	; (8006edc <pbuf_realloc+0x148>)
 8006ea0:	f00c fbc2 	bl	8013628 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	8a7a      	ldrh	r2, [r7, #18]
 8006ea8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	895a      	ldrh	r2, [r3, #10]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f8dc 	bl	800707c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e000      	b.n	8006ece <pbuf_realloc+0x13a>
    return;
 8006ecc:	bf00      	nop

}
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	0801532c 	.word	0x0801532c
 8006ed8:	080154e8 	.word	0x080154e8
 8006edc:	08015378 	.word	0x08015378
 8006ee0:	08015500 	.word	0x08015500
 8006ee4:	0801551c 	.word	0x0801551c
 8006ee8:	08015530 	.word	0x08015530
 8006eec:	08015548 	.word	0x08015548

08006ef0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	807b      	strh	r3, [r7, #2]
 8006efc:	4613      	mov	r3, r2
 8006efe:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <pbuf_header_impl+0x24>
 8006f06:	4b46      	ldr	r3, [pc, #280]	; (8007020 <pbuf_header_impl+0x130>)
 8006f08:	f240 223f 	movw	r2, #575	; 0x23f
 8006f0c:	4945      	ldr	r1, [pc, #276]	; (8007024 <pbuf_header_impl+0x134>)
 8006f0e:	4846      	ldr	r0, [pc, #280]	; (8007028 <pbuf_header_impl+0x138>)
 8006f10:	f00c fb8a 	bl	8013628 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <pbuf_header_impl+0x32>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <pbuf_header_impl+0x36>
    return 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e078      	b.n	8007018 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8006f26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da10      	bge.n	8006f50 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8006f2e:	887b      	ldrh	r3, [r7, #2]
 8006f30:	425b      	negs	r3, r3
 8006f32:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	895b      	ldrh	r3, [r3, #10]
 8006f38:	89fa      	ldrh	r2, [r7, #14]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d90a      	bls.n	8006f54 <pbuf_header_impl+0x64>
 8006f3e:	4b38      	ldr	r3, [pc, #224]	; (8007020 <pbuf_header_impl+0x130>)
 8006f40:	f240 2247 	movw	r2, #583	; 0x247
 8006f44:	4939      	ldr	r1, [pc, #228]	; (800702c <pbuf_header_impl+0x13c>)
 8006f46:	4838      	ldr	r0, [pc, #224]	; (8007028 <pbuf_header_impl+0x138>)
 8006f48:	f00c fb6e 	bl	8013628 <iprintf>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e063      	b.n	8007018 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8006f50:	887b      	ldrh	r3, [r7, #2]
 8006f52:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7b1b      	ldrb	r3, [r3, #12]
 8006f58:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006f60:	89bb      	ldrh	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <pbuf_header_impl+0x7c>
 8006f66:	89bb      	ldrh	r3, [r7, #12]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d112      	bne.n	8006f92 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f74:	425b      	negs	r3, r3
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3310      	adds	r3, #16
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d238      	bcs.n	8006ffa <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e042      	b.n	8007018 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006f92:	89bb      	ldrh	r3, [r7, #12]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d002      	beq.n	8006f9e <pbuf_header_impl+0xae>
 8006f98:	89bb      	ldrh	r3, [r7, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d124      	bne.n	8006fe8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006f9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da0d      	bge.n	8006fc2 <pbuf_header_impl+0xd2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	895b      	ldrh	r3, [r3, #10]
 8006faa:	89fa      	ldrh	r2, [r7, #14]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d808      	bhi.n	8006fc2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fb8:	425b      	negs	r3, r3
 8006fba:	441a      	add	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]
 8006fc0:	e011      	b.n	8006fe6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8006fc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	dd0b      	ble.n	8006fe2 <pbuf_header_impl+0xf2>
 8006fca:	787b      	ldrb	r3, [r7, #1]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d008      	beq.n	8006fe2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fd8:	425b      	negs	r3, r3
 8006fda:	441a      	add	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	605a      	str	r2, [r3, #4]
 8006fe0:	e001      	b.n	8006fe6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e018      	b.n	8007018 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006fe6:	e008      	b.n	8006ffa <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8006fe8:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <pbuf_header_impl+0x130>)
 8006fea:	f240 2277 	movw	r2, #631	; 0x277
 8006fee:	4910      	ldr	r1, [pc, #64]	; (8007030 <pbuf_header_impl+0x140>)
 8006ff0:	480d      	ldr	r0, [pc, #52]	; (8007028 <pbuf_header_impl+0x138>)
 8006ff2:	f00c fb19 	bl	8013628 <iprintf>
    return 1;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e00e      	b.n	8007018 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	895a      	ldrh	r2, [r3, #10]
 8006ffe:	887b      	ldrh	r3, [r7, #2]
 8007000:	4413      	add	r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	891a      	ldrh	r2, [r3, #8]
 800700c:	887b      	ldrh	r3, [r7, #2]
 800700e:	4413      	add	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	0801532c 	.word	0x0801532c
 8007024:	08015564 	.word	0x08015564
 8007028:	08015378 	.word	0x08015378
 800702c:	08015570 	.word	0x08015570
 8007030:	08015590 	.word	0x08015590

08007034 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8007040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007044:	2200      	movs	r2, #0
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff ff51 	bl	8006ef0 <pbuf_header_impl>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8007064:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007068:	2201      	movs	r2, #1
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff ff3f 	bl	8006ef0 <pbuf_header_impl>
 8007072:	4603      	mov	r3, r0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <pbuf_free+0x22>
 8007090:	4b3e      	ldr	r3, [pc, #248]	; (800718c <pbuf_free+0x110>)
 8007092:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007096:	493e      	ldr	r1, [pc, #248]	; (8007190 <pbuf_free+0x114>)
 8007098:	483e      	ldr	r0, [pc, #248]	; (8007194 <pbuf_free+0x118>)
 800709a:	f00c fac5 	bl	8013628 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	e070      	b.n	8007184 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7b1b      	ldrb	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <pbuf_free+0x54>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7b1b      	ldrb	r3, [r3, #12]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d00e      	beq.n	80070d0 <pbuf_free+0x54>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7b1b      	ldrb	r3, [r3, #12]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d00a      	beq.n	80070d0 <pbuf_free+0x54>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7b1b      	ldrb	r3, [r3, #12]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d006      	beq.n	80070d0 <pbuf_free+0x54>
 80070c2:	4b32      	ldr	r3, [pc, #200]	; (800718c <pbuf_free+0x110>)
 80070c4:	f240 22de 	movw	r2, #734	; 0x2de
 80070c8:	4933      	ldr	r1, [pc, #204]	; (8007198 <pbuf_free+0x11c>)
 80070ca:	4832      	ldr	r0, [pc, #200]	; (8007194 <pbuf_free+0x118>)
 80070cc:	f00c faac 	bl	8013628 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80070d4:	e052      	b.n	800717c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	89db      	ldrh	r3, [r3, #14]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <pbuf_free+0x70>
 80070de:	4b2b      	ldr	r3, [pc, #172]	; (800718c <pbuf_free+0x110>)
 80070e0:	f240 22eb 	movw	r2, #747	; 0x2eb
 80070e4:	492d      	ldr	r1, [pc, #180]	; (800719c <pbuf_free+0x120>)
 80070e6:	482b      	ldr	r0, [pc, #172]	; (8007194 <pbuf_free+0x118>)
 80070e8:	f00c fa9e 	bl	8013628 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	89db      	ldrh	r3, [r3, #14]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	81da      	strh	r2, [r3, #14]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	89db      	ldrh	r3, [r3, #14]
 80070fc:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80070fe:	8abb      	ldrh	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d139      	bne.n	8007178 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7b1b      	ldrb	r3, [r3, #12]
 800710e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7b5b      	ldrb	r3, [r3, #13]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <pbuf_free+0xba>
 8007128:	4b18      	ldr	r3, [pc, #96]	; (800718c <pbuf_free+0x110>)
 800712a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800712e:	491c      	ldr	r1, [pc, #112]	; (80071a0 <pbuf_free+0x124>)
 8007130:	4818      	ldr	r0, [pc, #96]	; (8007194 <pbuf_free+0x118>)
 8007132:	f00c fa79 	bl	8013628 <iprintf>
        pc->custom_free_function(p);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	e015      	b.n	800716c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d104      	bne.n	8007150 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	200a      	movs	r0, #10
 800714a:	f7ff fa65 	bl	8006618 <memp_free>
 800714e:	e00d      	b.n	800716c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007150:	89fb      	ldrh	r3, [r7, #14]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d002      	beq.n	800715c <pbuf_free+0xe0>
 8007156:	89fb      	ldrh	r3, [r7, #14]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d104      	bne.n	8007166 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	2009      	movs	r0, #9
 8007160:	f7ff fa5a 	bl	8006618 <memp_free>
 8007164:	e002      	b.n	800716c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fe ff6e 	bl	8006048 <mem_free>
        }
      }
      count++;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	3301      	adds	r3, #1
 8007170:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	607b      	str	r3, [r7, #4]
 8007176:	e001      	b.n	800717c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1a9      	bne.n	80070d6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	0801532c 	.word	0x0801532c
 8007190:	08015564 	.word	0x08015564
 8007194:	08015378 	.word	0x08015378
 8007198:	080155a0 	.word	0x080155a0
 800719c:	080155b8 	.word	0x080155b8
 80071a0:	080155d0 	.word	0x080155d0

080071a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80071b0:	e005      	b.n	80071be <pbuf_clen+0x1a>
    ++len;
 80071b2:	89fb      	ldrh	r3, [r7, #14]
 80071b4:	3301      	adds	r3, #1
 80071b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f6      	bne.n	80071b2 <pbuf_clen+0xe>
  }
  return len;
 80071c4:	89fb      	ldrh	r3, [r7, #14]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d010      	beq.n	8007204 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	89db      	ldrh	r3, [r3, #14]
 80071e6:	3301      	adds	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	89db      	ldrh	r3, [r3, #14]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <pbuf_ref+0x30>
 80071f6:	4b05      	ldr	r3, [pc, #20]	; (800720c <pbuf_ref+0x38>)
 80071f8:	f240 3239 	movw	r2, #825	; 0x339
 80071fc:	4904      	ldr	r1, [pc, #16]	; (8007210 <pbuf_ref+0x3c>)
 80071fe:	4805      	ldr	r0, [pc, #20]	; (8007214 <pbuf_ref+0x40>)
 8007200:	f00c fa12 	bl	8013628 <iprintf>
  }
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	0801532c 	.word	0x0801532c
 8007210:	080155f4 	.word	0x080155f4
 8007214:	08015378 	.word	0x08015378

08007218 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <pbuf_cat+0x16>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <pbuf_cat+0x26>
 800722e:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <pbuf_cat+0x98>)
 8007230:	f240 324d 	movw	r2, #845	; 0x34d
 8007234:	491f      	ldr	r1, [pc, #124]	; (80072b4 <pbuf_cat+0x9c>)
 8007236:	4820      	ldr	r0, [pc, #128]	; (80072b8 <pbuf_cat+0xa0>)
 8007238:	f00c f9f6 	bl	8013628 <iprintf>
 800723c:	e034      	b.n	80072a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e00a      	b.n	800725a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	891a      	ldrh	r2, [r3, #8]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	891b      	ldrh	r3, [r3, #8]
 800724c:	4413      	add	r3, r2
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	891a      	ldrh	r2, [r3, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	895b      	ldrh	r3, [r3, #10]
 800726a:	429a      	cmp	r2, r3
 800726c:	d006      	beq.n	800727c <pbuf_cat+0x64>
 800726e:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <pbuf_cat+0x98>)
 8007270:	f240 3255 	movw	r2, #853	; 0x355
 8007274:	4911      	ldr	r1, [pc, #68]	; (80072bc <pbuf_cat+0xa4>)
 8007276:	4810      	ldr	r0, [pc, #64]	; (80072b8 <pbuf_cat+0xa0>)
 8007278:	f00c f9d6 	bl	8013628 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <pbuf_cat+0x7a>
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <pbuf_cat+0x98>)
 8007286:	f240 3256 	movw	r2, #854	; 0x356
 800728a:	490d      	ldr	r1, [pc, #52]	; (80072c0 <pbuf_cat+0xa8>)
 800728c:	480a      	ldr	r0, [pc, #40]	; (80072b8 <pbuf_cat+0xa0>)
 800728e:	f00c f9cb 	bl	8013628 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	891a      	ldrh	r2, [r3, #8]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	891b      	ldrh	r3, [r3, #8]
 800729a:	4413      	add	r3, r2
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	0801532c 	.word	0x0801532c
 80072b4:	08015608 	.word	0x08015608
 80072b8:	08015378 	.word	0x08015378
 80072bc:	08015640 	.word	0x08015640
 80072c0:	08015670 	.word	0x08015670

080072c4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ffa1 	bl	8007218 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80072d6:	6838      	ldr	r0, [r7, #0]
 80072d8:	f7ff ff7c 	bl	80071d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80072ee:	2300      	movs	r3, #0
 80072f0:	81fb      	strh	r3, [r7, #14]
 80072f2:	2300      	movs	r3, #0
 80072f4:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <pbuf_copy+0x2a>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <pbuf_copy+0x2a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	891a      	ldrh	r2, [r3, #8]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	891b      	ldrh	r3, [r3, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	d209      	bcs.n	8007322 <pbuf_copy+0x3e>
 800730e:	4b54      	ldr	r3, [pc, #336]	; (8007460 <pbuf_copy+0x17c>)
 8007310:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007314:	4953      	ldr	r1, [pc, #332]	; (8007464 <pbuf_copy+0x180>)
 8007316:	4854      	ldr	r0, [pc, #336]	; (8007468 <pbuf_copy+0x184>)
 8007318:	f00c f986 	bl	8013628 <iprintf>
 800731c:	f06f 030f 	mvn.w	r3, #15
 8007320:	e099      	b.n	8007456 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	895b      	ldrh	r3, [r3, #10]
 8007326:	461a      	mov	r2, r3
 8007328:	89fb      	ldrh	r3, [r7, #14]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	895b      	ldrh	r3, [r3, #10]
 8007330:	4619      	mov	r1, r3
 8007332:	89bb      	ldrh	r3, [r7, #12]
 8007334:	1acb      	subs	r3, r1, r3
 8007336:	429a      	cmp	r2, r3
 8007338:	db05      	blt.n	8007346 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	895a      	ldrh	r2, [r3, #10]
 800733e:	89bb      	ldrh	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	817b      	strh	r3, [r7, #10]
 8007344:	e004      	b.n	8007350 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	895a      	ldrh	r2, [r3, #10]
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	18d0      	adds	r0, r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	89bb      	ldrh	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	897a      	ldrh	r2, [r7, #10]
 8007362:	4619      	mov	r1, r3
 8007364:	f00b fdc3 	bl	8012eee <memcpy>
    offset_to += len;
 8007368:	89fa      	ldrh	r2, [r7, #14]
 800736a:	897b      	ldrh	r3, [r7, #10]
 800736c:	4413      	add	r3, r2
 800736e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007370:	89ba      	ldrh	r2, [r7, #12]
 8007372:	897b      	ldrh	r3, [r7, #10]
 8007374:	4413      	add	r3, r2
 8007376:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	895b      	ldrh	r3, [r3, #10]
 800737c:	89fa      	ldrh	r2, [r7, #14]
 800737e:	429a      	cmp	r2, r3
 8007380:	d906      	bls.n	8007390 <pbuf_copy+0xac>
 8007382:	4b37      	ldr	r3, [pc, #220]	; (8007460 <pbuf_copy+0x17c>)
 8007384:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007388:	4938      	ldr	r1, [pc, #224]	; (800746c <pbuf_copy+0x188>)
 800738a:	4837      	ldr	r0, [pc, #220]	; (8007468 <pbuf_copy+0x184>)
 800738c:	f00c f94c 	bl	8013628 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	895b      	ldrh	r3, [r3, #10]
 8007394:	89ba      	ldrh	r2, [r7, #12]
 8007396:	429a      	cmp	r2, r3
 8007398:	d906      	bls.n	80073a8 <pbuf_copy+0xc4>
 800739a:	4b31      	ldr	r3, [pc, #196]	; (8007460 <pbuf_copy+0x17c>)
 800739c:	f240 32ce 	movw	r2, #974	; 0x3ce
 80073a0:	4933      	ldr	r1, [pc, #204]	; (8007470 <pbuf_copy+0x18c>)
 80073a2:	4831      	ldr	r0, [pc, #196]	; (8007468 <pbuf_copy+0x184>)
 80073a4:	f00c f940 	bl	8013628 <iprintf>
    if (offset_from >= p_from->len) {
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	895b      	ldrh	r3, [r3, #10]
 80073ac:	89ba      	ldrh	r2, [r7, #12]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d304      	bcc.n	80073bc <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	895b      	ldrh	r3, [r3, #10]
 80073c0:	89fa      	ldrh	r2, [r7, #14]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d114      	bne.n	80073f0 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10c      	bne.n	80073f0 <pbuf_copy+0x10c>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <pbuf_copy+0x10c>
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <pbuf_copy+0x17c>)
 80073de:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80073e2:	4924      	ldr	r1, [pc, #144]	; (8007474 <pbuf_copy+0x190>)
 80073e4:	4820      	ldr	r0, [pc, #128]	; (8007468 <pbuf_copy+0x184>)
 80073e6:	f00c f91f 	bl	8013628 <iprintf>
 80073ea:	f06f 030f 	mvn.w	r3, #15
 80073ee:	e032      	b.n	8007456 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d013      	beq.n	800741e <pbuf_copy+0x13a>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	895a      	ldrh	r2, [r3, #10]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	891b      	ldrh	r3, [r3, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d10d      	bne.n	800741e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <pbuf_copy+0x13a>
 800740a:	4b15      	ldr	r3, [pc, #84]	; (8007460 <pbuf_copy+0x17c>)
 800740c:	f240 32de 	movw	r2, #990	; 0x3de
 8007410:	4919      	ldr	r1, [pc, #100]	; (8007478 <pbuf_copy+0x194>)
 8007412:	4815      	ldr	r0, [pc, #84]	; (8007468 <pbuf_copy+0x184>)
 8007414:	f00c f908 	bl	8013628 <iprintf>
 8007418:	f06f 0305 	mvn.w	r3, #5
 800741c:	e01b      	b.n	8007456 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d013      	beq.n	800744c <pbuf_copy+0x168>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	895a      	ldrh	r2, [r3, #10]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	891b      	ldrh	r3, [r3, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	d10d      	bne.n	800744c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d009      	beq.n	800744c <pbuf_copy+0x168>
 8007438:	4b09      	ldr	r3, [pc, #36]	; (8007460 <pbuf_copy+0x17c>)
 800743a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800743e:	490e      	ldr	r1, [pc, #56]	; (8007478 <pbuf_copy+0x194>)
 8007440:	4809      	ldr	r0, [pc, #36]	; (8007468 <pbuf_copy+0x184>)
 8007442:	f00c f8f1 	bl	8013628 <iprintf>
 8007446:	f06f 0305 	mvn.w	r3, #5
 800744a:	e004      	b.n	8007456 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f47f af67 	bne.w	8007322 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	0801532c 	.word	0x0801532c
 8007464:	080156bc 	.word	0x080156bc
 8007468:	08015378 	.word	0x08015378
 800746c:	080156ec 	.word	0x080156ec
 8007470:	08015704 	.word	0x08015704
 8007474:	08015720 	.word	0x08015720
 8007478:	08015730 	.word	0x08015730

0800747c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4611      	mov	r1, r2
 8007488:	461a      	mov	r2, r3
 800748a:	460b      	mov	r3, r1
 800748c:	80fb      	strh	r3, [r7, #6]
 800748e:	4613      	mov	r3, r2
 8007490:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d108      	bne.n	80074ae <pbuf_copy_partial+0x32>
 800749c:	4b30      	ldr	r3, [pc, #192]	; (8007560 <pbuf_copy_partial+0xe4>)
 800749e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80074a2:	4930      	ldr	r1, [pc, #192]	; (8007564 <pbuf_copy_partial+0xe8>)
 80074a4:	4830      	ldr	r0, [pc, #192]	; (8007568 <pbuf_copy_partial+0xec>)
 80074a6:	f00c f8bf 	bl	8013628 <iprintf>
 80074aa:	2300      	movs	r3, #0
 80074ac:	e054      	b.n	8007558 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d108      	bne.n	80074c6 <pbuf_copy_partial+0x4a>
 80074b4:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <pbuf_copy_partial+0xe4>)
 80074b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80074ba:	492c      	ldr	r1, [pc, #176]	; (800756c <pbuf_copy_partial+0xf0>)
 80074bc:	482a      	ldr	r0, [pc, #168]	; (8007568 <pbuf_copy_partial+0xec>)
 80074be:	f00c f8b3 	bl	8013628 <iprintf>
 80074c2:	2300      	movs	r3, #0
 80074c4:	e048      	b.n	8007558 <pbuf_copy_partial+0xdc>

  left = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <pbuf_copy_partial+0x5a>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <pbuf_copy_partial+0x5e>
    return 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e03e      	b.n	8007558 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	e034      	b.n	800754a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80074e0:	88bb      	ldrh	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <pbuf_copy_partial+0x80>
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	895b      	ldrh	r3, [r3, #10]
 80074ea:	88ba      	ldrh	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d305      	bcc.n	80074fc <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	895b      	ldrh	r3, [r3, #10]
 80074f4:	88ba      	ldrh	r2, [r7, #4]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	80bb      	strh	r3, [r7, #4]
 80074fa:	e023      	b.n	8007544 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	895a      	ldrh	r2, [r3, #10]
 8007500:	88bb      	ldrh	r3, [r7, #4]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007506:	8b3a      	ldrh	r2, [r7, #24]
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	429a      	cmp	r2, r3
 800750c:	d901      	bls.n	8007512 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007512:	8b7b      	ldrh	r3, [r7, #26]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	18d0      	adds	r0, r2, r3
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	88bb      	ldrh	r3, [r7, #4]
 800751e:	4413      	add	r3, r2
 8007520:	8b3a      	ldrh	r2, [r7, #24]
 8007522:	4619      	mov	r1, r3
 8007524:	f00b fce3 	bl	8012eee <memcpy>
      copied_total += buf_copy_len;
 8007528:	8afa      	ldrh	r2, [r7, #22]
 800752a:	8b3b      	ldrh	r3, [r7, #24]
 800752c:	4413      	add	r3, r2
 800752e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8007530:	8b7a      	ldrh	r2, [r7, #26]
 8007532:	8b3b      	ldrh	r3, [r7, #24]
 8007534:	4413      	add	r3, r2
 8007536:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	8b3b      	ldrh	r3, [r7, #24]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <pbuf_copy_partial+0xda>
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1c4      	bne.n	80074e0 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8007556:	8afb      	ldrh	r3, [r7, #22]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	0801532c 	.word	0x0801532c
 8007564:	0801575c 	.word	0x0801575c
 8007568:	08015378 	.word	0x08015378
 800756c:	0801577c 	.word	0x0801577c

08007570 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <raw_input_match+0x24>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <raw_input_match+0x20>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d110      	bne.n	80075b2 <raw_input_match+0x42>
          return 1;
 8007590:	2301      	movs	r3, #1
 8007592:	e00f      	b.n	80075b4 <raw_input_match+0x44>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <raw_input_match+0x3e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <raw_input_match+0x3e>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <raw_input_match+0x50>)
 80075a8:	695b      	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d101      	bne.n	80075b2 <raw_input_match+0x42>
      return 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <raw_input_match+0x44>
    }
  }

  return 0;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	20004014 	.word	0x20004014

080075c4 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80075d2:	4b32      	ldr	r3, [pc, #200]	; (800769c <raw_input+0xd8>)
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	4b31      	ldr	r3, [pc, #196]	; (800769c <raw_input+0xd8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	4610      	mov	r0, r2
 80075de:	f007 f8ef 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	7a5b      	ldrb	r3, [r3, #9]
 80075ec:	81bb      	strh	r3, [r7, #12]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
  pcb = raw_pcbs;
 80075f2:	4b2b      	ldr	r3, [pc, #172]	; (80076a0 <raw_input+0xdc>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	617b      	str	r3, [r7, #20]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 80075f8:	e045      	b.n	8007686 <raw_input+0xc2>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	7c1b      	ldrb	r3, [r3, #16]
 80075fe:	461a      	mov	r2, r3
 8007600:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007604:	429a      	cmp	r2, r3
 8007606:	d139      	bne.n	800767c <raw_input+0xb8>
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	4619      	mov	r1, r3
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f7ff ffaf 	bl	8007570 <raw_input_match>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d031      	beq.n	800767c <raw_input+0xb8>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d02d      	beq.n	800767c <raw_input+0xb8>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	60bb      	str	r3, [r7, #8]
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	695c      	ldr	r4, [r3, #20]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6998      	ldr	r0, [r3, #24]
 800762e:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <raw_input+0xe0>)
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6979      	ldr	r1, [r7, #20]
 8007634:	47a0      	blx	r4
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <raw_input+0xa2>
          /* receive function ate the packet */
          p = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	607b      	str	r3, [r7, #4]
          eaten = 1;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
          if (prev != NULL) {
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <raw_input+0xb8>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <raw_input+0xdc>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 800765e:	4a10      	ldr	r2, [pc, #64]	; (80076a0 <raw_input+0xdc>)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	e00a      	b.n	800767c <raw_input+0xb8>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	d005      	beq.n	800767c <raw_input+0xb8>
 8007670:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <raw_input+0xe4>)
 8007672:	22b6      	movs	r2, #182	; 0xb6
 8007674:	490d      	ldr	r1, [pc, #52]	; (80076ac <raw_input+0xe8>)
 8007676:	480e      	ldr	r0, [pc, #56]	; (80076b0 <raw_input+0xec>)
 8007678:	f00b ffd6 	bl	8013628 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	613b      	str	r3, [r7, #16]
    pcb = pcb->next;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	617b      	str	r3, [r7, #20]
  while ((eaten == 0) && (pcb != NULL)) {
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <raw_input+0xce>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1b3      	bne.n	80075fa <raw_input+0x36>
  }
  return eaten;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}
 800769c:	20004014 	.word	0x20004014
 80076a0:	200002a8 	.word	0x200002a8
 80076a4:	20004024 	.word	0x20004024
 80076a8:	08015838 	.word	0x08015838
 80076ac:	08015868 	.word	0x08015868
 80076b0:	080158b4 	.word	0x080158b4

080076b4 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01e      	beq.n	8007702 <raw_netif_ip_addr_changed+0x4e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <raw_netif_ip_addr_changed+0x4e>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <raw_netif_ip_addr_changed+0x4e>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d013      	beq.n	8007702 <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80076da:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <raw_netif_ip_addr_changed+0x5c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e00c      	b.n	80076fc <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d103      	bne.n	80076f6 <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1ef      	bne.n	80076e2 <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	200002a8 	.word	0x200002a8

08007714 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8007718:	bf00      	nop
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007728:	f000 ff80 	bl	800862c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <tcp_tmr+0x28>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <tcp_tmr+0x28>)
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	4b04      	ldr	r3, [pc, #16]	; (800774c <tcp_tmr+0x28>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007744:	f000 fcb2 	bl	80080ac <tcp_slowtmr>
  }
}
 8007748:	bf00      	nop
 800774a:	bd80      	pop	{r7, pc}
 800774c:	200002ac 	.word	0x200002ac

08007750 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e00a      	b.n	8007776 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d102      	bne.n	8007770 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f1      	bne.n	8007760 <tcp_remove_listener+0x10>
      }
   }
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <tcp_listen_closed+0x1a>
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <tcp_listen_closed+0x5c>)
 8007798:	22c0      	movs	r2, #192	; 0xc0
 800779a:	4913      	ldr	r1, [pc, #76]	; (80077e8 <tcp_listen_closed+0x60>)
 800779c:	4813      	ldr	r0, [pc, #76]	; (80077ec <tcp_listen_closed+0x64>)
 800779e:	f00b ff43 	bl	8013628 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7d1b      	ldrb	r3, [r3, #20]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d005      	beq.n	80077b6 <tcp_listen_closed+0x2e>
 80077aa:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <tcp_listen_closed+0x5c>)
 80077ac:	22c1      	movs	r2, #193	; 0xc1
 80077ae:	4910      	ldr	r1, [pc, #64]	; (80077f0 <tcp_listen_closed+0x68>)
 80077b0:	480e      	ldr	r0, [pc, #56]	; (80077ec <tcp_listen_closed+0x64>)
 80077b2:	f00b ff39 	bl	8013628 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80077b6:	2301      	movs	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e00b      	b.n	80077d4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <tcp_listen_closed+0x6c>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff ffc1 	bl	8007750 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d9f0      	bls.n	80077bc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	0801597c 	.word	0x0801597c
 80077e8:	080159ac 	.word	0x080159ac
 80077ec:	080159b8 	.word	0x080159b8
 80077f0:	080159e0 	.word	0x080159e0
 80077f4:	0801742c 	.word	0x0801742c

080077f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80077f8:	b5b0      	push	{r4, r5, r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d075      	beq.n	80078f6 <tcp_close_shutdown+0xfe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7d1b      	ldrb	r3, [r3, #20]
 800780e:	2b04      	cmp	r3, #4
 8007810:	d003      	beq.n	800781a <tcp_close_shutdown+0x22>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7d1b      	ldrb	r3, [r3, #20]
 8007816:	2b07      	cmp	r3, #7
 8007818:	d16d      	bne.n	80078f6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781e:	2b00      	cmp	r3, #0
 8007820:	d104      	bne.n	800782c <tcp_close_shutdown+0x34>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007826:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800782a:	d064      	beq.n	80078f6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7e9b      	ldrb	r3, [r3, #26]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <tcp_close_shutdown+0x4e>
 8007838:	4b59      	ldr	r3, [pc, #356]	; (80079a0 <tcp_close_shutdown+0x1a8>)
 800783a:	f240 120f 	movw	r2, #271	; 0x10f
 800783e:	4959      	ldr	r1, [pc, #356]	; (80079a4 <tcp_close_shutdown+0x1ac>)
 8007840:	4859      	ldr	r0, [pc, #356]	; (80079a8 <tcp_close_shutdown+0x1b0>)
 8007842:	f00b fef1 	bl	8013628 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800784e:	687c      	ldr	r4, [r7, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1d1d      	adds	r5, r3, #4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8adb      	ldrh	r3, [r3, #22]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	8b12      	ldrh	r2, [r2, #24]
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	462b      	mov	r3, r5
 8007862:	4622      	mov	r2, r4
 8007864:	f004 feec 	bl	800c640 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fa1d 	bl	8008ca8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800786e:	4b4f      	ldr	r3, [pc, #316]	; (80079ac <tcp_close_shutdown+0x1b4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	429a      	cmp	r2, r3
 8007876:	d105      	bne.n	8007884 <tcp_close_shutdown+0x8c>
 8007878:	4b4c      	ldr	r3, [pc, #304]	; (80079ac <tcp_close_shutdown+0x1b4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	4a4b      	ldr	r2, [pc, #300]	; (80079ac <tcp_close_shutdown+0x1b4>)
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	e013      	b.n	80078ac <tcp_close_shutdown+0xb4>
 8007884:	4b49      	ldr	r3, [pc, #292]	; (80079ac <tcp_close_shutdown+0x1b4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	e00c      	b.n	80078a6 <tcp_close_shutdown+0xae>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d104      	bne.n	80078a0 <tcp_close_shutdown+0xa8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	e005      	b.n	80078ac <tcp_close_shutdown+0xb4>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1ef      	bne.n	800788c <tcp_close_shutdown+0x94>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	4b3f      	ldr	r3, [pc, #252]	; (80079b0 <tcp_close_shutdown+0x1b8>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7d1b      	ldrb	r3, [r3, #20]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d10c      	bne.n	80078da <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	220a      	movs	r2, #10
 80078c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80078c6:	4b3b      	ldr	r3, [pc, #236]	; (80079b4 <tcp_close_shutdown+0x1bc>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	4a39      	ldr	r2, [pc, #228]	; (80079b4 <tcp_close_shutdown+0x1bc>)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	f005 f906 	bl	800cae4 <tcp_timer_needed>
 80078d8:	e00b      	b.n	80078f2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80078da:	4b37      	ldr	r3, [pc, #220]	; (80079b8 <tcp_close_shutdown+0x1c0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d102      	bne.n	80078ea <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80078e4:	f003 fd44 	bl	800b370 <tcp_trigger_input_pcb_close>
 80078e8:	e003      	b.n	80078f2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	2002      	movs	r0, #2
 80078ee:	f7fe fe93 	bl	8006618 <memp_free>
        }
      }
      return ERR_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e050      	b.n	8007998 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7d1b      	ldrb	r3, [r3, #20]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d02e      	beq.n	800795c <tcp_close_shutdown+0x164>
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d038      	beq.n	8007974 <tcp_close_shutdown+0x17c>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d142      	bne.n	800798c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	8adb      	ldrh	r3, [r3, #22]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d021      	beq.n	8007952 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800790e:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <tcp_close_shutdown+0x1c4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d105      	bne.n	8007924 <tcp_close_shutdown+0x12c>
 8007918:	4b28      	ldr	r3, [pc, #160]	; (80079bc <tcp_close_shutdown+0x1c4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	4a27      	ldr	r2, [pc, #156]	; (80079bc <tcp_close_shutdown+0x1c4>)
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	e013      	b.n	800794c <tcp_close_shutdown+0x154>
 8007924:	4b25      	ldr	r3, [pc, #148]	; (80079bc <tcp_close_shutdown+0x1c4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	e00c      	b.n	8007946 <tcp_close_shutdown+0x14e>
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d104      	bne.n	8007940 <tcp_close_shutdown+0x148>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	60da      	str	r2, [r3, #12]
 800793e:	e005      	b.n	800794c <tcp_close_shutdown+0x154>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1ef      	bne.n	800792c <tcp_close_shutdown+0x134>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	2002      	movs	r0, #2
 8007956:	f7fe fe5f 	bl	8006618 <memp_free>
    break;
 800795a:	e01c      	b.n	8007996 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ff13 	bl	8007788 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	4816      	ldr	r0, [pc, #88]	; (80079c0 <tcp_close_shutdown+0x1c8>)
 8007966:	f001 f9e1 	bl	8008d2c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	2003      	movs	r0, #3
 800796e:	f7fe fe53 	bl	8006618 <memp_free>
    break;
 8007972:	e010      	b.n	8007996 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	480d      	ldr	r0, [pc, #52]	; (80079ac <tcp_close_shutdown+0x1b4>)
 8007978:	f001 f9d8 	bl	8008d2c <tcp_pcb_remove>
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <tcp_close_shutdown+0x1b8>)
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	2002      	movs	r0, #2
 8007986:	f7fe fe47 	bl	8006618 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800798a:	e004      	b.n	8007996 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f819 	bl	80079c4 <tcp_close_shutdown_fin>
 8007992:	4603      	mov	r3, r0
 8007994:	e000      	b.n	8007998 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bdb0      	pop	{r4, r5, r7, pc}
 80079a0:	0801597c 	.word	0x0801597c
 80079a4:	080159f8 	.word	0x080159f8
 80079a8:	080159b8 	.word	0x080159b8
 80079ac:	200076ac 	.word	0x200076ac
 80079b0:	200076a8 	.word	0x200076a8
 80079b4:	200076bc 	.word	0x200076bc
 80079b8:	200076c0 	.word	0x200076c0
 80079bc:	200076b8 	.word	0x200076b8
 80079c0:	200076b4 	.word	0x200076b4

080079c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <tcp_close_shutdown_fin+0x1c>
 80079d2:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <tcp_close_shutdown_fin+0xc0>)
 80079d4:	f240 124d 	movw	r2, #333	; 0x14d
 80079d8:	492b      	ldr	r1, [pc, #172]	; (8007a88 <tcp_close_shutdown_fin+0xc4>)
 80079da:	482c      	ldr	r0, [pc, #176]	; (8007a8c <tcp_close_shutdown_fin+0xc8>)
 80079dc:	f00b fe24 	bl	8013628 <iprintf>

  switch (pcb->state) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7d1b      	ldrb	r3, [r3, #20]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d010      	beq.n	8007a0a <tcp_close_shutdown_fin+0x46>
 80079e8:	2b07      	cmp	r3, #7
 80079ea:	d01b      	beq.n	8007a24 <tcp_close_shutdown_fin+0x60>
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d126      	bne.n	8007a3e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f003 fd49 	bl	800b488 <tcp_send_fin>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80079fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d11f      	bne.n	8007a42 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2205      	movs	r2, #5
 8007a06:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007a08:	e01b      	b.n	8007a42 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f003 fd3c 	bl	800b488 <tcp_send_fin>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d114      	bne.n	8007a46 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2205      	movs	r2, #5
 8007a20:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007a22:	e010      	b.n	8007a46 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f003 fd2f 	bl	800b488 <tcp_send_fin>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2209      	movs	r2, #9
 8007a3a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007a3c:	e005      	b.n	8007a4a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e01c      	b.n	8007a7c <tcp_close_shutdown_fin+0xb8>
    break;
 8007a42:	bf00      	nop
 8007a44:	e002      	b.n	8007a4c <tcp_close_shutdown_fin+0x88>
    break;
 8007a46:	bf00      	nop
 8007a48:	e000      	b.n	8007a4c <tcp_close_shutdown_fin+0x88>
    break;
 8007a4a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f004 fb69 	bl	800c12c <tcp_output>
 8007a5a:	e00d      	b.n	8007a78 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a64:	d108      	bne.n	8007a78 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	7e9b      	ldrb	r3, [r3, #26]
 8007a6a:	f043 0308 	orr.w	r3, r3, #8
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e001      	b.n	8007a7c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	0801597c 	.word	0x0801597c
 8007a88:	080159ac 	.word	0x080159ac
 8007a8c:	080159b8 	.word	0x080159b8

08007a90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7d1b      	ldrb	r3, [r3, #20]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d006      	beq.n	8007aae <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7e9b      	ldrb	r3, [r3, #26]
 8007aa4:	f043 0310 	orr.w	r3, r3, #16
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007aae:	2101      	movs	r1, #1
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fea1 	bl	80077f8 <tcp_close_shutdown>
 8007ab6:	4603      	mov	r3, r0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7d1b      	ldrb	r3, [r3, #20]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d106      	bne.n	8007ae0 <tcp_abandon+0x20>
 8007ad2:	4b4d      	ldr	r3, [pc, #308]	; (8007c08 <tcp_abandon+0x148>)
 8007ad4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ad8:	494c      	ldr	r1, [pc, #304]	; (8007c0c <tcp_abandon+0x14c>)
 8007ada:	484d      	ldr	r0, [pc, #308]	; (8007c10 <tcp_abandon+0x150>)
 8007adc:	f00b fda4 	bl	8013628 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7d1b      	ldrb	r3, [r3, #20]
 8007ae4:	2b0a      	cmp	r3, #10
 8007ae6:	d108      	bne.n	8007afa <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	484a      	ldr	r0, [pc, #296]	; (8007c14 <tcp_abandon+0x154>)
 8007aec:	f001 f91e 	bl	8008d2c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	2002      	movs	r0, #2
 8007af4:	f7fe fd90 	bl	8006618 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8007af8:	e081      	b.n	8007bfe <tcp_abandon+0x13e>
    int send_rst = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b06:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b14:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7d1b      	ldrb	r3, [r3, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d126      	bne.n	8007b72 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8adb      	ldrh	r3, [r3, #22]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02e      	beq.n	8007b8a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b2c:	4b3a      	ldr	r3, [pc, #232]	; (8007c18 <tcp_abandon+0x158>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d105      	bne.n	8007b42 <tcp_abandon+0x82>
 8007b36:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <tcp_abandon+0x158>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4a36      	ldr	r2, [pc, #216]	; (8007c18 <tcp_abandon+0x158>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e013      	b.n	8007b6a <tcp_abandon+0xaa>
 8007b42:	4b35      	ldr	r3, [pc, #212]	; (8007c18 <tcp_abandon+0x158>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	61fb      	str	r3, [r7, #28]
 8007b48:	e00c      	b.n	8007b64 <tcp_abandon+0xa4>
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d104      	bne.n	8007b5e <tcp_abandon+0x9e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	60da      	str	r2, [r3, #12]
 8007b5c:	e005      	b.n	8007b6a <tcp_abandon+0xaa>
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1ef      	bne.n	8007b4a <tcp_abandon+0x8a>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	60da      	str	r2, [r3, #12]
 8007b70:	e00b      	b.n	8007b8a <tcp_abandon+0xca>
      send_rst = reset;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8adb      	ldrh	r3, [r3, #22]
 8007b7a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	4827      	ldr	r0, [pc, #156]	; (8007c1c <tcp_abandon+0x15c>)
 8007b80:	f001 f8d4 	bl	8008d2c <tcp_pcb_remove>
 8007b84:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <tcp_abandon+0x160>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fe15 	bl	80087c6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fe0c 	bl	80087c6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fe03 	bl	80087c6 <tcp_segs_free>
    if (send_rst) {
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00c      	beq.n	8007be0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1d19      	adds	r1, r3, #4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8b1b      	ldrh	r3, [r3, #24]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	6979      	ldr	r1, [r7, #20]
 8007bda:	69b8      	ldr	r0, [r7, #24]
 8007bdc:	f004 fd30 	bl	800c640 <tcp_rst>
    last_state = pcb->state;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7d1b      	ldrb	r3, [r3, #20]
 8007be4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	2002      	movs	r0, #2
 8007bea:	f7fe fd15 	bl	8006618 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <tcp_abandon+0x13e>
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f06f 010c 	mvn.w	r1, #12
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
}
 8007bfe:	bf00      	nop
 8007c00:	3728      	adds	r7, #40	; 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	0801597c 	.word	0x0801597c
 8007c0c:	08015a14 	.word	0x08015a14
 8007c10:	080159b8 	.word	0x080159b8
 8007c14:	200076bc 	.word	0x200076bc
 8007c18:	200076b8 	.word	0x200076b8
 8007c1c:	200076ac 	.word	0x200076ac
 8007c20:	200076a8 	.word	0x200076a8

08007c24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff ff46 	bl	8007ac0 <tcp_abandon>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007c54:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <tcp_bind+0x10c>)
 8007c56:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <tcp_bind+0x28>
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <tcp_bind+0x2e>
    return ERR_VAL;
 8007c64:	f06f 0305 	mvn.w	r3, #5
 8007c68:	e06a      	b.n	8007d40 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	7d1b      	ldrb	r3, [r3, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <tcp_bind+0x4a>
 8007c72:	4b36      	ldr	r3, [pc, #216]	; (8007d4c <tcp_bind+0x110>)
 8007c74:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007c78:	4935      	ldr	r1, [pc, #212]	; (8007d50 <tcp_bind+0x114>)
 8007c7a:	4836      	ldr	r0, [pc, #216]	; (8007d54 <tcp_bind+0x118>)
 8007c7c:	f00b fcd4 	bl	8013628 <iprintf>
 8007c80:	f06f 0305 	mvn.w	r3, #5
 8007c84:	e05c      	b.n	8007d40 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <tcp_bind+0x64>
    port = tcp_new_port();
 8007c8c:	f000 f9ca 	bl	8008024 <tcp_new_port>
 8007c90:	4603      	mov	r3, r0
 8007c92:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d135      	bne.n	8007d06 <tcp_bind+0xca>
      return ERR_BUF;
 8007c9a:	f06f 0301 	mvn.w	r3, #1
 8007c9e:	e04f      	b.n	8007d40 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	e02b      	b.n	8007cfe <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007ca6:	4a2c      	ldr	r2, [pc, #176]	; (8007d58 <tcp_bind+0x11c>)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	e01e      	b.n	8007cf2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	8adb      	ldrh	r3, [r3, #22]
 8007cb8:	88fa      	ldrh	r2, [r7, #6]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d116      	bne.n	8007cec <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007cbe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d010      	beq.n	8007ce6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00c      	beq.n	8007ce6 <tcp_bind+0xaa>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d102      	bne.n	8007cec <tcp_bind+0xb0>
              return ERR_USE;
 8007ce6:	f06f 0307 	mvn.w	r3, #7
 8007cea:	e029      	b.n	8007d40 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1dd      	bne.n	8007cb4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	dbcf      	blt.n	8007ca6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00c      	beq.n	8007d26 <tcp_bind+0xea>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <tcp_bind+0xe4>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	e000      	b.n	8007d22 <tcp_bind+0xe6>
 8007d20:	2300      	movs	r3, #0
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	88fa      	ldrh	r2, [r7, #6]
 8007d2a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <tcp_bind+0x120>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	60da      	str	r2, [r3, #12]
 8007d34:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <tcp_bind+0x120>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	f004 fed3 	bl	800cae4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	08017454 	.word	0x08017454
 8007d4c:	0801597c 	.word	0x0801597c
 8007d50:	08015a48 	.word	0x08015a48
 8007d54:	080159b8 	.word	0x080159b8
 8007d58:	0801742c 	.word	0x0801742c
 8007d5c:	200076b8 	.word	0x200076b8

08007d60 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8007d6e:	68b8      	ldr	r0, [r7, #8]
 8007d70:	f7ff ff58 	bl	8007c24 <tcp_abort>

  return ERR_ABRT;
 8007d74:	f06f 030c 	mvn.w	r3, #12
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f806 	bl	8007da4 <tcp_listen_with_backlog_and_err>
 8007d98:	4603      	mov	r3, r0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	7d1b      	ldrb	r3, [r3, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <tcp_listen_with_backlog_and_err+0x2e>
 8007dbe:	4b3f      	ldr	r3, [pc, #252]	; (8007ebc <tcp_listen_with_backlog_and_err+0x118>)
 8007dc0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8007dc4:	493e      	ldr	r1, [pc, #248]	; (8007ec0 <tcp_listen_with_backlog_and_err+0x11c>)
 8007dc6:	483f      	ldr	r0, [pc, #252]	; (8007ec4 <tcp_listen_with_backlog_and_err+0x120>)
 8007dc8:	f00b fc2e 	bl	8013628 <iprintf>
 8007dcc:	23f1      	movs	r3, #241	; 0xf1
 8007dce:	76fb      	strb	r3, [r7, #27]
 8007dd0:	e069      	b.n	8007ea6 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	7d1b      	ldrb	r3, [r3, #20]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d104      	bne.n	8007de4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007dde:	23f7      	movs	r3, #247	; 0xf7
 8007de0:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007de2:	e060      	b.n	8007ea6 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007de4:	2003      	movs	r0, #3
 8007de6:	f7fe fbcb 	bl	8006580 <memp_malloc>
 8007dea:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8007df2:	23ff      	movs	r3, #255	; 0xff
 8007df4:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007df6:	e056      	b.n	8007ea6 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8ada      	ldrh	r2, [r3, #22]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	7d5a      	ldrb	r2, [r3, #21]
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	7a1a      	ldrb	r2, [r3, #8]
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	7a9a      	ldrb	r2, [r3, #10]
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	7a5a      	ldrb	r2, [r3, #9]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8adb      	ldrh	r3, [r3, #22]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d021      	beq.n	8007e82 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007e3e:	4b22      	ldr	r3, [pc, #136]	; (8007ec8 <tcp_listen_with_backlog_and_err+0x124>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d105      	bne.n	8007e54 <tcp_listen_with_backlog_and_err+0xb0>
 8007e48:	4b1f      	ldr	r3, [pc, #124]	; (8007ec8 <tcp_listen_with_backlog_and_err+0x124>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ec8 <tcp_listen_with_backlog_and_err+0x124>)
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e013      	b.n	8007e7c <tcp_listen_with_backlog_and_err+0xd8>
 8007e54:	4b1c      	ldr	r3, [pc, #112]	; (8007ec8 <tcp_listen_with_backlog_and_err+0x124>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e00c      	b.n	8007e76 <tcp_listen_with_backlog_and_err+0xd2>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d104      	bne.n	8007e70 <tcp_listen_with_backlog_and_err+0xcc>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	60da      	str	r2, [r3, #12]
 8007e6e:	e005      	b.n	8007e7c <tcp_listen_with_backlog_and_err+0xd8>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1ef      	bne.n	8007e5c <tcp_listen_with_backlog_and_err+0xb8>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8007e82:	68f9      	ldr	r1, [r7, #12]
 8007e84:	2002      	movs	r0, #2
 8007e86:	f7fe fbc7 	bl	8006618 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4a0f      	ldr	r2, [pc, #60]	; (8007ecc <tcp_listen_with_backlog_and_err+0x128>)
 8007e8e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <tcp_listen_with_backlog_and_err+0x12c>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	4a0d      	ldr	r2, [pc, #52]	; (8007ed0 <tcp_listen_with_backlog_and_err+0x12c>)
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	f004 fe21 	bl	800cae4 <tcp_timer_needed>
  res = ERR_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7efa      	ldrb	r2, [r7, #27]
 8007eb0:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	0801597c 	.word	0x0801597c
 8007ec0:	08015a70 	.word	0x08015a70
 8007ec4:	080159b8 	.word	0x080159b8
 8007ec8:	200076b8 	.word	0x200076b8
 8007ecc:	08007d61 	.word	0x08007d61
 8007ed0:	200076b4 	.word	0x200076b4

08007ed4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007ee4:	4413      	add	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007ef0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007ef4:	bf28      	it	cs
 8007ef6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007efa:	b292      	uxth	r2, r2
 8007efc:	4413      	add	r3, r2
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	db08      	blt.n	8007f18 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	e020      	b.n	8007f5a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd03      	ble.n	8007f2e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f2c:	e014      	b.n	8007f58 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f40:	d306      	bcc.n	8007f50 <tcp_update_rcv_ann_wnd+0x7c>
 8007f42:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <tcp_update_rcv_ann_wnd+0x90>)
 8007f44:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007f48:	4907      	ldr	r1, [pc, #28]	; (8007f68 <tcp_update_rcv_ann_wnd+0x94>)
 8007f4a:	4808      	ldr	r0, [pc, #32]	; (8007f6c <tcp_update_rcv_ann_wnd+0x98>)
 8007f4c:	f00b fb6c 	bl	8013628 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007f58:	2300      	movs	r3, #0
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	0801597c 	.word	0x0801597c
 8007f68:	08015a94 	.word	0x08015a94
 8007f6c:	080159b8 	.word	0x080159b8

08007f70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7d1b      	ldrb	r3, [r3, #20]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d106      	bne.n	8007f92 <tcp_recved+0x22>
 8007f84:	4b23      	ldr	r3, [pc, #140]	; (8008014 <tcp_recved+0xa4>)
 8007f86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007f8a:	4923      	ldr	r1, [pc, #140]	; (8008018 <tcp_recved+0xa8>)
 8007f8c:	4823      	ldr	r0, [pc, #140]	; (800801c <tcp_recved+0xac>)
 8007f8e:	f00b fb4b 	bl	8013628 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f96:	887b      	ldrh	r3, [r7, #2]
 8007f98:	4413      	add	r3, r2
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007fa8:	d904      	bls.n	8007fb4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007fb0:	851a      	strh	r2, [r3, #40]	; 0x28
 8007fb2:	e017      	b.n	8007fe4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d113      	bne.n	8007fe4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7d1b      	ldrb	r3, [r3, #20]
 8007fc0:	2b07      	cmp	r3, #7
 8007fc2:	d003      	beq.n	8007fcc <tcp_recved+0x5c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7d1b      	ldrb	r3, [r3, #20]
 8007fc8:	2b09      	cmp	r3, #9
 8007fca:	d104      	bne.n	8007fd6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007fd2:	851a      	strh	r2, [r3, #40]	; 0x28
 8007fd4:	e006      	b.n	8007fe4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <tcp_recved+0xa4>)
 8007fd8:	f240 322d 	movw	r2, #813	; 0x32d
 8007fdc:	4910      	ldr	r1, [pc, #64]	; (8008020 <tcp_recved+0xb0>)
 8007fde:	480f      	ldr	r0, [pc, #60]	; (800801c <tcp_recved+0xac>)
 8007fe0:	f00b fb22 	bl	8013628 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff75 	bl	8007ed4 <tcp_update_rcv_ann_wnd>
 8007fea:	4603      	mov	r3, r0
 8007fec:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007ff4:	db09      	blt.n	800800a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7e9b      	ldrb	r3, [r3, #26]
 8007ffa:	f043 0302 	orr.w	r3, r3, #2
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f004 f891 	bl	800c12c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	0801597c 	.word	0x0801597c
 8008018:	08015ab0 	.word	0x08015ab0
 800801c:	080159b8 	.word	0x080159b8
 8008020:	08015ad8 	.word	0x08015ad8

08008024 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800802e:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <tcp_new_port+0x80>)
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	b291      	uxth	r1, r2
 8008036:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <tcp_new_port+0x80>)
 8008038:	8011      	strh	r1, [r2, #0]
 800803a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800803e:	4293      	cmp	r3, r2
 8008040:	d103      	bne.n	800804a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008042:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <tcp_new_port+0x80>)
 8008044:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008048:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800804a:	2300      	movs	r3, #0
 800804c:	71fb      	strb	r3, [r7, #7]
 800804e:	e01e      	b.n	800808e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <tcp_new_port+0x84>)
 8008054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	e011      	b.n	8008082 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	8ada      	ldrh	r2, [r3, #22]
 8008062:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <tcp_new_port+0x80>)
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d108      	bne.n	800807c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800806a:	88bb      	ldrh	r3, [r7, #4]
 800806c:	3301      	adds	r3, #1
 800806e:	80bb      	strh	r3, [r7, #4]
 8008070:	88bb      	ldrh	r3, [r7, #4]
 8008072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008076:	d3da      	bcc.n	800802e <tcp_new_port+0xa>
          return 0;
 8008078:	2300      	movs	r3, #0
 800807a:	e00d      	b.n	8008098 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1ea      	bne.n	800805e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	3301      	adds	r3, #1
 800808c:	71fb      	strb	r3, [r7, #7]
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	2b03      	cmp	r3, #3
 8008092:	d9dd      	bls.n	8008050 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <tcp_new_port+0x80>)
 8008096:	881b      	ldrh	r3, [r3, #0]
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20000076 	.word	0x20000076
 80080a8:	0801742c 	.word	0x0801742c

080080ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80080ac:	b5b0      	push	{r4, r5, r7, lr}
 80080ae:	b08c      	sub	sp, #48	; 0x30
 80080b0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80080b6:	4b96      	ldr	r3, [pc, #600]	; (8008310 <tcp_slowtmr+0x264>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	4a94      	ldr	r2, [pc, #592]	; (8008310 <tcp_slowtmr+0x264>)
 80080be:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80080c0:	4b94      	ldr	r3, [pc, #592]	; (8008314 <tcp_slowtmr+0x268>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	4b92      	ldr	r3, [pc, #584]	; (8008314 <tcp_slowtmr+0x268>)
 80080ca:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80080d0:	4b91      	ldr	r3, [pc, #580]	; (8008318 <tcp_slowtmr+0x26c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80080d6:	e227      	b.n	8008528 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	7d1b      	ldrb	r3, [r3, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <tcp_slowtmr+0x42>
 80080e0:	4b8e      	ldr	r3, [pc, #568]	; (800831c <tcp_slowtmr+0x270>)
 80080e2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80080e6:	498e      	ldr	r1, [pc, #568]	; (8008320 <tcp_slowtmr+0x274>)
 80080e8:	488e      	ldr	r0, [pc, #568]	; (8008324 <tcp_slowtmr+0x278>)
 80080ea:	f00b fa9d 	bl	8013628 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	7d1b      	ldrb	r3, [r3, #20]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d106      	bne.n	8008104 <tcp_slowtmr+0x58>
 80080f6:	4b89      	ldr	r3, [pc, #548]	; (800831c <tcp_slowtmr+0x270>)
 80080f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80080fc:	498a      	ldr	r1, [pc, #552]	; (8008328 <tcp_slowtmr+0x27c>)
 80080fe:	4889      	ldr	r0, [pc, #548]	; (8008324 <tcp_slowtmr+0x278>)
 8008100:	f00b fa92 	bl	8013628 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	7d1b      	ldrb	r3, [r3, #20]
 8008108:	2b0a      	cmp	r3, #10
 800810a:	d106      	bne.n	800811a <tcp_slowtmr+0x6e>
 800810c:	4b83      	ldr	r3, [pc, #524]	; (800831c <tcp_slowtmr+0x270>)
 800810e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008112:	4986      	ldr	r1, [pc, #536]	; (800832c <tcp_slowtmr+0x280>)
 8008114:	4883      	ldr	r0, [pc, #524]	; (8008324 <tcp_slowtmr+0x278>)
 8008116:	f00b fa87 	bl	8013628 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	7f5a      	ldrb	r2, [r3, #29]
 800811e:	4b7d      	ldr	r3, [pc, #500]	; (8008314 <tcp_slowtmr+0x268>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d103      	bne.n	800812e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800812c:	e1fc      	b.n	8008528 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800812e:	4b79      	ldr	r3, [pc, #484]	; (8008314 <tcp_slowtmr+0x268>)
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	7d1b      	ldrb	r3, [r3, #20]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d108      	bne.n	8008158 <tcp_slowtmr+0xac>
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800814c:	2b05      	cmp	r3, #5
 800814e:	d903      	bls.n	8008158 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8008150:	7ffb      	ldrb	r3, [r7, #31]
 8008152:	3301      	adds	r3, #1
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	e0a2      	b.n	800829e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800815e:	2b0b      	cmp	r3, #11
 8008160:	d903      	bls.n	800816a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	3301      	adds	r3, #1
 8008166:	77fb      	strb	r3, [r7, #31]
 8008168:	e099      	b.n	800829e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008170:	2b00      	cmp	r3, #0
 8008172:	d032      	beq.n	80081da <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800817a:	3b01      	subs	r3, #1
 800817c:	4a6c      	ldr	r2, [pc, #432]	; (8008330 <tcp_slowtmr+0x284>)
 800817e:	5cd3      	ldrb	r3, [r2, r3]
 8008180:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008188:	7cfa      	ldrb	r2, [r7, #19]
 800818a:	429a      	cmp	r2, r3
 800818c:	d907      	bls.n	800819e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008194:	3301      	adds	r3, #1
 8008196:	b2da      	uxtb	r2, r3
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80081a4:	7cfa      	ldrb	r2, [r7, #19]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d879      	bhi.n	800829e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80081aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ac:	f004 fbda 	bl	800c964 <tcp_zero_window_probe>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d173      	bne.n	800829e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80081c4:	2b06      	cmp	r3, #6
 80081c6:	d86a      	bhi.n	800829e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80081d8:	e061      	b.n	800829e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db08      	blt.n	80081f6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3301      	adds	r3, #1
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	b21a      	sxth	r2, r3
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d04f      	beq.n	800829e <tcp_slowtmr+0x1f2>
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800820a:	429a      	cmp	r2, r3
 800820c:	db47      	blt.n	800829e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	7d1b      	ldrb	r3, [r3, #20]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d018      	beq.n	8008248 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800821c:	2b0c      	cmp	r3, #12
 800821e:	bf28      	it	cs
 8008220:	230c      	movcs	r3, #12
 8008222:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800822a:	10db      	asrs	r3, r3, #3
 800822c:	b21b      	sxth	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008236:	4413      	add	r3, r2
 8008238:	7dfa      	ldrb	r2, [r7, #23]
 800823a:	493e      	ldr	r1, [pc, #248]	; (8008334 <tcp_slowtmr+0x288>)
 800823c:	5c8a      	ldrb	r2, [r1, r2]
 800823e:	4093      	lsls	r3, r2
 8008240:	b21a      	sxth	r2, r3
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	2200      	movs	r2, #0
 800824c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800825a:	4293      	cmp	r3, r2
 800825c:	bf28      	it	cs
 800825e:	4613      	movcs	r3, r2
 8008260:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8008262:	8abb      	ldrh	r3, [r7, #20]
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	b29b      	uxth	r3, r3
 800827c:	429a      	cmp	r2, r3
 800827e:	d206      	bcs.n	800828e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b29a      	uxth	r2, r3
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8008298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800829a:	f004 fa47 	bl	800c72c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	7d1b      	ldrb	r3, [r3, #20]
 80082a2:	2b06      	cmp	r3, #6
 80082a4:	d10f      	bne.n	80082c6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	7e9b      	ldrb	r3, [r3, #26]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082b2:	4b17      	ldr	r3, [pc, #92]	; (8008310 <tcp_slowtmr+0x264>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b28      	cmp	r3, #40	; 0x28
 80082be:	d902      	bls.n	80082c6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80082c0:	7ffb      	ldrb	r3, [r7, #31]
 80082c2:	3301      	adds	r3, #1
 80082c4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	7a1b      	ldrb	r3, [r3, #8]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d05d      	beq.n	800838e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d003      	beq.n	80082e2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80082de:	2b07      	cmp	r3, #7
 80082e0:	d155      	bne.n	800838e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082e2:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <tcp_slowtmr+0x264>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80082f2:	4b11      	ldr	r3, [pc, #68]	; (8008338 <tcp_slowtmr+0x28c>)
 80082f4:	440b      	add	r3, r1
 80082f6:	4911      	ldr	r1, [pc, #68]	; (800833c <tcp_slowtmr+0x290>)
 80082f8:	fba1 1303 	umull	r1, r3, r1, r3
 80082fc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082fe:	429a      	cmp	r2, r3
 8008300:	d91e      	bls.n	8008340 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008302:	7ffb      	ldrb	r3, [r7, #31]
 8008304:	3301      	adds	r3, #1
 8008306:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8008308:	7fbb      	ldrb	r3, [r7, #30]
 800830a:	3301      	adds	r3, #1
 800830c:	77bb      	strb	r3, [r7, #30]
 800830e:	e03e      	b.n	800838e <tcp_slowtmr+0x2e2>
 8008310:	200076b0 	.word	0x200076b0
 8008314:	200002ad 	.word	0x200002ad
 8008318:	200076ac 	.word	0x200076ac
 800831c:	0801597c 	.word	0x0801597c
 8008320:	08015b2c 	.word	0x08015b2c
 8008324:	080159b8 	.word	0x080159b8
 8008328:	08015b58 	.word	0x08015b58
 800832c:	08015b84 	.word	0x08015b84
 8008330:	08017424 	.word	0x08017424
 8008334:	08017414 	.word	0x08017414
 8008338:	000a4cb8 	.word	0x000a4cb8
 800833c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008340:	4b97      	ldr	r3, [pc, #604]	; (80085a0 <tcp_slowtmr+0x4f4>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008356:	4618      	mov	r0, r3
 8008358:	4b92      	ldr	r3, [pc, #584]	; (80085a4 <tcp_slowtmr+0x4f8>)
 800835a:	fb03 f300 	mul.w	r3, r3, r0
 800835e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8008360:	4991      	ldr	r1, [pc, #580]	; (80085a8 <tcp_slowtmr+0x4fc>)
 8008362:	fba1 1303 	umull	r1, r3, r1, r3
 8008366:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008368:	429a      	cmp	r2, r3
 800836a:	d910      	bls.n	800838e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800836c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800836e:	f004 fabc 	bl	800c8ea <tcp_keepalive>
 8008372:	4603      	mov	r3, r0
 8008374:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8008376:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d107      	bne.n	800838e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008384:	3301      	adds	r3, #1
 8008386:	b2da      	uxtb	r2, r3
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	2b00      	cmp	r3, #0
 8008394:	d016      	beq.n	80083c4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008396:	4b82      	ldr	r3, [pc, #520]	; (80085a0 <tcp_slowtmr+0x4f4>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80083a6:	4619      	mov	r1, r3
 80083a8:	460b      	mov	r3, r1
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	440b      	add	r3, r1
 80083ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d307      	bcc.n	80083c4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fa04 	bl	80087c6 <tcp_segs_free>
      pcb->ooseq = NULL;
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	2200      	movs	r2, #0
 80083c2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	7d1b      	ldrb	r3, [r3, #20]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d109      	bne.n	80083e0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083cc:	4b74      	ldr	r3, [pc, #464]	; (80085a0 <tcp_slowtmr+0x4f4>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b28      	cmp	r3, #40	; 0x28
 80083d8:	d902      	bls.n	80083e0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80083da:	7ffb      	ldrb	r3, [r7, #31]
 80083dc:	3301      	adds	r3, #1
 80083de:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	7d1b      	ldrb	r3, [r3, #20]
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d109      	bne.n	80083fc <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80083e8:	4b6d      	ldr	r3, [pc, #436]	; (80085a0 <tcp_slowtmr+0x4f4>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2bf0      	cmp	r3, #240	; 0xf0
 80083f4:	d902      	bls.n	80083fc <tcp_slowtmr+0x350>
        ++pcb_remove;
 80083f6:	7ffb      	ldrb	r3, [r7, #31]
 80083f8:	3301      	adds	r3, #1
 80083fa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80083fc:	7ffb      	ldrb	r3, [r7, #31]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d05d      	beq.n	80084be <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008408:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800840a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800840c:	f000 fc4c 	bl	8008ca8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d010      	beq.n	8008438 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008416:	4b65      	ldr	r3, [pc, #404]	; (80085ac <tcp_slowtmr+0x500>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841c:	429a      	cmp	r2, r3
 800841e:	d106      	bne.n	800842e <tcp_slowtmr+0x382>
 8008420:	4b63      	ldr	r3, [pc, #396]	; (80085b0 <tcp_slowtmr+0x504>)
 8008422:	f240 4289 	movw	r2, #1161	; 0x489
 8008426:	4963      	ldr	r1, [pc, #396]	; (80085b4 <tcp_slowtmr+0x508>)
 8008428:	4863      	ldr	r0, [pc, #396]	; (80085b8 <tcp_slowtmr+0x50c>)
 800842a:	f00b f8fd 	bl	8013628 <iprintf>
        prev->next = pcb->next;
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	60da      	str	r2, [r3, #12]
 8008436:	e00f      	b.n	8008458 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008438:	4b5c      	ldr	r3, [pc, #368]	; (80085ac <tcp_slowtmr+0x500>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843e:	429a      	cmp	r2, r3
 8008440:	d006      	beq.n	8008450 <tcp_slowtmr+0x3a4>
 8008442:	4b5b      	ldr	r3, [pc, #364]	; (80085b0 <tcp_slowtmr+0x504>)
 8008444:	f240 428d 	movw	r2, #1165	; 0x48d
 8008448:	495c      	ldr	r1, [pc, #368]	; (80085bc <tcp_slowtmr+0x510>)
 800844a:	485b      	ldr	r0, [pc, #364]	; (80085b8 <tcp_slowtmr+0x50c>)
 800844c:	f00b f8ec 	bl	8013628 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4a55      	ldr	r2, [pc, #340]	; (80085ac <tcp_slowtmr+0x500>)
 8008456:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008458:	7fbb      	ldrb	r3, [r7, #30]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d010      	beq.n	8008480 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008466:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	1d1d      	adds	r5, r3, #4
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	8adb      	ldrh	r3, [r3, #22]
 8008470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008472:	8b12      	ldrh	r2, [r2, #24]
 8008474:	9201      	str	r2, [sp, #4]
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	462b      	mov	r3, r5
 800847a:	4622      	mov	r2, r4
 800847c:	f004 f8e0 	bl	800c640 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	7d1b      	ldrb	r3, [r3, #20]
 800848a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	2002      	movs	r0, #2
 800849a:	f7fe f8bd 	bl	8006618 <memp_free>

      tcp_active_pcbs_changed = 0;
 800849e:	4b48      	ldr	r3, [pc, #288]	; (80085c0 <tcp_slowtmr+0x514>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d004      	beq.n	80084b4 <tcp_slowtmr+0x408>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f06f 010c 	mvn.w	r1, #12
 80084b0:	68b8      	ldr	r0, [r7, #8]
 80084b2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80084b4:	4b42      	ldr	r3, [pc, #264]	; (80085c0 <tcp_slowtmr+0x514>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d035      	beq.n	8008528 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80084bc:	e606      	b.n	80080cc <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	7edb      	ldrb	r3, [r3, #27]
 80084cc:	3301      	adds	r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	7eda      	ldrb	r2, [r3, #27]
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	7f1b      	ldrb	r3, [r3, #28]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d323      	bcc.n	8008528 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2200      	movs	r2, #0
 80084e4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80084e6:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <tcp_slowtmr+0x514>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <tcp_slowtmr+0x460>
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fc:	6a3a      	ldr	r2, [r7, #32]
 80084fe:	6912      	ldr	r2, [r2, #16]
 8008500:	6a39      	ldr	r1, [r7, #32]
 8008502:	4610      	mov	r0, r2
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	777b      	strb	r3, [r7, #29]
 800850a:	e001      	b.n	8008510 <tcp_slowtmr+0x464>
 800850c:	2300      	movs	r3, #0
 800850e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8008510:	4b2b      	ldr	r3, [pc, #172]	; (80085c0 <tcp_slowtmr+0x514>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d000      	beq.n	800851a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8008518:	e5d8      	b.n	80080cc <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800851a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d102      	bne.n	8008528 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8008522:	6a38      	ldr	r0, [r7, #32]
 8008524:	f003 fe02 	bl	800c12c <tcp_output>
  while (pcb != NULL) {
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	f47f add4 	bne.w	80080d8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8008534:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <tcp_slowtmr+0x518>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800853a:	e068      	b.n	800860e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	7d1b      	ldrb	r3, [r3, #20]
 8008540:	2b0a      	cmp	r3, #10
 8008542:	d006      	beq.n	8008552 <tcp_slowtmr+0x4a6>
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <tcp_slowtmr+0x504>)
 8008546:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800854a:	491f      	ldr	r1, [pc, #124]	; (80085c8 <tcp_slowtmr+0x51c>)
 800854c:	481a      	ldr	r0, [pc, #104]	; (80085b8 <tcp_slowtmr+0x50c>)
 800854e:	f00b f86b 	bl	8013628 <iprintf>
    pcb_remove = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <tcp_slowtmr+0x4f4>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2bf0      	cmp	r3, #240	; 0xf0
 8008562:	d902      	bls.n	800856a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8008564:	7ffb      	ldrb	r3, [r7, #31]
 8008566:	3301      	adds	r3, #1
 8008568:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800856a:	7ffb      	ldrb	r3, [r7, #31]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d049      	beq.n	8008604 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008572:	f000 fb99 	bl	8008ca8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d029      	beq.n	80085d0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800857c:	4b11      	ldr	r3, [pc, #68]	; (80085c4 <tcp_slowtmr+0x518>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	429a      	cmp	r2, r3
 8008584:	d106      	bne.n	8008594 <tcp_slowtmr+0x4e8>
 8008586:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <tcp_slowtmr+0x504>)
 8008588:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800858c:	490f      	ldr	r1, [pc, #60]	; (80085cc <tcp_slowtmr+0x520>)
 800858e:	480a      	ldr	r0, [pc, #40]	; (80085b8 <tcp_slowtmr+0x50c>)
 8008590:	f00b f84a 	bl	8013628 <iprintf>
        prev->next = pcb->next;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	60da      	str	r2, [r3, #12]
 800859c:	e028      	b.n	80085f0 <tcp_slowtmr+0x544>
 800859e:	bf00      	nop
 80085a0:	200076b0 	.word	0x200076b0
 80085a4:	000124f8 	.word	0x000124f8
 80085a8:	10624dd3 	.word	0x10624dd3
 80085ac:	200076ac 	.word	0x200076ac
 80085b0:	0801597c 	.word	0x0801597c
 80085b4:	08015bb4 	.word	0x08015bb4
 80085b8:	080159b8 	.word	0x080159b8
 80085bc:	08015be0 	.word	0x08015be0
 80085c0:	200076a8 	.word	0x200076a8
 80085c4:	200076bc 	.word	0x200076bc
 80085c8:	08015c0c 	.word	0x08015c0c
 80085cc:	08015c3c 	.word	0x08015c3c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80085d0:	4b12      	ldr	r3, [pc, #72]	; (800861c <tcp_slowtmr+0x570>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d006      	beq.n	80085e8 <tcp_slowtmr+0x53c>
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <tcp_slowtmr+0x574>)
 80085dc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80085e0:	4910      	ldr	r1, [pc, #64]	; (8008624 <tcp_slowtmr+0x578>)
 80085e2:	4811      	ldr	r0, [pc, #68]	; (8008628 <tcp_slowtmr+0x57c>)
 80085e4:	f00b f820 	bl	8013628 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4a0b      	ldr	r2, [pc, #44]	; (800861c <tcp_slowtmr+0x570>)
 80085ee:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80085fa:	69b9      	ldr	r1, [r7, #24]
 80085fc:	2002      	movs	r0, #2
 80085fe:	f7fe f80b 	bl	8006618 <memp_free>
 8008602:	e004      	b.n	800860e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	d193      	bne.n	800853c <tcp_slowtmr+0x490>
    }
  }
}
 8008614:	bf00      	nop
 8008616:	3728      	adds	r7, #40	; 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bdb0      	pop	{r4, r5, r7, pc}
 800861c:	200076bc 	.word	0x200076bc
 8008620:	0801597c 	.word	0x0801597c
 8008624:	08015c64 	.word	0x08015c64
 8008628:	080159b8 	.word	0x080159b8

0800862c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008632:	4b2d      	ldr	r3, [pc, #180]	; (80086e8 <tcp_fasttmr+0xbc>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	3301      	adds	r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <tcp_fasttmr+0xbc>)
 800863c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800863e:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <tcp_fasttmr+0xc0>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008644:	e048      	b.n	80086d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7f5a      	ldrb	r2, [r3, #29]
 800864a:	4b27      	ldr	r3, [pc, #156]	; (80086e8 <tcp_fasttmr+0xbc>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d03f      	beq.n	80086d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008652:	4b25      	ldr	r3, [pc, #148]	; (80086e8 <tcp_fasttmr+0xbc>)
 8008654:	781a      	ldrb	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7e9b      	ldrb	r3, [r3, #26]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	d010      	beq.n	8008688 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7e9b      	ldrb	r3, [r3, #26]
 800866a:	f043 0302 	orr.w	r3, r3, #2
 800866e:	b2da      	uxtb	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f003 fd59 	bl	800c12c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7e9b      	ldrb	r3, [r3, #26]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	b2da      	uxtb	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7e9b      	ldrb	r3, [r3, #26]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	7e9b      	ldrb	r3, [r3, #26]
 8008698:	f023 0308 	bic.w	r3, r3, #8
 800869c:	b2da      	uxtb	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff f98e 	bl	80079c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <tcp_fasttmr+0xc4>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f819 	bl	80086f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <tcp_fasttmr+0xc4>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d000      	beq.n	80086cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80086ca:	e7b8      	b.n	800863e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	607b      	str	r3, [r7, #4]
 80086d0:	e002      	b.n	80086d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1b3      	bne.n	8008646 <tcp_fasttmr+0x1a>
    }
  }
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200002ad 	.word	0x200002ad
 80086ec:	200076ac 	.word	0x200076ac
 80086f0:	200076a8 	.word	0x200076a8

080086f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008700:	7b5b      	ldrb	r3, [r3, #13]
 8008702:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008708:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <tcp_process_refused_data+0x3e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6918      	ldr	r0, [r3, #16]
 8008724:	2300      	movs	r3, #0
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	47a0      	blx	r4
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	e007      	b.n	8008742 <tcp_process_refused_data+0x4e>
 8008732:	2300      	movs	r3, #0
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	2000      	movs	r0, #0
 800873a:	f000 f89b 	bl	8008874 <tcp_recv_null>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12a      	bne.n	80087a0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d033      	beq.n	80087bc <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008758:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800875c:	d005      	beq.n	800876a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008762:	3301      	adds	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <tcp_process_refused_data+0x98>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6918      	ldr	r0, [r3, #16]
 800877e:	2300      	movs	r3, #0
 8008780:	2200      	movs	r2, #0
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	47a0      	blx	r4
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]
 800878a:	e001      	b.n	8008790 <tcp_process_refused_data+0x9c>
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008794:	f113 0f0d 	cmn.w	r3, #13
 8008798:	d110      	bne.n	80087bc <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800879a:	f06f 030c 	mvn.w	r3, #12
 800879e:	e00e      	b.n	80087be <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80087a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087a4:	f113 0f0d 	cmn.w	r3, #13
 80087a8:	d102      	bne.n	80087b0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80087aa:	f06f 030c 	mvn.w	r3, #12
 80087ae:	e006      	b.n	80087be <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80087b6:	f06f 0304 	mvn.w	r3, #4
 80087ba:	e000      	b.n	80087be <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd90      	pop	{r4, r7, pc}

080087c6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80087ce:	e007      	b.n	80087e0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f809 	bl	80087ee <tcp_seg_free>
    seg = next;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f4      	bne.n	80087d0 <tcp_segs_free+0xa>
  }
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00c      	beq.n	8008816 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	4618      	mov	r0, r3
 800880a:	f7fe fc37 	bl	800707c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	2004      	movs	r0, #4
 8008812:	f7fd ff01 	bl	8006618 <memp_free>
  }
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	755a      	strb	r2, [r3, #21]
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008844:	2004      	movs	r0, #4
 8008846:	f7fd fe9b 	bl	8006580 <memp_malloc>
 800884a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <tcp_seg_copy+0x1a>
    return NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	e00a      	b.n	800886c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008856:	2210      	movs	r2, #16
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f00a fb47 	bl	8012eee <memcpy>
  pbuf_ref(cseg->p);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fcb5 	bl	80071d4 <pbuf_ref>
  return cseg;
 800886a:	68fb      	ldr	r3, [r7, #12]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d009      	beq.n	800889c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	891b      	ldrh	r3, [r3, #8]
 800888c:	4619      	mov	r1, r3
 800888e:	68b8      	ldr	r0, [r7, #8]
 8008890:	f7ff fb6e 	bl	8007f70 <tcp_recved>
    pbuf_free(p);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7fe fbf1 	bl	800707c <pbuf_free>
 800889a:	e008      	b.n	80088ae <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800889c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80088a4:	68b8      	ldr	r0, [r7, #8]
 80088a6:	f7ff f8f3 	bl	8007a90 <tcp_close>
 80088aa:	4603      	mov	r3, r0
 80088ac:	e000      	b.n	80088b0 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80088c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	db01      	blt.n	80088ce <tcp_kill_prio+0x16>
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	e000      	b.n	80088d0 <tcp_kill_prio+0x18>
 80088ce:	237f      	movs	r3, #127	; 0x7f
 80088d0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088da:	4b16      	ldr	r3, [pc, #88]	; (8008934 <tcp_kill_prio+0x7c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e01a      	b.n	8008918 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	7d5b      	ldrb	r3, [r3, #21]
 80088e6:	7afa      	ldrb	r2, [r7, #11]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d312      	bcc.n	8008912 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80088ec:	4b12      	ldr	r3, [pc, #72]	; (8008938 <tcp_kill_prio+0x80>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d80a      	bhi.n	8008912 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <tcp_kill_prio+0x80>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	7d5b      	ldrb	r3, [r3, #21]
 8008910:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e1      	bne.n	80088e2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008924:	6938      	ldr	r0, [r7, #16]
 8008926:	f7ff f97d 	bl	8007c24 <tcp_abort>
  }
}
 800892a:	bf00      	nop
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	200076ac 	.word	0x200076ac
 8008938:	200076b0 	.word	0x200076b0

0800893c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d009      	beq.n	8008960 <tcp_kill_state+0x24>
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	2b09      	cmp	r3, #9
 8008950:	d006      	beq.n	8008960 <tcp_kill_state+0x24>
 8008952:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <tcp_kill_state+0x80>)
 8008954:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008958:	4919      	ldr	r1, [pc, #100]	; (80089c0 <tcp_kill_state+0x84>)
 800895a:	481a      	ldr	r0, [pc, #104]	; (80089c4 <tcp_kill_state+0x88>)
 800895c:	f00a fe64 	bl	8013628 <iprintf>

  inactivity = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008968:	4b17      	ldr	r3, [pc, #92]	; (80089c8 <tcp_kill_state+0x8c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	617b      	str	r3, [r7, #20]
 800896e:	e017      	b.n	80089a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	7d1b      	ldrb	r3, [r3, #20]
 8008974:	79fa      	ldrb	r2, [r7, #7]
 8008976:	429a      	cmp	r2, r3
 8008978:	d10f      	bne.n	800899a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800897a:	4b14      	ldr	r3, [pc, #80]	; (80089cc <tcp_kill_state+0x90>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	429a      	cmp	r2, r3
 8008988:	d807      	bhi.n	800899a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800898a:	4b10      	ldr	r3, [pc, #64]	; (80089cc <tcp_kill_state+0x90>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e4      	bne.n	8008970 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80089ac:	2100      	movs	r1, #0
 80089ae:	6938      	ldr	r0, [r7, #16]
 80089b0:	f7ff f886 	bl	8007ac0 <tcp_abandon>
  }
}
 80089b4:	bf00      	nop
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	0801597c 	.word	0x0801597c
 80089c0:	08015c8c 	.word	0x08015c8c
 80089c4:	080159b8 	.word	0x080159b8
 80089c8:	200076ac 	.word	0x200076ac
 80089cc:	200076b0 	.word	0x200076b0

080089d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <tcp_kill_timewait+0x58>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e012      	b.n	8008a0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <tcp_kill_timewait+0x5c>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d807      	bhi.n	8008a06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80089f6:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <tcp_kill_timewait+0x5c>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e9      	bne.n	80089e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f7ff f903 	bl	8007c24 <tcp_abort>
  }
}
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	200076bc 	.word	0x200076bc
 8008a2c:	200076b0 	.word	0x200076b0

08008a30 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008a3a:	2002      	movs	r0, #2
 8008a3c:	f7fd fda0 	bl	8006580 <memp_malloc>
 8008a40:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d124      	bne.n	8008a92 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008a48:	f7ff ffc2 	bl	80089d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008a4c:	2002      	movs	r0, #2
 8008a4e:	f7fd fd97 	bl	8006580 <memp_malloc>
 8008a52:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d11b      	bne.n	8008a92 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008a5a:	2009      	movs	r0, #9
 8008a5c:	f7ff ff6e 	bl	800893c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008a60:	2002      	movs	r0, #2
 8008a62:	f7fd fd8d 	bl	8006580 <memp_malloc>
 8008a66:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d111      	bne.n	8008a92 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008a6e:	2008      	movs	r0, #8
 8008a70:	f7ff ff64 	bl	800893c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008a74:	2002      	movs	r0, #2
 8008a76:	f7fd fd83 	bl	8006580 <memp_malloc>
 8008a7a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d107      	bne.n	8008a92 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff ff17 	bl	80088b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008a8a:	2002      	movs	r0, #2
 8008a8c:	f7fd fd78 	bl	8006580 <memp_malloc>
 8008a90:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03f      	beq.n	8008b18 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008a98:	2298      	movs	r2, #152	; 0x98
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f00a fa4a 	bl	8012f36 <memset>
    pcb->prio = prio;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	79fa      	ldrb	r2, [r7, #7]
 8008aa6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008aae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ace:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2206      	movs	r2, #6
 8008ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2206      	movs	r2, #6
 8008adc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ae4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <tcp_alloc+0xf4>)
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008af6:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <tcp_alloc+0xf8>)
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008b04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <tcp_alloc+0xfc>)
 8008b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4a07      	ldr	r2, [pc, #28]	; (8008b30 <tcp_alloc+0x100>)
 8008b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008b18:	68fb      	ldr	r3, [r7, #12]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	200076b0 	.word	0x200076b0
 8008b28:	200002ad 	.word	0x200002ad
 8008b2c:	08008875 	.word	0x08008875
 8008b30:	006ddd00 	.word	0x006ddd00

08008b34 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008b38:	2040      	movs	r0, #64	; 0x40
 8008b3a:	f7ff ff79 	bl	8008a30 <tcp_alloc>
 8008b3e:	4603      	mov	r3, r0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	611a      	str	r2, [r3, #16]
  }
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00e      	beq.n	8008b96 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	7d1b      	ldrb	r3, [r3, #20]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d106      	bne.n	8008b8e <tcp_recv+0x26>
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <tcp_recv+0x38>)
 8008b82:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8008b86:	4907      	ldr	r1, [pc, #28]	; (8008ba4 <tcp_recv+0x3c>)
 8008b88:	4807      	ldr	r0, [pc, #28]	; (8008ba8 <tcp_recv+0x40>)
 8008b8a:	f00a fd4d 	bl	8013628 <iprintf>
    pcb->recv = recv;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	0801597c 	.word	0x0801597c
 8008ba4:	08015c9c 	.word	0x08015c9c
 8008ba8:	080159b8 	.word	0x080159b8

08008bac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	7d1b      	ldrb	r3, [r3, #20]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d106      	bne.n	8008bd2 <tcp_sent+0x26>
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <tcp_sent+0x34>)
 8008bc6:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8008bca:	4906      	ldr	r1, [pc, #24]	; (8008be4 <tcp_sent+0x38>)
 8008bcc:	4806      	ldr	r0, [pc, #24]	; (8008be8 <tcp_sent+0x3c>)
 8008bce:	f00a fd2b 	bl	8013628 <iprintf>
    pcb->sent = sent;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	0801597c 	.word	0x0801597c
 8008be4:	08015cc4 	.word	0x08015cc4
 8008be8:	080159b8 	.word	0x080159b8

08008bec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00e      	beq.n	8008c1a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	7d1b      	ldrb	r3, [r3, #20]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d106      	bne.n	8008c12 <tcp_err+0x26>
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <tcp_err+0x38>)
 8008c06:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8008c0a:	4907      	ldr	r1, [pc, #28]	; (8008c28 <tcp_err+0x3c>)
 8008c0c:	4807      	ldr	r0, [pc, #28]	; (8008c2c <tcp_err+0x40>)
 8008c0e:	f00a fd0b 	bl	8013628 <iprintf>
    pcb->errf = err;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	0801597c 	.word	0x0801597c
 8008c28:	08015cec 	.word	0x08015cec
 8008c2c:	080159b8 	.word	0x080159b8

08008c30 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <tcp_accept+0x22>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7d1b      	ldrb	r3, [r3, #20]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d104      	bne.n	8008c52 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	619a      	str	r2, [r3, #24]
  }
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	7d1b      	ldrb	r3, [r3, #20]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d106      	bne.n	8008c84 <tcp_poll+0x24>
 8008c76:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <tcp_poll+0x3c>)
 8008c78:	f240 7203 	movw	r2, #1795	; 0x703
 8008c7c:	4908      	ldr	r1, [pc, #32]	; (8008ca0 <tcp_poll+0x40>)
 8008c7e:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <tcp_poll+0x44>)
 8008c80:	f00a fcd2 	bl	8013628 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	79fa      	ldrb	r2, [r7, #7]
 8008c90:	771a      	strb	r2, [r3, #28]
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	0801597c 	.word	0x0801597c
 8008ca0:	08015d14 	.word	0x08015d14
 8008ca4:	080159b8 	.word	0x080159b8

08008ca8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7d1b      	ldrb	r3, [r3, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d034      	beq.n	8008d22 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008cbc:	2b0a      	cmp	r3, #10
 8008cbe:	d030      	beq.n	8008d22 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d02c      	beq.n	8008d22 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d007      	beq.n	8008ce0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe f9d1 	bl	800707c <pbuf_free>
      pcb->refused_data = NULL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff fd6e 	bl	80087c6 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fd62 	bl	80087c6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fd5d 	bl	80087c6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	669a      	str	r2, [r3, #104]	; 0x68
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d105      	bne.n	8008d4c <tcp_pcb_remove+0x20>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	e013      	b.n	8008d74 <tcp_pcb_remove+0x48>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e00c      	b.n	8008d6e <tcp_pcb_remove+0x42>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d104      	bne.n	8008d68 <tcp_pcb_remove+0x3c>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	e005      	b.n	8008d74 <tcp_pcb_remove+0x48>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1ef      	bne.n	8008d54 <tcp_pcb_remove+0x28>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2200      	movs	r2, #0
 8008d78:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008d7a:	6838      	ldr	r0, [r7, #0]
 8008d7c:	f7ff ff94 	bl	8008ca8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	7d1b      	ldrb	r3, [r3, #20]
 8008d84:	2b0a      	cmp	r3, #10
 8008d86:	d013      	beq.n	8008db0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d00f      	beq.n	8008db0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	7e9b      	ldrb	r3, [r3, #26]
 8008d94:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d009      	beq.n	8008db0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	7e9b      	ldrb	r3, [r3, #26]
 8008da0:	f043 0302 	orr.w	r3, r3, #2
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008daa:	6838      	ldr	r0, [r7, #0]
 8008dac:	f003 f9be 	bl	800c12c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d020      	beq.n	8008dfa <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <tcp_pcb_remove+0xa2>
 8008dc0:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <tcp_pcb_remove+0xe4>)
 8008dc2:	f240 7253 	movw	r2, #1875	; 0x753
 8008dc6:	4913      	ldr	r1, [pc, #76]	; (8008e14 <tcp_pcb_remove+0xe8>)
 8008dc8:	4813      	ldr	r0, [pc, #76]	; (8008e18 <tcp_pcb_remove+0xec>)
 8008dca:	f00a fc2d 	bl	8013628 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d006      	beq.n	8008de4 <tcp_pcb_remove+0xb8>
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <tcp_pcb_remove+0xe4>)
 8008dd8:	f240 7254 	movw	r2, #1876	; 0x754
 8008ddc:	490f      	ldr	r1, [pc, #60]	; (8008e1c <tcp_pcb_remove+0xf0>)
 8008dde:	480e      	ldr	r0, [pc, #56]	; (8008e18 <tcp_pcb_remove+0xec>)
 8008de0:	f00a fc22 	bl	8013628 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d006      	beq.n	8008dfa <tcp_pcb_remove+0xce>
 8008dec:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <tcp_pcb_remove+0xe4>)
 8008dee:	f240 7256 	movw	r2, #1878	; 0x756
 8008df2:	490b      	ldr	r1, [pc, #44]	; (8008e20 <tcp_pcb_remove+0xf4>)
 8008df4:	4808      	ldr	r0, [pc, #32]	; (8008e18 <tcp_pcb_remove+0xec>)
 8008df6:	f00a fc17 	bl	8013628 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008e06:	bf00      	nop
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	0801597c 	.word	0x0801597c
 8008e14:	08015d34 	.word	0x08015d34
 8008e18:	080159b8 	.word	0x080159b8
 8008e1c:	08015d4c 	.word	0x08015d4c
 8008e20:	08015d68 	.word	0x08015d68

08008e24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008e2c:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <tcp_next_iss+0x28>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <tcp_next_iss+0x2c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	4a05      	ldr	r2, [pc, #20]	; (8008e4c <tcp_next_iss+0x28>)
 8008e38:	6013      	str	r3, [r2, #0]
  return iss;
 8008e3a:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <tcp_next_iss+0x28>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000078 	.word	0x20000078
 8008e50:	200076b0 	.word	0x200076b0

08008e54 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8008e60:	6838      	ldr	r0, [r7, #0]
 8008e62:	f005 fa29 	bl	800e2b8 <ip4_route>
 8008e66:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	e010      	b.n	8008e94 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008e76:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008e78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d008      	beq.n	8008e92 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008e80:	897b      	ldrh	r3, [r7, #10]
 8008e82:	3b28      	subs	r3, #40	; 0x28
 8008e84:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008e86:	893a      	ldrh	r2, [r7, #8]
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	bf28      	it	cs
 8008e8e:	4613      	movcs	r3, r2
 8008e90:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8008e92:	88fb      	ldrh	r3, [r7, #6]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008eaa:	e011      	b.n	8008ed0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d108      	bne.n	8008eca <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7fe feb0 	bl	8007c24 <tcp_abort>
      pcb = next;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e002      	b.n	8008ed0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1ea      	bne.n	8008eac <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d02c      	beq.n	8008f4a <tcp_netif_ip_addr_changed+0x6a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d028      	beq.n	8008f4a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008ef8:	4b16      	ldr	r3, [pc, #88]	; (8008f54 <tcp_netif_ip_addr_changed+0x74>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff ffcc 	bl	8008e9c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008f04:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <tcp_netif_ip_addr_changed+0x78>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff ffc6 	bl	8008e9c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d019      	beq.n	8008f4a <tcp_netif_ip_addr_changed+0x6a>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d015      	beq.n	8008f4a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <tcp_netif_ip_addr_changed+0x7c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	e00e      	b.n	8008f44 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d103      	bne.n	8008f40 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1ed      	bne.n	8008f26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	200076ac 	.word	0x200076ac
 8008f58:	200076b8 	.word	0x200076b8
 8008f5c:	200076b4 	.word	0x200076b4

08008f60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b08b      	sub	sp, #44	; 0x2c
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	4a82      	ldr	r2, [pc, #520]	; (8009178 <tcp_input+0x218>)
 8008f70:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	895b      	ldrh	r3, [r3, #10]
 8008f76:	2b13      	cmp	r3, #19
 8008f78:	f240 838a 	bls.w	8009690 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008f7c:	4b7f      	ldr	r3, [pc, #508]	; (800917c <tcp_input+0x21c>)
 8008f7e:	695a      	ldr	r2, [r3, #20]
 8008f80:	4b7e      	ldr	r3, [pc, #504]	; (800917c <tcp_input+0x21c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f005 fc1a 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f040 8380 	bne.w	8009694 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008f94:	4b79      	ldr	r3, [pc, #484]	; (800917c <tcp_input+0x21c>)
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008f9c:	2be0      	cmp	r3, #224	; 0xe0
 8008f9e:	f000 8379 	beq.w	8009694 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008fa2:	4b75      	ldr	r3, [pc, #468]	; (8009178 <tcp_input+0x218>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	899b      	ldrh	r3, [r3, #12]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fc ff39 	bl	8005e22 <lwip_htons>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	0b1b      	lsrs	r3, r3, #12
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008fbc:	7cbb      	ldrb	r3, [r7, #18]
 8008fbe:	2b13      	cmp	r3, #19
 8008fc0:	f240 8368 	bls.w	8009694 <tcp_input+0x734>
 8008fc4:	7cbb      	ldrb	r3, [r7, #18]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	891b      	ldrh	r3, [r3, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	f200 8361 	bhi.w	8009694 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008fd2:	7cbb      	ldrb	r3, [r7, #18]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b14      	subs	r3, #20
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	4b69      	ldr	r3, [pc, #420]	; (8009180 <tcp_input+0x220>)
 8008fdc:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008fde:	4b69      	ldr	r3, [pc, #420]	; (8009184 <tcp_input+0x224>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	895a      	ldrh	r2, [r3, #10]
 8008fe8:	7cbb      	ldrb	r3, [r7, #18]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d30d      	bcc.n	800900c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008ff0:	4b63      	ldr	r3, [pc, #396]	; (8009180 <tcp_input+0x220>)
 8008ff2:	881a      	ldrh	r2, [r3, #0]
 8008ff4:	4b64      	ldr	r3, [pc, #400]	; (8009188 <tcp_input+0x228>)
 8008ff6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008ff8:	7cbb      	ldrb	r3, [r7, #18]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	425b      	negs	r3, r3
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	b21b      	sxth	r3, r3
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fe f815 	bl	8007034 <pbuf_header>
 800900a:	e055      	b.n	80090b8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <tcp_input+0xc0>
 8009014:	4b5d      	ldr	r3, [pc, #372]	; (800918c <tcp_input+0x22c>)
 8009016:	22b2      	movs	r2, #178	; 0xb2
 8009018:	495d      	ldr	r1, [pc, #372]	; (8009190 <tcp_input+0x230>)
 800901a:	485e      	ldr	r0, [pc, #376]	; (8009194 <tcp_input+0x234>)
 800901c:	f00a fb04 	bl	8013628 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8009020:	f06f 0113 	mvn.w	r1, #19
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fe f805 	bl	8007034 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	895a      	ldrh	r2, [r3, #10]
 800902e:	4b56      	ldr	r3, [pc, #344]	; (8009188 <tcp_input+0x228>)
 8009030:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009032:	4b53      	ldr	r3, [pc, #332]	; (8009180 <tcp_input+0x220>)
 8009034:	881a      	ldrh	r2, [r3, #0]
 8009036:	4b54      	ldr	r3, [pc, #336]	; (8009188 <tcp_input+0x228>)
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800903e:	4b52      	ldr	r3, [pc, #328]	; (8009188 <tcp_input+0x228>)
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	425b      	negs	r3, r3
 8009044:	b29b      	uxth	r3, r3
 8009046:	b21b      	sxth	r3, r3
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7fd fff2 	bl	8007034 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	895b      	ldrh	r3, [r3, #10]
 8009056:	8a3a      	ldrh	r2, [r7, #16]
 8009058:	429a      	cmp	r2, r3
 800905a:	f200 831d 	bhi.w	8009698 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4a47      	ldr	r2, [pc, #284]	; (8009184 <tcp_input+0x224>)
 8009066:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	8a3b      	ldrh	r3, [r7, #16]
 800906e:	425b      	negs	r3, r3
 8009070:	b29b      	uxth	r3, r3
 8009072:	b21b      	sxth	r3, r3
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f7fd ffdc 	bl	8007034 <pbuf_header>
    p->tot_len -= opt2len;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	891a      	ldrh	r2, [r3, #8]
 8009080:	8a3b      	ldrh	r3, [r7, #16]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	b29a      	uxth	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	895b      	ldrh	r3, [r3, #10]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d005      	beq.n	800909e <tcp_input+0x13e>
 8009092:	4b3e      	ldr	r3, [pc, #248]	; (800918c <tcp_input+0x22c>)
 8009094:	22cf      	movs	r2, #207	; 0xcf
 8009096:	4940      	ldr	r1, [pc, #256]	; (8009198 <tcp_input+0x238>)
 8009098:	483e      	ldr	r0, [pc, #248]	; (8009194 <tcp_input+0x234>)
 800909a:	f00a fac5 	bl	8013628 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	891a      	ldrh	r2, [r3, #8]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	891b      	ldrh	r3, [r3, #8]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d005      	beq.n	80090b8 <tcp_input+0x158>
 80090ac:	4b37      	ldr	r3, [pc, #220]	; (800918c <tcp_input+0x22c>)
 80090ae:	22d0      	movs	r2, #208	; 0xd0
 80090b0:	493a      	ldr	r1, [pc, #232]	; (800919c <tcp_input+0x23c>)
 80090b2:	4838      	ldr	r0, [pc, #224]	; (8009194 <tcp_input+0x234>)
 80090b4:	f00a fab8 	bl	8013628 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80090b8:	4b2f      	ldr	r3, [pc, #188]	; (8009178 <tcp_input+0x218>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	4b2d      	ldr	r3, [pc, #180]	; (8009178 <tcp_input+0x218>)
 80090c2:	681c      	ldr	r4, [r3, #0]
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fc feac 	bl	8005e22 <lwip_htons>
 80090ca:	4603      	mov	r3, r0
 80090cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80090ce:	4b2a      	ldr	r3, [pc, #168]	; (8009178 <tcp_input+0x218>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	885b      	ldrh	r3, [r3, #2]
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	4b28      	ldr	r3, [pc, #160]	; (8009178 <tcp_input+0x218>)
 80090d8:	681c      	ldr	r4, [r3, #0]
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fc fea1 	bl	8005e22 <lwip_htons>
 80090e0:	4603      	mov	r3, r0
 80090e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80090e4:	4b24      	ldr	r3, [pc, #144]	; (8009178 <tcp_input+0x218>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	4b23      	ldr	r3, [pc, #140]	; (8009178 <tcp_input+0x218>)
 80090ec:	681c      	ldr	r4, [r3, #0]
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fc fea5 	bl	8005e3e <lwip_htonl>
 80090f4:	4603      	mov	r3, r0
 80090f6:	6063      	str	r3, [r4, #4]
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	4a29      	ldr	r2, [pc, #164]	; (80091a0 <tcp_input+0x240>)
 80090fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80090fe:	4b1e      	ldr	r3, [pc, #120]	; (8009178 <tcp_input+0x218>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	4b1c      	ldr	r3, [pc, #112]	; (8009178 <tcp_input+0x218>)
 8009106:	681c      	ldr	r4, [r3, #0]
 8009108:	4610      	mov	r0, r2
 800910a:	f7fc fe98 	bl	8005e3e <lwip_htonl>
 800910e:	4603      	mov	r3, r0
 8009110:	60a3      	str	r3, [r4, #8]
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	4a23      	ldr	r2, [pc, #140]	; (80091a4 <tcp_input+0x244>)
 8009116:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009118:	4b17      	ldr	r3, [pc, #92]	; (8009178 <tcp_input+0x218>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	89db      	ldrh	r3, [r3, #14]
 800911e:	b29a      	uxth	r2, r3
 8009120:	4b15      	ldr	r3, [pc, #84]	; (8009178 <tcp_input+0x218>)
 8009122:	681c      	ldr	r4, [r3, #0]
 8009124:	4610      	mov	r0, r2
 8009126:	f7fc fe7c 	bl	8005e22 <lwip_htons>
 800912a:	4603      	mov	r3, r0
 800912c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <tcp_input+0x218>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	899b      	ldrh	r3, [r3, #12]
 8009134:	b29b      	uxth	r3, r3
 8009136:	4618      	mov	r0, r3
 8009138:	f7fc fe73 	bl	8005e22 <lwip_htons>
 800913c:	4603      	mov	r3, r0
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009144:	b2da      	uxtb	r2, r3
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <tcp_input+0x248>)
 8009148:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	891a      	ldrh	r2, [r3, #8]
 800914e:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <tcp_input+0x248>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b00      	cmp	r3, #0
 8009158:	bf14      	ite	ne
 800915a:	2301      	movne	r3, #1
 800915c:	2300      	moveq	r3, #0
 800915e:	b2db      	uxtb	r3, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	4413      	add	r3, r2
 8009164:	b29a      	uxth	r2, r3
 8009166:	4b11      	ldr	r3, [pc, #68]	; (80091ac <tcp_input+0x24c>)
 8009168:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800916e:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <tcp_input+0x250>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e082      	b.n	800927c <tcp_input+0x31c>
 8009176:	bf00      	nop
 8009178:	200002c0 	.word	0x200002c0
 800917c:	20004014 	.word	0x20004014
 8009180:	200002c4 	.word	0x200002c4
 8009184:	200002c8 	.word	0x200002c8
 8009188:	200002c6 	.word	0x200002c6
 800918c:	08015d80 	.word	0x08015d80
 8009190:	08015db4 	.word	0x08015db4
 8009194:	08015dc4 	.word	0x08015dc4
 8009198:	08015dec 	.word	0x08015dec
 800919c:	08015df8 	.word	0x08015df8
 80091a0:	200002d0 	.word	0x200002d0
 80091a4:	200002d4 	.word	0x200002d4
 80091a8:	200002dc 	.word	0x200002dc
 80091ac:	200002da 	.word	0x200002da
 80091b0:	200076ac 	.word	0x200076ac
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d105      	bne.n	80091c8 <tcp_input+0x268>
 80091bc:	4b8f      	ldr	r3, [pc, #572]	; (80093fc <tcp_input+0x49c>)
 80091be:	22e2      	movs	r2, #226	; 0xe2
 80091c0:	498f      	ldr	r1, [pc, #572]	; (8009400 <tcp_input+0x4a0>)
 80091c2:	4890      	ldr	r0, [pc, #576]	; (8009404 <tcp_input+0x4a4>)
 80091c4:	f00a fa30 	bl	8013628 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	7d1b      	ldrb	r3, [r3, #20]
 80091cc:	2b0a      	cmp	r3, #10
 80091ce:	d105      	bne.n	80091dc <tcp_input+0x27c>
 80091d0:	4b8a      	ldr	r3, [pc, #552]	; (80093fc <tcp_input+0x49c>)
 80091d2:	22e3      	movs	r2, #227	; 0xe3
 80091d4:	498c      	ldr	r1, [pc, #560]	; (8009408 <tcp_input+0x4a8>)
 80091d6:	488b      	ldr	r0, [pc, #556]	; (8009404 <tcp_input+0x4a4>)
 80091d8:	f00a fa26 	bl	8013628 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	7d1b      	ldrb	r3, [r3, #20]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d105      	bne.n	80091f0 <tcp_input+0x290>
 80091e4:	4b85      	ldr	r3, [pc, #532]	; (80093fc <tcp_input+0x49c>)
 80091e6:	22e4      	movs	r2, #228	; 0xe4
 80091e8:	4988      	ldr	r1, [pc, #544]	; (800940c <tcp_input+0x4ac>)
 80091ea:	4886      	ldr	r0, [pc, #536]	; (8009404 <tcp_input+0x4a4>)
 80091ec:	f00a fa1c 	bl	8013628 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	8b1a      	ldrh	r2, [r3, #24]
 80091f4:	4b86      	ldr	r3, [pc, #536]	; (8009410 <tcp_input+0x4b0>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d138      	bne.n	8009272 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	8ada      	ldrh	r2, [r3, #22]
 8009204:	4b82      	ldr	r3, [pc, #520]	; (8009410 <tcp_input+0x4b0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800920c:	429a      	cmp	r2, r3
 800920e:	d130      	bne.n	8009272 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	4b7f      	ldr	r3, [pc, #508]	; (8009414 <tcp_input+0x4b4>)
 8009216:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009218:	429a      	cmp	r2, r3
 800921a:	d12a      	bne.n	8009272 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	4b7c      	ldr	r3, [pc, #496]	; (8009414 <tcp_input+0x4b4>)
 8009222:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009224:	429a      	cmp	r2, r3
 8009226:	d124      	bne.n	8009272 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	429a      	cmp	r2, r3
 8009230:	d105      	bne.n	800923e <tcp_input+0x2de>
 8009232:	4b72      	ldr	r3, [pc, #456]	; (80093fc <tcp_input+0x49c>)
 8009234:	22ec      	movs	r2, #236	; 0xec
 8009236:	4978      	ldr	r1, [pc, #480]	; (8009418 <tcp_input+0x4b8>)
 8009238:	4872      	ldr	r0, [pc, #456]	; (8009404 <tcp_input+0x4a4>)
 800923a:	f00a f9f5 	bl	8013628 <iprintf>
      if (prev != NULL) {
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00a      	beq.n	800925a <tcp_input+0x2fa>
        prev->next = pcb->next;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800924c:	4b73      	ldr	r3, [pc, #460]	; (800941c <tcp_input+0x4bc>)
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009254:	4a71      	ldr	r2, [pc, #452]	; (800941c <tcp_input+0x4bc>)
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	429a      	cmp	r2, r3
 8009262:	d10f      	bne.n	8009284 <tcp_input+0x324>
 8009264:	4b65      	ldr	r3, [pc, #404]	; (80093fc <tcp_input+0x49c>)
 8009266:	22f4      	movs	r2, #244	; 0xf4
 8009268:	496d      	ldr	r1, [pc, #436]	; (8009420 <tcp_input+0x4c0>)
 800926a:	4866      	ldr	r0, [pc, #408]	; (8009404 <tcp_input+0x4a4>)
 800926c:	f00a f9dc 	bl	8013628 <iprintf>
      break;
 8009270:	e008      	b.n	8009284 <tcp_input+0x324>
    }
    prev = pcb;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	61fb      	str	r3, [r7, #28]
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d198      	bne.n	80091b4 <tcp_input+0x254>
 8009282:	e000      	b.n	8009286 <tcp_input+0x326>
      break;
 8009284:	bf00      	nop
  }

  if (pcb == NULL) {
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d173      	bne.n	8009374 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800928c:	4b65      	ldr	r3, [pc, #404]	; (8009424 <tcp_input+0x4c4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	61fb      	str	r3, [r7, #28]
 8009292:	e02f      	b.n	80092f4 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	7d1b      	ldrb	r3, [r3, #20]
 8009298:	2b0a      	cmp	r3, #10
 800929a:	d005      	beq.n	80092a8 <tcp_input+0x348>
 800929c:	4b57      	ldr	r3, [pc, #348]	; (80093fc <tcp_input+0x49c>)
 800929e:	22fe      	movs	r2, #254	; 0xfe
 80092a0:	4961      	ldr	r1, [pc, #388]	; (8009428 <tcp_input+0x4c8>)
 80092a2:	4858      	ldr	r0, [pc, #352]	; (8009404 <tcp_input+0x4a4>)
 80092a4:	f00a f9c0 	bl	8013628 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	8b1a      	ldrh	r2, [r3, #24]
 80092ac:	4b58      	ldr	r3, [pc, #352]	; (8009410 <tcp_input+0x4b0>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d11a      	bne.n	80092ee <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	8ada      	ldrh	r2, [r3, #22]
 80092bc:	4b54      	ldr	r3, [pc, #336]	; (8009410 <tcp_input+0x4b0>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	885b      	ldrh	r3, [r3, #2]
 80092c2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d112      	bne.n	80092ee <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	4b51      	ldr	r3, [pc, #324]	; (8009414 <tcp_input+0x4b4>)
 80092ce:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d10c      	bne.n	80092ee <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	4b4e      	ldr	r3, [pc, #312]	; (8009414 <tcp_input+0x4b4>)
 80092da:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80092dc:	429a      	cmp	r2, r3
 80092de:	d106      	bne.n	80092ee <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80092e0:	69f8      	ldr	r0, [r7, #28]
 80092e2:	f000 fb15 	bl	8009910 <tcp_timewait_input>
        pbuf_free(p);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fd fec8 	bl	800707c <pbuf_free>
        return;
 80092ec:	e1da      	b.n	80096a4 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1cc      	bne.n	8009294 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80092fe:	4b4b      	ldr	r3, [pc, #300]	; (800942c <tcp_input+0x4cc>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e019      	b.n	800933a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	8ada      	ldrh	r2, [r3, #22]
 800930a:	4b41      	ldr	r3, [pc, #260]	; (8009410 <tcp_input+0x4b0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	885b      	ldrh	r3, [r3, #2]
 8009310:	b29b      	uxth	r3, r3
 8009312:	429a      	cmp	r2, r3
 8009314:	d10c      	bne.n	8009330 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b3e      	ldr	r3, [pc, #248]	; (8009414 <tcp_input+0x4b4>)
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	429a      	cmp	r2, r3
 8009320:	d00f      	beq.n	8009342 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00d      	beq.n	8009344 <tcp_input+0x3e4>
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	617b      	str	r3, [r7, #20]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e2      	bne.n	8009306 <tcp_input+0x3a6>
 8009340:	e000      	b.n	8009344 <tcp_input+0x3e4>
            break;
 8009342:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d014      	beq.n	8009374 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009358:	4b34      	ldr	r3, [pc, #208]	; (800942c <tcp_input+0x4cc>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009360:	4a32      	ldr	r2, [pc, #200]	; (800942c <tcp_input+0x4cc>)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8009366:	6978      	ldr	r0, [r7, #20]
 8009368:	f000 f9f0 	bl	800974c <tcp_listen_input>
      pbuf_free(p);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7fd fe85 	bl	800707c <pbuf_free>
      return;
 8009372:	e197      	b.n	80096a4 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 8164 	beq.w	8009644 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800937c:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <tcp_input+0x4d0>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	891a      	ldrh	r2, [r3, #8]
 8009386:	4b2a      	ldr	r3, [pc, #168]	; (8009430 <tcp_input+0x4d0>)
 8009388:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800938a:	4a29      	ldr	r2, [pc, #164]	; (8009430 <tcp_input+0x4d0>)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009390:	4b1f      	ldr	r3, [pc, #124]	; (8009410 <tcp_input+0x4b0>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a26      	ldr	r2, [pc, #152]	; (8009430 <tcp_input+0x4d0>)
 8009396:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009398:	4b26      	ldr	r3, [pc, #152]	; (8009434 <tcp_input+0x4d4>)
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800939e:	4b26      	ldr	r3, [pc, #152]	; (8009438 <tcp_input+0x4d8>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80093a4:	4b25      	ldr	r3, [pc, #148]	; (800943c <tcp_input+0x4dc>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80093aa:	4b25      	ldr	r3, [pc, #148]	; (8009440 <tcp_input+0x4e0>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 0308 	and.w	r3, r3, #8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d006      	beq.n	80093c4 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7b5b      	ldrb	r3, [r3, #13]
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d03d      	beq.n	8009448 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80093cc:	69f8      	ldr	r0, [r7, #28]
 80093ce:	f7ff f991 	bl	80086f4 <tcp_process_refused_data>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f113 0f0d 	cmn.w	r3, #13
 80093d8:	d007      	beq.n	80093ea <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d032      	beq.n	8009448 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80093e2:	4b18      	ldr	r3, [pc, #96]	; (8009444 <tcp_input+0x4e4>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d02e      	beq.n	8009448 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 8108 	bne.w	8009604 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80093f4:	69f8      	ldr	r0, [r7, #28]
 80093f6:	f002 fe3d 	bl	800c074 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80093fa:	e103      	b.n	8009604 <tcp_input+0x6a4>
 80093fc:	08015d80 	.word	0x08015d80
 8009400:	08015e18 	.word	0x08015e18
 8009404:	08015dc4 	.word	0x08015dc4
 8009408:	08015e40 	.word	0x08015e40
 800940c:	08015e6c 	.word	0x08015e6c
 8009410:	200002c0 	.word	0x200002c0
 8009414:	20004014 	.word	0x20004014
 8009418:	08015e94 	.word	0x08015e94
 800941c:	200076ac 	.word	0x200076ac
 8009420:	08015ec0 	.word	0x08015ec0
 8009424:	200076bc 	.word	0x200076bc
 8009428:	08015eec 	.word	0x08015eec
 800942c:	200076b4 	.word	0x200076b4
 8009430:	200002b0 	.word	0x200002b0
 8009434:	200002e0 	.word	0x200002e0
 8009438:	200002dd 	.word	0x200002dd
 800943c:	200002d8 	.word	0x200002d8
 8009440:	200002dc 	.word	0x200002dc
 8009444:	200002da 	.word	0x200002da
      }
    }
    tcp_input_pcb = pcb;
 8009448:	4a98      	ldr	r2, [pc, #608]	; (80096ac <tcp_input+0x74c>)
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800944e:	69f8      	ldr	r0, [r7, #28]
 8009450:	f000 fac6 	bl	80099e0 <tcp_process>
 8009454:	4603      	mov	r3, r0
 8009456:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009458:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800945c:	f113 0f0d 	cmn.w	r3, #13
 8009460:	f000 80d2 	beq.w	8009608 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8009464:	4b92      	ldr	r3, [pc, #584]	; (80096b0 <tcp_input+0x750>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d016      	beq.n	800949e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d008      	beq.n	800948c <tcp_input+0x52c>
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	6912      	ldr	r2, [r2, #16]
 8009484:	f06f 010d 	mvn.w	r1, #13
 8009488:	4610      	mov	r0, r2
 800948a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800948c:	69f9      	ldr	r1, [r7, #28]
 800948e:	4889      	ldr	r0, [pc, #548]	; (80096b4 <tcp_input+0x754>)
 8009490:	f7ff fc4c 	bl	8008d2c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8009494:	69f9      	ldr	r1, [r7, #28]
 8009496:	2002      	movs	r0, #2
 8009498:	f7fd f8be 	bl	8006618 <memp_free>
 800949c:	e0bf      	b.n	800961e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80094a2:	4b85      	ldr	r3, [pc, #532]	; (80096b8 <tcp_input+0x758>)
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01b      	beq.n	80094e2 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80094aa:	4b83      	ldr	r3, [pc, #524]	; (80096b8 <tcp_input+0x758>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <tcp_input+0x56c>
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	6910      	ldr	r0, [r2, #16]
 80094c0:	89fa      	ldrh	r2, [r7, #14]
 80094c2:	69f9      	ldr	r1, [r7, #28]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	74fb      	strb	r3, [r7, #19]
 80094ca:	e001      	b.n	80094d0 <tcp_input+0x570>
 80094cc:	2300      	movs	r3, #0
 80094ce:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80094d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094d4:	f113 0f0d 	cmn.w	r3, #13
 80094d8:	f000 8098 	beq.w	800960c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80094dc:	4b76      	ldr	r3, [pc, #472]	; (80096b8 <tcp_input+0x758>)
 80094de:	2200      	movs	r2, #0
 80094e0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80094e2:	69f8      	ldr	r0, [r7, #28]
 80094e4:	f000 f900 	bl	80096e8 <tcp_input_delayed_close>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 8090 	bne.w	8009610 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80094f0:	4b72      	ldr	r3, [pc, #456]	; (80096bc <tcp_input+0x75c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d041      	beq.n	800957c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d006      	beq.n	800950e <tcp_input+0x5ae>
 8009500:	4b6f      	ldr	r3, [pc, #444]	; (80096c0 <tcp_input+0x760>)
 8009502:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009506:	496f      	ldr	r1, [pc, #444]	; (80096c4 <tcp_input+0x764>)
 8009508:	486f      	ldr	r0, [pc, #444]	; (80096c8 <tcp_input+0x768>)
 800950a:	f00a f88d 	bl	8013628 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	7e9b      	ldrb	r3, [r3, #26]
 8009512:	f003 0310 	and.w	r3, r3, #16
 8009516:	2b00      	cmp	r3, #0
 8009518:	d008      	beq.n	800952c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800951a:	4b68      	ldr	r3, [pc, #416]	; (80096bc <tcp_input+0x75c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd fdac 	bl	800707c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009524:	69f8      	ldr	r0, [r7, #28]
 8009526:	f7fe fb7d 	bl	8007c24 <tcp_abort>
            goto aborted;
 800952a:	e078      	b.n	800961e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00c      	beq.n	8009550 <tcp_input+0x5f0>
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	6918      	ldr	r0, [r3, #16]
 8009540:	4b5e      	ldr	r3, [pc, #376]	; (80096bc <tcp_input+0x75c>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	2300      	movs	r3, #0
 8009546:	69f9      	ldr	r1, [r7, #28]
 8009548:	47a0      	blx	r4
 800954a:	4603      	mov	r3, r0
 800954c:	74fb      	strb	r3, [r7, #19]
 800954e:	e008      	b.n	8009562 <tcp_input+0x602>
 8009550:	4b5a      	ldr	r3, [pc, #360]	; (80096bc <tcp_input+0x75c>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	69f9      	ldr	r1, [r7, #28]
 8009558:	2000      	movs	r0, #0
 800955a:	f7ff f98b 	bl	8008874 <tcp_recv_null>
 800955e:	4603      	mov	r3, r0
 8009560:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009566:	f113 0f0d 	cmn.w	r3, #13
 800956a:	d053      	beq.n	8009614 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800956c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009574:	4b51      	ldr	r3, [pc, #324]	; (80096bc <tcp_input+0x75c>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800957c:	4b4c      	ldr	r3, [pc, #304]	; (80096b0 <tcp_input+0x750>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d030      	beq.n	80095ea <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800958c:	2b00      	cmp	r3, #0
 800958e:	d009      	beq.n	80095a4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009594:	7b5a      	ldrb	r2, [r3, #13]
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800959a:	f042 0220 	orr.w	r2, r2, #32
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	735a      	strb	r2, [r3, #13]
 80095a2:	e022      	b.n	80095ea <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80095ac:	d005      	beq.n	80095ba <tcp_input+0x65a>
              pcb->rcv_wnd++;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b2:	3301      	adds	r3, #1
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <tcp_input+0x67c>
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	6918      	ldr	r0, [r3, #16]
 80095ce:	2300      	movs	r3, #0
 80095d0:	2200      	movs	r2, #0
 80095d2:	69f9      	ldr	r1, [r7, #28]
 80095d4:	47a0      	blx	r4
 80095d6:	4603      	mov	r3, r0
 80095d8:	74fb      	strb	r3, [r7, #19]
 80095da:	e001      	b.n	80095e0 <tcp_input+0x680>
 80095dc:	2300      	movs	r3, #0
 80095de:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80095e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095e4:	f113 0f0d 	cmn.w	r3, #13
 80095e8:	d016      	beq.n	8009618 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80095ea:	4b30      	ldr	r3, [pc, #192]	; (80096ac <tcp_input+0x74c>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80095f0:	69f8      	ldr	r0, [r7, #28]
 80095f2:	f000 f879 	bl	80096e8 <tcp_input_delayed_close>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10f      	bne.n	800961c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80095fc:	69f8      	ldr	r0, [r7, #28]
 80095fe:	f002 fd95 	bl	800c12c <tcp_output>
 8009602:	e00c      	b.n	800961e <tcp_input+0x6be>
        goto aborted;
 8009604:	bf00      	nop
 8009606:	e00a      	b.n	800961e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009608:	bf00      	nop
 800960a:	e008      	b.n	800961e <tcp_input+0x6be>
              goto aborted;
 800960c:	bf00      	nop
 800960e:	e006      	b.n	800961e <tcp_input+0x6be>
          goto aborted;
 8009610:	bf00      	nop
 8009612:	e004      	b.n	800961e <tcp_input+0x6be>
            goto aborted;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <tcp_input+0x6be>
              goto aborted;
 8009618:	bf00      	nop
 800961a:	e000      	b.n	800961e <tcp_input+0x6be>
          goto aborted;
 800961c:	bf00      	nop
    tcp_input_pcb = NULL;
 800961e:	4b23      	ldr	r3, [pc, #140]	; (80096ac <tcp_input+0x74c>)
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009624:	4b25      	ldr	r3, [pc, #148]	; (80096bc <tcp_input+0x75c>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800962a:	4b28      	ldr	r3, [pc, #160]	; (80096cc <tcp_input+0x76c>)
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d037      	beq.n	80096a2 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8009632:	4b26      	ldr	r3, [pc, #152]	; (80096cc <tcp_input+0x76c>)
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	f7fd fd20 	bl	800707c <pbuf_free>
      inseg.p = NULL;
 800963c:	4b23      	ldr	r3, [pc, #140]	; (80096cc <tcp_input+0x76c>)
 800963e:	2200      	movs	r2, #0
 8009640:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009642:	e02e      	b.n	80096a2 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009644:	4b22      	ldr	r3, [pc, #136]	; (80096d0 <tcp_input+0x770>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	899b      	ldrh	r3, [r3, #12]
 800964a:	b29b      	uxth	r3, r3
 800964c:	4618      	mov	r0, r3
 800964e:	f7fc fbe8 	bl	8005e22 <lwip_htons>
 8009652:	4603      	mov	r3, r0
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	d115      	bne.n	8009688 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800965c:	4b1d      	ldr	r3, [pc, #116]	; (80096d4 <tcp_input+0x774>)
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <tcp_input+0x778>)
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	461a      	mov	r2, r3
 8009666:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <tcp_input+0x77c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800966c:	4b18      	ldr	r3, [pc, #96]	; (80096d0 <tcp_input+0x770>)
 800966e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009670:	885b      	ldrh	r3, [r3, #2]
 8009672:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009674:	4a16      	ldr	r2, [pc, #88]	; (80096d0 <tcp_input+0x770>)
 8009676:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009678:	8812      	ldrh	r2, [r2, #0]
 800967a:	b292      	uxth	r2, r2
 800967c:	9201      	str	r2, [sp, #4]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <tcp_input+0x780>)
 8009682:	4a18      	ldr	r2, [pc, #96]	; (80096e4 <tcp_input+0x784>)
 8009684:	f002 ffdc 	bl	800c640 <tcp_rst>
    pbuf_free(p);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fd fcf7 	bl	800707c <pbuf_free>
  return;
 800968e:	e008      	b.n	80096a2 <tcp_input+0x742>
    goto dropped;
 8009690:	bf00      	nop
 8009692:	e002      	b.n	800969a <tcp_input+0x73a>
dropped:
 8009694:	bf00      	nop
 8009696:	e000      	b.n	800969a <tcp_input+0x73a>
      goto dropped;
 8009698:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7fd fcee 	bl	800707c <pbuf_free>
 80096a0:	e000      	b.n	80096a4 <tcp_input+0x744>
  return;
 80096a2:	bf00      	nop
}
 80096a4:	3724      	adds	r7, #36	; 0x24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd90      	pop	{r4, r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200076c0 	.word	0x200076c0
 80096b0:	200002dd 	.word	0x200002dd
 80096b4:	200076ac 	.word	0x200076ac
 80096b8:	200002d8 	.word	0x200002d8
 80096bc:	200002e0 	.word	0x200002e0
 80096c0:	08015d80 	.word	0x08015d80
 80096c4:	08015f1c 	.word	0x08015f1c
 80096c8:	08015dc4 	.word	0x08015dc4
 80096cc:	200002b0 	.word	0x200002b0
 80096d0:	200002c0 	.word	0x200002c0
 80096d4:	200002d4 	.word	0x200002d4
 80096d8:	200002da 	.word	0x200002da
 80096dc:	200002d0 	.word	0x200002d0
 80096e0:	20004024 	.word	0x20004024
 80096e4:	20004028 	.word	0x20004028

080096e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80096f0:	4b14      	ldr	r3, [pc, #80]	; (8009744 <tcp_input_delayed_close+0x5c>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01d      	beq.n	8009738 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7e9b      	ldrb	r3, [r3, #26]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10d      	bne.n	8009724 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <tcp_input_delayed_close+0x3c>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	6912      	ldr	r2, [r2, #16]
 800971c:	f06f 010e 	mvn.w	r1, #14
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4808      	ldr	r0, [pc, #32]	; (8009748 <tcp_input_delayed_close+0x60>)
 8009728:	f7ff fb00 	bl	8008d2c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	2002      	movs	r0, #2
 8009730:	f7fc ff72 	bl	8006618 <memp_free>
    return 1;
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200002dd 	.word	0x200002dd
 8009748:	200076ac 	.word	0x200076ac

0800974c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af02      	add	r7, sp, #8
 8009752:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009754:	4b64      	ldr	r3, [pc, #400]	; (80098e8 <tcp_listen_input+0x19c>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 80bc 	bne.w	80098da <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009762:	4b61      	ldr	r3, [pc, #388]	; (80098e8 <tcp_listen_input+0x19c>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	f003 0310 	and.w	r3, r3, #16
 800976a:	2b00      	cmp	r3, #0
 800976c:	d016      	beq.n	800979c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800976e:	4b5f      	ldr	r3, [pc, #380]	; (80098ec <tcp_listen_input+0x1a0>)
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	4b5f      	ldr	r3, [pc, #380]	; (80098f0 <tcp_listen_input+0x1a4>)
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	4b5e      	ldr	r3, [pc, #376]	; (80098f4 <tcp_listen_input+0x1a8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800977e:	4b5e      	ldr	r3, [pc, #376]	; (80098f8 <tcp_listen_input+0x1ac>)
 8009780:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009786:	4a5c      	ldr	r2, [pc, #368]	; (80098f8 <tcp_listen_input+0x1ac>)
 8009788:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800978a:	8812      	ldrh	r2, [r2, #0]
 800978c:	b292      	uxth	r2, r2
 800978e:	9201      	str	r2, [sp, #4]
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	4b5a      	ldr	r3, [pc, #360]	; (80098fc <tcp_listen_input+0x1b0>)
 8009794:	4a5a      	ldr	r2, [pc, #360]	; (8009900 <tcp_listen_input+0x1b4>)
 8009796:	f002 ff53 	bl	800c640 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800979a:	e0a0      	b.n	80098de <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800979c:	4b52      	ldr	r3, [pc, #328]	; (80098e8 <tcp_listen_input+0x19c>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 809a 	beq.w	80098de <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7d5b      	ldrb	r3, [r3, #21]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff f93e 	bl	8008a30 <tcp_alloc>
 80097b4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d111      	bne.n	80097e0 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00a      	beq.n	80097da <tcp_listen_input+0x8e>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6910      	ldr	r0, [r2, #16]
 80097cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097d0:	2100      	movs	r1, #0
 80097d2:	4798      	blx	r3
 80097d4:	4603      	mov	r3, r0
 80097d6:	73bb      	strb	r3, [r7, #14]
      return;
 80097d8:	e082      	b.n	80098e0 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80097da:	23f0      	movs	r3, #240	; 0xf0
 80097dc:	73bb      	strb	r3, [r7, #14]
      return;
 80097de:	e07f      	b.n	80098e0 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80097e0:	4b48      	ldr	r3, [pc, #288]	; (8009904 <tcp_listen_input+0x1b8>)
 80097e2:	695a      	ldr	r2, [r3, #20]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80097e8:	4b46      	ldr	r3, [pc, #280]	; (8009904 <tcp_listen_input+0x1b8>)
 80097ea:	691a      	ldr	r2, [r3, #16]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	8ada      	ldrh	r2, [r3, #22]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80097f8:	4b3f      	ldr	r3, [pc, #252]	; (80098f8 <tcp_listen_input+0x1ac>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2203      	movs	r2, #3
 8009808:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800980a:	4b3a      	ldr	r3, [pc, #232]	; (80098f4 <tcp_listen_input+0x1a8>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800981c:	6978      	ldr	r0, [r7, #20]
 800981e:	f7ff fb01 	bl	8008e24 <tcp_next_iss>
 8009822:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800983c:	4b2d      	ldr	r3, [pc, #180]	; (80098f4 <tcp_listen_input+0x1a8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	1e5a      	subs	r2, r3, #1
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7a1b      	ldrb	r3, [r3, #8]
 8009858:	f003 030c 	and.w	r3, r3, #12
 800985c:	b2da      	uxtb	r2, r3
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009862:	4b29      	ldr	r3, [pc, #164]	; (8009908 <tcp_listen_input+0x1bc>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	4a27      	ldr	r2, [pc, #156]	; (8009908 <tcp_listen_input+0x1bc>)
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	f003 f938 	bl	800cae4 <tcp_timer_needed>
 8009874:	4b25      	ldr	r3, [pc, #148]	; (800990c <tcp_listen_input+0x1c0>)
 8009876:	2201      	movs	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800987a:	6978      	ldr	r0, [r7, #20]
 800987c:	f001 fd14 	bl	800b2a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009880:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <tcp_listen_input+0x1ac>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	89db      	ldrh	r3, [r3, #14]
 8009886:	b29a      	uxth	r2, r3
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7ff fad5 	bl	8008e54 <tcp_eff_send_mss_impl>
 80098aa:	4603      	mov	r3, r0
 80098ac:	461a      	mov	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80098b2:	2112      	movs	r1, #18
 80098b4:	6978      	ldr	r0, [r7, #20]
 80098b6:	f002 fae1 	bl	800be7c <tcp_enqueue_flags>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80098be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d004      	beq.n	80098d0 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 80098c6:	2100      	movs	r1, #0
 80098c8:	6978      	ldr	r0, [r7, #20]
 80098ca:	f7fe f8f9 	bl	8007ac0 <tcp_abandon>
      return;
 80098ce:	e007      	b.n	80098e0 <tcp_listen_input+0x194>
    tcp_output(npcb);
 80098d0:	6978      	ldr	r0, [r7, #20]
 80098d2:	f002 fc2b 	bl	800c12c <tcp_output>
  return;
 80098d6:	bf00      	nop
 80098d8:	e001      	b.n	80098de <tcp_listen_input+0x192>
    return;
 80098da:	bf00      	nop
 80098dc:	e000      	b.n	80098e0 <tcp_listen_input+0x194>
  return;
 80098de:	bf00      	nop
}
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	200002dc 	.word	0x200002dc
 80098ec:	200002d4 	.word	0x200002d4
 80098f0:	200002da 	.word	0x200002da
 80098f4:	200002d0 	.word	0x200002d0
 80098f8:	200002c0 	.word	0x200002c0
 80098fc:	20004024 	.word	0x20004024
 8009900:	20004028 	.word	0x20004028
 8009904:	20004014 	.word	0x20004014
 8009908:	200076ac 	.word	0x200076ac
 800990c:	200076a8 	.word	0x200076a8

08009910 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af02      	add	r7, sp, #8
 8009916:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009918:	4b29      	ldr	r3, [pc, #164]	; (80099c0 <tcp_timewait_input+0xb0>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d147      	bne.n	80099b4 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009924:	4b26      	ldr	r3, [pc, #152]	; (80099c0 <tcp_timewait_input+0xb0>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 0302 	and.w	r3, r3, #2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d027      	beq.n	8009980 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009930:	4b24      	ldr	r3, [pc, #144]	; (80099c4 <tcp_timewait_input+0xb4>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	db2a      	blt.n	8009994 <tcp_timewait_input+0x84>
 800993e:	4b21      	ldr	r3, [pc, #132]	; (80099c4 <tcp_timewait_input+0xb4>)
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800994a:	440b      	add	r3, r1
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	dc20      	bgt.n	8009994 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009952:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <tcp_timewait_input+0xb8>)
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <tcp_timewait_input+0xbc>)
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	4b19      	ldr	r3, [pc, #100]	; (80099c4 <tcp_timewait_input+0xb4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009962:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <tcp_timewait_input+0xc0>)
 8009964:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009966:	885b      	ldrh	r3, [r3, #2]
 8009968:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800996a:	4a19      	ldr	r2, [pc, #100]	; (80099d0 <tcp_timewait_input+0xc0>)
 800996c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800996e:	8812      	ldrh	r2, [r2, #0]
 8009970:	b292      	uxth	r2, r2
 8009972:	9201      	str	r2, [sp, #4]
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4b17      	ldr	r3, [pc, #92]	; (80099d4 <tcp_timewait_input+0xc4>)
 8009978:	4a17      	ldr	r2, [pc, #92]	; (80099d8 <tcp_timewait_input+0xc8>)
 800997a:	f002 fe61 	bl	800c640 <tcp_rst>
      return;
 800997e:	e01c      	b.n	80099ba <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8009980:	4b0f      	ldr	r3, [pc, #60]	; (80099c0 <tcp_timewait_input+0xb0>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800998c:	4b13      	ldr	r3, [pc, #76]	; (80099dc <tcp_timewait_input+0xcc>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009994:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <tcp_timewait_input+0xbc>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00d      	beq.n	80099b8 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	7e9b      	ldrb	r3, [r3, #26]
 80099a0:	f043 0302 	orr.w	r3, r3, #2
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f002 fbbe 	bl	800c12c <tcp_output>
  }
  return;
 80099b0:	bf00      	nop
 80099b2:	e001      	b.n	80099b8 <tcp_timewait_input+0xa8>
    return;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <tcp_timewait_input+0xaa>
  return;
 80099b8:	bf00      	nop
}
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	200002dc 	.word	0x200002dc
 80099c4:	200002d0 	.word	0x200002d0
 80099c8:	200002d4 	.word	0x200002d4
 80099cc:	200002da 	.word	0x200002da
 80099d0:	200002c0 	.word	0x200002c0
 80099d4:	20004024 	.word	0x20004024
 80099d8:	20004028 	.word	0x20004028
 80099dc:	200076b0 	.word	0x200076b0

080099e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08a      	sub	sp, #40	; 0x28
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80099f0:	4ba4      	ldr	r3, [pc, #656]	; (8009c84 <tcp_process+0x2a4>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d04e      	beq.n	8009a9a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d108      	bne.n	8009a16 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a08:	4b9f      	ldr	r3, [pc, #636]	; (8009c88 <tcp_process+0x2a8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d123      	bne.n	8009a58 <tcp_process+0x78>
        acceptable = 1;
 8009a10:	2301      	movs	r3, #1
 8009a12:	76fb      	strb	r3, [r7, #27]
 8009a14:	e020      	b.n	8009a58 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1a:	4b9c      	ldr	r3, [pc, #624]	; (8009c8c <tcp_process+0x2ac>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d102      	bne.n	8009a28 <tcp_process+0x48>
        acceptable = 1;
 8009a22:	2301      	movs	r3, #1
 8009a24:	76fb      	strb	r3, [r7, #27]
 8009a26:	e017      	b.n	8009a58 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a28:	4b98      	ldr	r3, [pc, #608]	; (8009c8c <tcp_process+0x2ac>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	db10      	blt.n	8009a58 <tcp_process+0x78>
 8009a36:	4b95      	ldr	r3, [pc, #596]	; (8009c8c <tcp_process+0x2ac>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a42:	440b      	add	r3, r1
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dc06      	bgt.n	8009a58 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	7e9b      	ldrb	r3, [r3, #26]
 8009a4e:	f043 0302 	orr.w	r3, r3, #2
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009a58:	7efb      	ldrb	r3, [r7, #27]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01b      	beq.n	8009a96 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7d1b      	ldrb	r3, [r3, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <tcp_process+0x94>
 8009a66:	4b8a      	ldr	r3, [pc, #552]	; (8009c90 <tcp_process+0x2b0>)
 8009a68:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009a6c:	4989      	ldr	r1, [pc, #548]	; (8009c94 <tcp_process+0x2b4>)
 8009a6e:	488a      	ldr	r0, [pc, #552]	; (8009c98 <tcp_process+0x2b8>)
 8009a70:	f009 fdda 	bl	8013628 <iprintf>
      recv_flags |= TF_RESET;
 8009a74:	4b89      	ldr	r3, [pc, #548]	; (8009c9c <tcp_process+0x2bc>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	f043 0308 	orr.w	r3, r3, #8
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	4b87      	ldr	r3, [pc, #540]	; (8009c9c <tcp_process+0x2bc>)
 8009a80:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7e9b      	ldrb	r3, [r3, #26]
 8009a86:	f023 0301 	bic.w	r3, r3, #1
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8009a90:	f06f 030d 	mvn.w	r3, #13
 8009a94:	e34d      	b.n	800a132 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e34b      	b.n	800a132 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009a9a:	4b7a      	ldr	r3, [pc, #488]	; (8009c84 <tcp_process+0x2a4>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d010      	beq.n	8009ac8 <tcp_process+0xe8>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7d1b      	ldrb	r3, [r3, #20]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d00c      	beq.n	8009ac8 <tcp_process+0xe8>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7d1b      	ldrb	r3, [r3, #20]
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d008      	beq.n	8009ac8 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	7e9b      	ldrb	r3, [r3, #26]
 8009aba:	f043 0302 	orr.w	r3, r3, #2
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e334      	b.n	800a132 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	7e9b      	ldrb	r3, [r3, #26]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009ad4:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <tcp_process+0x2c0>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 fbdf 	bl	800b2a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7d1b      	ldrb	r3, [r3, #20]
 8009aee:	3b02      	subs	r3, #2
 8009af0:	2b07      	cmp	r3, #7
 8009af2:	f200 830e 	bhi.w	800a112 <tcp_process+0x732>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <tcp_process+0x11c>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b1d 	.word	0x08009b1d
 8009b00:	08009d15 	.word	0x08009d15
 8009b04:	08009e6d 	.word	0x08009e6d
 8009b08:	08009e97 	.word	0x08009e97
 8009b0c:	08009fc1 	.word	0x08009fc1
 8009b10:	08009e6d 	.word	0x08009e6d
 8009b14:	0800a04d 	.word	0x0800a04d
 8009b18:	0800a0dd 	.word	0x0800a0dd
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009b1c:	4b59      	ldr	r3, [pc, #356]	; (8009c84 <tcp_process+0x2a4>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 80cb 	beq.w	8009cc0 <tcp_process+0x2e0>
 8009b2a:	4b56      	ldr	r3, [pc, #344]	; (8009c84 <tcp_process+0x2a4>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 80c4 	beq.w	8009cc0 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	4b52      	ldr	r3, [pc, #328]	; (8009c88 <tcp_process+0x2a8>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	f040 80bc 	bne.w	8009cc0 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8009b48:	4b50      	ldr	r3, [pc, #320]	; (8009c8c <tcp_process+0x2ac>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8009b5a:	4b4b      	ldr	r3, [pc, #300]	; (8009c88 <tcp_process+0x2a8>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009b62:	4b50      	ldr	r3, [pc, #320]	; (8009ca4 <tcp_process+0x2c4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	89db      	ldrh	r3, [r3, #14]
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b7c:	4b43      	ldr	r3, [pc, #268]	; (8009c8c <tcp_process+0x2ac>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	1e5a      	subs	r2, r3, #1
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7ff f95c 	bl	8008e54 <tcp_eff_send_mss_impl>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	f241 121c 	movw	r2, #4380	; 0x111c
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	bf38      	it	cc
 8009bb2:	461a      	movcc	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	bf28      	it	cs
 8009bbe:	4613      	movcs	r3, r2
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <tcp_process+0x200>
 8009bd2:	4b2f      	ldr	r3, [pc, #188]	; (8009c90 <tcp_process+0x2b0>)
 8009bd4:	f240 321a 	movw	r2, #794	; 0x31a
 8009bd8:	4933      	ldr	r1, [pc, #204]	; (8009ca8 <tcp_process+0x2c8>)
 8009bda:	482f      	ldr	r0, [pc, #188]	; (8009c98 <tcp_process+0x2b8>)
 8009bdc:	f009 fd24 	bl	8013628 <iprintf>
      --pcb->snd_queuelen;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009be6:	3b01      	subs	r3, #1
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d111      	bne.n	8009c20 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c00:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <tcp_process+0x236>
 8009c08:	4b21      	ldr	r3, [pc, #132]	; (8009c90 <tcp_process+0x2b0>)
 8009c0a:	f240 3222 	movw	r2, #802	; 0x322
 8009c0e:	4927      	ldr	r1, [pc, #156]	; (8009cac <tcp_process+0x2cc>)
 8009c10:	4821      	ldr	r0, [pc, #132]	; (8009c98 <tcp_process+0x2b8>)
 8009c12:	f009 fd09 	bl	8013628 <iprintf>
        pcb->unsent = rseg->next;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	669a      	str	r2, [r3, #104]	; 0x68
 8009c1e:	e003      	b.n	8009c28 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8009c28:	69f8      	ldr	r0, [r7, #28]
 8009c2a:	f7fe fde0 	bl	80087ee <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d104      	bne.n	8009c40 <tcp_process+0x260>
        pcb->rtime = -1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c3c:	861a      	strh	r2, [r3, #48]	; 0x30
 8009c3e:	e006      	b.n	8009c4e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <tcp_process+0x28e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6910      	ldr	r0, [r2, #16]
 8009c62:	2200      	movs	r2, #0
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4798      	blx	r3
 8009c68:	4603      	mov	r3, r0
 8009c6a:	76bb      	strb	r3, [r7, #26]
 8009c6c:	e001      	b.n	8009c72 <tcp_process+0x292>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8009c72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009c76:	f113 0f0d 	cmn.w	r3, #13
 8009c7a:	d119      	bne.n	8009cb0 <tcp_process+0x2d0>
        return ERR_ABRT;
 8009c7c:	f06f 030c 	mvn.w	r3, #12
 8009c80:	e257      	b.n	800a132 <tcp_process+0x752>
 8009c82:	bf00      	nop
 8009c84:	200002dc 	.word	0x200002dc
 8009c88:	200002d4 	.word	0x200002d4
 8009c8c:	200002d0 	.word	0x200002d0
 8009c90:	08015d80 	.word	0x08015d80
 8009c94:	08015f38 	.word	0x08015f38
 8009c98:	08015dc4 	.word	0x08015dc4
 8009c9c:	200002dd 	.word	0x200002dd
 8009ca0:	200076b0 	.word	0x200076b0
 8009ca4:	200002c0 	.word	0x200002c0
 8009ca8:	08015f58 	.word	0x08015f58
 8009cac:	08015f70 	.word	0x08015f70
      }
      tcp_ack_now(pcb);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	7e9b      	ldrb	r3, [r3, #26]
 8009cb4:	f043 0302 	orr.w	r3, r3, #2
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8009cbe:	e22a      	b.n	800a116 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8009cc0:	4b9f      	ldr	r3, [pc, #636]	; (8009f40 <tcp_process+0x560>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 8224 	beq.w	800a116 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cce:	4b9d      	ldr	r3, [pc, #628]	; (8009f44 <tcp_process+0x564>)
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	4b9d      	ldr	r3, [pc, #628]	; (8009f48 <tcp_process+0x568>)
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	4b9c      	ldr	r3, [pc, #624]	; (8009f4c <tcp_process+0x56c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cde:	4b9c      	ldr	r3, [pc, #624]	; (8009f50 <tcp_process+0x570>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ce2:	885b      	ldrh	r3, [r3, #2]
 8009ce4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ce6:	4a9a      	ldr	r2, [pc, #616]	; (8009f50 <tcp_process+0x570>)
 8009ce8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cea:	8812      	ldrh	r2, [r2, #0]
 8009cec:	b292      	uxth	r2, r2
 8009cee:	9201      	str	r2, [sp, #4]
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	4b98      	ldr	r3, [pc, #608]	; (8009f54 <tcp_process+0x574>)
 8009cf4:	4a98      	ldr	r2, [pc, #608]	; (8009f58 <tcp_process+0x578>)
 8009cf6:	f002 fca3 	bl	800c640 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d00:	2b05      	cmp	r3, #5
 8009d02:	f200 8208 	bhi.w	800a116 <tcp_process+0x736>
        pcb->rtime = 0;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f002 fd0d 	bl	800c72c <tcp_rexmit_rto>
    break;
 8009d12:	e200      	b.n	800a116 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8009d14:	4b8a      	ldr	r3, [pc, #552]	; (8009f40 <tcp_process+0x560>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 8091 	beq.w	8009e44 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009d22:	4b88      	ldr	r3, [pc, #544]	; (8009f44 <tcp_process+0x564>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	db71      	blt.n	8009e16 <tcp_process+0x436>
 8009d32:	4b84      	ldr	r3, [pc, #528]	; (8009f44 <tcp_process+0x564>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc6a      	bgt.n	8009e16 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2204      	movs	r2, #4
 8009d44:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <tcp_process+0x386>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <tcp_process+0x386>
 8009d58:	4b80      	ldr	r3, [pc, #512]	; (8009f5c <tcp_process+0x57c>)
 8009d5a:	f240 3251 	movw	r2, #849	; 0x351
 8009d5e:	4980      	ldr	r1, [pc, #512]	; (8009f60 <tcp_process+0x580>)
 8009d60:	4880      	ldr	r0, [pc, #512]	; (8009f64 <tcp_process+0x584>)
 8009d62:	f009 fc61 	bl	8013628 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8009d6e:	23fa      	movs	r3, #250	; 0xfa
 8009d70:	76bb      	strb	r3, [r7, #26]
 8009d72:	e011      	b.n	8009d98 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <tcp_process+0x3b4>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6910      	ldr	r0, [r2, #16]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	76bb      	strb	r3, [r7, #26]
 8009d92:	e001      	b.n	8009d98 <tcp_process+0x3b8>
 8009d94:	23f0      	movs	r3, #240	; 0xf0
 8009d96:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8009d98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8009da0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009da4:	f113 0f0d 	cmn.w	r3, #13
 8009da8:	d002      	beq.n	8009db0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fd ff3a 	bl	8007c24 <tcp_abort>
          }
          return ERR_ABRT;
 8009db0:	f06f 030c 	mvn.w	r3, #12
 8009db4:	e1bd      	b.n	800a132 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fa42 	bl	800a240 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8009dbc:	4b6a      	ldr	r3, [pc, #424]	; (8009f68 <tcp_process+0x588>)
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <tcp_process+0x3f0>
          recv_acked--;
 8009dc4:	4b68      	ldr	r3, [pc, #416]	; (8009f68 <tcp_process+0x588>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	4b66      	ldr	r3, [pc, #408]	; (8009f68 <tcp_process+0x588>)
 8009dce:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	bf38      	it	cc
 8009dde:	461a      	movcc	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4293      	cmp	r3, r2
 8009de8:	bf28      	it	cs
 8009dea:	4613      	movcs	r3, r2
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8009df4:	4b5d      	ldr	r3, [pc, #372]	; (8009f6c <tcp_process+0x58c>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f003 0320 	and.w	r3, r3, #32
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d034      	beq.n	8009e6a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7e9b      	ldrb	r3, [r3, #26]
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2207      	movs	r2, #7
 8009e12:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8009e14:	e029      	b.n	8009e6a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e16:	4b4b      	ldr	r3, [pc, #300]	; (8009f44 <tcp_process+0x564>)
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	4b4b      	ldr	r3, [pc, #300]	; (8009f48 <tcp_process+0x568>)
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4b4a      	ldr	r3, [pc, #296]	; (8009f4c <tcp_process+0x56c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e26:	4b4a      	ldr	r3, [pc, #296]	; (8009f50 <tcp_process+0x570>)
 8009e28:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e2a:	885b      	ldrh	r3, [r3, #2]
 8009e2c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e2e:	4a48      	ldr	r2, [pc, #288]	; (8009f50 <tcp_process+0x570>)
 8009e30:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e32:	8812      	ldrh	r2, [r2, #0]
 8009e34:	b292      	uxth	r2, r2
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	4b46      	ldr	r3, [pc, #280]	; (8009f54 <tcp_process+0x574>)
 8009e3c:	4a46      	ldr	r2, [pc, #280]	; (8009f58 <tcp_process+0x578>)
 8009e3e:	f002 fbff 	bl	800c640 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8009e42:	e16a      	b.n	800a11a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009e44:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <tcp_process+0x560>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8164 	beq.w	800a11a <tcp_process+0x73a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	1e5a      	subs	r2, r3, #1
 8009e58:	4b3c      	ldr	r3, [pc, #240]	; (8009f4c <tcp_process+0x56c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	f040 815c 	bne.w	800a11a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f002 fc98 	bl	800c798 <tcp_rexmit>
    break;
 8009e68:	e157      	b.n	800a11a <tcp_process+0x73a>
 8009e6a:	e156      	b.n	800a11a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f9e7 	bl	800a240 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009e72:	4b3e      	ldr	r3, [pc, #248]	; (8009f6c <tcp_process+0x58c>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 814f 	beq.w	800a11e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	7e9b      	ldrb	r3, [r3, #26]
 8009e84:	f043 0302 	orr.w	r3, r3, #2
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2207      	movs	r2, #7
 8009e92:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009e94:	e143      	b.n	800a11e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f9d2 	bl	800a240 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009e9c:	4b33      	ldr	r3, [pc, #204]	; (8009f6c <tcp_process+0x58c>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	f003 0320 	and.w	r3, r3, #32
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d074      	beq.n	8009f92 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ea8:	4b25      	ldr	r3, [pc, #148]	; (8009f40 <tcp_process+0x560>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d063      	beq.n	8009f7c <tcp_process+0x59c>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009eb8:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <tcp_process+0x564>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d15d      	bne.n	8009f7c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d159      	bne.n	8009f7c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	7e9b      	ldrb	r3, [r3, #26]
 8009ecc:	f043 0302 	orr.w	r3, r3, #2
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7fe fee6 	bl	8008ca8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009edc:	4b24      	ldr	r3, [pc, #144]	; (8009f70 <tcp_process+0x590>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d105      	bne.n	8009ef2 <tcp_process+0x512>
 8009ee6:	4b22      	ldr	r3, [pc, #136]	; (8009f70 <tcp_process+0x590>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	4a20      	ldr	r2, [pc, #128]	; (8009f70 <tcp_process+0x590>)
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	e013      	b.n	8009f1a <tcp_process+0x53a>
 8009ef2:	4b1f      	ldr	r3, [pc, #124]	; (8009f70 <tcp_process+0x590>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e00c      	b.n	8009f14 <tcp_process+0x534>
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d104      	bne.n	8009f0e <tcp_process+0x52e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	60da      	str	r2, [r3, #12]
 8009f0c:	e005      	b.n	8009f1a <tcp_process+0x53a>
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1ef      	bne.n	8009efa <tcp_process+0x51a>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	60da      	str	r2, [r3, #12]
 8009f20:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <tcp_process+0x594>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	220a      	movs	r2, #10
 8009f2a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009f2c:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <tcp_process+0x598>)
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	60da      	str	r2, [r3, #12]
 8009f34:	4a10      	ldr	r2, [pc, #64]	; (8009f78 <tcp_process+0x598>)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	f002 fdd3 	bl	800cae4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8009f3e:	e0f0      	b.n	800a122 <tcp_process+0x742>
 8009f40:	200002dc 	.word	0x200002dc
 8009f44:	200002d4 	.word	0x200002d4
 8009f48:	200002da 	.word	0x200002da
 8009f4c:	200002d0 	.word	0x200002d0
 8009f50:	200002c0 	.word	0x200002c0
 8009f54:	20004024 	.word	0x20004024
 8009f58:	20004028 	.word	0x20004028
 8009f5c:	08015d80 	.word	0x08015d80
 8009f60:	08015f84 	.word	0x08015f84
 8009f64:	08015dc4 	.word	0x08015dc4
 8009f68:	200002d8 	.word	0x200002d8
 8009f6c:	200002dd 	.word	0x200002dd
 8009f70:	200076ac 	.word	0x200076ac
 8009f74:	200076a8 	.word	0x200076a8
 8009f78:	200076bc 	.word	0x200076bc
        tcp_ack_now(pcb);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	7e9b      	ldrb	r3, [r3, #26]
 8009f80:	f043 0302 	orr.w	r3, r3, #2
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	751a      	strb	r2, [r3, #20]
    break;
 8009f90:	e0c7      	b.n	800a122 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009f92:	4b6a      	ldr	r3, [pc, #424]	; (800a13c <tcp_process+0x75c>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	f003 0310 	and.w	r3, r3, #16
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80c1 	beq.w	800a122 <tcp_process+0x742>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fa4:	4b66      	ldr	r3, [pc, #408]	; (800a140 <tcp_process+0x760>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	f040 80ba 	bne.w	800a122 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f040 80b5 	bne.w	800a122 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2206      	movs	r2, #6
 8009fbc:	751a      	strb	r2, [r3, #20]
    break;
 8009fbe:	e0b0      	b.n	800a122 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f93d 	bl	800a240 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009fc6:	4b5f      	ldr	r3, [pc, #380]	; (800a144 <tcp_process+0x764>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 80a9 	beq.w	800a126 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7e9b      	ldrb	r3, [r3, #26]
 8009fd8:	f043 0302 	orr.w	r3, r3, #2
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fe fe60 	bl	8008ca8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009fe8:	4b57      	ldr	r3, [pc, #348]	; (800a148 <tcp_process+0x768>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d105      	bne.n	8009ffe <tcp_process+0x61e>
 8009ff2:	4b55      	ldr	r3, [pc, #340]	; (800a148 <tcp_process+0x768>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4a53      	ldr	r2, [pc, #332]	; (800a148 <tcp_process+0x768>)
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	e013      	b.n	800a026 <tcp_process+0x646>
 8009ffe:	4b52      	ldr	r3, [pc, #328]	; (800a148 <tcp_process+0x768>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	e00c      	b.n	800a020 <tcp_process+0x640>
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d104      	bne.n	800a01a <tcp_process+0x63a>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	60da      	str	r2, [r3, #12]
 800a018:	e005      	b.n	800a026 <tcp_process+0x646>
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	613b      	str	r3, [r7, #16]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1ef      	bne.n	800a006 <tcp_process+0x626>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	60da      	str	r2, [r3, #12]
 800a02c:	4b47      	ldr	r3, [pc, #284]	; (800a14c <tcp_process+0x76c>)
 800a02e:	2201      	movs	r2, #1
 800a030:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	220a      	movs	r2, #10
 800a036:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a038:	4b45      	ldr	r3, [pc, #276]	; (800a150 <tcp_process+0x770>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60da      	str	r2, [r3, #12]
 800a040:	4a43      	ldr	r2, [pc, #268]	; (800a150 <tcp_process+0x770>)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	f002 fd4d 	bl	800cae4 <tcp_timer_needed>
    }
    break;
 800a04a:	e06c      	b.n	800a126 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f8f7 	bl	800a240 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a052:	4b3a      	ldr	r3, [pc, #232]	; (800a13c <tcp_process+0x75c>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	f003 0310 	and.w	r3, r3, #16
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d065      	beq.n	800a12a <tcp_process+0x74a>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a062:	4b37      	ldr	r3, [pc, #220]	; (800a140 <tcp_process+0x760>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d15f      	bne.n	800a12a <tcp_process+0x74a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d15b      	bne.n	800a12a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7fe fe18 	bl	8008ca8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a078:	4b33      	ldr	r3, [pc, #204]	; (800a148 <tcp_process+0x768>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d105      	bne.n	800a08e <tcp_process+0x6ae>
 800a082:	4b31      	ldr	r3, [pc, #196]	; (800a148 <tcp_process+0x768>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	4a2f      	ldr	r2, [pc, #188]	; (800a148 <tcp_process+0x768>)
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	e013      	b.n	800a0b6 <tcp_process+0x6d6>
 800a08e:	4b2e      	ldr	r3, [pc, #184]	; (800a148 <tcp_process+0x768>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	e00c      	b.n	800a0b0 <tcp_process+0x6d0>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d104      	bne.n	800a0aa <tcp_process+0x6ca>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	60da      	str	r2, [r3, #12]
 800a0a8:	e005      	b.n	800a0b6 <tcp_process+0x6d6>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1ef      	bne.n	800a096 <tcp_process+0x6b6>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	60da      	str	r2, [r3, #12]
 800a0bc:	4b23      	ldr	r3, [pc, #140]	; (800a14c <tcp_process+0x76c>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a0c8:	4b21      	ldr	r3, [pc, #132]	; (800a150 <tcp_process+0x770>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	60da      	str	r2, [r3, #12]
 800a0d0:	4a1f      	ldr	r2, [pc, #124]	; (800a150 <tcp_process+0x770>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	f002 fd05 	bl	800cae4 <tcp_timer_needed>
    }
    break;
 800a0da:	e026      	b.n	800a12a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f8af 	bl	800a240 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a0e2:	4b16      	ldr	r3, [pc, #88]	; (800a13c <tcp_process+0x75c>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01f      	beq.n	800a12e <tcp_process+0x74e>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0f2:	4b13      	ldr	r3, [pc, #76]	; (800a140 <tcp_process+0x760>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d119      	bne.n	800a12e <tcp_process+0x74e>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d115      	bne.n	800a12e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800a102:	4b10      	ldr	r3, [pc, #64]	; (800a144 <tcp_process+0x764>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f043 0310 	orr.w	r3, r3, #16
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <tcp_process+0x764>)
 800a10e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a110:	e00d      	b.n	800a12e <tcp_process+0x74e>
  default:
    break;
 800a112:	bf00      	nop
 800a114:	e00c      	b.n	800a130 <tcp_process+0x750>
    break;
 800a116:	bf00      	nop
 800a118:	e00a      	b.n	800a130 <tcp_process+0x750>
    break;
 800a11a:	bf00      	nop
 800a11c:	e008      	b.n	800a130 <tcp_process+0x750>
    break;
 800a11e:	bf00      	nop
 800a120:	e006      	b.n	800a130 <tcp_process+0x750>
    break;
 800a122:	bf00      	nop
 800a124:	e004      	b.n	800a130 <tcp_process+0x750>
    break;
 800a126:	bf00      	nop
 800a128:	e002      	b.n	800a130 <tcp_process+0x750>
    break;
 800a12a:	bf00      	nop
 800a12c:	e000      	b.n	800a130 <tcp_process+0x750>
    break;
 800a12e:	bf00      	nop
  }
  return ERR_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200002dc 	.word	0x200002dc
 800a140:	200002d4 	.word	0x200002d4
 800a144:	200002dd 	.word	0x200002dd
 800a148:	200076ac 	.word	0x200076ac
 800a14c:	200076a8 	.word	0x200076a8
 800a150:	200076bc 	.word	0x200076bc

0800a154 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a154:	b590      	push	{r4, r7, lr}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	899b      	ldrh	r3, [r3, #12]
 800a164:	b29b      	uxth	r3, r3
 800a166:	4618      	mov	r0, r3
 800a168:	f7fb fe5b 	bl	8005e22 <lwip_htons>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d027      	beq.n	800a1c6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a176:	6838      	ldr	r0, [r7, #0]
 800a178:	f7fe fb25 	bl	80087c6 <tcp_segs_free>
    next = NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	603b      	str	r3, [r7, #0]
 800a180:	e055      	b.n	800a22e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	899b      	ldrh	r3, [r3, #12]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fb fe49 	bl	8005e22 <lwip_htons>
 800a190:	4603      	mov	r3, r0
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00d      	beq.n	800a1b6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	899b      	ldrh	r3, [r3, #12]
 800a1a0:	b29c      	uxth	r4, r3
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	f7fb fe3d 	bl	8005e22 <lwip_htons>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	4322      	orrs	r2, r4
 800a1b2:	b292      	uxth	r2, r2
 800a1b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7fe fb14 	bl	80087ee <tcp_seg_free>
    while (next &&
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00e      	beq.n	800a1ea <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	891b      	ldrh	r3, [r3, #8]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4b1a      	ldr	r3, [pc, #104]	; (800a23c <tcp_oos_insert_segment+0xe8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	441a      	add	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	8909      	ldrh	r1, [r1, #8]
 800a1e2:	440b      	add	r3, r1
 800a1e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dacb      	bge.n	800a182 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01e      	beq.n	800a22e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	891b      	ldrh	r3, [r3, #8]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4b11      	ldr	r3, [pc, #68]	; (800a23c <tcp_oos_insert_segment+0xe8>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	441a      	add	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a204:	2b00      	cmp	r3, #0
 800a206:	dd12      	ble.n	800a22e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	b29a      	uxth	r2, r3
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <tcp_oos_insert_segment+0xe8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	b29b      	uxth	r3, r3
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	b29a      	uxth	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	891b      	ldrh	r3, [r3, #8]
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f7fc fdb3 	bl	8006d94 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	601a      	str	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}
 800a23c:	200002d0 	.word	0x200002d0

0800a240 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a242:	b08d      	sub	sp, #52	; 0x34
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7d1b      	ldrb	r3, [r3, #20]
 800a250:	2b03      	cmp	r3, #3
 800a252:	d806      	bhi.n	800a262 <tcp_receive+0x22>
 800a254:	4ba6      	ldr	r3, [pc, #664]	; (800a4f0 <tcp_receive+0x2b0>)
 800a256:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a25a:	49a6      	ldr	r1, [pc, #664]	; (800a4f4 <tcp_receive+0x2b4>)
 800a25c:	48a6      	ldr	r0, [pc, #664]	; (800a4f8 <tcp_receive+0x2b8>)
 800a25e:	f009 f9e3 	bl	8013628 <iprintf>

  if (flags & TCP_ACK) {
 800a262:	4ba6      	ldr	r3, [pc, #664]	; (800a4fc <tcp_receive+0x2bc>)
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	f003 0310 	and.w	r3, r3, #16
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 82bf 	beq.w	800a7ee <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a276:	461a      	mov	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27c:	4413      	add	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a284:	4b9e      	ldr	r3, [pc, #632]	; (800a500 <tcp_receive+0x2c0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	db1b      	blt.n	800a2c6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a292:	4b9b      	ldr	r3, [pc, #620]	; (800a500 <tcp_receive+0x2c0>)
 800a294:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a296:	429a      	cmp	r2, r3
 800a298:	d106      	bne.n	800a2a8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a29e:	4b99      	ldr	r3, [pc, #612]	; (800a504 <tcp_receive+0x2c4>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	db0e      	blt.n	800a2c6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2ac:	4b95      	ldr	r3, [pc, #596]	; (800a504 <tcp_receive+0x2c4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d141      	bne.n	800a338 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a2b4:	4b94      	ldr	r3, [pc, #592]	; (800a508 <tcp_receive+0x2c8>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	89db      	ldrh	r3, [r3, #14]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d938      	bls.n	800a338 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a2c6:	4b90      	ldr	r3, [pc, #576]	; (800a508 <tcp_receive+0x2c8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	89db      	ldrh	r3, [r3, #14]
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d205      	bcs.n	800a2f0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800a2f0:	4b83      	ldr	r3, [pc, #524]	; (800a500 <tcp_receive+0x2c0>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800a2f8:	4b82      	ldr	r3, [pc, #520]	; (800a504 <tcp_receive+0x2c4>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10d      	bne.n	800a326 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a310:	2b00      	cmp	r3, #0
 800a312:	d111      	bne.n	800a338 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a324:	e008      	b.n	800a338 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a338:	4b72      	ldr	r3, [pc, #456]	; (800a504 <tcp_receive+0x2c4>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	dc53      	bgt.n	800a3ee <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800a346:	4b71      	ldr	r3, [pc, #452]	; (800a50c <tcp_receive+0x2cc>)
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d146      	bne.n	800a3dc <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a358:	4413      	add	r3, r2
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d13d      	bne.n	800a3dc <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a366:	2b00      	cmp	r3, #0
 800a368:	db38      	blt.n	800a3dc <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a36e:	4b65      	ldr	r3, [pc, #404]	; (800a504 <tcp_receive+0x2c4>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d132      	bne.n	800a3dc <tcp_receive+0x19c>
              found_dupack = 1;
 800a376:	2301      	movs	r3, #1
 800a378:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a380:	2bff      	cmp	r3, #255	; 0xff
 800a382:	d007      	beq.n	800a394 <tcp_receive+0x154>
                ++pcb->dupacks;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a38a:	3301      	adds	r3, #1
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d916      	bls.n	800a3cc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3a8:	4413      	add	r3, r2
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d912      	bls.n	800a3dc <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3c0:	4413      	add	r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3ca:	e007      	b.n	800a3dc <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d102      	bne.n	800a3dc <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f002 fa2e 	bl	800c838 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f040 8169 	bne.w	800a6b6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3ec:	e163      	b.n	800a6b6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a3ee:	4b45      	ldr	r3, [pc, #276]	; (800a504 <tcp_receive+0x2c4>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f2c0 8107 	blt.w	800a60e <tcp_receive+0x3ce>
 800a400:	4b40      	ldr	r3, [pc, #256]	; (800a504 <tcp_receive+0x2c4>)
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f300 80ff 	bgt.w	800a60e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7e9b      	ldrb	r3, [r3, #26]
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00c      	beq.n	800a436 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	7e9b      	ldrb	r3, [r3, #26]
 800a420:	f023 0304 	bic.w	r3, r3, #4
 800a424:	b2da      	uxtb	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a444:	10db      	asrs	r3, r3, #3
 800a446:	b21b      	sxth	r3, r3
 800a448:	b29a      	uxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a450:	b29b      	uxth	r3, r3
 800a452:	4413      	add	r3, r2
 800a454:	b29b      	uxth	r3, r3
 800a456:	b21a      	sxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a466:	4b27      	ldr	r3, [pc, #156]	; (800a504 <tcp_receive+0x2c4>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	7d1b      	ldrb	r3, [r3, #20]
 800a472:	2b03      	cmp	r3, #3
 800a474:	f240 8094 	bls.w	800a5a0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a484:	429a      	cmp	r2, r3
 800a486:	d216      	bcs.n	800a4b6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a492:	4413      	add	r3, r2
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d97f      	bls.n	800a5a0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4aa:	4413      	add	r3, r2
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a4b4:	e074      	b.n	800a5a0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4c6:	fb03 f301 	mul.w	r3, r3, r1
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800a4d0:	fb93 f3f1 	sdiv	r3, r3, r1
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4e0:	8a7a      	ldrh	r2, [r7, #18]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d95c      	bls.n	800a5a0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8a7a      	ldrh	r2, [r7, #18]
 800a4ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800a4ee:	e057      	b.n	800a5a0 <tcp_receive+0x360>
 800a4f0:	08015d80 	.word	0x08015d80
 800a4f4:	08015fa4 	.word	0x08015fa4
 800a4f8:	08015dc4 	.word	0x08015dc4
 800a4fc:	200002dc 	.word	0x200002dc
 800a500:	200002d0 	.word	0x200002d0
 800a504:	200002d4 	.word	0x200002d4
 800a508:	200002c0 	.word	0x200002c0
 800a50c:	200002da 	.word	0x200002da
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a514:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fc fe3a 	bl	80071a4 <pbuf_clen>
 800a530:	4603      	mov	r3, r0
 800a532:	429c      	cmp	r4, r3
 800a534:	d206      	bcs.n	800a544 <tcp_receive+0x304>
 800a536:	4b70      	ldr	r3, [pc, #448]	; (800a6f8 <tcp_receive+0x4b8>)
 800a538:	f240 429e 	movw	r2, #1182	; 0x49e
 800a53c:	496f      	ldr	r1, [pc, #444]	; (800a6fc <tcp_receive+0x4bc>)
 800a53e:	4870      	ldr	r0, [pc, #448]	; (800a700 <tcp_receive+0x4c0>)
 800a540:	f009 f872 	bl	8013628 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fc fe2b 	bl	80071a4 <pbuf_clen>
 800a54e:	4603      	mov	r3, r0
 800a550:	461a      	mov	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a558:	1a9b      	subs	r3, r3, r2
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a564:	891a      	ldrh	r2, [r3, #8]
 800a566:	4b67      	ldr	r3, [pc, #412]	; (800a704 <tcp_receive+0x4c4>)
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	4413      	add	r3, r2
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	4b65      	ldr	r3, [pc, #404]	; (800a704 <tcp_receive+0x4c4>)
 800a570:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800a572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a574:	f7fe f93b 	bl	80087ee <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00e      	beq.n	800a5a0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <tcp_receive+0x360>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <tcp_receive+0x360>
 800a592:	4b59      	ldr	r3, [pc, #356]	; (800a6f8 <tcp_receive+0x4b8>)
 800a594:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800a598:	495b      	ldr	r1, [pc, #364]	; (800a708 <tcp_receive+0x4c8>)
 800a59a:	4859      	ldr	r0, [pc, #356]	; (800a700 <tcp_receive+0x4c0>)
 800a59c:	f009 f844 	bl	8013628 <iprintf>
      while (pcb->unacked != NULL &&
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d022      	beq.n	800a5ee <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fb fc44 	bl	8005e3e <lwip_htonl>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5bc:	891b      	ldrh	r3, [r3, #8]
 800a5be:	461d      	mov	r5, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	899b      	ldrh	r3, [r3, #12]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fb fc29 	bl	8005e22 <lwip_htons>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <tcp_receive+0x39e>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <tcp_receive+0x3a0>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	442b      	add	r3, r5
 800a5e2:	18e2      	adds	r2, r4, r3
 800a5e4:	4b49      	ldr	r3, [pc, #292]	; (800a70c <tcp_receive+0x4cc>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dd90      	ble.n	800a510 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d104      	bne.n	800a600 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5fc:	861a      	strh	r2, [r3, #48]	; 0x30
 800a5fe:	e002      	b.n	800a606 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	76da      	strb	r2, [r3, #27]
 800a60c:	e002      	b.n	800a614 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fd30 	bl	800c074 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800a614:	e04f      	b.n	800a6b6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	4618      	mov	r0, r3
 800a642:	f7fc fdaf 	bl	80071a4 <pbuf_clen>
 800a646:	4603      	mov	r3, r0
 800a648:	429c      	cmp	r4, r3
 800a64a:	d206      	bcs.n	800a65a <tcp_receive+0x41a>
 800a64c:	4b2a      	ldr	r3, [pc, #168]	; (800a6f8 <tcp_receive+0x4b8>)
 800a64e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a652:	492a      	ldr	r1, [pc, #168]	; (800a6fc <tcp_receive+0x4bc>)
 800a654:	482a      	ldr	r0, [pc, #168]	; (800a700 <tcp_receive+0x4c0>)
 800a656:	f008 ffe7 	bl	8013628 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fc fda0 	bl	80071a4 <pbuf_clen>
 800a664:	4603      	mov	r3, r0
 800a666:	461a      	mov	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	891a      	ldrh	r2, [r3, #8]
 800a67c:	4b21      	ldr	r3, [pc, #132]	; (800a704 <tcp_receive+0x4c4>)
 800a67e:	881b      	ldrh	r3, [r3, #0]
 800a680:	4413      	add	r3, r2
 800a682:	b29a      	uxth	r2, r3
 800a684:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <tcp_receive+0x4c4>)
 800a686:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800a688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a68a:	f7fe f8b0 	bl	80087ee <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00e      	beq.n	800a6b6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <tcp_receive+0x476>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <tcp_receive+0x476>
 800a6a8:	4b13      	ldr	r3, [pc, #76]	; (800a6f8 <tcp_receive+0x4b8>)
 800a6aa:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800a6ae:	4916      	ldr	r1, [pc, #88]	; (800a708 <tcp_receive+0x4c8>)
 800a6b0:	4813      	ldr	r0, [pc, #76]	; (800a700 <tcp_receive+0x4c0>)
 800a6b2:	f008 ffb9 	bl	8013628 <iprintf>
    while (pcb->unsent != NULL &&
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d036      	beq.n	800a72c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <tcp_receive+0x4cc>)
 800a6c0:	681c      	ldr	r4, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fb fbb7 	bl	8005e3e <lwip_htonl>
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6d6:	891b      	ldrh	r3, [r3, #8]
 800a6d8:	461e      	mov	r6, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	899b      	ldrh	r3, [r3, #12]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fb fb9c 	bl	8005e22 <lwip_htons>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00d      	beq.n	800a710 <tcp_receive+0x4d0>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e00c      	b.n	800a712 <tcp_receive+0x4d2>
 800a6f8:	08015d80 	.word	0x08015d80
 800a6fc:	08015fc0 	.word	0x08015fc0
 800a700:	08015dc4 	.word	0x08015dc4
 800a704:	200002d8 	.word	0x200002d8
 800a708:	08015fe8 	.word	0x08015fe8
 800a70c:	200002d4 	.word	0x200002d4
 800a710:	2300      	movs	r3, #0
 800a712:	4433      	add	r3, r6
 800a714:	442b      	add	r3, r5
 800a716:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800a718:	2b00      	cmp	r3, #0
 800a71a:	db07      	blt.n	800a72c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a71c:	4b8d      	ldr	r3, [pc, #564]	; (800a954 <tcp_receive+0x714>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	f77f af75 	ble.w	800a616 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a732:	4b89      	ldr	r3, [pc, #548]	; (800a958 <tcp_receive+0x718>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	4413      	add	r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a744:	2b00      	cmp	r3, #0
 800a746:	d052      	beq.n	800a7ee <tcp_receive+0x5ae>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74c:	4b81      	ldr	r3, [pc, #516]	; (800a954 <tcp_receive+0x714>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	da4b      	bge.n	800a7ee <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a756:	4b81      	ldr	r3, [pc, #516]	; (800a95c <tcp_receive+0x71c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a760:	b29b      	uxth	r3, r3
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	b29b      	uxth	r3, r3
 800a766:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800a768:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a770:	10db      	asrs	r3, r3, #3
 800a772:	b21b      	sxth	r3, r3
 800a774:	b29b      	uxth	r3, r3
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	b29b      	uxth	r3, r3
 800a77a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a782:	b29a      	uxth	r2, r3
 800a784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a786:	4413      	add	r3, r2
 800a788:	b29b      	uxth	r3, r3
 800a78a:	b21a      	sxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a790:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a794:	2b00      	cmp	r3, #0
 800a796:	da03      	bge.n	800a7a0 <tcp_receive+0x560>
        m = -m;
 800a798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a79a:	425b      	negs	r3, r3
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800a7a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a7a8:	109b      	asrs	r3, r3, #2
 800a7aa:	b21b      	sxth	r3, r3
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7be:	4413      	add	r3, r2
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	b21a      	sxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a7ce:	10db      	asrs	r3, r3, #3
 800a7d0:	b21b      	sxth	r3, r3
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4413      	add	r3, r2
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	b21a      	sxth	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a7ee:	4b5c      	ldr	r3, [pc, #368]	; (800a960 <tcp_receive+0x720>)
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 84f1 	beq.w	800b1da <tcp_receive+0xf9a>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7d1b      	ldrb	r3, [r3, #20]
 800a7fc:	2b06      	cmp	r3, #6
 800a7fe:	f200 84ec 	bhi.w	800b1da <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a806:	4b57      	ldr	r3, [pc, #348]	; (800a964 <tcp_receive+0x724>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f2c0 80b8 	blt.w	800a984 <tcp_receive+0x744>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a818:	4b51      	ldr	r3, [pc, #324]	; (800a960 <tcp_receive+0x720>)
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	4619      	mov	r1, r3
 800a81e:	4b51      	ldr	r3, [pc, #324]	; (800a964 <tcp_receive+0x724>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	440b      	add	r3, r1
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	3301      	adds	r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f300 80ab 	bgt.w	800a984 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a82e:	4b4e      	ldr	r3, [pc, #312]	; (800a968 <tcp_receive+0x728>)
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a838:	4b4a      	ldr	r3, [pc, #296]	; (800a964 <tcp_receive+0x724>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a840:	4b49      	ldr	r3, [pc, #292]	; (800a968 <tcp_receive+0x728>)
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <tcp_receive+0x616>
 800a848:	4b48      	ldr	r3, [pc, #288]	; (800a96c <tcp_receive+0x72c>)
 800a84a:	f240 523c 	movw	r2, #1340	; 0x53c
 800a84e:	4948      	ldr	r1, [pc, #288]	; (800a970 <tcp_receive+0x730>)
 800a850:	4848      	ldr	r0, [pc, #288]	; (800a974 <tcp_receive+0x734>)
 800a852:	f008 fee9 	bl	8013628 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a85c:	4293      	cmp	r3, r2
 800a85e:	dd06      	ble.n	800a86e <tcp_receive+0x62e>
 800a860:	4b42      	ldr	r3, [pc, #264]	; (800a96c <tcp_receive+0x72c>)
 800a862:	f240 523d 	movw	r2, #1341	; 0x53d
 800a866:	4944      	ldr	r1, [pc, #272]	; (800a978 <tcp_receive+0x738>)
 800a868:	4842      	ldr	r0, [pc, #264]	; (800a974 <tcp_receive+0x734>)
 800a86a:	f008 fedd 	bl	8013628 <iprintf>
      if (inseg.p->len < off) {
 800a86e:	4b3e      	ldr	r3, [pc, #248]	; (800a968 <tcp_receive+0x728>)
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	895b      	ldrh	r3, [r3, #10]
 800a874:	461a      	mov	r2, r3
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	4293      	cmp	r3, r2
 800a87a:	dd3e      	ble.n	800a8fa <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a87c:	4b3a      	ldr	r3, [pc, #232]	; (800a968 <tcp_receive+0x728>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	891b      	ldrh	r3, [r3, #8]
 800a882:	461a      	mov	r2, r3
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	4293      	cmp	r3, r2
 800a888:	dd06      	ble.n	800a898 <tcp_receive+0x658>
 800a88a:	4b38      	ldr	r3, [pc, #224]	; (800a96c <tcp_receive+0x72c>)
 800a88c:	f240 523f 	movw	r2, #1343	; 0x53f
 800a890:	493a      	ldr	r1, [pc, #232]	; (800a97c <tcp_receive+0x73c>)
 800a892:	4838      	ldr	r0, [pc, #224]	; (800a974 <tcp_receive+0x734>)
 800a894:	f008 fec8 	bl	8013628 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a898:	4b33      	ldr	r3, [pc, #204]	; (800a968 <tcp_receive+0x728>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	891a      	ldrh	r2, [r3, #8]
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800a8a6:	e00e      	b.n	800a8c6 <tcp_receive+0x686>
          off -= p->len;
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	895b      	ldrh	r3, [r3, #10]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	8a3a      	ldrh	r2, [r7, #16]
 800a8b8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	895b      	ldrh	r3, [r3, #10]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	dcea      	bgt.n	800a8a8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	425b      	negs	r3, r3
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	b21b      	sxth	r3, r3
 800a8dc:	4619      	mov	r1, r3
 800a8de:	69b8      	ldr	r0, [r7, #24]
 800a8e0:	f7fc fba8 	bl	8007034 <pbuf_header>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d01c      	beq.n	800a924 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800a8ea:	4b20      	ldr	r3, [pc, #128]	; (800a96c <tcp_receive+0x72c>)
 800a8ec:	f240 524c 	movw	r2, #1356	; 0x54c
 800a8f0:	4923      	ldr	r1, [pc, #140]	; (800a980 <tcp_receive+0x740>)
 800a8f2:	4820      	ldr	r0, [pc, #128]	; (800a974 <tcp_receive+0x734>)
 800a8f4:	f008 fe98 	bl	8013628 <iprintf>
 800a8f8:	e014      	b.n	800a924 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <tcp_receive+0x728>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a900:	b292      	uxth	r2, r2
 800a902:	4252      	negs	r2, r2
 800a904:	b292      	uxth	r2, r2
 800a906:	b212      	sxth	r2, r2
 800a908:	4611      	mov	r1, r2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fc fb92 	bl	8007034 <pbuf_header>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d006      	beq.n	800a924 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800a916:	4b15      	ldr	r3, [pc, #84]	; (800a96c <tcp_receive+0x72c>)
 800a918:	f240 5251 	movw	r2, #1361	; 0x551
 800a91c:	4918      	ldr	r1, [pc, #96]	; (800a980 <tcp_receive+0x740>)
 800a91e:	4815      	ldr	r0, [pc, #84]	; (800a974 <tcp_receive+0x734>)
 800a920:	f008 fe82 	bl	8013628 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a924:	4b10      	ldr	r3, [pc, #64]	; (800a968 <tcp_receive+0x728>)
 800a926:	891a      	ldrh	r2, [r3, #8]
 800a928:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <tcp_receive+0x724>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	b299      	uxth	r1, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	b29b      	uxth	r3, r3
 800a934:	1acb      	subs	r3, r1, r3
 800a936:	b29b      	uxth	r3, r3
 800a938:	4413      	add	r3, r2
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <tcp_receive+0x728>)
 800a93e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	4a07      	ldr	r2, [pc, #28]	; (800a964 <tcp_receive+0x724>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	4b07      	ldr	r3, [pc, #28]	; (800a968 <tcp_receive+0x728>)
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	4a05      	ldr	r2, [pc, #20]	; (800a964 <tcp_receive+0x724>)
 800a94e:	6812      	ldr	r2, [r2, #0]
 800a950:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a952:	e025      	b.n	800a9a0 <tcp_receive+0x760>
 800a954:	200002d4 	.word	0x200002d4
 800a958:	200002d8 	.word	0x200002d8
 800a95c:	200076b0 	.word	0x200076b0
 800a960:	200002da 	.word	0x200002da
 800a964:	200002d0 	.word	0x200002d0
 800a968:	200002b0 	.word	0x200002b0
 800a96c:	08015d80 	.word	0x08015d80
 800a970:	08016008 	.word	0x08016008
 800a974:	08015dc4 	.word	0x08015dc4
 800a978:	08016018 	.word	0x08016018
 800a97c:	08016028 	.word	0x08016028
 800a980:	08016038 	.word	0x08016038
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a984:	4b87      	ldr	r3, [pc, #540]	; (800aba4 <tcp_receive+0x964>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da06      	bge.n	800a9a0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	7e9b      	ldrb	r3, [r3, #26]
 800a996:	f043 0302 	orr.w	r3, r3, #2
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9a0:	4b80      	ldr	r3, [pc, #512]	; (800aba4 <tcp_receive+0x964>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f2c0 8410 	blt.w	800b1d0 <tcp_receive+0xf90>
 800a9b0:	4b7c      	ldr	r3, [pc, #496]	; (800aba4 <tcp_receive+0x964>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9bc:	440b      	add	r3, r1
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f300 8404 	bgt.w	800b1d0 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9cc:	4b75      	ldr	r3, [pc, #468]	; (800aba4 <tcp_receive+0x964>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	f040 8287 	bne.w	800aee4 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a9d6:	4b74      	ldr	r3, [pc, #464]	; (800aba8 <tcp_receive+0x968>)
 800a9d8:	891c      	ldrh	r4, [r3, #8]
 800a9da:	4b73      	ldr	r3, [pc, #460]	; (800aba8 <tcp_receive+0x968>)
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	899b      	ldrh	r3, [r3, #12]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fb fa1d 	bl	8005e22 <lwip_htons>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <tcp_receive+0x7b6>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <tcp_receive+0x7b8>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4423      	add	r3, r4
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	4b6b      	ldr	r3, [pc, #428]	; (800abac <tcp_receive+0x96c>)
 800a9fe:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa04:	4b69      	ldr	r3, [pc, #420]	; (800abac <tcp_receive+0x96c>)
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d26e      	bcs.n	800aaea <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa0c:	4b66      	ldr	r3, [pc, #408]	; (800aba8 <tcp_receive+0x968>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	899b      	ldrh	r3, [r3, #12]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fb fa04 	bl	8005e22 <lwip_htons>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01b      	beq.n	800aa5c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa24:	4b60      	ldr	r3, [pc, #384]	; (800aba8 <tcp_receive+0x968>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	899b      	ldrh	r3, [r3, #12]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa30:	b29c      	uxth	r4, r3
 800aa32:	4b5d      	ldr	r3, [pc, #372]	; (800aba8 <tcp_receive+0x968>)
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	899b      	ldrh	r3, [r3, #12]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fb f9f1 	bl	8005e22 <lwip_htons>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fb f9ea 	bl	8005e22 <lwip_htons>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	461a      	mov	r2, r3
 800aa52:	4b55      	ldr	r3, [pc, #340]	; (800aba8 <tcp_receive+0x968>)
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	4322      	orrs	r2, r4
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa60:	4b51      	ldr	r3, [pc, #324]	; (800aba8 <tcp_receive+0x968>)
 800aa62:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa64:	4b50      	ldr	r3, [pc, #320]	; (800aba8 <tcp_receive+0x968>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	899b      	ldrh	r3, [r3, #12]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fb f9d8 	bl	8005e22 <lwip_htons>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d005      	beq.n	800aa88 <tcp_receive+0x848>
            inseg.len -= 1;
 800aa7c:	4b4a      	ldr	r3, [pc, #296]	; (800aba8 <tcp_receive+0x968>)
 800aa7e:	891b      	ldrh	r3, [r3, #8]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	4b48      	ldr	r3, [pc, #288]	; (800aba8 <tcp_receive+0x968>)
 800aa86:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aa88:	4b47      	ldr	r3, [pc, #284]	; (800aba8 <tcp_receive+0x968>)
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	4b46      	ldr	r3, [pc, #280]	; (800aba8 <tcp_receive+0x968>)
 800aa8e:	891b      	ldrh	r3, [r3, #8]
 800aa90:	4619      	mov	r1, r3
 800aa92:	4610      	mov	r0, r2
 800aa94:	f7fc f97e 	bl	8006d94 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aa98:	4b43      	ldr	r3, [pc, #268]	; (800aba8 <tcp_receive+0x968>)
 800aa9a:	891c      	ldrh	r4, [r3, #8]
 800aa9c:	4b42      	ldr	r3, [pc, #264]	; (800aba8 <tcp_receive+0x968>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	899b      	ldrh	r3, [r3, #12]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fb f9bc 	bl	8005e22 <lwip_htons>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <tcp_receive+0x878>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <tcp_receive+0x87a>
 800aab8:	2300      	movs	r3, #0
 800aaba:	4423      	add	r3, r4
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	4b3b      	ldr	r3, [pc, #236]	; (800abac <tcp_receive+0x96c>)
 800aac0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aac2:	4b3a      	ldr	r3, [pc, #232]	; (800abac <tcp_receive+0x96c>)
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	4b36      	ldr	r3, [pc, #216]	; (800aba4 <tcp_receive+0x964>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	441a      	add	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aad6:	440b      	add	r3, r1
 800aad8:	429a      	cmp	r2, r3
 800aada:	d006      	beq.n	800aaea <tcp_receive+0x8aa>
 800aadc:	4b34      	ldr	r3, [pc, #208]	; (800abb0 <tcp_receive+0x970>)
 800aade:	f240 527f 	movw	r2, #1407	; 0x57f
 800aae2:	4934      	ldr	r1, [pc, #208]	; (800abb4 <tcp_receive+0x974>)
 800aae4:	4834      	ldr	r0, [pc, #208]	; (800abb8 <tcp_receive+0x978>)
 800aae6:	f008 fd9f 	bl	8013628 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 80e1 	beq.w	800acb6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aaf4:	4b2c      	ldr	r3, [pc, #176]	; (800aba8 <tcp_receive+0x968>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	899b      	ldrh	r3, [r3, #12]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fb f990 	bl	8005e22 <lwip_htons>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d010      	beq.n	800ab2e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ab0c:	e00a      	b.n	800ab24 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab12:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ab1e:	68b8      	ldr	r0, [r7, #8]
 800ab20:	f7fd fe65 	bl	80087ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f0      	bne.n	800ab0e <tcp_receive+0x8ce>
 800ab2c:	e0c3      	b.n	800acb6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ab34:	e04f      	b.n	800abd6 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	899b      	ldrh	r3, [r3, #12]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fb f96f 	bl	8005e22 <lwip_htons>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d03b      	beq.n	800abc6 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ab4e:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <tcp_receive+0x968>)
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	899b      	ldrh	r3, [r3, #12]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fb f963 	bl	8005e22 <lwip_htons>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d12f      	bne.n	800abc6 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ab66:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <tcp_receive+0x968>)
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	899b      	ldrh	r3, [r3, #12]
 800ab6c:	b29c      	uxth	r4, r3
 800ab6e:	2001      	movs	r0, #1
 800ab70:	f7fb f957 	bl	8005e22 <lwip_htons>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <tcp_receive+0x968>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	4322      	orrs	r2, r4
 800ab7e:	b292      	uxth	r2, r2
 800ab80:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <tcp_receive+0x968>)
 800ab84:	891c      	ldrh	r4, [r3, #8]
 800ab86:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <tcp_receive+0x968>)
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	899b      	ldrh	r3, [r3, #12]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fb f947 	bl	8005e22 <lwip_htons>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00e      	beq.n	800abbc <tcp_receive+0x97c>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e00d      	b.n	800abbe <tcp_receive+0x97e>
 800aba2:	bf00      	nop
 800aba4:	200002d0 	.word	0x200002d0
 800aba8:	200002b0 	.word	0x200002b0
 800abac:	200002da 	.word	0x200002da
 800abb0:	08015d80 	.word	0x08015d80
 800abb4:	0801604c 	.word	0x0801604c
 800abb8:	08015dc4 	.word	0x08015dc4
 800abbc:	2300      	movs	r3, #0
 800abbe:	4423      	add	r3, r4
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	4b95      	ldr	r3, [pc, #596]	; (800ae18 <tcp_receive+0xbd8>)
 800abc4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800abd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd2:	f7fd fe0c 	bl	80087ee <tcp_seg_free>
            while (next &&
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00e      	beq.n	800abfa <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800abdc:	4b8e      	ldr	r3, [pc, #568]	; (800ae18 <tcp_receive+0xbd8>)
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	461a      	mov	r2, r3
 800abe2:	4b8e      	ldr	r3, [pc, #568]	; (800ae1c <tcp_receive+0xbdc>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	441a      	add	r2, r3
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abf0:	8909      	ldrh	r1, [r1, #8]
 800abf2:	440b      	add	r3, r1
 800abf4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	da9d      	bge.n	800ab36 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d057      	beq.n	800acb0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800ac00:	4b85      	ldr	r3, [pc, #532]	; (800ae18 <tcp_receive+0xbd8>)
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	4b85      	ldr	r3, [pc, #532]	; (800ae1c <tcp_receive+0xbdc>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd4b      	ble.n	800acb0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	4b7e      	ldr	r3, [pc, #504]	; (800ae1c <tcp_receive+0xbdc>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	4b7d      	ldr	r3, [pc, #500]	; (800ae20 <tcp_receive+0xbe0>)
 800ac2c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac2e:	4b7c      	ldr	r3, [pc, #496]	; (800ae20 <tcp_receive+0xbe0>)
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	899b      	ldrh	r3, [r3, #12]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fb f8f3 	bl	8005e22 <lwip_htons>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <tcp_receive+0xa12>
                inseg.len -= 1;
 800ac46:	4b76      	ldr	r3, [pc, #472]	; (800ae20 <tcp_receive+0xbe0>)
 800ac48:	891b      	ldrh	r3, [r3, #8]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	4b74      	ldr	r3, [pc, #464]	; (800ae20 <tcp_receive+0xbe0>)
 800ac50:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ac52:	4b73      	ldr	r3, [pc, #460]	; (800ae20 <tcp_receive+0xbe0>)
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b72      	ldr	r3, [pc, #456]	; (800ae20 <tcp_receive+0xbe0>)
 800ac58:	891b      	ldrh	r3, [r3, #8]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7fc f899 	bl	8006d94 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ac62:	4b6f      	ldr	r3, [pc, #444]	; (800ae20 <tcp_receive+0xbe0>)
 800ac64:	891c      	ldrh	r4, [r3, #8]
 800ac66:	4b6e      	ldr	r3, [pc, #440]	; (800ae20 <tcp_receive+0xbe0>)
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	899b      	ldrh	r3, [r3, #12]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fb f8d7 	bl	8005e22 <lwip_htons>
 800ac74:	4603      	mov	r3, r0
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <tcp_receive+0xa42>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <tcp_receive+0xa44>
 800ac82:	2300      	movs	r3, #0
 800ac84:	4423      	add	r3, r4
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	4b63      	ldr	r3, [pc, #396]	; (800ae18 <tcp_receive+0xbd8>)
 800ac8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ac8c:	4b62      	ldr	r3, [pc, #392]	; (800ae18 <tcp_receive+0xbd8>)
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	4b62      	ldr	r3, [pc, #392]	; (800ae1c <tcp_receive+0xbdc>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	441a      	add	r2, r3
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d006      	beq.n	800acb0 <tcp_receive+0xa70>
 800aca2:	4b60      	ldr	r3, [pc, #384]	; (800ae24 <tcp_receive+0xbe4>)
 800aca4:	f240 52af 	movw	r2, #1455	; 0x5af
 800aca8:	495f      	ldr	r1, [pc, #380]	; (800ae28 <tcp_receive+0xbe8>)
 800acaa:	4860      	ldr	r0, [pc, #384]	; (800ae2c <tcp_receive+0xbec>)
 800acac:	f008 fcbc 	bl	8013628 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800acb6:	4b58      	ldr	r3, [pc, #352]	; (800ae18 <tcp_receive+0xbd8>)
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	4b57      	ldr	r3, [pc, #348]	; (800ae1c <tcp_receive+0xbdc>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	441a      	add	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800acca:	4b53      	ldr	r3, [pc, #332]	; (800ae18 <tcp_receive+0xbd8>)
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d206      	bcs.n	800ace0 <tcp_receive+0xaa0>
 800acd2:	4b54      	ldr	r3, [pc, #336]	; (800ae24 <tcp_receive+0xbe4>)
 800acd4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800acd8:	4955      	ldr	r1, [pc, #340]	; (800ae30 <tcp_receive+0xbf0>)
 800acda:	4854      	ldr	r0, [pc, #336]	; (800ae2c <tcp_receive+0xbec>)
 800acdc:	f008 fca4 	bl	8013628 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ace4:	4b4c      	ldr	r3, [pc, #304]	; (800ae18 <tcp_receive+0xbd8>)
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	b29a      	uxth	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7fd f8ef 	bl	8007ed4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800acf6:	4b4a      	ldr	r3, [pc, #296]	; (800ae20 <tcp_receive+0xbe0>)
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	891b      	ldrh	r3, [r3, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <tcp_receive+0xace>
          recv_data = inseg.p;
 800ad00:	4b47      	ldr	r3, [pc, #284]	; (800ae20 <tcp_receive+0xbe0>)
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4a4b      	ldr	r2, [pc, #300]	; (800ae34 <tcp_receive+0xbf4>)
 800ad06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ad08:	4b45      	ldr	r3, [pc, #276]	; (800ae20 <tcp_receive+0xbe0>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ad0e:	4b44      	ldr	r3, [pc, #272]	; (800ae20 <tcp_receive+0xbe0>)
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	899b      	ldrh	r3, [r3, #12]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fb f883 	bl	8005e22 <lwip_htons>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 80b4 	beq.w	800ae90 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ad28:	4b43      	ldr	r3, [pc, #268]	; (800ae38 <tcp_receive+0xbf8>)
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	f043 0320 	orr.w	r3, r3, #32
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	4b41      	ldr	r3, [pc, #260]	; (800ae38 <tcp_receive+0xbf8>)
 800ad34:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ad36:	e0ab      	b.n	800ae90 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	4a35      	ldr	r2, [pc, #212]	; (800ae1c <tcp_receive+0xbdc>)
 800ad48:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	891b      	ldrh	r3, [r3, #8]
 800ad4e:	461c      	mov	r4, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	899b      	ldrh	r3, [r3, #12]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fb f862 	bl	8005e22 <lwip_htons>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f003 0303 	and.w	r3, r3, #3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <tcp_receive+0xb2c>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e000      	b.n	800ad6e <tcp_receive+0xb2e>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	191a      	adds	r2, r3, r4
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	441a      	add	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad7e:	461c      	mov	r4, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	891b      	ldrh	r3, [r3, #8]
 800ad84:	461d      	mov	r5, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	899b      	ldrh	r3, [r3, #12]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fb f847 	bl	8005e22 <lwip_htons>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <tcp_receive+0xb62>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <tcp_receive+0xb64>
 800ada2:	2300      	movs	r3, #0
 800ada4:	442b      	add	r3, r5
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d206      	bcs.n	800adb8 <tcp_receive+0xb78>
 800adaa:	4b1e      	ldr	r3, [pc, #120]	; (800ae24 <tcp_receive+0xbe4>)
 800adac:	f240 52de 	movw	r2, #1502	; 0x5de
 800adb0:	4922      	ldr	r1, [pc, #136]	; (800ae3c <tcp_receive+0xbfc>)
 800adb2:	481e      	ldr	r0, [pc, #120]	; (800ae2c <tcp_receive+0xbec>)
 800adb4:	f008 fc38 	bl	8013628 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	891b      	ldrh	r3, [r3, #8]
 800adbc:	461c      	mov	r4, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	899b      	ldrh	r3, [r3, #12]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fb f82b 	bl	8005e22 <lwip_htons>
 800adcc:	4603      	mov	r3, r0
 800adce:	f003 0303 	and.w	r3, r3, #3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d001      	beq.n	800adda <tcp_receive+0xb9a>
 800add6:	2301      	movs	r3, #1
 800add8:	e000      	b.n	800addc <tcp_receive+0xb9c>
 800adda:	2300      	movs	r3, #0
 800addc:	1919      	adds	r1, r3, r4
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ade2:	b28b      	uxth	r3, r1
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7fd f871 	bl	8007ed4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	891b      	ldrh	r3, [r3, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d028      	beq.n	800ae4e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800adfc:	4b0d      	ldr	r3, [pc, #52]	; (800ae34 <tcp_receive+0xbf4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d01d      	beq.n	800ae40 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800ae04:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <tcp_receive+0xbf4>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f7fc fa02 	bl	8007218 <pbuf_cat>
 800ae14:	e018      	b.n	800ae48 <tcp_receive+0xc08>
 800ae16:	bf00      	nop
 800ae18:	200002da 	.word	0x200002da
 800ae1c:	200002d0 	.word	0x200002d0
 800ae20:	200002b0 	.word	0x200002b0
 800ae24:	08015d80 	.word	0x08015d80
 800ae28:	08016084 	.word	0x08016084
 800ae2c:	08015dc4 	.word	0x08015dc4
 800ae30:	080160c0 	.word	0x080160c0
 800ae34:	200002e0 	.word	0x200002e0
 800ae38:	200002dd 	.word	0x200002dd
 800ae3c:	080160e0 	.word	0x080160e0
            } else {
              recv_data = cseg->p;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a71      	ldr	r2, [pc, #452]	; (800b00c <tcp_receive+0xdcc>)
 800ae46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	899b      	ldrh	r3, [r3, #12]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fa ffe3 	bl	8005e22 <lwip_htons>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00d      	beq.n	800ae82 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ae66:	4b6a      	ldr	r3, [pc, #424]	; (800b010 <tcp_receive+0xdd0>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	f043 0320 	orr.w	r3, r3, #32
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	4b67      	ldr	r3, [pc, #412]	; (800b010 <tcp_receive+0xdd0>)
 800ae72:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	7d1b      	ldrb	r3, [r3, #20]
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d102      	bne.n	800ae82 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2207      	movs	r2, #7
 800ae80:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7fd fcaf 	bl	80087ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d008      	beq.n	800aeaa <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aea4:	429a      	cmp	r2, r3
 800aea6:	f43f af47 	beq.w	800ad38 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7e9b      	ldrb	r3, [r3, #26]
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00e      	beq.n	800aed4 <tcp_receive+0xc94>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7e9b      	ldrb	r3, [r3, #26]
 800aeba:	f023 0301 	bic.w	r3, r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	769a      	strb	r2, [r3, #26]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7e9b      	ldrb	r3, [r3, #26]
 800aec8:	f043 0302 	orr.w	r3, r3, #2
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aed2:	e181      	b.n	800b1d8 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7e9b      	ldrb	r3, [r3, #26]
 800aed8:	f043 0301 	orr.w	r3, r3, #1
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aee2:	e179      	b.n	800b1d8 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f001 f8c5 	bl	800c074 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800aef2:	4848      	ldr	r0, [pc, #288]	; (800b014 <tcp_receive+0xdd4>)
 800aef4:	f7fd fca2 	bl	800883c <tcp_seg_copy>
 800aef8:	4602      	mov	r2, r0
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800aefe:	e16b      	b.n	800b1d8 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800af00:	2300      	movs	r3, #0
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af0a:	e150      	b.n	800b1ae <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	4b41      	ldr	r3, [pc, #260]	; (800b018 <tcp_receive+0xdd8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d11d      	bne.n	800af56 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800af1a:	4b3e      	ldr	r3, [pc, #248]	; (800b014 <tcp_receive+0xdd4>)
 800af1c:	891a      	ldrh	r2, [r3, #8]
 800af1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af20:	891b      	ldrh	r3, [r3, #8]
 800af22:	429a      	cmp	r2, r3
 800af24:	f240 8148 	bls.w	800b1b8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800af28:	483a      	ldr	r0, [pc, #232]	; (800b014 <tcp_receive+0xdd4>)
 800af2a:	f7fd fc87 	bl	800883c <tcp_seg_copy>
 800af2e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 8142 	beq.w	800b1bc <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <tcp_receive+0xd06>
                    prev->next = cseg;
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e002      	b.n	800af4c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800af4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff f900 	bl	800a154 <tcp_oos_insert_segment>
                }
                break;
 800af54:	e132      	b.n	800b1bc <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d117      	bne.n	800af8c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800af5c:	4b2e      	ldr	r3, [pc, #184]	; (800b018 <tcp_receive+0xdd8>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	da57      	bge.n	800b01c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800af6c:	4829      	ldr	r0, [pc, #164]	; (800b014 <tcp_receive+0xdd4>)
 800af6e:	f7fd fc65 	bl	800883c <tcp_seg_copy>
 800af72:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 8122 	beq.w	800b1c0 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800af82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff f8e5 	bl	800a154 <tcp_oos_insert_segment>
                  }
                  break;
 800af8a:	e119      	b.n	800b1c0 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800af8c:	4b22      	ldr	r3, [pc, #136]	; (800b018 <tcp_receive+0xdd8>)
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	3b01      	subs	r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	db3e      	blt.n	800b01c <tcp_receive+0xddc>
 800af9e:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <tcp_receive+0xdd8>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	3301      	adds	r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	dc35      	bgt.n	800b01c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800afb0:	4818      	ldr	r0, [pc, #96]	; (800b014 <tcp_receive+0xdd4>)
 800afb2:	f7fd fc43 	bl	800883c <tcp_seg_copy>
 800afb6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8102 	beq.w	800b1c4 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc8:	8912      	ldrh	r2, [r2, #8]
 800afca:	441a      	add	r2, r3
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <tcp_receive+0xdd8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dd12      	ble.n	800affc <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800afd6:	4b10      	ldr	r3, [pc, #64]	; (800b018 <tcp_receive+0xdd8>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	b29a      	uxth	r2, r3
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	891b      	ldrh	r3, [r3, #8]
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f7fb fecc 	bl	8006d94 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7ff f8a5 	bl	800a154 <tcp_oos_insert_segment>
                  }
                  break;
 800b00a:	e0db      	b.n	800b1c4 <tcp_receive+0xf84>
 800b00c:	200002e0 	.word	0x200002e0
 800b010:	200002dd 	.word	0x200002dd
 800b014:	200002b0 	.word	0x200002b0
 800b018:	200002d0 	.word	0x200002d0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f040 80bf 	bne.w	800b1a4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b026:	4b7c      	ldr	r3, [pc, #496]	; (800b218 <tcp_receive+0xfd8>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b032:	2b00      	cmp	r3, #0
 800b034:	f340 80b6 	ble.w	800b1a4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	899b      	ldrh	r3, [r3, #12]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4618      	mov	r0, r3
 800b042:	f7fa feee 	bl	8005e22 <lwip_htons>
 800b046:	4603      	mov	r3, r0
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 80bb 	bne.w	800b1c8 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b052:	4872      	ldr	r0, [pc, #456]	; (800b21c <tcp_receive+0xfdc>)
 800b054:	f7fd fbf2 	bl	800883c <tcp_seg_copy>
 800b058:	4602      	mov	r2, r0
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 80b2 	beq.w	800b1cc <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b070:	8912      	ldrh	r2, [r2, #8]
 800b072:	441a      	add	r2, r3
 800b074:	4b68      	ldr	r3, [pc, #416]	; (800b218 <tcp_receive+0xfd8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	dd12      	ble.n	800b0a4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b07e:	4b66      	ldr	r3, [pc, #408]	; (800b218 <tcp_receive+0xfd8>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	b29a      	uxth	r2, r3
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	b29a      	uxth	r2, r3
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09a:	891b      	ldrh	r3, [r3, #8]
 800b09c:	4619      	mov	r1, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f7fb fe78 	bl	8006d94 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b0a4:	4b5e      	ldr	r3, [pc, #376]	; (800b220 <tcp_receive+0xfe0>)
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4b5b      	ldr	r3, [pc, #364]	; (800b218 <tcp_receive+0xfd8>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	441a      	add	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b0b8:	440b      	add	r3, r1
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f340 8085 	ble.w	800b1cc <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	899b      	ldrh	r3, [r3, #12]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fa fea8 	bl	8005e22 <lwip_htons>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d01e      	beq.n	800b11a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	899b      	ldrh	r3, [r3, #12]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0ea:	b29c      	uxth	r4, r3
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	899b      	ldrh	r3, [r3, #12]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fa fe93 	bl	8005e22 <lwip_htons>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b102:	b29b      	uxth	r3, r3
 800b104:	4618      	mov	r0, r3
 800b106:	f7fa fe8c 	bl	8005e22 <lwip_htons>
 800b10a:	4603      	mov	r3, r0
 800b10c:	461a      	mov	r2, r3
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	4322      	orrs	r2, r4
 800b116:	b292      	uxth	r2, r2
 800b118:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	b29a      	uxth	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b124:	4413      	add	r3, r2
 800b126:	b299      	uxth	r1, r3
 800b128:	4b3b      	ldr	r3, [pc, #236]	; (800b218 <tcp_receive+0xfd8>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	1a8a      	subs	r2, r1, r2
 800b134:	b292      	uxth	r2, r2
 800b136:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	891b      	ldrh	r3, [r3, #8]
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	f7fb fe24 	bl	8006d94 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	891c      	ldrh	r4, [r3, #8]
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	899b      	ldrh	r3, [r3, #12]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fa fe60 	bl	8005e22 <lwip_htons>
 800b162:	4603      	mov	r3, r0
 800b164:	f003 0303 	and.w	r3, r3, #3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <tcp_receive+0xf30>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <tcp_receive+0xf32>
 800b170:	2300      	movs	r3, #0
 800b172:	4423      	add	r3, r4
 800b174:	b29a      	uxth	r2, r3
 800b176:	4b2a      	ldr	r3, [pc, #168]	; (800b220 <tcp_receive+0xfe0>)
 800b178:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b17a:	4b29      	ldr	r3, [pc, #164]	; (800b220 <tcp_receive+0xfe0>)
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	4b25      	ldr	r3, [pc, #148]	; (800b218 <tcp_receive+0xfd8>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	441a      	add	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b18e:	440b      	add	r3, r1
 800b190:	429a      	cmp	r2, r3
 800b192:	d01b      	beq.n	800b1cc <tcp_receive+0xf8c>
 800b194:	4b23      	ldr	r3, [pc, #140]	; (800b224 <tcp_receive+0xfe4>)
 800b196:	f240 627b 	movw	r2, #1659	; 0x67b
 800b19a:	4923      	ldr	r1, [pc, #140]	; (800b228 <tcp_receive+0xfe8>)
 800b19c:	4823      	ldr	r0, [pc, #140]	; (800b22c <tcp_receive+0xfec>)
 800b19e:	f008 fa43 	bl	8013628 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b1a2:	e013      	b.n	800b1cc <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800b1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f47f aeab 	bne.w	800af0c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800b1b6:	e00f      	b.n	800b1d8 <tcp_receive+0xf98>
                break;
 800b1b8:	bf00      	nop
 800b1ba:	e00d      	b.n	800b1d8 <tcp_receive+0xf98>
                break;
 800b1bc:	bf00      	nop
 800b1be:	e00b      	b.n	800b1d8 <tcp_receive+0xf98>
                  break;
 800b1c0:	bf00      	nop
 800b1c2:	e009      	b.n	800b1d8 <tcp_receive+0xf98>
                  break;
 800b1c4:	bf00      	nop
 800b1c6:	e007      	b.n	800b1d8 <tcp_receive+0xf98>
                  break;
 800b1c8:	bf00      	nop
 800b1ca:	e005      	b.n	800b1d8 <tcp_receive+0xf98>
                break;
 800b1cc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800b1ce:	e003      	b.n	800b1d8 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 ff4f 	bl	800c074 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b1d6:	e01a      	b.n	800b20e <tcp_receive+0xfce>
 800b1d8:	e019      	b.n	800b20e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b1da:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <tcp_receive+0xfd8>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	db0a      	blt.n	800b1fe <tcp_receive+0xfbe>
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <tcp_receive+0xfd8>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b1f4:	440b      	add	r3, r1
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dd07      	ble.n	800b20e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7e9b      	ldrb	r3, [r3, #26]
 800b202:	f043 0302 	orr.w	r3, r3, #2
 800b206:	b2da      	uxtb	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800b20c:	e7ff      	b.n	800b20e <tcp_receive+0xfce>
 800b20e:	bf00      	nop
 800b210:	3734      	adds	r7, #52	; 0x34
 800b212:	46bd      	mov	sp, r7
 800b214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b216:	bf00      	nop
 800b218:	200002d0 	.word	0x200002d0
 800b21c:	200002b0 	.word	0x200002b0
 800b220:	200002da 	.word	0x200002da
 800b224:	08015d80 	.word	0x08015d80
 800b228:	0801604c 	.word	0x0801604c
 800b22c:	08015dc4 	.word	0x08015dc4

0800b230 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b236:	4b18      	ldr	r3, [pc, #96]	; (800b298 <tcp_getoptbyte+0x68>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <tcp_getoptbyte+0x1a>
 800b23e:	4b17      	ldr	r3, [pc, #92]	; (800b29c <tcp_getoptbyte+0x6c>)
 800b240:	881a      	ldrh	r2, [r3, #0]
 800b242:	4b17      	ldr	r3, [pc, #92]	; (800b2a0 <tcp_getoptbyte+0x70>)
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d20e      	bcs.n	800b268 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b24a:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <tcp_getoptbyte+0x74>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3314      	adds	r3, #20
 800b250:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800b252:	4b12      	ldr	r3, [pc, #72]	; (800b29c <tcp_getoptbyte+0x6c>)
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	b291      	uxth	r1, r2
 800b25a:	4a10      	ldr	r2, [pc, #64]	; (800b29c <tcp_getoptbyte+0x6c>)
 800b25c:	8011      	strh	r1, [r2, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	4413      	add	r3, r2
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	e010      	b.n	800b28a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <tcp_getoptbyte+0x6c>)
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	b291      	uxth	r1, r2
 800b270:	4a0a      	ldr	r2, [pc, #40]	; (800b29c <tcp_getoptbyte+0x6c>)
 800b272:	8011      	strh	r1, [r2, #0]
 800b274:	b2da      	uxtb	r2, r3
 800b276:	4b0a      	ldr	r3, [pc, #40]	; (800b2a0 <tcp_getoptbyte+0x70>)
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <tcp_getoptbyte+0x68>)
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	4413      	add	r3, r2
 800b288:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	200002c8 	.word	0x200002c8
 800b29c:	200002cc 	.word	0x200002cc
 800b2a0:	200002c6 	.word	0x200002c6
 800b2a4:	200002c0 	.word	0x200002c0

0800b2a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b2b0:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <tcp_parseopt+0xc0>)
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d053      	beq.n	800b360 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b2b8:	4b2c      	ldr	r3, [pc, #176]	; (800b36c <tcp_parseopt+0xc4>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	801a      	strh	r2, [r3, #0]
 800b2be:	e043      	b.n	800b348 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800b2c0:	f7ff ffb6 	bl	800b230 <tcp_getoptbyte>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d03c      	beq.n	800b348 <tcp_parseopt+0xa0>
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d002      	beq.n	800b2d8 <tcp_parseopt+0x30>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d03f      	beq.n	800b356 <tcp_parseopt+0xae>
 800b2d6:	e026      	b.n	800b326 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b2d8:	f7ff ffaa 	bl	800b230 <tcp_getoptbyte>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b04      	cmp	r3, #4
 800b2e0:	d13b      	bne.n	800b35a <tcp_parseopt+0xb2>
 800b2e2:	4b22      	ldr	r3, [pc, #136]	; (800b36c <tcp_parseopt+0xc4>)
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	3302      	adds	r3, #2
 800b2e8:	4a1f      	ldr	r2, [pc, #124]	; (800b368 <tcp_parseopt+0xc0>)
 800b2ea:	8812      	ldrh	r2, [r2, #0]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	dc34      	bgt.n	800b35a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800b2f0:	f7ff ff9e 	bl	800b230 <tcp_getoptbyte>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	021b      	lsls	r3, r3, #8
 800b2fa:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800b2fc:	f7ff ff98 	bl	800b230 <tcp_getoptbyte>
 800b300:	4603      	mov	r3, r0
 800b302:	b29a      	uxth	r2, r3
 800b304:	89bb      	ldrh	r3, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b30a:	89bb      	ldrh	r3, [r7, #12]
 800b30c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b310:	d804      	bhi.n	800b31c <tcp_parseopt+0x74>
 800b312:	89bb      	ldrh	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <tcp_parseopt+0x74>
 800b318:	89ba      	ldrh	r2, [r7, #12]
 800b31a:	e001      	b.n	800b320 <tcp_parseopt+0x78>
 800b31c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800b324:	e010      	b.n	800b348 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800b326:	f7ff ff83 	bl	800b230 <tcp_getoptbyte>
 800b32a:	4603      	mov	r3, r0
 800b32c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800b32e:	7afb      	ldrb	r3, [r7, #11]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d914      	bls.n	800b35e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	b29a      	uxth	r2, r3
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <tcp_parseopt+0xc4>)
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	4413      	add	r3, r2
 800b33e:	b29b      	uxth	r3, r3
 800b340:	3b02      	subs	r3, #2
 800b342:	b29a      	uxth	r2, r3
 800b344:	4b09      	ldr	r3, [pc, #36]	; (800b36c <tcp_parseopt+0xc4>)
 800b346:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b348:	4b08      	ldr	r3, [pc, #32]	; (800b36c <tcp_parseopt+0xc4>)
 800b34a:	881a      	ldrh	r2, [r3, #0]
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <tcp_parseopt+0xc0>)
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d3b5      	bcc.n	800b2c0 <tcp_parseopt+0x18>
 800b354:	e004      	b.n	800b360 <tcp_parseopt+0xb8>
        return;
 800b356:	bf00      	nop
 800b358:	e002      	b.n	800b360 <tcp_parseopt+0xb8>
          return;
 800b35a:	bf00      	nop
 800b35c:	e000      	b.n	800b360 <tcp_parseopt+0xb8>
          return;
 800b35e:	bf00      	nop
      }
    }
  }
}
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	200002c4 	.word	0x200002c4
 800b36c:	200002cc 	.word	0x200002cc

0800b370 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b374:	4b05      	ldr	r3, [pc, #20]	; (800b38c <tcp_trigger_input_pcb_close+0x1c>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	f043 0310 	orr.w	r3, r3, #16
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	4b03      	ldr	r3, [pc, #12]	; (800b38c <tcp_trigger_input_pcb_close+0x1c>)
 800b380:	701a      	strb	r2, [r3, #0]
}
 800b382:	bf00      	nop
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	200002dd 	.word	0x200002dd

0800b390 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	607b      	str	r3, [r7, #4]
 800b39a:	460b      	mov	r3, r1
 800b39c:	817b      	strh	r3, [r7, #10]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b3a2:	897a      	ldrh	r2, [r7, #10]
 800b3a4:	893b      	ldrh	r3, [r7, #8]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	3314      	adds	r3, #20
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	f7fb faf0 	bl	8006998 <pbuf_alloc>
 800b3b8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d057      	beq.n	800b470 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	895b      	ldrh	r3, [r3, #10]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	897b      	ldrh	r3, [r7, #10]
 800b3c8:	3314      	adds	r3, #20
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	da05      	bge.n	800b3da <tcp_output_alloc_header+0x4a>
 800b3ce:	4b2b      	ldr	r3, [pc, #172]	; (800b47c <tcp_output_alloc_header+0xec>)
 800b3d0:	2273      	movs	r2, #115	; 0x73
 800b3d2:	492b      	ldr	r1, [pc, #172]	; (800b480 <tcp_output_alloc_header+0xf0>)
 800b3d4:	482b      	ldr	r0, [pc, #172]	; (800b484 <tcp_output_alloc_header+0xf4>)
 800b3d6:	f008 f927 	bl	8013628 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	8adb      	ldrh	r3, [r3, #22]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fa fd1c 	bl	8005e22 <lwip_htons>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8b1b      	ldrh	r3, [r3, #24]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fa fd13 	bl	8005e22 <lwip_htons>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fa fd15 	bl	8005e3e <lwip_htonl>
 800b414:	4602      	mov	r2, r0
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800b41a:	897b      	ldrh	r3, [r7, #10]
 800b41c:	089b      	lsrs	r3, r3, #2
 800b41e:	b29b      	uxth	r3, r3
 800b420:	3305      	adds	r3, #5
 800b422:	b29b      	uxth	r3, r3
 800b424:	031b      	lsls	r3, r3, #12
 800b426:	b29b      	uxth	r3, r3
 800b428:	f043 0310 	orr.w	r3, r3, #16
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fa fcf7 	bl	8005e22 <lwip_htons>
 800b434:	4603      	mov	r3, r0
 800b436:	461a      	mov	r2, r3
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b440:	4618      	mov	r0, r3
 800b442:	f7fa fcee 	bl	8005e22 <lwip_htons>
 800b446:	4603      	mov	r3, r0
 800b448:	461a      	mov	r2, r3
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2200      	movs	r2, #0
 800b452:	741a      	strb	r2, [r3, #16]
 800b454:	2200      	movs	r2, #0
 800b456:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	2200      	movs	r2, #0
 800b45c:	749a      	strb	r2, [r3, #18]
 800b45e:	2200      	movs	r2, #0
 800b460:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b46a:	441a      	add	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b470:	697b      	ldr	r3, [r7, #20]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	08016108 	.word	0x08016108
 800b480:	0801613c 	.word	0x0801613c
 800b484:	0801616c 	.word	0x0801616c

0800b488 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b488:	b590      	push	{r4, r7, lr}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b494:	2b00      	cmp	r3, #0
 800b496:	d02d      	beq.n	800b4f4 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	e002      	b.n	800b4a6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1f8      	bne.n	800b4a0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	899b      	ldrh	r3, [r3, #12]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fa fcb3 	bl	8005e22 <lwip_htons>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f003 0307 	and.w	r3, r3, #7
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d116      	bne.n	800b4f4 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	899b      	ldrh	r3, [r3, #12]
 800b4cc:	b29c      	uxth	r4, r3
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	f7fa fca7 	bl	8005e22 <lwip_htons>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4322      	orrs	r2, r4
 800b4de:	b292      	uxth	r2, r2
 800b4e0:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7e9b      	ldrb	r3, [r3, #26]
 800b4e6:	f043 0320 	orr.w	r3, r3, #32
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e004      	b.n	800b4fe <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fcc0 	bl	800be7c <tcp_enqueue_flags>
 800b4fc:	4603      	mov	r3, r0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	bd90      	pop	{r4, r7, pc}
	...

0800b508 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800b508:	b590      	push	{r4, r7, lr}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	603b      	str	r3, [r7, #0]
 800b514:	4613      	mov	r3, r2
 800b516:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b526:	2004      	movs	r0, #4
 800b528:	f7fb f82a 	bl	8006580 <memp_malloc>
 800b52c:	6138      	str	r0, [r7, #16]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d104      	bne.n	800b53e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b534:	68b8      	ldr	r0, [r7, #8]
 800b536:	f7fb fda1 	bl	800707c <pbuf_free>
    return NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e061      	b.n	800b602 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b544:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	891a      	ldrh	r2, [r3, #8]
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d205      	bcs.n	800b56a <tcp_create_segment+0x62>
 800b55e:	4b2b      	ldr	r3, [pc, #172]	; (800b60c <tcp_create_segment+0x104>)
 800b560:	22ba      	movs	r2, #186	; 0xba
 800b562:	492b      	ldr	r1, [pc, #172]	; (800b610 <tcp_create_segment+0x108>)
 800b564:	482b      	ldr	r0, [pc, #172]	; (800b614 <tcp_create_segment+0x10c>)
 800b566:	f008 f85f 	bl	8013628 <iprintf>
  seg->len = p->tot_len - optlen;
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	891a      	ldrh	r2, [r3, #8]
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	b29b      	uxth	r3, r3
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	b29a      	uxth	r2, r3
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800b57a:	2114      	movs	r1, #20
 800b57c:	68b8      	ldr	r0, [r7, #8]
 800b57e:	f7fb fd59 	bl	8007034 <pbuf_header>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b588:	6938      	ldr	r0, [r7, #16]
 800b58a:	f7fd f930 	bl	80087ee <tcp_seg_free>
    return NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	e037      	b.n	800b602 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	8ada      	ldrh	r2, [r3, #22]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	68dc      	ldr	r4, [r3, #12]
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7fa fc3c 	bl	8005e22 <lwip_htons>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	8b1a      	ldrh	r2, [r3, #24]
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	68dc      	ldr	r4, [r3, #12]
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fa fc33 	bl	8005e22 <lwip_htons>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	68dc      	ldr	r4, [r3, #12]
 800b5c4:	6838      	ldr	r0, [r7, #0]
 800b5c6:	f7fa fc3a 	bl	8005e3e <lwip_htonl>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	089b      	lsrs	r3, r3, #2
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	3305      	adds	r3, #5
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	031b      	lsls	r3, r3, #12
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	68dc      	ldr	r4, [r3, #12]
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	f7fa fc19 	bl	8005e22 <lwip_htons>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	749a      	strb	r2, [r3, #18]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	74da      	strb	r2, [r3, #19]
  return seg;
 800b600:	693b      	ldr	r3, [r7, #16]
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08016108 	.word	0x08016108
 800b610:	08016194 	.word	0x08016194
 800b614:	0801616c 	.word	0x0801616c

0800b618 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	607b      	str	r3, [r7, #4]
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]
 800b624:	460b      	mov	r3, r1
 800b626:	81bb      	strh	r3, [r7, #12]
 800b628:	4613      	mov	r3, r2
 800b62a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b62c:	89bb      	ldrh	r3, [r7, #12]
 800b62e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b630:	89ba      	ldrh	r2, [r7, #12]
 800b632:	897b      	ldrh	r3, [r7, #10]
 800b634:	429a      	cmp	r2, r3
 800b636:	d221      	bcs.n	800b67c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d111      	bne.n	800b668 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	7e9b      	ldrb	r3, [r3, #26]
 800b648:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d115      	bne.n	800b67c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800b650:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d103      	bne.n	800b668 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800b664:	2b00      	cmp	r3, #0
 800b666:	d009      	beq.n	800b67c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b668:	89bb      	ldrh	r3, [r7, #12]
 800b66a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b66e:	f023 0203 	bic.w	r2, r3, #3
 800b672:	897b      	ldrh	r3, [r7, #10]
 800b674:	4293      	cmp	r3, r2
 800b676:	bf28      	it	cs
 800b678:	4613      	movcs	r3, r2
 800b67a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b67c:	8af9      	ldrh	r1, [r7, #22]
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	2200      	movs	r2, #0
 800b682:	4618      	mov	r0, r3
 800b684:	f7fb f988 	bl	8006998 <pbuf_alloc>
 800b688:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	e019      	b.n	800b6c8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d006      	beq.n	800b6aa <tcp_pbuf_prealloc+0x92>
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <tcp_pbuf_prealloc+0xb8>)
 800b69e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b6a2:	490c      	ldr	r1, [pc, #48]	; (800b6d4 <tcp_pbuf_prealloc+0xbc>)
 800b6a4:	480c      	ldr	r0, [pc, #48]	; (800b6d8 <tcp_pbuf_prealloc+0xc0>)
 800b6a6:	f007 ffbf 	bl	8013628 <iprintf>
  *oversize = p->len - length;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	895a      	ldrh	r2, [r3, #10]
 800b6ae:	89bb      	ldrh	r3, [r7, #12]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	89ba      	ldrh	r2, [r7, #12]
 800b6bc:	811a      	strh	r2, [r3, #8]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	891a      	ldrh	r2, [r3, #8]
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	815a      	strh	r2, [r3, #10]
  return p;
 800b6c6:	693b      	ldr	r3, [r7, #16]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	08016108 	.word	0x08016108
 800b6d4:	080161ac 	.word	0x080161ac
 800b6d8:	0801616c 	.word	0x0801616c

0800b6dc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	7d1b      	ldrb	r3, [r3, #20]
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	d00e      	beq.n	800b70e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b6f4:	2b07      	cmp	r3, #7
 800b6f6:	d00a      	beq.n	800b70e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d006      	beq.n	800b70e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b704:	2b03      	cmp	r3, #3
 800b706:	d002      	beq.n	800b70e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b708:	f06f 030a 	mvn.w	r3, #10
 800b70c:	e04f      	b.n	800b7ae <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800b70e:	887b      	ldrh	r3, [r7, #2]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <tcp_write_checks+0x3c>
    return ERR_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	e04a      	b.n	800b7ae <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b71e:	887a      	ldrh	r2, [r7, #2]
 800b720:	429a      	cmp	r2, r3
 800b722:	d909      	bls.n	800b738 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7e9b      	ldrb	r3, [r3, #26]
 800b728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800b732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b736:	e03a      	b.n	800b7ae <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b73e:	2b08      	cmp	r3, #8
 800b740:	d806      	bhi.n	800b750 <tcp_write_checks+0x74>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b748:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d909      	bls.n	800b764 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	7e9b      	ldrb	r3, [r3, #26]
 800b754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b762:	e024      	b.n	800b7ae <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00f      	beq.n	800b78e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d11a      	bne.n	800b7ac <tcp_write_checks+0xd0>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d116      	bne.n	800b7ac <tcp_write_checks+0xd0>
 800b77e:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <tcp_write_checks+0xdc>)
 800b780:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800b784:	490d      	ldr	r1, [pc, #52]	; (800b7bc <tcp_write_checks+0xe0>)
 800b786:	480e      	ldr	r0, [pc, #56]	; (800b7c0 <tcp_write_checks+0xe4>)
 800b788:	f007 ff4e 	bl	8013628 <iprintf>
 800b78c:	e00e      	b.n	800b7ac <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <tcp_write_checks+0xc2>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d006      	beq.n	800b7ac <tcp_write_checks+0xd0>
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <tcp_write_checks+0xdc>)
 800b7a0:	f240 1259 	movw	r2, #345	; 0x159
 800b7a4:	4907      	ldr	r1, [pc, #28]	; (800b7c4 <tcp_write_checks+0xe8>)
 800b7a6:	4806      	ldr	r0, [pc, #24]	; (800b7c0 <tcp_write_checks+0xe4>)
 800b7a8:	f007 ff3e 	bl	8013628 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	08016108 	.word	0x08016108
 800b7bc:	080161c0 	.word	0x080161c0
 800b7c0:	0801616c 	.word	0x0801616c
 800b7c4:	080161fc 	.word	0x080161fc

0800b7c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b7c8:	b590      	push	{r4, r7, lr}
 800b7ca:	b09b      	sub	sp, #108	; 0x6c
 800b7cc:	af04      	add	r7, sp, #16
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	80fb      	strh	r3, [r7, #6]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	653b      	str	r3, [r7, #80]	; 0x50
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b816:	085b      	lsrs	r3, r3, #1
 800b818:	b29a      	uxth	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b81e:	4293      	cmp	r3, r2
 800b820:	bf28      	it	cs
 800b822:	4613      	movcs	r3, r2
 800b824:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d102      	bne.n	800b832 <tcp_write+0x6a>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b830:	e000      	b.n	800b834 <tcp_write+0x6c>
 800b832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b834:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d109      	bne.n	800b850 <tcp_write+0x88>
 800b83c:	4b92      	ldr	r3, [pc, #584]	; (800ba88 <tcp_write+0x2c0>)
 800b83e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800b842:	4992      	ldr	r1, [pc, #584]	; (800ba8c <tcp_write+0x2c4>)
 800b844:	4892      	ldr	r0, [pc, #584]	; (800ba90 <tcp_write+0x2c8>)
 800b846:	f007 feef 	bl	8013628 <iprintf>
 800b84a:	f06f 030f 	mvn.w	r3, #15
 800b84e:	e30a      	b.n	800be66 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b850:	88fb      	ldrh	r3, [r7, #6]
 800b852:	4619      	mov	r1, r3
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7ff ff41 	bl	800b6dc <tcp_write_checks>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b860:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <tcp_write+0xa6>
    return err;
 800b868:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b86c:	e2fb      	b.n	800be66 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b874:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80f5 	beq.w	800ba6c <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b886:	653b      	str	r3, [r7, #80]	; 0x50
 800b888:	e002      	b.n	800b890 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800b88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1f8      	bne.n	800b88a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b89a:	7a9b      	ldrb	r3, [r3, #10]
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b8a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8aa:	891b      	ldrh	r3, [r3, #8]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	8c3b      	ldrh	r3, [r7, #32]
 800b8b0:	440b      	add	r3, r1
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	da06      	bge.n	800b8c4 <tcp_write+0xfc>
 800b8b6:	4b74      	ldr	r3, [pc, #464]	; (800ba88 <tcp_write+0x2c0>)
 800b8b8:	f240 12c7 	movw	r2, #455	; 0x1c7
 800b8bc:	4975      	ldr	r1, [pc, #468]	; (800ba94 <tcp_write+0x2cc>)
 800b8be:	4874      	ldr	r0, [pc, #464]	; (800ba90 <tcp_write+0x2c8>)
 800b8c0:	f007 feb2 	bl	8013628 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c6:	891a      	ldrh	r2, [r3, #8]
 800b8c8:	8c3b      	ldrh	r3, [r7, #32]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8da:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b8dc:	8a7b      	ldrh	r3, [r7, #18]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d027      	beq.n	800b932 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b8e2:	8a7b      	ldrh	r3, [r7, #18]
 800b8e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d206      	bcs.n	800b8f8 <tcp_write+0x130>
 800b8ea:	4b67      	ldr	r3, [pc, #412]	; (800ba88 <tcp_write+0x2c0>)
 800b8ec:	f240 12d9 	movw	r2, #473	; 0x1d9
 800b8f0:	4969      	ldr	r1, [pc, #420]	; (800ba98 <tcp_write+0x2d0>)
 800b8f2:	4867      	ldr	r0, [pc, #412]	; (800ba90 <tcp_write+0x2c8>)
 800b8f4:	f007 fe98 	bl	8013628 <iprintf>
      seg = last_unsent;
 800b8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b8fc:	8a7b      	ldrh	r3, [r7, #18]
 800b8fe:	88fa      	ldrh	r2, [r7, #6]
 800b900:	429a      	cmp	r2, r3
 800b902:	d901      	bls.n	800b908 <tcp_write+0x140>
 800b904:	8a7b      	ldrh	r3, [r7, #18]
 800b906:	e000      	b.n	800b90a <tcp_write+0x142>
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b90c:	4293      	cmp	r3, r2
 800b90e:	bfa8      	it	ge
 800b910:	4613      	movge	r3, r2
 800b912:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b914:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b918:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b91a:	4413      	add	r3, r2
 800b91c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b920:	8a7a      	ldrh	r2, [r7, #18]
 800b922:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	b29b      	uxth	r3, r3
 800b928:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b92a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b92c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b932:	8a7b      	ldrh	r3, [r7, #18]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <tcp_write+0x188>
 800b938:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d006      	beq.n	800b950 <tcp_write+0x188>
 800b942:	4b51      	ldr	r3, [pc, #324]	; (800ba88 <tcp_write+0x2c0>)
 800b944:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b948:	4954      	ldr	r1, [pc, #336]	; (800ba9c <tcp_write+0x2d4>)
 800b94a:	4851      	ldr	r0, [pc, #324]	; (800ba90 <tcp_write+0x2c8>)
 800b94c:	f007 fe6c 	bl	8013628 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b954:	88fb      	ldrh	r3, [r7, #6]
 800b956:	429a      	cmp	r2, r3
 800b958:	f080 8168 	bcs.w	800bc2c <tcp_write+0x464>
 800b95c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f000 8164 	beq.w	800bc2c <tcp_write+0x464>
 800b964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b966:	891b      	ldrh	r3, [r3, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 815f 	beq.w	800bc2c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b96e:	88fa      	ldrh	r2, [r7, #6]
 800b970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b974:	1ad2      	subs	r2, r2, r3
 800b976:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b978:	4293      	cmp	r3, r2
 800b97a:	bfa8      	it	ge
 800b97c:	4613      	movge	r3, r2
 800b97e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b982:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b984:	797b      	ldrb	r3, [r7, #5]
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d027      	beq.n	800b9de <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b98e:	f107 0012 	add.w	r0, r7, #18
 800b992:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b994:	8bf9      	ldrh	r1, [r7, #30]
 800b996:	2301      	movs	r3, #1
 800b998:	9302      	str	r3, [sp, #8]
 800b99a:	797b      	ldrb	r3, [r7, #5]
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2004      	movs	r0, #4
 800b9a6:	f7ff fe37 	bl	800b618 <tcp_pbuf_prealloc>
 800b9aa:	6578      	str	r0, [r7, #84]	; 0x54
 800b9ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 8227 	beq.w	800be02 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b9b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9b6:	6858      	ldr	r0, [r3, #4]
 800b9b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	4413      	add	r3, r2
 800b9c0:	8bfa      	ldrh	r2, [r7, #30]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f007 fa93 	bl	8012eee <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b9c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9ca:	f7fb fbeb 	bl	80071a4 <pbuf_clen>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b9dc:	e03f      	b.n	800ba5e <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e4:	e002      	b.n	800b9ec <tcp_write+0x224>
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1f8      	bne.n	800b9e6 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	7b1b      	ldrb	r3, [r3, #12]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d115      	bne.n	800ba28 <tcp_write+0x260>
 800b9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba02:	8952      	ldrh	r2, [r2, #10]
 800ba04:	4413      	add	r3, r2
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d10d      	bne.n	800ba28 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ba0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d006      	beq.n	800ba22 <tcp_write+0x25a>
 800ba14:	4b1c      	ldr	r3, [pc, #112]	; (800ba88 <tcp_write+0x2c0>)
 800ba16:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ba1a:	4921      	ldr	r1, [pc, #132]	; (800baa0 <tcp_write+0x2d8>)
 800ba1c:	481c      	ldr	r0, [pc, #112]	; (800ba90 <tcp_write+0x2c8>)
 800ba1e:	f007 fe03 	bl	8013628 <iprintf>
          extendlen = seglen;
 800ba22:	8bfb      	ldrh	r3, [r7, #30]
 800ba24:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ba26:	e01a      	b.n	800ba5e <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ba28:	8bfb      	ldrh	r3, [r7, #30]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	2004      	movs	r0, #4
 800ba30:	f7fa ffb2 	bl	8006998 <pbuf_alloc>
 800ba34:	6578      	str	r0, [r7, #84]	; 0x54
 800ba36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 81e4 	beq.w	800be06 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800ba3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	441a      	add	r2, r3
 800ba46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba48:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ba4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ba4c:	f7fb fbaa 	bl	80071a4 <pbuf_clen>
 800ba50:	4603      	mov	r3, r0
 800ba52:	461a      	mov	r2, r3
 800ba54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ba58:	4413      	add	r3, r2
 800ba5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ba5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba62:	8bfb      	ldrh	r3, [r7, #30]
 800ba64:	4413      	add	r3, r2
 800ba66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ba6a:	e0df      	b.n	800bc2c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 80da 	beq.w	800bc2c <tcp_write+0x464>
 800ba78:	4b03      	ldr	r3, [pc, #12]	; (800ba88 <tcp_write+0x2c0>)
 800ba7a:	f240 2225 	movw	r2, #549	; 0x225
 800ba7e:	4909      	ldr	r1, [pc, #36]	; (800baa4 <tcp_write+0x2dc>)
 800ba80:	4803      	ldr	r0, [pc, #12]	; (800ba90 <tcp_write+0x2c8>)
 800ba82:	f007 fdd1 	bl	8013628 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ba86:	e0d1      	b.n	800bc2c <tcp_write+0x464>
 800ba88:	08016108 	.word	0x08016108
 800ba8c:	08016230 	.word	0x08016230
 800ba90:	0801616c 	.word	0x0801616c
 800ba94:	08016264 	.word	0x08016264
 800ba98:	0801627c 	.word	0x0801627c
 800ba9c:	0801629c 	.word	0x0801629c
 800baa0:	080162bc 	.word	0x080162bc
 800baa4:	080162e8 	.word	0x080162e8
    struct pbuf *p;
    u16_t left = len - pos;
 800baa8:	88fa      	ldrh	r2, [r7, #6]
 800baaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800babe:	8b7a      	ldrh	r2, [r7, #26]
 800bac0:	8bbb      	ldrh	r3, [r7, #28]
 800bac2:	4293      	cmp	r3, r2
 800bac4:	bf28      	it	cs
 800bac6:	4613      	movcs	r3, r2
 800bac8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800baca:	797b      	ldrb	r3, [r7, #5]
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d036      	beq.n	800bb42 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad8:	b29a      	uxth	r2, r3
 800bada:	8b3b      	ldrh	r3, [r7, #24]
 800badc:	4413      	add	r3, r2
 800bade:	b299      	uxth	r1, r3
 800bae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bf0c      	ite	eq
 800bae6:	2301      	moveq	r3, #1
 800bae8:	2300      	movne	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	f107 0012 	add.w	r0, r7, #18
 800baf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	797b      	ldrb	r3, [r7, #5]
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	4603      	mov	r3, r0
 800bafe:	2000      	movs	r0, #0
 800bb00:	f7ff fd8a 	bl	800b618 <tcp_pbuf_prealloc>
 800bb04:	6338      	str	r0, [r7, #48]	; 0x30
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 817e 	beq.w	800be0a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	895b      	ldrh	r3, [r3, #10]
 800bb12:	8b3a      	ldrh	r2, [r7, #24]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d906      	bls.n	800bb26 <tcp_write+0x35e>
 800bb18:	4b8f      	ldr	r3, [pc, #572]	; (800bd58 <tcp_write+0x590>)
 800bb1a:	f240 2241 	movw	r2, #577	; 0x241
 800bb1e:	498f      	ldr	r1, [pc, #572]	; (800bd5c <tcp_write+0x594>)
 800bb20:	488f      	ldr	r0, [pc, #572]	; (800bd60 <tcp_write+0x598>)
 800bb22:	f007 fd81 	bl	8013628 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	685a      	ldr	r2, [r3, #4]
 800bb2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb2e:	18d0      	adds	r0, r2, r3
 800bb30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	4413      	add	r3, r2
 800bb38:	8b3a      	ldrh	r2, [r7, #24]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	f007 f9d7 	bl	8012eee <memcpy>
 800bb40:	e02e      	b.n	800bba0 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bb42:	8a7b      	ldrh	r3, [r7, #18]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d006      	beq.n	800bb56 <tcp_write+0x38e>
 800bb48:	4b83      	ldr	r3, [pc, #524]	; (800bd58 <tcp_write+0x590>)
 800bb4a:	f240 224b 	movw	r2, #587	; 0x24b
 800bb4e:	4985      	ldr	r1, [pc, #532]	; (800bd64 <tcp_write+0x59c>)
 800bb50:	4883      	ldr	r0, [pc, #524]	; (800bd60 <tcp_write+0x598>)
 800bb52:	f007 fd69 	bl	8013628 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bb56:	8b3b      	ldrh	r3, [r7, #24]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f7fa ff1b 	bl	8006998 <pbuf_alloc>
 800bb62:	6178      	str	r0, [r7, #20]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 8151 	beq.w	800be0e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800bb6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	441a      	add	r2, r3
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4619      	mov	r1, r3
 800bb82:	2000      	movs	r0, #0
 800bb84:	f7fa ff08 	bl	8006998 <pbuf_alloc>
 800bb88:	6338      	str	r0, [r7, #48]	; 0x30
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d103      	bne.n	800bb98 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bb90:	6978      	ldr	r0, [r7, #20]
 800bb92:	f7fb fa73 	bl	800707c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bb96:	e13d      	b.n	800be14 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bb98:	6979      	ldr	r1, [r7, #20]
 800bb9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb9c:	f7fb fb3c 	bl	8007218 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba2:	f7fb faff 	bl	80071a4 <pbuf_clen>
 800bba6:	4603      	mov	r3, r0
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbae:	4413      	add	r3, r2
 800bbb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800bbb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbb8:	2b09      	cmp	r3, #9
 800bbba:	d805      	bhi.n	800bbc8 <tcp_write+0x400>
 800bbbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbc0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d903      	bls.n	800bbd0 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bbc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbca:	f7fb fa57 	bl	800707c <pbuf_free>
      goto memerr;
 800bbce:	e121      	b.n	800be14 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbd8:	441a      	add	r2, r3
 800bbda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fc8e 	bl	800b508 <tcp_create_segment>
 800bbec:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 810e 	beq.w	800be12 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <tcp_write+0x43a>
      queue = seg;
 800bbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbfe:	647b      	str	r3, [r7, #68]	; 0x44
 800bc00:	e00c      	b.n	800bc1c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bc02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <tcp_write+0x44e>
 800bc08:	4b53      	ldr	r3, [pc, #332]	; (800bd58 <tcp_write+0x590>)
 800bc0a:	f240 2285 	movw	r2, #645	; 0x285
 800bc0e:	4956      	ldr	r1, [pc, #344]	; (800bd68 <tcp_write+0x5a0>)
 800bc10:	4853      	ldr	r0, [pc, #332]	; (800bd60 <tcp_write+0x598>)
 800bc12:	f007 fd09 	bl	8013628 <iprintf>
      prev_seg->next = seg;
 800bc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc1a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bc20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc24:	8b3b      	ldrh	r3, [r7, #24]
 800bc26:	4413      	add	r3, r2
 800bc28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800bc2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	f4ff af38 	bcc.w	800baa8 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bc38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d02c      	beq.n	800bc98 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bc3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc44:	e01e      	b.n	800bc84 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc48:	891a      	ldrh	r2, [r3, #8]
 800bc4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc4c:	4413      	add	r3, r2
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc52:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d110      	bne.n	800bc7e <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc62:	8952      	ldrh	r2, [r2, #10]
 800bc64:	4413      	add	r3, r2
 800bc66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bc68:	68b9      	ldr	r1, [r7, #8]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f007 f93f 	bl	8012eee <memcpy>
        p->len += oversize_used;
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	895a      	ldrh	r2, [r3, #10]
 800bc74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc76:	4413      	add	r3, r2
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1dd      	bne.n	800bc46 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800bc8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc8c:	891a      	ldrh	r2, [r3, #8]
 800bc8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc90:	4413      	add	r3, r2
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc96:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800bc98:	8a7a      	ldrh	r2, [r7, #18]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d018      	beq.n	800bcd8 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <tcp_write+0x4f2>
 800bcac:	4b2a      	ldr	r3, [pc, #168]	; (800bd58 <tcp_write+0x590>)
 800bcae:	f240 22bb 	movw	r2, #699	; 0x2bb
 800bcb2:	492e      	ldr	r1, [pc, #184]	; (800bd6c <tcp_write+0x5a4>)
 800bcb4:	482a      	ldr	r0, [pc, #168]	; (800bd60 <tcp_write+0x598>)
 800bcb6:	f007 fcb7 	bl	8013628 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bcba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fb faa9 	bl	8007218 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc8:	891a      	ldrh	r2, [r3, #8]
 800bcca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bccc:	891b      	ldrh	r3, [r3, #8]
 800bcce:	4413      	add	r3, r2
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd4:	811a      	strh	r2, [r3, #8]
 800bcd6:	e037      	b.n	800bd48 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800bcd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d034      	beq.n	800bd48 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <tcp_write+0x524>
 800bce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d106      	bne.n	800bcfa <tcp_write+0x532>
 800bcec:	4b1a      	ldr	r3, [pc, #104]	; (800bd58 <tcp_write+0x590>)
 800bcee:	f240 22c1 	movw	r2, #705	; 0x2c1
 800bcf2:	491f      	ldr	r1, [pc, #124]	; (800bd70 <tcp_write+0x5a8>)
 800bcf4:	481a      	ldr	r0, [pc, #104]	; (800bd60 <tcp_write+0x598>)
 800bcf6:	f007 fc97 	bl	8013628 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bcfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd00:	e009      	b.n	800bd16 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	891a      	ldrh	r2, [r3, #8]
 800bd06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd08:	4413      	add	r3, r2
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f1      	bne.n	800bd02 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	891a      	ldrh	r2, [r3, #8]
 800bd22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd24:	4413      	add	r3, r2
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	895a      	ldrh	r2, [r3, #10]
 800bd30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd32:	4413      	add	r3, r2
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3c:	891a      	ldrh	r2, [r3, #8]
 800bd3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bd40:	4413      	add	r3, r2
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd46:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d112      	bne.n	800bd74 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd52:	669a      	str	r2, [r3, #104]	; 0x68
 800bd54:	e011      	b.n	800bd7a <tcp_write+0x5b2>
 800bd56:	bf00      	nop
 800bd58:	08016108 	.word	0x08016108
 800bd5c:	08016318 	.word	0x08016318
 800bd60:	0801616c 	.word	0x0801616c
 800bd64:	08016358 	.word	0x08016358
 800bd68:	08016368 	.word	0x08016368
 800bd6c:	0801637c 	.word	0x0801637c
 800bd70:	080163b4 	.word	0x080163b4
  } else {
    last_unsent->next = queue;
 800bd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd78:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd7e:	88fb      	ldrh	r3, [r7, #6]
 800bd80:	441a      	add	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd8c:	88fb      	ldrh	r3, [r7, #6]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bd9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00e      	beq.n	800bdca <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <tcp_write+0x602>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <tcp_write+0x602>
 800bdbc:	4b2c      	ldr	r3, [pc, #176]	; (800be70 <tcp_write+0x6a8>)
 800bdbe:	f240 22ed 	movw	r2, #749	; 0x2ed
 800bdc2:	492c      	ldr	r1, [pc, #176]	; (800be74 <tcp_write+0x6ac>)
 800bdc4:	482c      	ldr	r0, [pc, #176]	; (800be78 <tcp_write+0x6b0>)
 800bdc6:	f007 fc2f 	bl	8013628 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800bdca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d016      	beq.n	800bdfe <tcp_write+0x636>
 800bdd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d012      	beq.n	800bdfe <tcp_write+0x636>
 800bdd8:	797b      	ldrb	r3, [r7, #5]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10d      	bne.n	800bdfe <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	899b      	ldrh	r3, [r3, #12]
 800bde8:	b29c      	uxth	r4, r3
 800bdea:	2008      	movs	r0, #8
 800bdec:	f7fa f819 	bl	8005e22 <lwip_htons>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	4322      	orrs	r2, r4
 800bdfa:	b292      	uxth	r2, r2
 800bdfc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	e031      	b.n	800be66 <tcp_write+0x69e>
          goto memerr;
 800be02:	bf00      	nop
 800be04:	e006      	b.n	800be14 <tcp_write+0x64c>
            goto memerr;
 800be06:	bf00      	nop
 800be08:	e004      	b.n	800be14 <tcp_write+0x64c>
        goto memerr;
 800be0a:	bf00      	nop
 800be0c:	e002      	b.n	800be14 <tcp_write+0x64c>
        goto memerr;
 800be0e:	bf00      	nop
 800be10:	e000      	b.n	800be14 <tcp_write+0x64c>
      goto memerr;
 800be12:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	7e9b      	ldrb	r3, [r3, #26]
 800be18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800be22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <tcp_write+0x666>
    pbuf_free(concat_p);
 800be28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800be2a:	f7fb f927 	bl	800707c <pbuf_free>
  }
  if (queue != NULL) {
 800be2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <tcp_write+0x672>
    tcp_segs_free(queue);
 800be34:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be36:	f7fc fcc6 	bl	80087c6 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00e      	beq.n	800be62 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <tcp_write+0x69a>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <tcp_write+0x69a>
 800be54:	4b06      	ldr	r3, [pc, #24]	; (800be70 <tcp_write+0x6a8>)
 800be56:	f240 3202 	movw	r2, #770	; 0x302
 800be5a:	4906      	ldr	r1, [pc, #24]	; (800be74 <tcp_write+0x6ac>)
 800be5c:	4806      	ldr	r0, [pc, #24]	; (800be78 <tcp_write+0x6b0>)
 800be5e:	f007 fbe3 	bl	8013628 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800be62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800be66:	4618      	mov	r0, r3
 800be68:	375c      	adds	r7, #92	; 0x5c
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd90      	pop	{r4, r7, pc}
 800be6e:	bf00      	nop
 800be70:	08016108 	.word	0x08016108
 800be74:	080163ec 	.word	0x080163ec
 800be78:	0801616c 	.word	0x0801616c

0800be7c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08a      	sub	sp, #40	; 0x28
 800be80:	af02      	add	r7, sp, #8
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <tcp_enqueue_flags+0x2c>
 800be9a:	4b6f      	ldr	r3, [pc, #444]	; (800c058 <tcp_enqueue_flags+0x1dc>)
 800be9c:	f240 321b 	movw	r2, #795	; 0x31b
 800bea0:	496e      	ldr	r1, [pc, #440]	; (800c05c <tcp_enqueue_flags+0x1e0>)
 800bea2:	486f      	ldr	r0, [pc, #444]	; (800c060 <tcp_enqueue_flags+0x1e4>)
 800bea4:	f007 fbc0 	bl	8013628 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beae:	2b08      	cmp	r3, #8
 800beb0:	d806      	bhi.n	800bec0 <tcp_enqueue_flags+0x44>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beb8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d90e      	bls.n	800bede <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800bec0:	78fb      	ldrb	r3, [r7, #3]
 800bec2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d109      	bne.n	800bede <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7e9b      	ldrb	r3, [r3, #26]
 800bece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800bed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bedc:	e0b7      	b.n	800c04e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800bede:	78fb      	ldrb	r3, [r7, #3]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800bee8:	2301      	movs	r3, #1
 800beea:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800beec:	7ffb      	ldrb	r3, [r7, #31]
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	f003 0304 	and.w	r3, r3, #4
 800bef6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	b29b      	uxth	r3, r3
 800befc:	2200      	movs	r2, #0
 800befe:	4619      	mov	r1, r3
 800bf00:	2000      	movs	r0, #0
 800bf02:	f7fa fd49 	bl	8006998 <pbuf_alloc>
 800bf06:	6138      	str	r0, [r7, #16]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7e9b      	ldrb	r3, [r3, #26]
 800bf12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf20:	e095      	b.n	800c04e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	895a      	ldrh	r2, [r3, #10]
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d206      	bcs.n	800bf3c <tcp_enqueue_flags+0xc0>
 800bf2e:	4b4a      	ldr	r3, [pc, #296]	; (800c058 <tcp_enqueue_flags+0x1dc>)
 800bf30:	f240 3241 	movw	r2, #833	; 0x341
 800bf34:	494b      	ldr	r1, [pc, #300]	; (800c064 <tcp_enqueue_flags+0x1e8>)
 800bf36:	484a      	ldr	r0, [pc, #296]	; (800c060 <tcp_enqueue_flags+0x1e4>)
 800bf38:	f007 fb76 	bl	8013628 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bf40:	78fa      	ldrb	r2, [r7, #3]
 800bf42:	7ffb      	ldrb	r3, [r7, #31]
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	460b      	mov	r3, r1
 800bf48:	6939      	ldr	r1, [r7, #16]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fadc 	bl	800b508 <tcp_create_segment>
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d109      	bne.n	800bf6c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	7e9b      	ldrb	r3, [r3, #26]
 800bf5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf6a:	e070      	b.n	800c04e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <tcp_enqueue_flags+0x10a>
 800bf78:	4b37      	ldr	r3, [pc, #220]	; (800c058 <tcp_enqueue_flags+0x1dc>)
 800bf7a:	f240 3249 	movw	r2, #841	; 0x349
 800bf7e:	493a      	ldr	r1, [pc, #232]	; (800c068 <tcp_enqueue_flags+0x1ec>)
 800bf80:	4837      	ldr	r0, [pc, #220]	; (800c060 <tcp_enqueue_flags+0x1e4>)
 800bf82:	f007 fb51 	bl	8013628 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	891b      	ldrh	r3, [r3, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d006      	beq.n	800bf9c <tcp_enqueue_flags+0x120>
 800bf8e:	4b32      	ldr	r3, [pc, #200]	; (800c058 <tcp_enqueue_flags+0x1dc>)
 800bf90:	f240 324a 	movw	r2, #842	; 0x34a
 800bf94:	4935      	ldr	r1, [pc, #212]	; (800c06c <tcp_enqueue_flags+0x1f0>)
 800bf96:	4832      	ldr	r0, [pc, #200]	; (800c060 <tcp_enqueue_flags+0x1e4>)
 800bf98:	f007 fb46 	bl	8013628 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	669a      	str	r2, [r3, #104]	; 0x68
 800bfaa:	e00d      	b.n	800bfc8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfb0:	61bb      	str	r3, [r7, #24]
 800bfb2:	e002      	b.n	800bfba <tcp_enqueue_flags+0x13e>
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1f8      	bne.n	800bfb4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	f003 0302 	and.w	r3, r3, #2
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d104      	bne.n	800bfe4 <tcp_enqueue_flags+0x168>
 800bfda:	78fb      	ldrb	r3, [r7, #3]
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d004      	beq.n	800bfee <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d006      	beq.n	800c006 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7e9b      	ldrb	r3, [r3, #26]
 800bffc:	f043 0320 	orr.w	r3, r3, #32
 800c000:	b2da      	uxtb	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fb f8ca 	bl	80071a4 <pbuf_clen>
 800c010:	4603      	mov	r3, r0
 800c012:	461a      	mov	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c01a:	4413      	add	r3, r2
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00e      	beq.n	800c04c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <tcp_enqueue_flags+0x1d0>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <tcp_enqueue_flags+0x1d0>
 800c03e:	4b06      	ldr	r3, [pc, #24]	; (800c058 <tcp_enqueue_flags+0x1dc>)
 800c040:	f240 326d 	movw	r2, #877	; 0x36d
 800c044:	490a      	ldr	r1, [pc, #40]	; (800c070 <tcp_enqueue_flags+0x1f4>)
 800c046:	4806      	ldr	r0, [pc, #24]	; (800c060 <tcp_enqueue_flags+0x1e4>)
 800c048:	f007 faee 	bl	8013628 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3720      	adds	r7, #32
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	08016108 	.word	0x08016108
 800c05c:	0801640c 	.word	0x0801640c
 800c060:	0801616c 	.word	0x0801616c
 800c064:	08016464 	.word	0x08016464
 800c068:	080164a0 	.word	0x080164a0
 800c06c:	080164b8 	.word	0x080164b8
 800c070:	080164e4 	.word	0x080164e4

0800c074 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c074:	b590      	push	{r4, r7, lr}
 800c076:	b08b      	sub	sp, #44	; 0x2c
 800c078:	af04      	add	r7, sp, #16
 800c07a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c080:	7dbb      	ldrb	r3, [r7, #22]
 800c082:	b29c      	uxth	r4, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c088:	4618      	mov	r0, r3
 800c08a:	f7f9 fed8 	bl	8005e3e <lwip_htonl>
 800c08e:	4603      	mov	r3, r0
 800c090:	2200      	movs	r2, #0
 800c092:	4621      	mov	r1, r4
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff f97b 	bl	800b390 <tcp_output_alloc_header>
 800c09a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	7e9b      	ldrb	r3, [r3, #26]
 800c0a6:	f043 0303 	orr.w	r3, r3, #3
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c0b0:	f06f 0301 	mvn.w	r3, #1
 800c0b4:	e036      	b.n	800c124 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f002 f8fc 	bl	800e2b8 <ip4_route>
 800c0c0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800c0c8:	23fc      	movs	r3, #252	; 0xfc
 800c0ca:	75fb      	strb	r3, [r7, #23]
 800c0cc:	e012      	b.n	800c0f4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	1d18      	adds	r0, r3, #4
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7a9c      	ldrb	r4, [r3, #10]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	7a5b      	ldrb	r3, [r3, #9]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	9202      	str	r2, [sp, #8]
 800c0e0:	2206      	movs	r2, #6
 800c0e2:	9201      	str	r2, [sp, #4]
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	4623      	mov	r3, r4
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f002 fa96 	bl	800e61c <ip4_output_if>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c0f4:	6938      	ldr	r0, [r7, #16]
 800c0f6:	f7fa ffc1 	bl	800707c <pbuf_free>

  if (err != ERR_OK) {
 800c0fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	7e9b      	ldrb	r3, [r3, #26]
 800c106:	f043 0303 	orr.w	r3, r3, #3
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	769a      	strb	r2, [r3, #26]
 800c110:	e006      	b.n	800c120 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7e9b      	ldrb	r3, [r3, #26]
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800c120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c124:	4618      	mov	r0, r3
 800c126:	371c      	adds	r7, #28
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd90      	pop	{r4, r7, pc}

0800c12c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c12c:	b5b0      	push	{r4, r5, r7, lr}
 800c12e:	b08a      	sub	sp, #40	; 0x28
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7d1b      	ldrb	r3, [r3, #20]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d106      	bne.n	800c14a <tcp_output+0x1e>
 800c13c:	4b9b      	ldr	r3, [pc, #620]	; (800c3ac <tcp_output+0x280>)
 800c13e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800c142:	499b      	ldr	r1, [pc, #620]	; (800c3b0 <tcp_output+0x284>)
 800c144:	489b      	ldr	r0, [pc, #620]	; (800c3b4 <tcp_output+0x288>)
 800c146:	f007 fa6f 	bl	8013628 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c14a:	4b9b      	ldr	r3, [pc, #620]	; (800c3b8 <tcp_output+0x28c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	429a      	cmp	r2, r3
 800c152:	d101      	bne.n	800c158 <tcp_output+0x2c>
    return ERR_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	e1cf      	b.n	800c4f8 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c164:	429a      	cmp	r2, r3
 800c166:	d203      	bcs.n	800c170 <tcp_output+0x44>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c16e:	e002      	b.n	800c176 <tcp_output+0x4a>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c176:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7e9b      	ldrb	r3, [r3, #26]
 800c182:	f003 0302 	and.w	r3, r3, #2
 800c186:	2b00      	cmp	r3, #0
 800c188:	d017      	beq.n	800c1ba <tcp_output+0x8e>
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00f      	beq.n	800c1b0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	4618      	mov	r0, r3
 800c198:	f7f9 fe51 	bl	8005e3e <lwip_htonl>
 800c19c:	4602      	mov	r2, r0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1a6:	8912      	ldrh	r2, [r2, #8]
 800c1a8:	4413      	add	r3, r2
     (seg == NULL ||
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d204      	bcs.n	800c1ba <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ff5f 	bl	800c074 <tcp_send_empty_ack>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	e19e      	b.n	800c4f8 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1be:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c1c0:	6a3b      	ldr	r3, [r7, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d007      	beq.n	800c1d6 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800c1c6:	e002      	b.n	800c1ce <tcp_output+0xa2>
 800c1c8:	6a3b      	ldr	r3, [r7, #32]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	623b      	str	r3, [r7, #32]
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1f8      	bne.n	800c1c8 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f002 f86c 	bl	800e2b8 <ip4_route>
 800c1e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <tcp_output+0xc2>
    return ERR_RTE;
 800c1e8:	f06f 0303 	mvn.w	r3, #3
 800c1ec:	e184      	b.n	800c4f8 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d003      	beq.n	800c1fc <tcp_output+0xd0>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d111      	bne.n	800c220 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <tcp_output+0xdc>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	3304      	adds	r3, #4
 800c206:	e000      	b.n	800c20a <tcp_output+0xde>
 800c208:	2300      	movs	r3, #0
 800c20a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d102      	bne.n	800c218 <tcp_output+0xec>
      return ERR_RTE;
 800c212:	f06f 0303 	mvn.w	r3, #3
 800c216:	e16f      	b.n	800c4f8 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	2b00      	cmp	r3, #0
 800c224:	f000 813e 	beq.w	800c4a4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7f9 fe05 	bl	8005e3e <lwip_htonl>
 800c234:	4602      	mov	r2, r0
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c23e:	8912      	ldrh	r2, [r2, #8]
 800c240:	4413      	add	r3, r2
  if (seg != NULL &&
 800c242:	69ba      	ldr	r2, [r7, #24]
 800c244:	429a      	cmp	r2, r3
 800c246:	f080 812d 	bcs.w	800c4a4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8129 	beq.w	800c4a4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c258:	461a      	mov	r2, r3
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	4293      	cmp	r3, r2
 800c25e:	f040 8121 	bne.w	800c4a4 <tcp_output+0x378>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c266:	2b00      	cmp	r3, #0
 800c268:	f040 811c 	bne.w	800c4a4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c272:	2b00      	cmp	r3, #0
 800c274:	f040 812b 	bne.w	800c4ce <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800c288:	e121      	b.n	800c4ce <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	899b      	ldrh	r3, [r3, #12]
 800c290:	b29b      	uxth	r3, r3
 800c292:	4618      	mov	r0, r3
 800c294:	f7f9 fdc5 	bl	8005e22 <lwip_htons>
 800c298:	4603      	mov	r3, r0
 800c29a:	f003 0304 	and.w	r3, r3, #4
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <tcp_output+0x184>
 800c2a2:	4b42      	ldr	r3, [pc, #264]	; (800c3ac <tcp_output+0x280>)
 800c2a4:	f240 4246 	movw	r2, #1094	; 0x446
 800c2a8:	4944      	ldr	r1, [pc, #272]	; (800c3bc <tcp_output+0x290>)
 800c2aa:	4842      	ldr	r0, [pc, #264]	; (800c3b4 <tcp_output+0x288>)
 800c2ac:	f007 f9bc 	bl	8013628 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01f      	beq.n	800c2f8 <tcp_output+0x1cc>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7e9b      	ldrb	r3, [r3, #26]
 800c2bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d119      	bne.n	800c2f8 <tcp_output+0x1cc>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00b      	beq.n	800c2e4 <tcp_output+0x1b8>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d110      	bne.n	800c2f8 <tcp_output+0x1cc>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2da:	891a      	ldrh	r2, [r3, #8]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d209      	bcs.n	800c2f8 <tcp_output+0x1cc>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d004      	beq.n	800c2f8 <tcp_output+0x1cc>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	d901      	bls.n	800c2fc <tcp_output+0x1d0>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <tcp_output+0x1d2>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d106      	bne.n	800c310 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7e9b      	ldrb	r3, [r3, #26]
 800c306:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 80e1 	beq.w	800c4d2 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	7d1b      	ldrb	r3, [r3, #20]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d00d      	beq.n	800c334 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	899b      	ldrh	r3, [r3, #12]
 800c31e:	b29c      	uxth	r4, r3
 800c320:	2010      	movs	r0, #16
 800c322:	f7f9 fd7e 	bl	8005e22 <lwip_htons>
 800c326:	4603      	mov	r3, r0
 800c328:	461a      	mov	r2, r3
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	4322      	orrs	r2, r4
 800c330:	b292      	uxth	r2, r2
 800c332:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	6879      	ldr	r1, [r7, #4]
 800c338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c33a:	f000 f8e1 	bl	800c500 <tcp_output_segment>
 800c33e:	4603      	mov	r3, r0
 800c340:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d009      	beq.n	800c35e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7e9b      	ldrb	r3, [r3, #26]
 800c34e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	769a      	strb	r2, [r3, #26]
      return err;
 800c358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c35c:	e0cc      	b.n	800c4f8 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	7d1b      	ldrb	r3, [r3, #20]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d006      	beq.n	800c37c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7e9b      	ldrb	r3, [r3, #26]
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	b2da      	uxtb	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	4618      	mov	r0, r3
 800c384:	f7f9 fd5b 	bl	8005e3e <lwip_htonl>
 800c388:	4604      	mov	r4, r0
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	891b      	ldrh	r3, [r3, #8]
 800c38e:	461d      	mov	r5, r3
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	899b      	ldrh	r3, [r3, #12]
 800c396:	b29b      	uxth	r3, r3
 800c398:	4618      	mov	r0, r3
 800c39a:	f7f9 fd42 	bl	8005e22 <lwip_htons>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00b      	beq.n	800c3c0 <tcp_output+0x294>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e00a      	b.n	800c3c2 <tcp_output+0x296>
 800c3ac:	08016108 	.word	0x08016108
 800c3b0:	0801650c 	.word	0x0801650c
 800c3b4:	0801616c 	.word	0x0801616c
 800c3b8:	200076c0 	.word	0x200076c0
 800c3bc:	08016534 	.word	0x08016534
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	442b      	add	r3, r5
 800c3c4:	4423      	add	r3, r4
 800c3c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	da02      	bge.n	800c3da <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3dc:	891b      	ldrh	r3, [r3, #8]
 800c3de:	461c      	mov	r4, r3
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	899b      	ldrh	r3, [r3, #12]
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f9 fd1a 	bl	8005e22 <lwip_htons>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	f003 0303 	and.w	r3, r3, #3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <tcp_output+0x2d0>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e000      	b.n	800c3fe <tcp_output+0x2d2>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4423      	add	r3, r4
 800c400:	2b00      	cmp	r3, #0
 800c402:	d049      	beq.n	800c498 <tcp_output+0x36c>
      seg->next = NULL;
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	2200      	movs	r2, #0
 800c408:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d105      	bne.n	800c41e <tcp_output+0x2f2>
        pcb->unacked = seg;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c416:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	623b      	str	r3, [r7, #32]
 800c41c:	e03f      	b.n	800c49e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	f7f9 fd0a 	bl	8005e3e <lwip_htonl>
 800c42a:	4604      	mov	r4, r0
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	4618      	mov	r0, r3
 800c434:	f7f9 fd03 	bl	8005e3e <lwip_htonl>
 800c438:	4603      	mov	r3, r0
 800c43a:	1ae3      	subs	r3, r4, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	da24      	bge.n	800c48a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	336c      	adds	r3, #108	; 0x6c
 800c444:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c446:	e002      	b.n	800c44e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d011      	beq.n	800c47a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f9 fced 	bl	8005e3e <lwip_htonl>
 800c464:	4604      	mov	r4, r0
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f9 fce6 	bl	8005e3e <lwip_htonl>
 800c472:	4603      	mov	r3, r0
 800c474:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c476:	2b00      	cmp	r3, #0
 800c478:	dbe6      	blt.n	800c448 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c486:	601a      	str	r2, [r3, #0]
 800c488:	e009      	b.n	800c49e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c48e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	623b      	str	r3, [r7, #32]
 800c496:	e002      	b.n	800c49e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c49a:	f7fc f9a8 	bl	80087ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d015      	beq.n	800c4d6 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7f9 fcc4 	bl	8005e3e <lwip_htonl>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c0:	8912      	ldrh	r2, [r2, #8]
 800c4c2:	4413      	add	r3, r2
  while (seg != NULL &&
 800c4c4:	69ba      	ldr	r2, [r7, #24]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	f4bf aedf 	bcs.w	800c28a <tcp_output+0x15e>
  }
output_done:
 800c4cc:	e003      	b.n	800c4d6 <tcp_output+0x3aa>
    goto output_done;
 800c4ce:	bf00      	nop
 800c4d0:	e002      	b.n	800c4d8 <tcp_output+0x3ac>
      break;
 800c4d2:	bf00      	nop
 800c4d4:	e000      	b.n	800c4d8 <tcp_output+0x3ac>
output_done:
 800c4d6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7e9b      	ldrb	r3, [r3, #26]
 800c4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3728      	adds	r7, #40	; 0x28
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bdb0      	pop	{r4, r5, r7, pc}

0800c500 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c500:	b5b0      	push	{r4, r5, r7, lr}
 800c502:	b08c      	sub	sp, #48	; 0x30
 800c504:	af04      	add	r7, sp, #16
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	89db      	ldrh	r3, [r3, #14]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d001      	beq.n	800c51a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	e08b      	b.n	800c632 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	68dc      	ldr	r4, [r3, #12]
 800c522:	4610      	mov	r0, r2
 800c524:	f7f9 fc8b 	bl	8005e3e <lwip_htonl>
 800c528:	4603      	mov	r3, r0
 800c52a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68dc      	ldr	r4, [r3, #12]
 800c534:	4610      	mov	r0, r2
 800c536:	f7f9 fc74 	bl	8005e22 <lwip_htons>
 800c53a:	4603      	mov	r3, r0
 800c53c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c546:	441a      	add	r2, r3
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	3314      	adds	r3, #20
 800c552:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	7a9b      	ldrb	r3, [r3, #10]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d014      	beq.n	800c58a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c56a:	f7fc fc73 	bl	8008e54 <tcp_eff_send_mss_impl>
 800c56e:	4603      	mov	r3, r0
 800c570:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c572:	8b7b      	ldrh	r3, [r7, #26]
 800c574:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c578:	4618      	mov	r0, r3
 800c57a:	f7f9 fc60 	bl	8005e3e <lwip_htonl>
 800c57e:	4602      	mov	r2, r0
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	3304      	adds	r3, #4
 800c588:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c590:	2b00      	cmp	r3, #0
 800c592:	da02      	bge.n	800c59a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2200      	movs	r2, #0
 800c598:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10c      	bne.n	800c5bc <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800c5a2:	4b26      	ldr	r3, [pc, #152]	; (800c63c <tcp_output_segment+0x13c>)
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7f9 fc44 	bl	8005e3e <lwip_htonl>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	8959      	ldrh	r1, [r3, #10]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	8b3a      	ldrh	r2, [r7, #24]
 800c5d8:	1a8a      	subs	r2, r1, r2
 800c5da:	b292      	uxth	r2, r2
 800c5dc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	8919      	ldrh	r1, [r3, #8]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	8b3a      	ldrh	r2, [r7, #24]
 800c5ea:	1a8a      	subs	r2, r1, r2
 800c5ec:	b292      	uxth	r2, r2
 800c5ee:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	68d2      	ldr	r2, [r2, #12]
 800c5f8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	741a      	strb	r2, [r3, #16]
 800c602:	2200      	movs	r2, #0
 800c604:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6858      	ldr	r0, [r3, #4]
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	1d1c      	adds	r4, r3, #4
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	7a9d      	ldrb	r5, [r3, #10]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	7a5b      	ldrb	r3, [r3, #9]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	9202      	str	r2, [sp, #8]
 800c61c:	2206      	movs	r2, #6
 800c61e:	9201      	str	r2, [sp, #4]
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	462b      	mov	r3, r5
 800c624:	4622      	mov	r2, r4
 800c626:	f001 fff9 	bl	800e61c <ip4_output_if>
 800c62a:	4603      	mov	r3, r0
 800c62c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c62e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bdb0      	pop	{r4, r5, r7, pc}
 800c63a:	bf00      	nop
 800c63c:	200076b0 	.word	0x200076b0

0800c640 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08c      	sub	sp, #48	; 0x30
 800c644:	af04      	add	r7, sp, #16
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c64e:	2200      	movs	r2, #0
 800c650:	2114      	movs	r1, #20
 800c652:	2001      	movs	r0, #1
 800c654:	f7fa f9a0 	bl	8006998 <pbuf_alloc>
 800c658:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d05b      	beq.n	800c718 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	895b      	ldrh	r3, [r3, #10]
 800c664:	2b13      	cmp	r3, #19
 800c666:	d806      	bhi.n	800c676 <tcp_rst+0x36>
 800c668:	4b2d      	ldr	r3, [pc, #180]	; (800c720 <tcp_rst+0xe0>)
 800c66a:	f240 524d 	movw	r2, #1357	; 0x54d
 800c66e:	492d      	ldr	r1, [pc, #180]	; (800c724 <tcp_rst+0xe4>)
 800c670:	482d      	ldr	r0, [pc, #180]	; (800c728 <tcp_rst+0xe8>)
 800c672:	f006 ffd9 	bl	8013628 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c67c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c67e:	4618      	mov	r0, r3
 800c680:	f7f9 fbcf 	bl	8005e22 <lwip_htons>
 800c684:	4603      	mov	r3, r0
 800c686:	461a      	mov	r2, r3
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c68c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c68e:	4618      	mov	r0, r3
 800c690:	f7f9 fbc7 	bl	8005e22 <lwip_htons>
 800c694:	4603      	mov	r3, r0
 800c696:	461a      	mov	r2, r3
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7f9 fbce 	bl	8005e3e <lwip_htonl>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c6a8:	68b8      	ldr	r0, [r7, #8]
 800c6aa:	f7f9 fbc8 	bl	8005e3e <lwip_htonl>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c6b4:	f245 0014 	movw	r0, #20500	; 0x5014
 800c6b8:	f7f9 fbb3 	bl	8005e22 <lwip_htons>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f042 0208 	orr.w	r2, r2, #8
 800c6cc:	739a      	strb	r2, [r3, #14]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c6d4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	741a      	strb	r2, [r3, #16]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	749a      	strb	r2, [r3, #18]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c6ea:	6838      	ldr	r0, [r7, #0]
 800c6ec:	f001 fde4 	bl	800e2b8 <ip4_route>
 800c6f0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	9302      	str	r3, [sp, #8]
 800c6fc:	2306      	movs	r3, #6
 800c6fe:	9301      	str	r3, [sp, #4]
 800c700:	2300      	movs	r3, #0
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	23ff      	movs	r3, #255	; 0xff
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	6879      	ldr	r1, [r7, #4]
 800c70a:	69f8      	ldr	r0, [r7, #28]
 800c70c:	f001 ff86 	bl	800e61c <ip4_output_if>
  }
  pbuf_free(p);
 800c710:	69f8      	ldr	r0, [r7, #28]
 800c712:	f7fa fcb3 	bl	800707c <pbuf_free>
 800c716:	e000      	b.n	800c71a <tcp_rst+0xda>
    return;
 800c718:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	08016108 	.word	0x08016108
 800c724:	0801613c 	.word	0x0801613c
 800c728:	0801616c 	.word	0x0801616c

0800c72c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d029      	beq.n	800c790 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c740:	60fb      	str	r3, [r7, #12]
 800c742:	e002      	b.n	800c74a <tcp_rexmit_rto+0x1e>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60fb      	str	r3, [r7, #12]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1f8      	bne.n	800c744 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c76e:	2bff      	cmp	r3, #255	; 0xff
 800c770:	d007      	beq.n	800c782 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c778:	3301      	adds	r3, #1
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff fccf 	bl	800c12c <tcp_output>
 800c78e:	e000      	b.n	800c792 <tcp_rexmit_rto+0x66>
    return;
 800c790:	bf00      	nop
}
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c798:	b590      	push	{r4, r7, lr}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d043      	beq.n	800c830 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ac:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3368      	adds	r3, #104	; 0x68
 800c7ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c7bc:	e002      	b.n	800c7c4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d011      	beq.n	800c7f0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7f9 fb32 	bl	8005e3e <lwip_htonl>
 800c7da:	4604      	mov	r4, r0
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f9 fb2b 	bl	8005e3e <lwip_htonl>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dbe6      	blt.n	800c7be <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c814:	2bff      	cmp	r3, #255	; 0xff
 800c816:	d007      	beq.n	800c828 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c81e:	3301      	adds	r3, #1
 800c820:	b2da      	uxtb	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	635a      	str	r2, [r3, #52]	; 0x34
 800c82e:	e000      	b.n	800c832 <tcp_rexmit+0x9a>
    return;
 800c830:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	bd90      	pop	{r4, r7, pc}

0800c838 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c844:	2b00      	cmp	r3, #0
 800c846:	d04c      	beq.n	800c8e2 <tcp_rexmit_fast+0xaa>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7e9b      	ldrb	r3, [r3, #26]
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b00      	cmp	r3, #0
 800c852:	d146      	bne.n	800c8e2 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ff9f 	bl	800c798 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c866:	429a      	cmp	r2, r3
 800c868:	d208      	bcs.n	800c87c <tcp_rexmit_fast+0x44>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c870:	2b00      	cmp	r3, #0
 800c872:	da00      	bge.n	800c876 <tcp_rexmit_fast+0x3e>
 800c874:	3301      	adds	r3, #1
 800c876:	105b      	asrs	r3, r3, #1
 800c878:	b29b      	uxth	r3, r3
 800c87a:	e007      	b.n	800c88c <tcp_rexmit_fast+0x54>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c882:	2b00      	cmp	r3, #0
 800c884:	da00      	bge.n	800c888 <tcp_rexmit_fast+0x50>
 800c886:	3301      	adds	r3, #1
 800c888:	105b      	asrs	r3, r3, #1
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c898:	461a      	mov	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d206      	bcs.n	800c8b2 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8bc:	4619      	mov	r1, r3
 800c8be:	0049      	lsls	r1, r1, #1
 800c8c0:	440b      	add	r3, r1
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	4413      	add	r3, r2
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7e9b      	ldrb	r3, [r3, #26]
 800c8d2:	f043 0304 	orr.w	r3, r3, #4
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b08a      	sub	sp, #40	; 0x28
 800c8ee:	af04      	add	r7, sp, #16
 800c8f0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7f9 faa0 	bl	8005e3e <lwip_htonl>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2200      	movs	r2, #0
 800c902:	2100      	movs	r1, #0
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7fe fd43 	bl	800b390 <tcp_output_alloc_header>
 800c90a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d102      	bne.n	800c918 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c916:	e021      	b.n	800c95c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3304      	adds	r3, #4
 800c91c:	4618      	mov	r0, r3
 800c91e:	f001 fccb 	bl	800e2b8 <ip4_route>
 800c922:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800c92a:	23fc      	movs	r3, #252	; 0xfc
 800c92c:	75fb      	strb	r3, [r7, #23]
 800c92e:	e010      	b.n	800c952 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c930:	6879      	ldr	r1, [r7, #4]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	1d1a      	adds	r2, r3, #4
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	7a98      	ldrb	r0, [r3, #10]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	2306      	movs	r3, #6
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	2300      	movs	r3, #0
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	4603      	mov	r3, r0
 800c948:	6938      	ldr	r0, [r7, #16]
 800c94a:	f001 fe67 	bl	800e61c <ip4_output_if>
 800c94e:	4603      	mov	r3, r0
 800c950:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c952:	6938      	ldr	r0, [r7, #16]
 800c954:	f7fa fb92 	bl	800707c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c964:	b590      	push	{r4, r7, lr}
 800c966:	b08f      	sub	sp, #60	; 0x3c
 800c968:	af04      	add	r7, sp, #16
 800c96a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c970:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c97c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	e085      	b.n	800ca94 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	899b      	ldrh	r3, [r3, #12]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	4618      	mov	r0, r3
 800c992:	f7f9 fa46 	bl	8005e22 <lwip_htons>
 800c996:	4603      	mov	r3, r0
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d005      	beq.n	800c9ac <tcp_zero_window_probe+0x48>
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	891b      	ldrh	r3, [r3, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <tcp_zero_window_probe+0x48>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e000      	b.n	800c9ae <tcp_zero_window_probe+0x4a>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c9b0:	7ffb      	ldrb	r3, [r7, #31]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bf0c      	ite	eq
 800c9b6:	2301      	moveq	r3, #1
 800c9b8:	2300      	movne	r3, #0
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	8bba      	ldrh	r2, [r7, #28]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7fe fce1 	bl	800b390 <tcp_output_alloc_header>
 800c9ce:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d102      	bne.n	800c9dc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9da:	e05b      	b.n	800ca94 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c9e2:	7ffb      	ldrb	r3, [r7, #31]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00e      	beq.n	800ca06 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	899b      	ldrh	r3, [r3, #12]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c9f2:	b29c      	uxth	r4, r3
 800c9f4:	2011      	movs	r0, #17
 800c9f6:	f7f9 fa14 	bl	8005e22 <lwip_htons>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	4323      	orrs	r3, r4
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	819a      	strh	r2, [r3, #12]
 800ca04:	e010      	b.n	800ca28 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	6858      	ldr	r0, [r3, #4]
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	891a      	ldrh	r2, [r3, #8]
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	891b      	ldrh	r3, [r3, #8]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	2201      	movs	r2, #1
 800ca22:	6939      	ldr	r1, [r7, #16]
 800ca24:	f7fa fd2a 	bl	800747c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f9 fa05 	bl	8005e3e <lwip_htonl>
 800ca34:	4603      	mov	r3, r0
 800ca36:	3301      	adds	r3, #1
 800ca38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	da02      	bge.n	800ca4c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4618      	mov	r0, r3
 800ca52:	f001 fc31 	bl	800e2b8 <ip4_route>
 800ca56:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800ca5e:	23fc      	movs	r3, #252	; 0xfc
 800ca60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca64:	e011      	b.n	800ca8a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	1d1a      	adds	r2, r3, #4
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7a98      	ldrb	r0, [r3, #10]
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	9302      	str	r3, [sp, #8]
 800ca74:	2306      	movs	r3, #6
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	69b8      	ldr	r0, [r7, #24]
 800ca80:	f001 fdcc 	bl	800e61c <ip4_output_if>
 800ca84:	4603      	mov	r3, r0
 800ca86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800ca8a:	69b8      	ldr	r0, [r7, #24]
 800ca8c:	f7fa faf6 	bl	800707c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ca90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	372c      	adds	r7, #44	; 0x2c
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd90      	pop	{r4, r7, pc}

0800ca9c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800caa4:	f7fa fe3e 	bl	8007724 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800caa8:	4b0a      	ldr	r3, [pc, #40]	; (800cad4 <tcpip_tcp_timer+0x38>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d103      	bne.n	800cab8 <tcpip_tcp_timer+0x1c>
 800cab0:	4b09      	ldr	r3, [pc, #36]	; (800cad8 <tcpip_tcp_timer+0x3c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cab8:	2200      	movs	r2, #0
 800caba:	4908      	ldr	r1, [pc, #32]	; (800cadc <tcpip_tcp_timer+0x40>)
 800cabc:	20fa      	movs	r0, #250	; 0xfa
 800cabe:	f000 f86f 	bl	800cba0 <sys_timeout>
 800cac2:	e002      	b.n	800caca <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cac4:	4b06      	ldr	r3, [pc, #24]	; (800cae0 <tcpip_tcp_timer+0x44>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
  }
}
 800caca:	bf00      	nop
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	200076ac 	.word	0x200076ac
 800cad8:	200076bc 	.word	0x200076bc
 800cadc:	0800ca9d 	.word	0x0800ca9d
 800cae0:	200002ec 	.word	0x200002ec

0800cae4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cae8:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <tcp_timer_needed+0x30>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10f      	bne.n	800cb10 <tcp_timer_needed+0x2c>
 800caf0:	4b09      	ldr	r3, [pc, #36]	; (800cb18 <tcp_timer_needed+0x34>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d103      	bne.n	800cb00 <tcp_timer_needed+0x1c>
 800caf8:	4b08      	ldr	r3, [pc, #32]	; (800cb1c <tcp_timer_needed+0x38>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d007      	beq.n	800cb10 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cb00:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <tcp_timer_needed+0x30>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cb06:	2200      	movs	r2, #0
 800cb08:	4905      	ldr	r1, [pc, #20]	; (800cb20 <tcp_timer_needed+0x3c>)
 800cb0a:	20fa      	movs	r0, #250	; 0xfa
 800cb0c:	f000 f848 	bl	800cba0 <sys_timeout>
  }
}
 800cb10:	bf00      	nop
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	200002ec 	.word	0x200002ec
 800cb18:	200076ac 	.word	0x200076ac
 800cb1c:	200076bc 	.word	0x200076bc
 800cb20:	0800ca9d 	.word	0x0800ca9d

0800cb24 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	4903      	ldr	r1, [pc, #12]	; (800cb4c <cyclic_timer+0x28>)
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f000 f82e 	bl	800cba0 <sys_timeout>
}
 800cb44:	bf00      	nop
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	0800cb25 	.word	0x0800cb25

0800cb50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cb56:	2301      	movs	r3, #1
 800cb58:	607b      	str	r3, [r7, #4]
 800cb5a:	e00e      	b.n	800cb7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800cb5c:	4a0d      	ldr	r2, [pc, #52]	; (800cb94 <sys_timeouts_init+0x44>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	00db      	lsls	r3, r3, #3
 800cb68:	4a0a      	ldr	r2, [pc, #40]	; (800cb94 <sys_timeouts_init+0x44>)
 800cb6a:	4413      	add	r3, r2
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	490a      	ldr	r1, [pc, #40]	; (800cb98 <sys_timeouts_init+0x48>)
 800cb70:	f000 f816 	bl	800cba0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3301      	adds	r3, #1
 800cb78:	607b      	str	r3, [r7, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d9ed      	bls.n	800cb5c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800cb80:	f7f9 f948 	bl	8005e14 <sys_now>
 800cb84:	4602      	mov	r2, r0
 800cb86:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <sys_timeouts_init+0x4c>)
 800cb88:	601a      	str	r2, [r3, #0]
}
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	0801743c 	.word	0x0801743c
 800cb98:	0800cb25 	.word	0x0800cb25
 800cb9c:	200002e8 	.word	0x200002e8

0800cba0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b088      	sub	sp, #32
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cbac:	2008      	movs	r0, #8
 800cbae:	f7f9 fce7 	bl	8006580 <memp_malloc>
 800cbb2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10a      	bne.n	800cbd0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f040 8084 	bne.w	800ccca <sys_timeout+0x12a>
 800cbc2:	4b44      	ldr	r3, [pc, #272]	; (800ccd4 <sys_timeout+0x134>)
 800cbc4:	22d4      	movs	r2, #212	; 0xd4
 800cbc6:	4944      	ldr	r1, [pc, #272]	; (800ccd8 <sys_timeout+0x138>)
 800cbc8:	4844      	ldr	r0, [pc, #272]	; (800ccdc <sys_timeout+0x13c>)
 800cbca:	f006 fd2d 	bl	8013628 <iprintf>
    return;
 800cbce:	e07c      	b.n	800ccca <sys_timeout+0x12a>
  }

  now = sys_now();
 800cbd0:	f7f9 f920 	bl	8005e14 <sys_now>
 800cbd4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800cbd6:	4b42      	ldr	r3, [pc, #264]	; (800cce0 <sys_timeout+0x140>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d105      	bne.n	800cbea <sys_timeout+0x4a>
    diff = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800cbe2:	4a40      	ldr	r2, [pc, #256]	; (800cce4 <sys_timeout+0x144>)
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e004      	b.n	800cbf4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800cbea:	4b3e      	ldr	r3, [pc, #248]	; (800cce4 <sys_timeout+0x144>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	441a      	add	r2, r3
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cc10:	4b33      	ldr	r3, [pc, #204]	; (800cce0 <sys_timeout+0x140>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d103      	bne.n	800cc20 <sys_timeout+0x80>
    next_timeout = timeout;
 800cc18:	4a31      	ldr	r2, [pc, #196]	; (800cce0 <sys_timeout+0x140>)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	6013      	str	r3, [r2, #0]
    return;
 800cc1e:	e055      	b.n	800cccc <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800cc20:	4b2f      	ldr	r3, [pc, #188]	; (800cce0 <sys_timeout+0x140>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d20f      	bcs.n	800cc4c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800cc2c:	4b2c      	ldr	r3, [pc, #176]	; (800cce0 <sys_timeout+0x140>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6859      	ldr	r1, [r3, #4]
 800cc32:	4b2b      	ldr	r3, [pc, #172]	; (800cce0 <sys_timeout+0x140>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	1a8a      	subs	r2, r1, r2
 800cc3a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800cc3c:	4b28      	ldr	r3, [pc, #160]	; (800cce0 <sys_timeout+0x140>)
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cc44:	4a26      	ldr	r2, [pc, #152]	; (800cce0 <sys_timeout+0x140>)
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	e03f      	b.n	800cccc <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cc4c:	4b24      	ldr	r3, [pc, #144]	; (800cce0 <sys_timeout+0x140>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	61fb      	str	r3, [r7, #28]
 800cc52:	e036      	b.n	800ccc2 <sys_timeout+0x122>
      timeout->time -= t->time;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	1ad2      	subs	r2, r2, r3
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d006      	beq.n	800cc78 <sys_timeout+0xd8>
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	685a      	ldr	r2, [r3, #4]
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d921      	bls.n	800ccbc <sys_timeout+0x11c>
        if (t->next != NULL) {
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6859      	ldr	r1, [r3, #4]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	1a8a      	subs	r2, r1, r2
 800cc90:	605a      	str	r2, [r3, #4]
 800cc92:	e00b      	b.n	800ccac <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d206      	bcs.n	800ccac <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800cc9e:	4b10      	ldr	r3, [pc, #64]	; (800cce0 <sys_timeout+0x140>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	441a      	add	r2, r3
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	601a      	str	r2, [r3, #0]
        break;
 800ccba:	e007      	b.n	800cccc <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	61fb      	str	r3, [r7, #28]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1c5      	bne.n	800cc54 <sys_timeout+0xb4>
 800ccc8:	e000      	b.n	800cccc <sys_timeout+0x12c>
    return;
 800ccca:	bf00      	nop
      }
    }
  }
}
 800cccc:	3720      	adds	r7, #32
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	0801654c 	.word	0x0801654c
 800ccd8:	08016580 	.word	0x08016580
 800ccdc:	080165c0 	.word	0x080165c0
 800cce0:	200002e4 	.word	0x200002e4
 800cce4:	200002e8 	.word	0x200002e8

0800cce8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ccee:	4b24      	ldr	r3, [pc, #144]	; (800cd80 <sys_check_timeouts+0x98>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d040      	beq.n	800cd78 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ccf6:	f7f9 f88d 	bl	8005e14 <sys_now>
 800ccfa:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ccfc:	4b21      	ldr	r3, [pc, #132]	; (800cd84 <sys_check_timeouts+0x9c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800cd06:	4b20      	ldr	r3, [pc, #128]	; (800cd88 <sys_check_timeouts+0xa0>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <sys_check_timeouts+0x2c>
 800cd10:	f7f9 fe12 	bl	8006938 <pbuf_free_ooseq>
      had_one = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800cd18:	4b19      	ldr	r3, [pc, #100]	; (800cd80 <sys_check_timeouts+0x98>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d026      	beq.n	800cd72 <sys_check_timeouts+0x8a>
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d321      	bcc.n	800cd72 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	4b13      	ldr	r3, [pc, #76]	; (800cd84 <sys_check_timeouts+0x9c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	4a11      	ldr	r2, [pc, #68]	; (800cd84 <sys_check_timeouts+0x9c>)
 800cd3e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	697a      	ldr	r2, [r7, #20]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a0c      	ldr	r2, [pc, #48]	; (800cd80 <sys_check_timeouts+0x98>)
 800cd50:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	2008      	movs	r0, #8
 800cd62:	f7f9 fc59 	bl	8006618 <memp_free>
        if (handler != NULL) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6838      	ldr	r0, [r7, #0]
 800cd70:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800cd72:	7cfb      	ldrb	r3, [r7, #19]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1c6      	bne.n	800cd06 <sys_check_timeouts+0x1e>
  }
}
 800cd78:	bf00      	nop
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	200002e4 	.word	0x200002e4
 800cd84:	200002e8 	.word	0x200002e8
 800cd88:	200076a4 	.word	0x200076a4

0800cd8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800cd90:	bf00      	nop
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	4613      	mov	r3, r2
 800cda8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d018      	beq.n	800cde2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d013      	beq.n	800cdde <udp_input_local_match+0x42>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cdbe:	4b14      	ldr	r3, [pc, #80]	; (800ce10 <udp_input_local_match+0x74>)
 800cdc0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdc6:	d00a      	beq.n	800cdde <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	4b10      	ldr	r3, [pc, #64]	; (800ce10 <udp_input_local_match+0x74>)
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	405a      	eors	r2, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	3308      	adds	r3, #8
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d110      	bne.n	800ce00 <udp_input_local_match+0x64>
          return 1;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e00f      	b.n	800ce02 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d009      	beq.n	800cdfc <udp_input_local_match+0x60>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d005      	beq.n	800cdfc <udp_input_local_match+0x60>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <udp_input_local_match+0x74>)
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d101      	bne.n	800ce00 <udp_input_local_match+0x64>
      return 1;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e000      	b.n	800ce02 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	20004014 	.word	0x20004014

0800ce14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ce14:	b590      	push	{r4, r7, lr}
 800ce16:	b08d      	sub	sp, #52	; 0x34
 800ce18:	af02      	add	r7, sp, #8
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	895b      	ldrh	r3, [r3, #10]
 800ce26:	2b07      	cmp	r3, #7
 800ce28:	d803      	bhi.n	800ce32 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7fa f926 	bl	800707c <pbuf_free>
    goto end;
 800ce30:	e0c6      	b.n	800cfc0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ce38:	4b63      	ldr	r3, [pc, #396]	; (800cfc8 <udp_input+0x1b4>)
 800ce3a:	695a      	ldr	r2, [r3, #20]
 800ce3c:	4b62      	ldr	r3, [pc, #392]	; (800cfc8 <udp_input+0x1b4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4619      	mov	r1, r3
 800ce42:	4610      	mov	r0, r2
 800ce44:	f001 fcbc 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7f8 ffe5 	bl	8005e22 <lwip_htons>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	885b      	ldrh	r3, [r3, #2]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f8 ffdd 	bl	8005e22 <lwip_htons>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ce70:	2300      	movs	r3, #0
 800ce72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce78:	4b54      	ldr	r3, [pc, #336]	; (800cfcc <udp_input+0x1b8>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce7e:	e03b      	b.n	800cef8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	8a5b      	ldrh	r3, [r3, #18]
 800ce84:	89fa      	ldrh	r2, [r7, #14]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d131      	bne.n	800ceee <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ce8a:	7cfb      	ldrb	r3, [r7, #19]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6839      	ldr	r1, [r7, #0]
 800ce90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce92:	f7ff ff83 	bl	800cd9c <udp_input_local_match>
 800ce96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d028      	beq.n	800ceee <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	7c1b      	ldrb	r3, [r3, #16]
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d104      	bne.n	800ceb2 <udp_input+0x9e>
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d101      	bne.n	800ceb2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	8a9b      	ldrh	r3, [r3, #20]
 800ceb6:	8a3a      	ldrh	r2, [r7, #16]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d118      	bne.n	800ceee <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	4b3f      	ldr	r3, [pc, #252]	; (800cfc8 <udp_input+0x1b4>)
 800ceca:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cecc:	429a      	cmp	r2, r3
 800cece:	d10e      	bne.n	800ceee <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ced0:	6a3b      	ldr	r3, [r7, #32]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d014      	beq.n	800cf00 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	68da      	ldr	r2, [r3, #12]
 800ceda:	6a3b      	ldr	r3, [r7, #32]
 800cedc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cede:	4b3b      	ldr	r3, [pc, #236]	; (800cfcc <udp_input+0x1b8>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cee6:	4a39      	ldr	r2, [pc, #228]	; (800cfcc <udp_input+0x1b8>)
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ceec:	e008      	b.n	800cf00 <udp_input+0xec>
      }
    }

    prev = pcb;
 800ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	627b      	str	r3, [r7, #36]	; 0x24
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1c0      	bne.n	800ce80 <udp_input+0x6c>
 800cefe:	e000      	b.n	800cf02 <udp_input+0xee>
        break;
 800cf00:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d101      	bne.n	800cf0c <udp_input+0xf8>
    pcb = uncon_pcb;
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <udp_input+0x104>
    for_us = 1;
 800cf12:	2301      	movs	r3, #1
 800cf14:	76fb      	strb	r3, [r7, #27]
 800cf16:	e00a      	b.n	800cf2e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	4b2a      	ldr	r3, [pc, #168]	; (800cfc8 <udp_input+0x1b4>)
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	bf0c      	ite	eq
 800cf26:	2301      	moveq	r3, #1
 800cf28:	2300      	movne	r3, #0
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cf2e:	7efb      	ldrb	r3, [r7, #27]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d042      	beq.n	800cfba <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800cf34:	f06f 0107 	mvn.w	r1, #7
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7fa f87b 	bl	8007034 <pbuf_header>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00a      	beq.n	800cf5a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800cf44:	4b22      	ldr	r3, [pc, #136]	; (800cfd0 <udp_input+0x1bc>)
 800cf46:	f240 1255 	movw	r2, #341	; 0x155
 800cf4a:	4922      	ldr	r1, [pc, #136]	; (800cfd4 <udp_input+0x1c0>)
 800cf4c:	4822      	ldr	r0, [pc, #136]	; (800cfd8 <udp_input+0x1c4>)
 800cf4e:	f006 fb6b 	bl	8013628 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7fa f892 	bl	800707c <pbuf_free>
      goto end;
 800cf58:	e032      	b.n	800cfc0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d012      	beq.n	800cf86 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00a      	beq.n	800cf7e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	699c      	ldr	r4, [r3, #24]
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	69d8      	ldr	r0, [r3, #28]
 800cf70:	8a3b      	ldrh	r3, [r7, #16]
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	4b19      	ldr	r3, [pc, #100]	; (800cfdc <udp_input+0x1c8>)
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf7a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cf7c:	e021      	b.n	800cfc2 <udp_input+0x1ae>
        pbuf_free(p);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7fa f87c 	bl	800707c <pbuf_free>
        goto end;
 800cf84:	e01c      	b.n	800cfc0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cf86:	7cfb      	ldrb	r3, [r7, #19]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d112      	bne.n	800cfb2 <udp_input+0x19e>
 800cf8c:	4b0e      	ldr	r3, [pc, #56]	; (800cfc8 <udp_input+0x1b4>)
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf94:	2be0      	cmp	r3, #224	; 0xe0
 800cf96:	d00c      	beq.n	800cfb2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cf98:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <udp_input+0x1b4>)
 800cf9a:	899b      	ldrh	r3, [r3, #12]
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	b21b      	sxth	r3, r3
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7fa f857 	bl	8007058 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cfaa:	2103      	movs	r1, #3
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f001 f8fb 	bl	800e1a8 <icmp_dest_unreach>
      pbuf_free(p);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7fa f862 	bl	800707c <pbuf_free>
  return;
 800cfb8:	e003      	b.n	800cfc2 <udp_input+0x1ae>
    pbuf_free(p);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7fa f85e 	bl	800707c <pbuf_free>
  return;
 800cfc0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cfc2:	372c      	adds	r7, #44	; 0x2c
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd90      	pop	{r4, r7, pc}
 800cfc8:	20004014 	.word	0x20004014
 800cfcc:	200076c4 	.word	0x200076c4
 800cfd0:	080165e8 	.word	0x080165e8
 800cfd4:	08016618 	.word	0x08016618
 800cfd8:	0801662c 	.word	0x0801662c
 800cfdc:	20004024 	.word	0x20004024

0800cfe0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01e      	beq.n	800d02e <udp_netif_ip_addr_changed+0x4e>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d01a      	beq.n	800d02e <udp_netif_ip_addr_changed+0x4e>
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d017      	beq.n	800d02e <udp_netif_ip_addr_changed+0x4e>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d013      	beq.n	800d02e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d006:	4b0d      	ldr	r3, [pc, #52]	; (800d03c <udp_netif_ip_addr_changed+0x5c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
 800d00c:	e00c      	b.n	800d028 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d103      	bne.n	800d022 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1ef      	bne.n	800d00e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	200076c4 	.word	0x200076c4

0800d040 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <free_etharp_q+0x1a>
 800d04e:	4b18      	ldr	r3, [pc, #96]	; (800d0b0 <free_etharp_q+0x70>)
 800d050:	2297      	movs	r2, #151	; 0x97
 800d052:	4918      	ldr	r1, [pc, #96]	; (800d0b4 <free_etharp_q+0x74>)
 800d054:	4818      	ldr	r0, [pc, #96]	; (800d0b8 <free_etharp_q+0x78>)
 800d056:	f006 fae7 	bl	8013628 <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d11e      	bne.n	800d0a0 <free_etharp_q+0x60>
 800d062:	4b13      	ldr	r3, [pc, #76]	; (800d0b0 <free_etharp_q+0x70>)
 800d064:	2298      	movs	r2, #152	; 0x98
 800d066:	4915      	ldr	r1, [pc, #84]	; (800d0bc <free_etharp_q+0x7c>)
 800d068:	4813      	ldr	r0, [pc, #76]	; (800d0b8 <free_etharp_q+0x78>)
 800d06a:	f006 fadd 	bl	8013628 <iprintf>
  while (q) {
 800d06e:	e017      	b.n	800d0a0 <free_etharp_q+0x60>
    r = q;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	60fb      	str	r3, [r7, #12]
    q = q->next;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d105      	bne.n	800d08e <free_etharp_q+0x4e>
 800d082:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <free_etharp_q+0x70>)
 800d084:	229c      	movs	r2, #156	; 0x9c
 800d086:	490e      	ldr	r1, [pc, #56]	; (800d0c0 <free_etharp_q+0x80>)
 800d088:	480b      	ldr	r0, [pc, #44]	; (800d0b8 <free_etharp_q+0x78>)
 800d08a:	f006 facd 	bl	8013628 <iprintf>
    pbuf_free(r->p);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	4618      	mov	r0, r3
 800d094:	f7f9 fff2 	bl	800707c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 800d098:	68f9      	ldr	r1, [r7, #12]
 800d09a:	2007      	movs	r0, #7
 800d09c:	f7f9 fabc 	bl	8006618 <memp_free>
  while (q) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1e4      	bne.n	800d070 <free_etharp_q+0x30>
  }
}
 800d0a6:	bf00      	nop
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	08016684 	.word	0x08016684
 800d0b4:	080166bc 	.word	0x080166bc
 800d0b8:	080166c8 	.word	0x080166c8
 800d0bc:	080166f0 	.word	0x080166f0
 800d0c0:	08016700 	.word	0x08016700

0800d0c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d0cc:	4915      	ldr	r1, [pc, #84]	; (800d124 <etharp_free_entry+0x60>)
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	4413      	add	r3, r2
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	440b      	add	r3, r1
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d013      	beq.n	800d108 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d0e0:	4910      	ldr	r1, [pc, #64]	; (800d124 <etharp_free_entry+0x60>)
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	005b      	lsls	r3, r3, #1
 800d0e8:	4413      	add	r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	440b      	add	r3, r1
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff ffa5 	bl	800d040 <free_etharp_q>
    arp_table[i].q = NULL;
 800d0f6:	490b      	ldr	r1, [pc, #44]	; (800d124 <etharp_free_entry+0x60>)
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	4413      	add	r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	440b      	add	r3, r1
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d108:	4906      	ldr	r1, [pc, #24]	; (800d124 <etharp_free_entry+0x60>)
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4613      	mov	r3, r2
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	4413      	add	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	440b      	add	r3, r1
 800d116:	3314      	adds	r3, #20
 800d118:	2200      	movs	r2, #0
 800d11a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d11c:	bf00      	nop
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	200002f0 	.word	0x200002f0

0800d128 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d12e:	2300      	movs	r3, #0
 800d130:	71fb      	strb	r3, [r7, #7]
 800d132:	e096      	b.n	800d262 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d134:	79fa      	ldrb	r2, [r7, #7]
 800d136:	494f      	ldr	r1, [pc, #316]	; (800d274 <etharp_tmr+0x14c>)
 800d138:	4613      	mov	r3, r2
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	4413      	add	r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	440b      	add	r3, r1
 800d142:	3314      	adds	r3, #20
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800d148:	79bb      	ldrb	r3, [r7, #6]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 8086 	beq.w	800d25c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800d150:	79fa      	ldrb	r2, [r7, #7]
 800d152:	4948      	ldr	r1, [pc, #288]	; (800d274 <etharp_tmr+0x14c>)
 800d154:	4613      	mov	r3, r2
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	4413      	add	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	440b      	add	r3, r1
 800d15e:	3312      	adds	r3, #18
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	b298      	uxth	r0, r3
 800d166:	4943      	ldr	r1, [pc, #268]	; (800d274 <etharp_tmr+0x14c>)
 800d168:	4613      	mov	r3, r2
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	4413      	add	r3, r2
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	440b      	add	r3, r1
 800d172:	3312      	adds	r3, #18
 800d174:	4602      	mov	r2, r0
 800d176:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d178:	79fa      	ldrb	r2, [r7, #7]
 800d17a:	493e      	ldr	r1, [pc, #248]	; (800d274 <etharp_tmr+0x14c>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	4413      	add	r3, r2
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	440b      	add	r3, r1
 800d186:	3312      	adds	r3, #18
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d18e:	d215      	bcs.n	800d1bc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d190:	79fa      	ldrb	r2, [r7, #7]
 800d192:	4938      	ldr	r1, [pc, #224]	; (800d274 <etharp_tmr+0x14c>)
 800d194:	4613      	mov	r3, r2
 800d196:	005b      	lsls	r3, r3, #1
 800d198:	4413      	add	r3, r2
 800d19a:	00db      	lsls	r3, r3, #3
 800d19c:	440b      	add	r3, r1
 800d19e:	3314      	adds	r3, #20
 800d1a0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d10f      	bne.n	800d1c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d1a6:	79fa      	ldrb	r2, [r7, #7]
 800d1a8:	4932      	ldr	r1, [pc, #200]	; (800d274 <etharp_tmr+0x14c>)
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	4413      	add	r3, r2
 800d1b0:	00db      	lsls	r3, r3, #3
 800d1b2:	440b      	add	r3, r1
 800d1b4:	3312      	adds	r3, #18
 800d1b6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d1b8:	2b04      	cmp	r3, #4
 800d1ba:	d904      	bls.n	800d1c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d1bc:	79fb      	ldrb	r3, [r7, #7]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff ff80 	bl	800d0c4 <etharp_free_entry>
 800d1c4:	e04a      	b.n	800d25c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d1c6:	79fa      	ldrb	r2, [r7, #7]
 800d1c8:	492a      	ldr	r1, [pc, #168]	; (800d274 <etharp_tmr+0x14c>)
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	440b      	add	r3, r1
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d10a      	bne.n	800d1f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d1dc:	79fa      	ldrb	r2, [r7, #7]
 800d1de:	4925      	ldr	r1, [pc, #148]	; (800d274 <etharp_tmr+0x14c>)
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	4413      	add	r3, r2
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	440b      	add	r3, r1
 800d1ea:	3314      	adds	r3, #20
 800d1ec:	2204      	movs	r2, #4
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	e034      	b.n	800d25c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d1f2:	79fa      	ldrb	r2, [r7, #7]
 800d1f4:	491f      	ldr	r1, [pc, #124]	; (800d274 <etharp_tmr+0x14c>)
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	4413      	add	r3, r2
 800d1fc:	00db      	lsls	r3, r3, #3
 800d1fe:	440b      	add	r3, r1
 800d200:	3314      	adds	r3, #20
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b04      	cmp	r3, #4
 800d206:	d10a      	bne.n	800d21e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d208:	79fa      	ldrb	r2, [r7, #7]
 800d20a:	491a      	ldr	r1, [pc, #104]	; (800d274 <etharp_tmr+0x14c>)
 800d20c:	4613      	mov	r3, r2
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	4413      	add	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	440b      	add	r3, r1
 800d216:	3314      	adds	r3, #20
 800d218:	2202      	movs	r2, #2
 800d21a:	701a      	strb	r2, [r3, #0]
 800d21c:	e01e      	b.n	800d25c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d21e:	79fa      	ldrb	r2, [r7, #7]
 800d220:	4914      	ldr	r1, [pc, #80]	; (800d274 <etharp_tmr+0x14c>)
 800d222:	4613      	mov	r3, r2
 800d224:	005b      	lsls	r3, r3, #1
 800d226:	4413      	add	r3, r2
 800d228:	00db      	lsls	r3, r3, #3
 800d22a:	440b      	add	r3, r1
 800d22c:	3314      	adds	r3, #20
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d113      	bne.n	800d25c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d234:	79fa      	ldrb	r2, [r7, #7]
 800d236:	490f      	ldr	r1, [pc, #60]	; (800d274 <etharp_tmr+0x14c>)
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	440b      	add	r3, r1
 800d242:	3308      	adds	r3, #8
 800d244:	6818      	ldr	r0, [r3, #0]
 800d246:	79fa      	ldrb	r2, [r7, #7]
 800d248:	4613      	mov	r3, r2
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	4413      	add	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	4a08      	ldr	r2, [pc, #32]	; (800d274 <etharp_tmr+0x14c>)
 800d252:	4413      	add	r3, r2
 800d254:	3304      	adds	r3, #4
 800d256:	4619      	mov	r1, r3
 800d258:	f000 fe90 	bl	800df7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	3301      	adds	r3, #1
 800d260:	71fb      	strb	r3, [r7, #7]
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	2b09      	cmp	r3, #9
 800d266:	f67f af65 	bls.w	800d134 <etharp_tmr+0xc>
      }
    }
  }
}
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	200002f0 	.word	0x200002f0

0800d278 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	460b      	mov	r3, r1
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d286:	230a      	movs	r3, #10
 800d288:	77fb      	strb	r3, [r7, #31]
 800d28a:	230a      	movs	r3, #10
 800d28c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800d28e:	230a      	movs	r3, #10
 800d290:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800d296:	230a      	movs	r3, #10
 800d298:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	833b      	strh	r3, [r7, #24]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	82fb      	strh	r3, [r7, #22]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	773b      	strb	r3, [r7, #28]
 800d2aa:	e093      	b.n	800d3d4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800d2ac:	7f3a      	ldrb	r2, [r7, #28]
 800d2ae:	4990      	ldr	r1, [pc, #576]	; (800d4f0 <etharp_find_entry+0x278>)
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	4413      	add	r3, r2
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	440b      	add	r3, r1
 800d2ba:	3314      	adds	r3, #20
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d2c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d2c4:	2b0a      	cmp	r3, #10
 800d2c6:	d105      	bne.n	800d2d4 <etharp_find_entry+0x5c>
 800d2c8:	7cfb      	ldrb	r3, [r7, #19]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d102      	bne.n	800d2d4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800d2ce:	7f3b      	ldrb	r3, [r7, #28]
 800d2d0:	777b      	strb	r3, [r7, #29]
 800d2d2:	e07c      	b.n	800d3ce <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d2d4:	7cfb      	ldrb	r3, [r7, #19]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d079      	beq.n	800d3ce <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d2da:	7cfb      	ldrb	r3, [r7, #19]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d009      	beq.n	800d2f4 <etharp_find_entry+0x7c>
 800d2e0:	7cfb      	ldrb	r3, [r7, #19]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d806      	bhi.n	800d2f4 <etharp_find_entry+0x7c>
 800d2e6:	4b83      	ldr	r3, [pc, #524]	; (800d4f4 <etharp_find_entry+0x27c>)
 800d2e8:	f44f 7293 	mov.w	r2, #294	; 0x126
 800d2ec:	4982      	ldr	r1, [pc, #520]	; (800d4f8 <etharp_find_entry+0x280>)
 800d2ee:	4883      	ldr	r0, [pc, #524]	; (800d4fc <etharp_find_entry+0x284>)
 800d2f0:	f006 f99a 	bl	8013628 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00f      	beq.n	800d31a <etharp_find_entry+0xa2>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6819      	ldr	r1, [r3, #0]
 800d2fe:	7f3a      	ldrb	r2, [r7, #28]
 800d300:	487b      	ldr	r0, [pc, #492]	; (800d4f0 <etharp_find_entry+0x278>)
 800d302:	4613      	mov	r3, r2
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	4413      	add	r3, r2
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	4403      	add	r3, r0
 800d30c:	3304      	adds	r3, #4
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4299      	cmp	r1, r3
 800d312:	d102      	bne.n	800d31a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d314:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d318:	e0e5      	b.n	800d4e6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d31a:	7cfb      	ldrb	r3, [r7, #19]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d13b      	bne.n	800d398 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d320:	7f3a      	ldrb	r2, [r7, #28]
 800d322:	4973      	ldr	r1, [pc, #460]	; (800d4f0 <etharp_find_entry+0x278>)
 800d324:	4613      	mov	r3, r2
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	4413      	add	r3, r2
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	440b      	add	r3, r1
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d018      	beq.n	800d366 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800d334:	7f3a      	ldrb	r2, [r7, #28]
 800d336:	496e      	ldr	r1, [pc, #440]	; (800d4f0 <etharp_find_entry+0x278>)
 800d338:	4613      	mov	r3, r2
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	4413      	add	r3, r2
 800d33e:	00db      	lsls	r3, r3, #3
 800d340:	440b      	add	r3, r1
 800d342:	3312      	adds	r3, #18
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	8b3a      	ldrh	r2, [r7, #24]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d840      	bhi.n	800d3ce <etharp_find_entry+0x156>
            old_queue = i;
 800d34c:	7f3b      	ldrb	r3, [r7, #28]
 800d34e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800d350:	7f3a      	ldrb	r2, [r7, #28]
 800d352:	4967      	ldr	r1, [pc, #412]	; (800d4f0 <etharp_find_entry+0x278>)
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	440b      	add	r3, r1
 800d35e:	3312      	adds	r3, #18
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	833b      	strh	r3, [r7, #24]
 800d364:	e033      	b.n	800d3ce <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d366:	7f3a      	ldrb	r2, [r7, #28]
 800d368:	4961      	ldr	r1, [pc, #388]	; (800d4f0 <etharp_find_entry+0x278>)
 800d36a:	4613      	mov	r3, r2
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	4413      	add	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	440b      	add	r3, r1
 800d374:	3312      	adds	r3, #18
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	8afa      	ldrh	r2, [r7, #22]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d827      	bhi.n	800d3ce <etharp_find_entry+0x156>
            old_pending = i;
 800d37e:	7f3b      	ldrb	r3, [r7, #28]
 800d380:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800d382:	7f3a      	ldrb	r2, [r7, #28]
 800d384:	495a      	ldr	r1, [pc, #360]	; (800d4f0 <etharp_find_entry+0x278>)
 800d386:	4613      	mov	r3, r2
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	4413      	add	r3, r2
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	440b      	add	r3, r1
 800d390:	3312      	adds	r3, #18
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	82fb      	strh	r3, [r7, #22]
 800d396:	e01a      	b.n	800d3ce <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d398:	7cfb      	ldrb	r3, [r7, #19]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d917      	bls.n	800d3ce <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d39e:	7f3a      	ldrb	r2, [r7, #28]
 800d3a0:	4953      	ldr	r1, [pc, #332]	; (800d4f0 <etharp_find_entry+0x278>)
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	4413      	add	r3, r2
 800d3a8:	00db      	lsls	r3, r3, #3
 800d3aa:	440b      	add	r3, r1
 800d3ac:	3312      	adds	r3, #18
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	8aba      	ldrh	r2, [r7, #20]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d80b      	bhi.n	800d3ce <etharp_find_entry+0x156>
            old_stable = i;
 800d3b6:	7f3b      	ldrb	r3, [r7, #28]
 800d3b8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800d3ba:	7f3a      	ldrb	r2, [r7, #28]
 800d3bc:	494c      	ldr	r1, [pc, #304]	; (800d4f0 <etharp_find_entry+0x278>)
 800d3be:	4613      	mov	r3, r2
 800d3c0:	005b      	lsls	r3, r3, #1
 800d3c2:	4413      	add	r3, r2
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	440b      	add	r3, r1
 800d3c8:	3312      	adds	r3, #18
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d3ce:	7f3b      	ldrb	r3, [r7, #28]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	773b      	strb	r3, [r7, #28]
 800d3d4:	7f3b      	ldrb	r3, [r7, #28]
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	f67f af68 	bls.w	800d2ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d3dc:	7afb      	ldrb	r3, [r7, #11]
 800d3de:	f003 0302 	and.w	r3, r3, #2
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d108      	bne.n	800d3f8 <etharp_find_entry+0x180>
 800d3e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d3ea:	2b0a      	cmp	r3, #10
 800d3ec:	d107      	bne.n	800d3fe <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d3ee:	7afb      	ldrb	r3, [r7, #11]
 800d3f0:	f003 0301 	and.w	r3, r3, #1
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800d3f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3fc:	e073      	b.n	800d4e6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d3fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d402:	2b09      	cmp	r3, #9
 800d404:	dc02      	bgt.n	800d40c <etharp_find_entry+0x194>
    i = empty;
 800d406:	7f7b      	ldrb	r3, [r7, #29]
 800d408:	773b      	strb	r3, [r7, #28]
 800d40a:	e036      	b.n	800d47a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d40c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d410:	2b09      	cmp	r3, #9
 800d412:	dc13      	bgt.n	800d43c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800d414:	7fbb      	ldrb	r3, [r7, #30]
 800d416:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d418:	7f3a      	ldrb	r2, [r7, #28]
 800d41a:	4935      	ldr	r1, [pc, #212]	; (800d4f0 <etharp_find_entry+0x278>)
 800d41c:	4613      	mov	r3, r2
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	4413      	add	r3, r2
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	440b      	add	r3, r1
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d018      	beq.n	800d45e <etharp_find_entry+0x1e6>
 800d42c:	4b31      	ldr	r3, [pc, #196]	; (800d4f4 <etharp_find_entry+0x27c>)
 800d42e:	f240 126f 	movw	r2, #367	; 0x16f
 800d432:	4933      	ldr	r1, [pc, #204]	; (800d500 <etharp_find_entry+0x288>)
 800d434:	4831      	ldr	r0, [pc, #196]	; (800d4fc <etharp_find_entry+0x284>)
 800d436:	f006 f8f7 	bl	8013628 <iprintf>
 800d43a:	e010      	b.n	800d45e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d43c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d440:	2b09      	cmp	r3, #9
 800d442:	dc02      	bgt.n	800d44a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800d444:	7ffb      	ldrb	r3, [r7, #31]
 800d446:	773b      	strb	r3, [r7, #28]
 800d448:	e009      	b.n	800d45e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d44a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d44e:	2b09      	cmp	r3, #9
 800d450:	dc02      	bgt.n	800d458 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d452:	7efb      	ldrb	r3, [r7, #27]
 800d454:	773b      	strb	r3, [r7, #28]
 800d456:	e002      	b.n	800d45e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d45c:	e043      	b.n	800d4e6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d45e:	7f3b      	ldrb	r3, [r7, #28]
 800d460:	2b09      	cmp	r3, #9
 800d462:	d906      	bls.n	800d472 <etharp_find_entry+0x1fa>
 800d464:	4b23      	ldr	r3, [pc, #140]	; (800d4f4 <etharp_find_entry+0x27c>)
 800d466:	f240 1281 	movw	r2, #385	; 0x181
 800d46a:	4926      	ldr	r1, [pc, #152]	; (800d504 <etharp_find_entry+0x28c>)
 800d46c:	4823      	ldr	r0, [pc, #140]	; (800d4fc <etharp_find_entry+0x284>)
 800d46e:	f006 f8db 	bl	8013628 <iprintf>
    etharp_free_entry(i);
 800d472:	7f3b      	ldrb	r3, [r7, #28]
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff fe25 	bl	800d0c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d47a:	7f3b      	ldrb	r3, [r7, #28]
 800d47c:	2b09      	cmp	r3, #9
 800d47e:	d906      	bls.n	800d48e <etharp_find_entry+0x216>
 800d480:	4b1c      	ldr	r3, [pc, #112]	; (800d4f4 <etharp_find_entry+0x27c>)
 800d482:	f240 1285 	movw	r2, #389	; 0x185
 800d486:	491f      	ldr	r1, [pc, #124]	; (800d504 <etharp_find_entry+0x28c>)
 800d488:	481c      	ldr	r0, [pc, #112]	; (800d4fc <etharp_find_entry+0x284>)
 800d48a:	f006 f8cd 	bl	8013628 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d48e:	7f3a      	ldrb	r2, [r7, #28]
 800d490:	4917      	ldr	r1, [pc, #92]	; (800d4f0 <etharp_find_entry+0x278>)
 800d492:	4613      	mov	r3, r2
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4413      	add	r3, r2
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	440b      	add	r3, r1
 800d49c:	3314      	adds	r3, #20
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d006      	beq.n	800d4b2 <etharp_find_entry+0x23a>
 800d4a4:	4b13      	ldr	r3, [pc, #76]	; (800d4f4 <etharp_find_entry+0x27c>)
 800d4a6:	f240 1287 	movw	r2, #391	; 0x187
 800d4aa:	4917      	ldr	r1, [pc, #92]	; (800d508 <etharp_find_entry+0x290>)
 800d4ac:	4813      	ldr	r0, [pc, #76]	; (800d4fc <etharp_find_entry+0x284>)
 800d4ae:	f006 f8bb 	bl	8013628 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00a      	beq.n	800d4ce <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d4b8:	7f3a      	ldrb	r2, [r7, #28]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6819      	ldr	r1, [r3, #0]
 800d4be:	480c      	ldr	r0, [pc, #48]	; (800d4f0 <etharp_find_entry+0x278>)
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	4403      	add	r3, r0
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d4ce:	7f3a      	ldrb	r2, [r7, #28]
 800d4d0:	4907      	ldr	r1, [pc, #28]	; (800d4f0 <etharp_find_entry+0x278>)
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4413      	add	r3, r2
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	440b      	add	r3, r1
 800d4dc:	3312      	adds	r3, #18
 800d4de:	2200      	movs	r2, #0
 800d4e0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800d4e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	200002f0 	.word	0x200002f0
 800d4f4:	08016684 	.word	0x08016684
 800d4f8:	08016710 	.word	0x08016710
 800d4fc:	080166c8 	.word	0x080166c8
 800d500:	08016750 	.word	0x08016750
 800d504:	08016768 	.word	0x08016768
 800d508:	0801677c 	.word	0x0801677c

0800d50c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08a      	sub	sp, #40	; 0x28
 800d510:	af02      	add	r7, sp, #8
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d520:	2b06      	cmp	r3, #6
 800d522:	d006      	beq.n	800d532 <etharp_update_arp_entry+0x26>
 800d524:	4b4c      	ldr	r3, [pc, #304]	; (800d658 <etharp_update_arp_entry+0x14c>)
 800d526:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d52a:	494c      	ldr	r1, [pc, #304]	; (800d65c <etharp_update_arp_entry+0x150>)
 800d52c:	484c      	ldr	r0, [pc, #304]	; (800d660 <etharp_update_arp_entry+0x154>)
 800d52e:	f006 f87b 	bl	8013628 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d012      	beq.n	800d55e <etharp_update_arp_entry+0x52>
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00e      	beq.n	800d55e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68f9      	ldr	r1, [r7, #12]
 800d546:	4618      	mov	r0, r3
 800d548:	f001 f93a 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800d54c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d105      	bne.n	800d55e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d55a:	2be0      	cmp	r3, #224	; 0xe0
 800d55c:	d102      	bne.n	800d564 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d55e:	f06f 030f 	mvn.w	r3, #15
 800d562:	e075      	b.n	800d650 <etharp_update_arp_entry+0x144>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	4619      	mov	r1, r3
 800d56a:	68b8      	ldr	r0, [r7, #8]
 800d56c:	f7ff fe84 	bl	800d278 <etharp_find_entry>
 800d570:	4603      	mov	r3, r0
 800d572:	77fb      	strb	r3, [r7, #31]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d574:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	da02      	bge.n	800d582 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d57c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d580:	e066      	b.n	800d650 <etharp_update_arp_entry+0x144>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d582:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d586:	4937      	ldr	r1, [pc, #220]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d588:	4613      	mov	r3, r2
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	4413      	add	r3, r2
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	440b      	add	r3, r1
 800d592:	3314      	adds	r3, #20
 800d594:	2202      	movs	r2, #2
 800d596:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d598:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d59c:	4931      	ldr	r1, [pc, #196]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d59e:	4613      	mov	r3, r2
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	4413      	add	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	440b      	add	r3, r1
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d5ae:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	3308      	adds	r3, #8
 800d5bc:	4a29      	ldr	r2, [pc, #164]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d5be:	4413      	add	r3, r2
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	2206      	movs	r2, #6
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f005 fc91 	bl	8012eee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d5cc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d5d0:	4924      	ldr	r1, [pc, #144]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	4413      	add	r3, r2
 800d5d8:	00db      	lsls	r3, r3, #3
 800d5da:	440b      	add	r3, r1
 800d5dc:	3312      	adds	r3, #18
 800d5de:	2200      	movs	r2, #0
 800d5e0:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 800d5e2:	e029      	b.n	800d638 <etharp_update_arp_entry+0x12c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 800d5e4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d5e8:	491e      	ldr	r1, [pc, #120]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	4413      	add	r3, r2
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	440b      	add	r3, r1
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 800d5f8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	6819      	ldr	r1, [r3, #0]
 800d600:	4818      	ldr	r0, [pc, #96]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d602:	4613      	mov	r3, r2
 800d604:	005b      	lsls	r3, r3, #1
 800d606:	4413      	add	r3, r2
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	4403      	add	r3, r0
 800d60c:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 800d614:	69b9      	ldr	r1, [r7, #24]
 800d616:	2007      	movs	r0, #7
 800d618:	f7f8 fffe 	bl	8006618 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800d622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6979      	ldr	r1, [r7, #20]
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f001 ff69 	bl	800f504 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d632:	6978      	ldr	r0, [r7, #20]
 800d634:	f7f9 fd22 	bl	800707c <pbuf_free>
  while (arp_table[i].q != NULL) {
 800d638:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800d63c:	4909      	ldr	r1, [pc, #36]	; (800d664 <etharp_update_arp_entry+0x158>)
 800d63e:	4613      	mov	r3, r2
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4413      	add	r3, r2
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	440b      	add	r3, r1
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1ca      	bne.n	800d5e4 <etharp_update_arp_entry+0xd8>
  }
  return ERR_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08016684 	.word	0x08016684
 800d65c:	080167a8 	.word	0x080167a8
 800d660:	080166c8 	.word	0x080166c8
 800d664:	200002f0 	.word	0x200002f0

0800d668 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]
 800d674:	e01f      	b.n	800d6b6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800d676:	7bfa      	ldrb	r2, [r7, #15]
 800d678:	4912      	ldr	r1, [pc, #72]	; (800d6c4 <etharp_cleanup_netif+0x5c>)
 800d67a:	4613      	mov	r3, r2
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	4413      	add	r3, r2
 800d680:	00db      	lsls	r3, r3, #3
 800d682:	440b      	add	r3, r1
 800d684:	3314      	adds	r3, #20
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d68a:	7bbb      	ldrb	r3, [r7, #14]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00f      	beq.n	800d6b0 <etharp_cleanup_netif+0x48>
 800d690:	7bfa      	ldrb	r2, [r7, #15]
 800d692:	490c      	ldr	r1, [pc, #48]	; (800d6c4 <etharp_cleanup_netif+0x5c>)
 800d694:	4613      	mov	r3, r2
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	4413      	add	r3, r2
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	440b      	add	r3, r1
 800d69e:	3308      	adds	r3, #8
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d103      	bne.n	800d6b0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff fd0a 	bl	800d0c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	73fb      	strb	r3, [r7, #15]
 800d6b6:	7bfb      	ldrb	r3, [r7, #15]
 800d6b8:	2b09      	cmp	r3, #9
 800d6ba:	d9dc      	bls.n	800d676 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d6bc:	bf00      	nop
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200002f0 	.word	0x200002f0

0800d6c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d6c8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ca:	b08a      	sub	sp, #40	; 0x28
 800d6cc:	af04      	add	r7, sp, #16
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d107      	bne.n	800d6e8 <etharp_input+0x20>
 800d6d8:	4b3d      	ldr	r3, [pc, #244]	; (800d7d0 <etharp_input+0x108>)
 800d6da:	f44f 7222 	mov.w	r2, #648	; 0x288
 800d6de:	493d      	ldr	r1, [pc, #244]	; (800d7d4 <etharp_input+0x10c>)
 800d6e0:	483d      	ldr	r0, [pc, #244]	; (800d7d8 <etharp_input+0x110>)
 800d6e2:	f005 ffa1 	bl	8013628 <iprintf>
 800d6e6:	e06f      	b.n	800d7c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6f8:	d10c      	bne.n	800d714 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d6fe:	2b06      	cmp	r3, #6
 800d700:	d108      	bne.n	800d714 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d706:	2b04      	cmp	r3, #4
 800d708:	d104      	bne.n	800d714 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	885b      	ldrh	r3, [r3, #2]
 800d70e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d710:	2b08      	cmp	r3, #8
 800d712:	d003      	beq.n	800d71c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7f9 fcb1 	bl	800707c <pbuf_free>
    return;
 800d71a:	e055      	b.n	800d7c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	330e      	adds	r3, #14
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	3318      	adds	r3, #24
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	3304      	adds	r3, #4
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d102      	bne.n	800d73c <etharp_input+0x74>
    for_us = 0;
 800d736:	2300      	movs	r3, #0
 800d738:	75fb      	strb	r3, [r7, #23]
 800d73a:	e009      	b.n	800d750 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	3304      	adds	r3, #4
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	429a      	cmp	r2, r3
 800d746:	bf0c      	ite	eq
 800d748:	2301      	moveq	r3, #1
 800d74a:	2300      	movne	r3, #0
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	f103 0208 	add.w	r2, r3, #8
 800d756:	7dfb      	ldrb	r3, [r7, #23]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <etharp_input+0x98>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e000      	b.n	800d762 <etharp_input+0x9a>
 800d760:	2302      	movs	r3, #2
 800d762:	f107 010c 	add.w	r1, r7, #12
 800d766:	6838      	ldr	r0, [r7, #0]
 800d768:	f7ff fed0 	bl	800d50c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	88db      	ldrh	r3, [r3, #6]
 800d770:	b29b      	uxth	r3, r3
 800d772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d776:	d003      	beq.n	800d780 <etharp_input+0xb8>
 800d778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d77c:	d01e      	beq.n	800d7bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800d77e:	e020      	b.n	800d7c2 <etharp_input+0xfa>
    if (for_us) {
 800d780:	7dfb      	ldrb	r3, [r7, #23]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d01c      	beq.n	800d7c0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800d79c:	693a      	ldr	r2, [r7, #16]
 800d79e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800d7a0:	2102      	movs	r1, #2
 800d7a2:	9103      	str	r1, [sp, #12]
 800d7a4:	f107 010c 	add.w	r1, r7, #12
 800d7a8:	9102      	str	r1, [sp, #8]
 800d7aa:	9201      	str	r2, [sp, #4]
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	462b      	mov	r3, r5
 800d7b0:	4622      	mov	r2, r4
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	6838      	ldr	r0, [r7, #0]
 800d7b6:	f000 fb33 	bl	800de20 <etharp_raw>
    break;
 800d7ba:	e001      	b.n	800d7c0 <etharp_input+0xf8>
    break;
 800d7bc:	bf00      	nop
 800d7be:	e000      	b.n	800d7c2 <etharp_input+0xfa>
    break;
 800d7c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7f9 fc5a 	bl	800707c <pbuf_free>
}
 800d7c8:	3718      	adds	r7, #24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	08016684 	.word	0x08016684
 800d7d4:	08016800 	.word	0x08016800
 800d7d8:	080166c8 	.word	0x080166c8

0800d7dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d7ea:	79fa      	ldrb	r2, [r7, #7]
 800d7ec:	4944      	ldr	r1, [pc, #272]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	4413      	add	r3, r2
 800d7f4:	00db      	lsls	r3, r3, #3
 800d7f6:	440b      	add	r3, r1
 800d7f8:	3314      	adds	r3, #20
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d806      	bhi.n	800d80e <etharp_output_to_arp_index+0x32>
 800d800:	4b40      	ldr	r3, [pc, #256]	; (800d904 <etharp_output_to_arp_index+0x128>)
 800d802:	f240 22ed 	movw	r2, #749	; 0x2ed
 800d806:	4940      	ldr	r1, [pc, #256]	; (800d908 <etharp_output_to_arp_index+0x12c>)
 800d808:	4840      	ldr	r0, [pc, #256]	; (800d90c <etharp_output_to_arp_index+0x130>)
 800d80a:	f005 ff0d 	bl	8013628 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d80e:	79fa      	ldrb	r2, [r7, #7]
 800d810:	493b      	ldr	r1, [pc, #236]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d812:	4613      	mov	r3, r2
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	4413      	add	r3, r2
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	440b      	add	r3, r1
 800d81c:	3314      	adds	r3, #20
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b02      	cmp	r3, #2
 800d822:	d153      	bne.n	800d8cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d824:	79fa      	ldrb	r2, [r7, #7]
 800d826:	4936      	ldr	r1, [pc, #216]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d828:	4613      	mov	r3, r2
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4413      	add	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	440b      	add	r3, r1
 800d832:	3312      	adds	r3, #18
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d83a:	d919      	bls.n	800d870 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d83c:	79fa      	ldrb	r2, [r7, #7]
 800d83e:	4613      	mov	r3, r2
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	4413      	add	r3, r2
 800d844:	00db      	lsls	r3, r3, #3
 800d846:	4a2e      	ldr	r2, [pc, #184]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d848:	4413      	add	r3, r2
 800d84a:	3304      	adds	r3, #4
 800d84c:	4619      	mov	r1, r3
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 fb94 	bl	800df7c <etharp_request>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d138      	bne.n	800d8cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d85a:	79fa      	ldrb	r2, [r7, #7]
 800d85c:	4928      	ldr	r1, [pc, #160]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d85e:	4613      	mov	r3, r2
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	4413      	add	r3, r2
 800d864:	00db      	lsls	r3, r3, #3
 800d866:	440b      	add	r3, r1
 800d868:	3314      	adds	r3, #20
 800d86a:	2203      	movs	r2, #3
 800d86c:	701a      	strb	r2, [r3, #0]
 800d86e:	e02d      	b.n	800d8cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d870:	79fa      	ldrb	r2, [r7, #7]
 800d872:	4923      	ldr	r1, [pc, #140]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d874:	4613      	mov	r3, r2
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	4413      	add	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	440b      	add	r3, r1
 800d87e:	3312      	adds	r3, #18
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d886:	d321      	bcc.n	800d8cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d888:	79fa      	ldrb	r2, [r7, #7]
 800d88a:	4613      	mov	r3, r2
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	4413      	add	r3, r2
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	4a1b      	ldr	r2, [pc, #108]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d894:	4413      	add	r3, r2
 800d896:	1d19      	adds	r1, r3, #4
 800d898:	79fa      	ldrb	r2, [r7, #7]
 800d89a:	4613      	mov	r3, r2
 800d89c:	005b      	lsls	r3, r3, #1
 800d89e:	4413      	add	r3, r2
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	4a16      	ldr	r2, [pc, #88]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d8a6:	4413      	add	r3, r2
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 fb43 	bl	800df38 <etharp_request_dst>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d109      	bne.n	800d8cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d8b8:	79fa      	ldrb	r2, [r7, #7]
 800d8ba:	4911      	ldr	r1, [pc, #68]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d8bc:	4613      	mov	r3, r2
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	4413      	add	r3, r2
 800d8c2:	00db      	lsls	r3, r3, #3
 800d8c4:	440b      	add	r3, r1
 800d8c6:	3314      	adds	r3, #20
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800d8d2:	79fa      	ldrb	r2, [r7, #7]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	005b      	lsls	r3, r3, #1
 800d8d8:	4413      	add	r3, r2
 800d8da:	00db      	lsls	r3, r3, #3
 800d8dc:	3308      	adds	r3, #8
 800d8de:	4a08      	ldr	r2, [pc, #32]	; (800d900 <etharp_output_to_arp_index+0x124>)
 800d8e0:	4413      	add	r3, r2
 800d8e2:	1d1a      	adds	r2, r3, #4
 800d8e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	460a      	mov	r2, r1
 800d8ee:	68b9      	ldr	r1, [r7, #8]
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f001 fe07 	bl	800f504 <ethernet_output>
 800d8f6:	4603      	mov	r3, r0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	200002f0 	.word	0x200002f0
 800d904:	08016684 	.word	0x08016684
 800d908:	08016820 	.word	0x08016820
 800d90c:	080166c8 	.word	0x080166c8

0800d910 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08a      	sub	sp, #40	; 0x28
 800d914:	af02      	add	r7, sp, #8
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d106      	bne.n	800d934 <etharp_output+0x24>
 800d926:	4b69      	ldr	r3, [pc, #420]	; (800dacc <etharp_output+0x1bc>)
 800d928:	f240 321b 	movw	r2, #795	; 0x31b
 800d92c:	4968      	ldr	r1, [pc, #416]	; (800dad0 <etharp_output+0x1c0>)
 800d92e:	4869      	ldr	r0, [pc, #420]	; (800dad4 <etharp_output+0x1c4>)
 800d930:	f005 fe7a 	bl	8013628 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d106      	bne.n	800d948 <etharp_output+0x38>
 800d93a:	4b64      	ldr	r3, [pc, #400]	; (800dacc <etharp_output+0x1bc>)
 800d93c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d940:	4965      	ldr	r1, [pc, #404]	; (800dad8 <etharp_output+0x1c8>)
 800d942:	4864      	ldr	r0, [pc, #400]	; (800dad4 <etharp_output+0x1c4>)
 800d944:	f005 fe70 	bl	8013628 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d106      	bne.n	800d95c <etharp_output+0x4c>
 800d94e:	4b5f      	ldr	r3, [pc, #380]	; (800dacc <etharp_output+0x1bc>)
 800d950:	f240 321d 	movw	r2, #797	; 0x31d
 800d954:	4961      	ldr	r1, [pc, #388]	; (800dadc <etharp_output+0x1cc>)
 800d956:	485f      	ldr	r0, [pc, #380]	; (800dad4 <etharp_output+0x1c4>)
 800d958:	f005 fe66 	bl	8013628 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68f9      	ldr	r1, [r7, #12]
 800d962:	4618      	mov	r0, r3
 800d964:	f000 ff2c 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d96e:	4b5c      	ldr	r3, [pc, #368]	; (800dae0 <etharp_output+0x1d0>)
 800d970:	61fb      	str	r3, [r7, #28]
 800d972:	e09b      	b.n	800daac <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d97c:	2be0      	cmp	r3, #224	; 0xe0
 800d97e:	d118      	bne.n	800d9b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d980:	2301      	movs	r3, #1
 800d982:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d984:	2300      	movs	r3, #0
 800d986:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d988:	235e      	movs	r3, #94	; 0x5e
 800d98a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3301      	adds	r3, #1
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d996:	b2db      	uxtb	r3, r3
 800d998:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	3302      	adds	r3, #2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	3303      	adds	r3, #3
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d9aa:	f107 0310 	add.w	r3, r7, #16
 800d9ae:	61fb      	str	r3, [r7, #28]
 800d9b0:	e07c      	b.n	800daac <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	405a      	eors	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4013      	ands	r3, r2
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d012      	beq.n	800d9f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d9d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d00b      	beq.n	800d9f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	330c      	adds	r3, #12
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	330c      	adds	r3, #12
 800d9e6:	61bb      	str	r3, [r7, #24]
 800d9e8:	e002      	b.n	800d9f0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d9ea:	f06f 0303 	mvn.w	r3, #3
 800d9ee:	e069      	b.n	800dac4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d9f0:	4b3c      	ldr	r3, [pc, #240]	; (800dae4 <etharp_output+0x1d4>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	4a3c      	ldr	r2, [pc, #240]	; (800dae8 <etharp_output+0x1d8>)
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	440b      	add	r3, r1
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	4413      	add	r3, r2
 800da02:	3314      	adds	r3, #20
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d917      	bls.n	800da3a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	4b35      	ldr	r3, [pc, #212]	; (800dae4 <etharp_output+0x1d4>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	4618      	mov	r0, r3
 800da14:	4934      	ldr	r1, [pc, #208]	; (800dae8 <etharp_output+0x1d8>)
 800da16:	4603      	mov	r3, r0
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	4403      	add	r3, r0
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	440b      	add	r3, r1
 800da20:	3304      	adds	r3, #4
 800da22:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800da24:	429a      	cmp	r2, r3
 800da26:	d108      	bne.n	800da3a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800da28:	4b2e      	ldr	r3, [pc, #184]	; (800dae4 <etharp_output+0x1d4>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	461a      	mov	r2, r3
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7ff fed3 	bl	800d7dc <etharp_output_to_arp_index>
 800da36:	4603      	mov	r3, r0
 800da38:	e044      	b.n	800dac4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800da3a:	2300      	movs	r3, #0
 800da3c:	75fb      	strb	r3, [r7, #23]
 800da3e:	e02a      	b.n	800da96 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800da40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800da44:	4928      	ldr	r1, [pc, #160]	; (800dae8 <etharp_output+0x1d8>)
 800da46:	4613      	mov	r3, r2
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	4413      	add	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	440b      	add	r3, r1
 800da50:	3314      	adds	r3, #20
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d918      	bls.n	800da8a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	6819      	ldr	r1, [r3, #0]
 800da5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800da60:	4821      	ldr	r0, [pc, #132]	; (800dae8 <etharp_output+0x1d8>)
 800da62:	4613      	mov	r3, r2
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	4413      	add	r3, r2
 800da68:	00db      	lsls	r3, r3, #3
 800da6a:	4403      	add	r3, r0
 800da6c:	3304      	adds	r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800da70:	4299      	cmp	r1, r3
 800da72:	d10a      	bne.n	800da8a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800da74:	7dfa      	ldrb	r2, [r7, #23]
 800da76:	4b1b      	ldr	r3, [pc, #108]	; (800dae4 <etharp_output+0x1d4>)
 800da78:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	461a      	mov	r2, r3
 800da7e:	68b9      	ldr	r1, [r7, #8]
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f7ff feab 	bl	800d7dc <etharp_output_to_arp_index>
 800da86:	4603      	mov	r3, r0
 800da88:	e01c      	b.n	800dac4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800da8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	3301      	adds	r3, #1
 800da92:	b2db      	uxtb	r3, r3
 800da94:	75fb      	strb	r3, [r7, #23]
 800da96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da9a:	2b09      	cmp	r3, #9
 800da9c:	ddd0      	ble.n	800da40 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	69b9      	ldr	r1, [r7, #24]
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 f822 	bl	800daec <etharp_query>
 800daa8:	4603      	mov	r3, r0
 800daaa:	e00b      	b.n	800dac4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800dab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	68b9      	ldr	r1, [r7, #8]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f001 fd21 	bl	800f504 <ethernet_output>
 800dac2:	4603      	mov	r3, r0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3720      	adds	r7, #32
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	08016684 	.word	0x08016684
 800dad0:	08016800 	.word	0x08016800
 800dad4:	080166c8 	.word	0x080166c8
 800dad8:	080166bc 	.word	0x080166bc
 800dadc:	080167f0 	.word	0x080167f0
 800dae0:	08017458 	.word	0x08017458
 800dae4:	200003e0 	.word	0x200003e0
 800dae8:	200002f0 	.word	0x200002f0

0800daec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b090      	sub	sp, #64	; 0x40
 800daf0:	af02      	add	r7, sp, #8
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	3325      	adds	r3, #37	; 0x25
 800dafc:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 800dafe:	23ff      	movs	r3, #255	; 0xff
 800db00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	633b      	str	r3, [r7, #48]	; 0x30
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68f9      	ldr	r1, [r7, #12]
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 fe56 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10c      	bne.n	800db34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800db22:	2be0      	cmp	r3, #224	; 0xe0
 800db24:	d006      	beq.n	800db34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d003      	beq.n	800db34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800db34:	f06f 030f 	mvn.w	r3, #15
 800db38:	e15f      	b.n	800ddfa <etharp_query+0x30e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	2101      	movs	r1, #1
 800db3e:	68b8      	ldr	r0, [r7, #8]
 800db40:	f7ff fb9a 	bl	800d278 <etharp_find_entry>
 800db44:	4603      	mov	r3, r0
 800db46:	76fb      	strb	r3, [r7, #27]

  /* could not find or create entry? */
  if (i < 0) {
 800db48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	da02      	bge.n	800db56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800db50:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db54:	e151      	b.n	800ddfa <etharp_query+0x30e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800db56:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800db5a:	49aa      	ldr	r1, [pc, #680]	; (800de04 <etharp_query+0x318>)
 800db5c:	4613      	mov	r3, r2
 800db5e:	005b      	lsls	r3, r3, #1
 800db60:	4413      	add	r3, r2
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	440b      	add	r3, r1
 800db66:	3314      	adds	r3, #20
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d117      	bne.n	800db9e <etharp_query+0xb2>
    is_new_entry = 1;
 800db6e:	2301      	movs	r3, #1
 800db70:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 800db72:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800db76:	49a3      	ldr	r1, [pc, #652]	; (800de04 <etharp_query+0x318>)
 800db78:	4613      	mov	r3, r2
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	4413      	add	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	440b      	add	r3, r1
 800db82:	3314      	adds	r3, #20
 800db84:	2201      	movs	r2, #1
 800db86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800db88:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800db8c:	499d      	ldr	r1, [pc, #628]	; (800de04 <etharp_query+0x318>)
 800db8e:	4613      	mov	r3, r2
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	4413      	add	r3, r2
 800db94:	00db      	lsls	r3, r3, #3
 800db96:	440b      	add	r3, r1
 800db98:	3308      	adds	r3, #8
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800db9e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dba2:	4998      	ldr	r1, [pc, #608]	; (800de04 <etharp_query+0x318>)
 800dba4:	4613      	mov	r3, r2
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	4413      	add	r3, r2
 800dbaa:	00db      	lsls	r3, r3, #3
 800dbac:	440b      	add	r3, r1
 800dbae:	3314      	adds	r3, #20
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d012      	beq.n	800dbdc <etharp_query+0xf0>
 800dbb6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dbba:	4992      	ldr	r1, [pc, #584]	; (800de04 <etharp_query+0x318>)
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	4413      	add	r3, r2
 800dbc2:	00db      	lsls	r3, r3, #3
 800dbc4:	440b      	add	r3, r1
 800dbc6:	3314      	adds	r3, #20
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d806      	bhi.n	800dbdc <etharp_query+0xf0>
 800dbce:	4b8e      	ldr	r3, [pc, #568]	; (800de08 <etharp_query+0x31c>)
 800dbd0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800dbd4:	498d      	ldr	r1, [pc, #564]	; (800de0c <etharp_query+0x320>)
 800dbd6:	488e      	ldr	r0, [pc, #568]	; (800de10 <etharp_query+0x324>)
 800dbd8:	f005 fd26 	bl	8013628 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <etharp_query+0xfc>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10c      	bne.n	800dc02 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dbe8:	68b9      	ldr	r1, [r7, #8]
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f000 f9c6 	bl	800df7c <etharp_request>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <etharp_query+0x116>
      return result;
 800dbfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800dc00:	e0fb      	b.n	800ddfa <etharp_query+0x30e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d106      	bne.n	800dc16 <etharp_query+0x12a>
 800dc08:	4b7f      	ldr	r3, [pc, #508]	; (800de08 <etharp_query+0x31c>)
 800dc0a:	f240 32db 	movw	r2, #987	; 0x3db
 800dc0e:	4981      	ldr	r1, [pc, #516]	; (800de14 <etharp_query+0x328>)
 800dc10:	487f      	ldr	r0, [pc, #508]	; (800de10 <etharp_query+0x324>)
 800dc12:	f005 fd09 	bl	8013628 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dc16:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dc1a:	497a      	ldr	r1, [pc, #488]	; (800de04 <etharp_query+0x318>)
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	4413      	add	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	440b      	add	r3, r1
 800dc26:	3314      	adds	r3, #20
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d919      	bls.n	800dc62 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800dc2e:	7efa      	ldrb	r2, [r7, #27]
 800dc30:	4b79      	ldr	r3, [pc, #484]	; (800de18 <etharp_query+0x32c>)
 800dc32:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dc34:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	005b      	lsls	r3, r3, #1
 800dc3c:	4413      	add	r3, r2
 800dc3e:	00db      	lsls	r3, r3, #3
 800dc40:	3308      	adds	r3, #8
 800dc42:	4a70      	ldr	r2, [pc, #448]	; (800de04 <etharp_query+0x318>)
 800dc44:	4413      	add	r3, r2
 800dc46:	1d1a      	adds	r2, r3, #4
 800dc48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	69fa      	ldr	r2, [r7, #28]
 800dc52:	6879      	ldr	r1, [r7, #4]
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f001 fc55 	bl	800f504 <ethernet_output>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc60:	e0c9      	b.n	800ddf6 <etharp_query+0x30a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dc62:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dc66:	4967      	ldr	r1, [pc, #412]	; (800de04 <etharp_query+0x318>)
 800dc68:	4613      	mov	r3, r2
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	4413      	add	r3, r2
 800dc6e:	00db      	lsls	r3, r3, #3
 800dc70:	440b      	add	r3, r1
 800dc72:	3314      	adds	r3, #20
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	f040 80bd 	bne.w	800ddf6 <etharp_query+0x30a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 800dc84:	e01a      	b.n	800dcbc <etharp_query+0x1d0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc88:	895a      	ldrh	r2, [r3, #10]
 800dc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8c:	891b      	ldrh	r3, [r3, #8]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d10a      	bne.n	800dca8 <etharp_query+0x1bc>
 800dc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d006      	beq.n	800dca8 <etharp_query+0x1bc>
 800dc9a:	4b5b      	ldr	r3, [pc, #364]	; (800de08 <etharp_query+0x31c>)
 800dc9c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800dca0:	495e      	ldr	r1, [pc, #376]	; (800de1c <etharp_query+0x330>)
 800dca2:	485b      	ldr	r0, [pc, #364]	; (800de10 <etharp_query+0x324>)
 800dca4:	f005 fcc0 	bl	8013628 <iprintf>
      if (p->type != PBUF_ROM) {
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	7b1b      	ldrb	r3, [r3, #12]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d002      	beq.n	800dcb6 <etharp_query+0x1ca>
        copy_needed = 1;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800dcb4:	e005      	b.n	800dcc2 <etharp_query+0x1d6>
      }
      p = p->next;
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 800dcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e1      	bne.n	800dc86 <etharp_query+0x19a>
    }
    if (copy_needed) {
 800dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d017      	beq.n	800dcf8 <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800dcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcca:	891b      	ldrh	r3, [r3, #8]
 800dccc:	2200      	movs	r2, #0
 800dcce:	4619      	mov	r1, r3
 800dcd0:	2002      	movs	r0, #2
 800dcd2:	f7f8 fe61 	bl	8006998 <pbuf_alloc>
 800dcd6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (p != NULL) {
 800dcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d011      	beq.n	800dd02 <etharp_query+0x216>
        if (pbuf_copy(p, q) != ERR_OK) {
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dce2:	f7f9 faff 	bl	80072e4 <pbuf_copy>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00a      	beq.n	800dd02 <etharp_query+0x216>
          pbuf_free(p);
 800dcec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcee:	f7f9 f9c5 	bl	800707c <pbuf_free>
          p = NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcf6:	e004      	b.n	800dd02 <etharp_query+0x216>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 800dcfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcfe:	f7f9 fa69 	bl	80071d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d073      	beq.n	800ddf0 <etharp_query+0x304>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 800dd08:	2007      	movs	r0, #7
 800dd0a:	f7f8 fc39 	bl	8006580 <memp_malloc>
 800dd0e:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d065      	beq.n	800dde2 <etharp_query+0x2f6>
        unsigned int qlen = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd24:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 800dd26:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dd2a:	4936      	ldr	r1, [pc, #216]	; (800de04 <etharp_query+0x318>)
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	005b      	lsls	r3, r3, #1
 800dd30:	4413      	add	r3, r2
 800dd32:	00db      	lsls	r3, r3, #3
 800dd34:	440b      	add	r3, r1
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01b      	beq.n	800dd74 <etharp_query+0x288>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 800dd3c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dd40:	4930      	ldr	r1, [pc, #192]	; (800de04 <etharp_query+0x318>)
 800dd42:	4613      	mov	r3, r2
 800dd44:	005b      	lsls	r3, r3, #1
 800dd46:	4413      	add	r3, r2
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	440b      	add	r3, r1
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	623b      	str	r3, [r7, #32]
          qlen++;
 800dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd52:	3301      	adds	r3, #1
 800dd54:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 800dd56:	e005      	b.n	800dd64 <etharp_query+0x278>
            r = r->next;
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	623b      	str	r3, [r7, #32]
            qlen++;
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	3301      	adds	r3, #1
 800dd62:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1f5      	bne.n	800dd58 <etharp_query+0x26c>
          }
          r->next = new_entry;
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	601a      	str	r2, [r3, #0]
 800dd72:	e009      	b.n	800dd88 <etharp_query+0x29c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 800dd74:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dd78:	4922      	ldr	r1, [pc, #136]	; (800de04 <etharp_query+0x318>)
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	4413      	add	r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	440b      	add	r3, r1
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 800dd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d925      	bls.n	800ddda <etharp_query+0x2ee>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 800dd8e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dd92:	491c      	ldr	r1, [pc, #112]	; (800de04 <etharp_query+0x318>)
 800dd94:	4613      	mov	r3, r2
 800dd96:	005b      	lsls	r3, r3, #1
 800dd98:	4413      	add	r3, r2
 800dd9a:	00db      	lsls	r3, r3, #3
 800dd9c:	440b      	add	r3, r1
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 800dda2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800dda6:	4917      	ldr	r1, [pc, #92]	; (800de04 <etharp_query+0x318>)
 800dda8:	4613      	mov	r3, r2
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4413      	add	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	440b      	add	r3, r1
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800ddb8:	6819      	ldr	r1, [r3, #0]
 800ddba:	4812      	ldr	r0, [pc, #72]	; (800de04 <etharp_query+0x318>)
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	4413      	add	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	4403      	add	r3, r0
 800ddc6:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f9 f955 	bl	800707c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 800ddd2:	6939      	ldr	r1, [r7, #16]
 800ddd4:	2007      	movs	r0, #7
 800ddd6:	f7f8 fc1f 	bl	8006618 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dde0:	e009      	b.n	800ddf6 <etharp_query+0x30a>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 800dde2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dde4:	f7f9 f94a 	bl	800707c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 800dde8:	23ff      	movs	r3, #255	; 0xff
 800ddea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ddee:	e002      	b.n	800ddf6 <etharp_query+0x30a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ddf0:	23ff      	movs	r3, #255	; 0xff
 800ddf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 800ddf6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3738      	adds	r7, #56	; 0x38
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	200002f0 	.word	0x200002f0
 800de08:	08016684 	.word	0x08016684
 800de0c:	08016850 	.word	0x08016850
 800de10:	080166c8 	.word	0x080166c8
 800de14:	080166bc 	.word	0x080166bc
 800de18:	200003e0 	.word	0x200003e0
 800de1c:	08016878 	.word	0x08016878

0800de20 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b08a      	sub	sp, #40	; 0x28
 800de24:	af02      	add	r7, sp, #8
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d106      	bne.n	800de46 <etharp_raw+0x26>
 800de38:	4b3a      	ldr	r3, [pc, #232]	; (800df24 <etharp_raw+0x104>)
 800de3a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800de3e:	493a      	ldr	r1, [pc, #232]	; (800df28 <etharp_raw+0x108>)
 800de40:	483a      	ldr	r0, [pc, #232]	; (800df2c <etharp_raw+0x10c>)
 800de42:	f005 fbf1 	bl	8013628 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800de46:	2200      	movs	r2, #0
 800de48:	211c      	movs	r1, #28
 800de4a:	2002      	movs	r0, #2
 800de4c:	f7f8 fda4 	bl	8006998 <pbuf_alloc>
 800de50:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d102      	bne.n	800de5e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800de58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de5c:	e05d      	b.n	800df1a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	895b      	ldrh	r3, [r3, #10]
 800de62:	2b1b      	cmp	r3, #27
 800de64:	d806      	bhi.n	800de74 <etharp_raw+0x54>
 800de66:	4b2f      	ldr	r3, [pc, #188]	; (800df24 <etharp_raw+0x104>)
 800de68:	f240 4264 	movw	r2, #1124	; 0x464
 800de6c:	4930      	ldr	r1, [pc, #192]	; (800df30 <etharp_raw+0x110>)
 800de6e:	482f      	ldr	r0, [pc, #188]	; (800df2c <etharp_raw+0x10c>)
 800de70:	f005 fbda 	bl	8013628 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800de7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7f7 ffd0 	bl	8005e22 <lwip_htons>
 800de82:	4603      	mov	r3, r0
 800de84:	461a      	mov	r2, r3
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de90:	2b06      	cmp	r3, #6
 800de92:	d006      	beq.n	800dea2 <etharp_raw+0x82>
 800de94:	4b23      	ldr	r3, [pc, #140]	; (800df24 <etharp_raw+0x104>)
 800de96:	f240 426b 	movw	r2, #1131	; 0x46b
 800de9a:	4926      	ldr	r1, [pc, #152]	; (800df34 <etharp_raw+0x114>)
 800de9c:	4823      	ldr	r0, [pc, #140]	; (800df2c <etharp_raw+0x10c>)
 800de9e:	f005 fbc3 	bl	8013628 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	3308      	adds	r3, #8
 800dea6:	2206      	movs	r2, #6
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f005 f81f 	bl	8012eee <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	3312      	adds	r3, #18
 800deb4:	2206      	movs	r2, #6
 800deb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deb8:	4618      	mov	r0, r3
 800deba:	f005 f818 	bl	8012eee <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	330e      	adds	r3, #14
 800dec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dec4:	6812      	ldr	r2, [r2, #0]
 800dec6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	3318      	adds	r3, #24
 800decc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dece:	6812      	ldr	r2, [r2, #0]
 800ded0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
 800ded8:	2200      	movs	r2, #0
 800deda:	f042 0201 	orr.w	r2, r2, #1
 800dede:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f042 0208 	orr.w	r2, r2, #8
 800dee8:	709a      	strb	r2, [r3, #2]
 800deea:	2200      	movs	r2, #0
 800deec:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2206      	movs	r2, #6
 800def2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2204      	movs	r2, #4
 800def8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800defa:	f640 0306 	movw	r3, #2054	; 0x806
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	69b9      	ldr	r1, [r7, #24]
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f001 fafc 	bl	800f504 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800df0c:	69b8      	ldr	r0, [r7, #24]
 800df0e:	f7f9 f8b5 	bl	800707c <pbuf_free>
  p = NULL;
 800df12:	2300      	movs	r3, #0
 800df14:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800df16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	08016684 	.word	0x08016684
 800df28:	08016800 	.word	0x08016800
 800df2c:	080166c8 	.word	0x080166c8
 800df30:	08016894 	.word	0x08016894
 800df34:	080168c8 	.word	0x080168c8

0800df38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af04      	add	r7, sp, #16
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df54:	2201      	movs	r2, #1
 800df56:	9203      	str	r2, [sp, #12]
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	9202      	str	r2, [sp, #8]
 800df5c:	4a06      	ldr	r2, [pc, #24]	; (800df78 <etharp_request_dst+0x40>)
 800df5e:	9201      	str	r2, [sp, #4]
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	4603      	mov	r3, r0
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff ff5a 	bl	800de20 <etharp_raw>
 800df6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	08017460 	.word	0x08017460

0800df7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800df86:	4a05      	ldr	r2, [pc, #20]	; (800df9c <etharp_request+0x20>)
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff ffd4 	bl	800df38 <etharp_request_dst>
 800df90:	4603      	mov	r3, r0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	08017458 	.word	0x08017458

0800dfa0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08e      	sub	sp, #56	; 0x38
 800dfa4:	af04      	add	r7, sp, #16
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dfaa:	4b79      	ldr	r3, [pc, #484]	; (800e190 <icmp_input+0x1f0>)
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL(iphdr_in) * 4;
 800dfb0:	6a3b      	ldr	r3, [r7, #32]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	f003 030f 	and.w	r3, r3, #15
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800dfc0:	8bfb      	ldrh	r3, [r7, #30]
 800dfc2:	2b13      	cmp	r3, #19
 800dfc4:	f240 80d3 	bls.w	800e16e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	895b      	ldrh	r3, [r3, #10]
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	f240 80d0 	bls.w	800e172 <icmp_input+0x1d2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dfda:	7f7b      	ldrb	r3, [r7, #29]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f000 80bf 	beq.w	800e160 <icmp_input+0x1c0>
 800dfe2:	2b08      	cmp	r3, #8
 800dfe4:	f040 80bf 	bne.w	800e166 <icmp_input+0x1c6>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800dfe8:	4b6a      	ldr	r3, [pc, #424]	; (800e194 <icmp_input+0x1f4>)
 800dfea:	627b      	str	r3, [r7, #36]	; 0x24
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dfec:	4b68      	ldr	r3, [pc, #416]	; (800e190 <icmp_input+0x1f0>)
 800dfee:	695b      	ldr	r3, [r3, #20]
 800dff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dff4:	2be0      	cmp	r3, #224	; 0xe0
 800dff6:	d102      	bne.n	800dffe <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
      /* For multicast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	3304      	adds	r3, #4
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dffe:	4b64      	ldr	r3, [pc, #400]	; (800e190 <icmp_input+0x1f0>)
 800e000:	695a      	ldr	r2, [r3, #20]
 800e002:	4b63      	ldr	r3, [pc, #396]	; (800e190 <icmp_input+0x1f0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4619      	mov	r1, r3
 800e008:	4610      	mov	r0, r2
 800e00a:	f000 fbd9 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
      /* For broadcast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	3304      	adds	r3, #4
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	891b      	ldrh	r3, [r3, #8]
 800e01e:	2b07      	cmp	r3, #7
 800e020:	f240 80a9 	bls.w	800e176 <icmp_input+0x1d6>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e024:	8bfb      	ldrh	r3, [r7, #30]
 800e026:	330e      	adds	r3, #14
 800e028:	b29b      	uxth	r3, r3
 800e02a:	b21b      	sxth	r3, r3
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7f9 f800 	bl	8007034 <pbuf_header>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d046      	beq.n	800e0c8 <icmp_input+0x128>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	891a      	ldrh	r2, [r3, #8]
 800e03e:	8bfb      	ldrh	r3, [r7, #30]
 800e040:	4413      	add	r3, r2
 800e042:	b29b      	uxth	r3, r3
 800e044:	2200      	movs	r2, #0
 800e046:	4619      	mov	r1, r3
 800e048:	2002      	movs	r0, #2
 800e04a:	f7f8 fca5 	bl	8006998 <pbuf_alloc>
 800e04e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 8094 	beq.w	800e180 <icmp_input+0x1e0>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	895b      	ldrh	r3, [r3, #10]
 800e05c:	461a      	mov	r2, r3
 800e05e:	8bfb      	ldrh	r3, [r7, #30]
 800e060:	3308      	adds	r3, #8
 800e062:	429a      	cmp	r2, r3
 800e064:	d203      	bcs.n	800e06e <icmp_input+0xce>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e066:	69b8      	ldr	r0, [r7, #24]
 800e068:	f7f9 f808 	bl	800707c <pbuf_free>
        goto icmperr;
 800e06c:	e089      	b.n	800e182 <icmp_input+0x1e2>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	8bfa      	ldrh	r2, [r7, #30]
 800e074:	6a39      	ldr	r1, [r7, #32]
 800e076:	4618      	mov	r0, r3
 800e078:	f004 ff39 	bl	8012eee <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e07c:	8bfb      	ldrh	r3, [r7, #30]
 800e07e:	425b      	negs	r3, r3
 800e080:	b29b      	uxth	r3, r3
 800e082:	b21b      	sxth	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	69b8      	ldr	r0, [r7, #24]
 800e088:	f7f8 ffd4 	bl	8007034 <pbuf_header>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d009      	beq.n	800e0a6 <icmp_input+0x106>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e092:	4b41      	ldr	r3, [pc, #260]	; (800e198 <icmp_input+0x1f8>)
 800e094:	22af      	movs	r2, #175	; 0xaf
 800e096:	4941      	ldr	r1, [pc, #260]	; (800e19c <icmp_input+0x1fc>)
 800e098:	4841      	ldr	r0, [pc, #260]	; (800e1a0 <icmp_input+0x200>)
 800e09a:	f005 fac5 	bl	8013628 <iprintf>
        pbuf_free(r);
 800e09e:	69b8      	ldr	r0, [r7, #24]
 800e0a0:	f7f8 ffec 	bl	800707c <pbuf_free>
        goto icmperr;
 800e0a4:	e06d      	b.n	800e182 <icmp_input+0x1e2>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	69b8      	ldr	r0, [r7, #24]
 800e0aa:	f7f9 f91b 	bl	80072e4 <pbuf_copy>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <icmp_input+0x11c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800e0b4:	69b8      	ldr	r0, [r7, #24]
 800e0b6:	f7f8 ffe1 	bl	800707c <pbuf_free>
        goto icmperr;
 800e0ba:	e062      	b.n	800e182 <icmp_input+0x1e2>
      }
      /* free the original p */
      pbuf_free(p);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7f8 ffdd 	bl	800707c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	607b      	str	r3, [r7, #4]
 800e0c6:	e015      	b.n	800e0f4 <icmp_input+0x154>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e0c8:	8bfb      	ldrh	r3, [r7, #30]
 800e0ca:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800e0ce:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e0d2:	33f2      	adds	r3, #242	; 0xf2
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	b21b      	sxth	r3, r3
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f8 ffaa 	bl	8007034 <pbuf_header>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d006      	beq.n	800e0f4 <icmp_input+0x154>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e0e6:	4b2c      	ldr	r3, [pc, #176]	; (800e198 <icmp_input+0x1f8>)
 800e0e8:	22c0      	movs	r2, #192	; 0xc0
 800e0ea:	492e      	ldr	r1, [pc, #184]	; (800e1a4 <icmp_input+0x204>)
 800e0ec:	482c      	ldr	r0, [pc, #176]	; (800e1a0 <icmp_input+0x200>)
 800e0ee:	f005 fa9b 	bl	8013628 <iprintf>
        goto icmperr;
 800e0f2:	e046      	b.n	800e182 <icmp_input+0x1e2>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e0fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7f8 ff97 	bl	8007034 <pbuf_header>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d12b      	bne.n	800e164 <icmp_input+0x1c4>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e11a:	4b1d      	ldr	r3, [pc, #116]	; (800e190 <icmp_input+0x1f0>)
 800e11c:	691a      	ldr	r2, [r3, #16]
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	2200      	movs	r2, #0
 800e12c:	709a      	strb	r2, [r3, #2]
 800e12e:	2200      	movs	r2, #0
 800e130:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	22ff      	movs	r2, #255	; 0xff
 800e136:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2200      	movs	r2, #0
 800e13c:	729a      	strb	r2, [r3, #10]
 800e13e:	2200      	movs	r2, #0
 800e140:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	9302      	str	r3, [sp, #8]
 800e146:	2301      	movs	r3, #1
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	2300      	movs	r3, #0
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	23ff      	movs	r3, #255	; 0xff
 800e150:	2200      	movs	r2, #0
 800e152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 fa61 	bl	800e61c <ip4_output_if>
 800e15a:	4603      	mov	r3, r0
 800e15c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800e15e:	e001      	b.n	800e164 <icmp_input+0x1c4>
    break;
 800e160:	bf00      	nop
 800e162:	e000      	b.n	800e166 <icmp_input+0x1c6>
    break;
 800e164:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7f8 ff88 	bl	800707c <pbuf_free>
  return;
 800e16c:	e00d      	b.n	800e18a <icmp_input+0x1ea>
    goto lenerr;
 800e16e:	bf00      	nop
 800e170:	e002      	b.n	800e178 <icmp_input+0x1d8>
    goto lenerr;
 800e172:	bf00      	nop
 800e174:	e000      	b.n	800e178 <icmp_input+0x1d8>
      goto lenerr;
 800e176:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7f8 ff7f 	bl	800707c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e17e:	e004      	b.n	800e18a <icmp_input+0x1ea>
        goto icmperr;
 800e180:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7f8 ff7a 	bl	800707c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e188:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e18a:	3728      	adds	r7, #40	; 0x28
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20004014 	.word	0x20004014
 800e194:	20004028 	.word	0x20004028
 800e198:	0801690c 	.word	0x0801690c
 800e19c:	08016944 	.word	0x08016944
 800e1a0:	0801697c 	.word	0x0801697c
 800e1a4:	080169a4 	.word	0x080169a4

0800e1a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	2103      	movs	r1, #3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f814 	bl	800e1e8 <icmp_send_response>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e1d4:	78fb      	ldrb	r3, [r7, #3]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	210b      	movs	r1, #11
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f804 	bl	800e1e8 <icmp_send_response>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08c      	sub	sp, #48	; 0x30
 800e1ec:	af04      	add	r7, sp, #16
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	2124      	movs	r1, #36	; 0x24
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	f7f8 fbcb 	bl	8006998 <pbuf_alloc>
 800e202:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d04c      	beq.n	800e2a4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	895b      	ldrh	r3, [r3, #10]
 800e20e:	2b23      	cmp	r3, #35	; 0x23
 800e210:	d806      	bhi.n	800e220 <icmp_send_response+0x38>
 800e212:	4b26      	ldr	r3, [pc, #152]	; (800e2ac <icmp_send_response+0xc4>)
 800e214:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800e218:	4925      	ldr	r1, [pc, #148]	; (800e2b0 <icmp_send_response+0xc8>)
 800e21a:	4826      	ldr	r0, [pc, #152]	; (800e2b4 <icmp_send_response+0xcc>)
 800e21c:	f005 fa04 	bl	8013628 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	78fa      	ldrb	r2, [r7, #3]
 800e230:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	78ba      	ldrb	r2, [r7, #2]
 800e236:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2200      	movs	r2, #0
 800e23c:	711a      	strb	r2, [r3, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2200      	movs	r2, #0
 800e246:	719a      	strb	r2, [r3, #6]
 800e248:	2200      	movs	r2, #0
 800e24a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	f103 0008 	add.w	r0, r3, #8
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	221c      	movs	r2, #28
 800e25a:	4619      	mov	r1, r3
 800e25c:	f004 fe47 	bl	8012eee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e266:	f107 030c 	add.w	r3, r7, #12
 800e26a:	4618      	mov	r0, r3
 800e26c:	f000 f824 	bl	800e2b8 <ip4_route>
 800e270:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d011      	beq.n	800e29c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	2200      	movs	r2, #0
 800e27c:	709a      	strb	r2, [r3, #2]
 800e27e:	2200      	movs	r2, #0
 800e280:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e282:	f107 020c 	add.w	r2, r7, #12
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	9302      	str	r3, [sp, #8]
 800e28a:	2301      	movs	r3, #1
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	2300      	movs	r3, #0
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	23ff      	movs	r3, #255	; 0xff
 800e294:	2100      	movs	r1, #0
 800e296:	69f8      	ldr	r0, [r7, #28]
 800e298:	f000 f9c0 	bl	800e61c <ip4_output_if>
  }
  pbuf_free(q);
 800e29c:	69f8      	ldr	r0, [r7, #28]
 800e29e:	f7f8 feed 	bl	800707c <pbuf_free>
 800e2a2:	e000      	b.n	800e2a6 <icmp_send_response+0xbe>
    return;
 800e2a4:	bf00      	nop
}
 800e2a6:	3720      	adds	r7, #32
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	0801690c 	.word	0x0801690c
 800e2b0:	080169d8 	.word	0x080169d8
 800e2b4:	0801697c 	.word	0x0801697c

0800e2b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e2c0:	4b30      	ldr	r3, [pc, #192]	; (800e384 <ip4_route+0xcc>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	60fb      	str	r3, [r7, #12]
 800e2c6:	e036      	b.n	800e336 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e2ce:	f003 0301 	and.w	r3, r3, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d02b      	beq.n	800e330 <ip4_route+0x78>
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e2de:	089b      	lsrs	r3, r3, #2
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d022      	beq.n	800e330 <ip4_route+0x78>
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d01d      	beq.n	800e330 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	405a      	eors	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3308      	adds	r3, #8
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4013      	ands	r3, r2
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d101      	bne.n	800e310 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	e033      	b.n	800e378 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d108      	bne.n	800e330 <ip4_route+0x78>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	330c      	adds	r3, #12
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d101      	bne.n	800e330 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	e023      	b.n	800e378 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60fb      	str	r3, [r7, #12]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1c5      	bne.n	800e2c8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e33c:	4b12      	ldr	r3, [pc, #72]	; (800e388 <ip4_route+0xd0>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d015      	beq.n	800e370 <ip4_route+0xb8>
 800e344:	4b10      	ldr	r3, [pc, #64]	; (800e388 <ip4_route+0xd0>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00d      	beq.n	800e370 <ip4_route+0xb8>
 800e354:	4b0c      	ldr	r3, [pc, #48]	; (800e388 <ip4_route+0xd0>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e35c:	f003 0304 	and.w	r3, r3, #4
 800e360:	2b00      	cmp	r3, #0
 800e362:	d005      	beq.n	800e370 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800e364:	4b08      	ldr	r3, [pc, #32]	; (800e388 <ip4_route+0xd0>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3304      	adds	r3, #4
 800e36a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d101      	bne.n	800e374 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e370:	2300      	movs	r3, #0
 800e372:	e001      	b.n	800e378 <ip4_route+0xc0>
  }

  return netif_default;
 800e374:	4b04      	ldr	r3, [pc, #16]	; (800e388 <ip4_route+0xd0>)
 800e376:	681b      	ldr	r3, [r3, #0]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	2000769c 	.word	0x2000769c
 800e388:	200076a0 	.word	0x200076a0

0800e38c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	091b      	lsrs	r3, r3, #4
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	2b04      	cmp	r3, #4
 800e3a6:	d004      	beq.n	800e3b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7f8 fe67 	bl	800707c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e12b      	b.n	800e60a <ip4_input+0x27e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	f003 030f 	and.w	r3, r3, #15
 800e3bc:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800e3be:	897b      	ldrh	r3, [r7, #10]
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	885b      	ldrh	r3, [r3, #2]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7f7 fd29 	bl	8005e22 <lwip_htons>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	891b      	ldrh	r3, [r3, #8]
 800e3d8:	893a      	ldrh	r2, [r7, #8]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d204      	bcs.n	800e3e8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800e3de:	893b      	ldrh	r3, [r7, #8]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7f8 fcd6 	bl	8006d94 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	895b      	ldrh	r3, [r3, #10]
 800e3ec:	897a      	ldrh	r2, [r7, #10]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d807      	bhi.n	800e402 <ip4_input+0x76>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	891b      	ldrh	r3, [r3, #8]
 800e3f6:	893a      	ldrh	r2, [r7, #8]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d802      	bhi.n	800e402 <ip4_input+0x76>
 800e3fc:	897b      	ldrh	r3, [r7, #10]
 800e3fe:	2b13      	cmp	r3, #19
 800e400:	d804      	bhi.n	800e40c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7f8 fe3a 	bl	800707c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	e0fe      	b.n	800e60a <ip4_input+0x27e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	691b      	ldr	r3, [r3, #16]
 800e410:	4a80      	ldr	r2, [pc, #512]	; (800e614 <ip4_input+0x288>)
 800e412:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	4a7e      	ldr	r2, [pc, #504]	; (800e614 <ip4_input+0x288>)
 800e41a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e41c:	4b7d      	ldr	r3, [pc, #500]	; (800e614 <ip4_input+0x288>)
 800e41e:	695b      	ldr	r3, [r3, #20]
 800e420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e424:	2be0      	cmp	r3, #224	; 0xe0
 800e426:	d112      	bne.n	800e44e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	b2db      	uxtb	r3, r3
 800e434:	2b00      	cmp	r3, #0
 800e436:	d007      	beq.n	800e448 <ip4_input+0xbc>
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	3304      	adds	r3, #4
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d002      	beq.n	800e448 <ip4_input+0xbc>
      netif = inp;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	613b      	str	r3, [r7, #16]
 800e446:	e041      	b.n	800e4cc <ip4_input+0x140>
    } else {
      netif = NULL;
 800e448:	2300      	movs	r3, #0
 800e44a:	613b      	str	r3, [r7, #16]
 800e44c:	e03e      	b.n	800e4cc <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800e44e:	2301      	movs	r3, #1
 800e450:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e45c:	f003 0301 	and.w	r3, r3, #1
 800e460:	b2db      	uxtb	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d014      	beq.n	800e490 <ip4_input+0x104>
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	3304      	adds	r3, #4
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00f      	beq.n	800e490 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e470:	4b68      	ldr	r3, [pc, #416]	; (800e614 <ip4_input+0x288>)
 800e472:	695a      	ldr	r2, [r3, #20]
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	3304      	adds	r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d026      	beq.n	800e4cc <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e47e:	4b65      	ldr	r3, [pc, #404]	; (800e614 <ip4_input+0x288>)
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	6939      	ldr	r1, [r7, #16]
 800e484:	4618      	mov	r0, r3
 800e486:	f000 f99b 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800e48a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d11d      	bne.n	800e4cc <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00d      	beq.n	800e4b2 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800e496:	4b5f      	ldr	r3, [pc, #380]	; (800e614 <ip4_input+0x288>)
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b7f      	cmp	r3, #127	; 0x7f
 800e49e:	d102      	bne.n	800e4a6 <ip4_input+0x11a>
          netif = NULL;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	613b      	str	r3, [r7, #16]
          break;
 800e4a4:	e012      	b.n	800e4cc <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800e4aa:	4b5b      	ldr	r3, [pc, #364]	; (800e618 <ip4_input+0x28c>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	613b      	str	r3, [r7, #16]
 800e4b0:	e002      	b.n	800e4b8 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d102      	bne.n	800e4c6 <ip4_input+0x13a>
        netif = netif->next;
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1c4      	bne.n	800e456 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e4cc:	4b51      	ldr	r3, [pc, #324]	; (800e614 <ip4_input+0x288>)
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 f974 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d105      	bne.n	800e4ea <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e4de:	4b4d      	ldr	r3, [pc, #308]	; (800e614 <ip4_input+0x288>)
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e4e6:	2be0      	cmp	r3, #224	; 0xe0
 800e4e8:	d104      	bne.n	800e4f4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7f8 fdc6 	bl	800707c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	e08a      	b.n	800e60a <ip4_input+0x27e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d104      	bne.n	800e504 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7f8 fdbe 	bl	800707c <pbuf_free>
    return ERR_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	e082      	b.n	800e60a <ip4_input+0x27e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	88db      	ldrh	r3, [r3, #6]
 800e508:	b29b      	uxth	r3, r3
 800e50a:	461a      	mov	r2, r3
 800e50c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e510:	4013      	ands	r3, r2
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00b      	beq.n	800e52e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 fc98 	bl	800ee4c <ip4_reass>
 800e51c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <ip4_input+0x19c>
      return ERR_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	e070      	b.n	800e60a <ip4_input+0x27e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e52e:	4a39      	ldr	r2, [pc, #228]	; (800e614 <ip4_input+0x288>)
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e534:	4a37      	ldr	r2, [pc, #220]	; (800e614 <ip4_input+0x288>)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e53a:	4a36      	ldr	r2, [pc, #216]	; (800e614 <ip4_input+0x288>)
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	b29b      	uxth	r3, r3
 800e546:	f003 030f 	and.w	r3, r3, #15
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	b29a      	uxth	r2, r3
 800e550:	4b30      	ldr	r3, [pc, #192]	; (800e614 <ip4_input+0x288>)
 800e552:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7f9 f834 	bl	80075c4 <raw_input>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d13f      	bne.n	800e5e2 <ip4_input+0x256>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800e562:	897b      	ldrh	r3, [r7, #10]
 800e564:	425b      	negs	r3, r3
 800e566:	b29b      	uxth	r3, r3
 800e568:	b21b      	sxth	r3, r3
 800e56a:	4619      	mov	r1, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f8 fd61 	bl	8007034 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	7a5b      	ldrb	r3, [r3, #9]
 800e576:	2b06      	cmp	r3, #6
 800e578:	d009      	beq.n	800e58e <ip4_input+0x202>
 800e57a:	2b11      	cmp	r3, #17
 800e57c:	d002      	beq.n	800e584 <ip4_input+0x1f8>
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d00a      	beq.n	800e598 <ip4_input+0x20c>
 800e582:	e00e      	b.n	800e5a2 <ip4_input+0x216>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7fe fc44 	bl	800ce14 <udp_input>
      break;
 800e58c:	e02a      	b.n	800e5e4 <ip4_input+0x258>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800e58e:	6839      	ldr	r1, [r7, #0]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7fa fce5 	bl	8008f60 <tcp_input>
      break;
 800e596:	e025      	b.n	800e5e4 <ip4_input+0x258>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800e598:	6839      	ldr	r1, [r7, #0]
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7ff fd00 	bl	800dfa0 <icmp_input>
      break;
 800e5a0:	e020      	b.n	800e5e4 <ip4_input+0x258>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e5a2:	4b1c      	ldr	r3, [pc, #112]	; (800e614 <ip4_input+0x288>)
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	6939      	ldr	r1, [r7, #16]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 f909 	bl	800e7c0 <ip4_addr_isbroadcast_u32>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d112      	bne.n	800e5da <ip4_input+0x24e>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e5b4:	4b17      	ldr	r3, [pc, #92]	; (800e614 <ip4_input+0x288>)
 800e5b6:	695b      	ldr	r3, [r3, #20]
 800e5b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e5bc:	2be0      	cmp	r3, #224	; 0xe0
 800e5be:	d00c      	beq.n	800e5da <ip4_input+0x24e>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800e5c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7f8 fd46 	bl	8007058 <pbuf_header_force>
        p->payload = iphdr;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	697a      	ldr	r2, [r7, #20]
 800e5d0:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e5d2:	2102      	movs	r1, #2
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff fde7 	bl	800e1a8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7f8 fd4e 	bl	800707c <pbuf_free>
 800e5e0:	e000      	b.n	800e5e4 <ip4_input+0x258>

      IP_STATS_INC(ip.proterr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }
 800e5e2:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e5e4:	4b0b      	ldr	r3, [pc, #44]	; (800e614 <ip4_input+0x288>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e5ea:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <ip4_input+0x288>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e5f0:	4b08      	ldr	r3, [pc, #32]	; (800e614 <ip4_input+0x288>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e5f6:	4b07      	ldr	r3, [pc, #28]	; (800e614 <ip4_input+0x288>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e5fc:	4b05      	ldr	r3, [pc, #20]	; (800e614 <ip4_input+0x288>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e602:	4b04      	ldr	r3, [pc, #16]	; (800e614 <ip4_input+0x288>)
 800e604:	2200      	movs	r2, #0
 800e606:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	20004014 	.word	0x20004014
 800e618:	2000769c 	.word	0x2000769c

0800e61c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08a      	sub	sp, #40	; 0x28
 800e620:	af04      	add	r7, sp, #16
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d009      	beq.n	800e648 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d003      	beq.n	800e642 <ip4_output_if+0x26>
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d102      	bne.n	800e648 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e644:	3304      	adds	r3, #4
 800e646:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e648:	78fa      	ldrb	r2, [r7, #3]
 800e64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64c:	9302      	str	r3, [sp, #8]
 800e64e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e652:	9301      	str	r3, [sp, #4]
 800e654:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	4613      	mov	r3, r2
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	6979      	ldr	r1, [r7, #20]
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 f805 	bl	800e670 <ip4_output_if_src>
 800e666:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	89db      	ldrh	r3, [r3, #14]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d006      	beq.n	800e694 <ip4_output_if_src+0x24>
 800e686:	4b48      	ldr	r3, [pc, #288]	; (800e7a8 <ip4_output_if_src+0x138>)
 800e688:	f240 3233 	movw	r2, #819	; 0x333
 800e68c:	4947      	ldr	r1, [pc, #284]	; (800e7ac <ip4_output_if_src+0x13c>)
 800e68e:	4848      	ldr	r0, [pc, #288]	; (800e7b0 <ip4_output_if_src+0x140>)
 800e690:	f004 ffca 	bl	8013628 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d060      	beq.n	800e75c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e69a:	2314      	movs	r3, #20
 800e69c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800e69e:	2114      	movs	r1, #20
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f7f8 fcc7 	bl	8007034 <pbuf_header>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d002      	beq.n	800e6b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e6ac:	f06f 0301 	mvn.w	r3, #1
 800e6b0:	e075      	b.n	800e79e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	895b      	ldrh	r3, [r3, #10]
 800e6bc:	2b13      	cmp	r3, #19
 800e6be:	d806      	bhi.n	800e6ce <ip4_output_if_src+0x5e>
 800e6c0:	4b39      	ldr	r3, [pc, #228]	; (800e7a8 <ip4_output_if_src+0x138>)
 800e6c2:	f240 3261 	movw	r2, #865	; 0x361
 800e6c6:	493b      	ldr	r1, [pc, #236]	; (800e7b4 <ip4_output_if_src+0x144>)
 800e6c8:	4839      	ldr	r0, [pc, #228]	; (800e7b0 <ip4_output_if_src+0x140>)
 800e6ca:	f004 ffad 	bl	8013628 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	78fa      	ldrb	r2, [r7, #3]
 800e6d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e6da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e6e4:	8b7b      	ldrh	r3, [r7, #26]
 800e6e6:	089b      	lsrs	r3, r3, #2
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e6fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	891b      	ldrh	r3, [r3, #8]
 800e702:	4618      	mov	r0, r3
 800e704:	f7f7 fb8d 	bl	8005e22 <lwip_htons>
 800e708:	4603      	mov	r3, r0
 800e70a:	461a      	mov	r2, r3
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	2200      	movs	r2, #0
 800e714:	719a      	strb	r2, [r3, #6]
 800e716:	2200      	movs	r2, #0
 800e718:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e71a:	4b27      	ldr	r3, [pc, #156]	; (800e7b8 <ip4_output_if_src+0x148>)
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f7 fb7f 	bl	8005e22 <lwip_htons>
 800e724:	4603      	mov	r3, r0
 800e726:	461a      	mov	r2, r3
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e72c:	4b22      	ldr	r3, [pc, #136]	; (800e7b8 <ip4_output_if_src+0x148>)
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	3301      	adds	r3, #1
 800e732:	b29a      	uxth	r2, r3
 800e734:	4b20      	ldr	r3, [pc, #128]	; (800e7b8 <ip4_output_if_src+0x148>)
 800e736:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d104      	bne.n	800e748 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e73e:	4b1f      	ldr	r3, [pc, #124]	; (800e7bc <ip4_output_if_src+0x14c>)
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	60da      	str	r2, [r3, #12]
 800e746:	e003      	b.n	800e750 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	2200      	movs	r2, #0
 800e754:	729a      	strb	r2, [r3, #10]
 800e756:	2200      	movs	r2, #0
 800e758:	72da      	strb	r2, [r3, #11]
 800e75a:	e008      	b.n	800e76e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e768:	f107 0314 	add.w	r3, r7, #20
 800e76c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e770:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00c      	beq.n	800e790 <ip4_output_if_src+0x120>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	891a      	ldrh	r2, [r3, #8]
 800e77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e77e:	429a      	cmp	r2, r3
 800e780:	d906      	bls.n	800e790 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f000 fd0a 	bl	800f1a0 <ip4_frag>
 800e78c:	4603      	mov	r3, r0
 800e78e:	e006      	b.n	800e79e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	68f9      	ldr	r1, [r7, #12]
 800e798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e79a:	4798      	blx	r3
 800e79c:	4603      	mov	r3, r0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3720      	adds	r7, #32
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	08016a04 	.word	0x08016a04
 800e7ac:	08016a38 	.word	0x08016a38
 800e7b0:	08016a44 	.word	0x08016a44
 800e7b4:	08016a6c 	.word	0x08016a6c
 800e7b8:	200003e2 	.word	0x200003e2
 800e7bc:	08017454 	.word	0x08017454

0800e7c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7d4:	d002      	beq.n	800e7dc <ip4_addr_isbroadcast_u32+0x1c>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e02a      	b.n	800e836 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e7e6:	f003 0302 	and.w	r3, r3, #2
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d101      	bne.n	800e7f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	e021      	b.n	800e836 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d101      	bne.n	800e802 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	e019      	b.n	800e836 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	3304      	adds	r3, #4
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	405a      	eors	r2, r3
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	3308      	adds	r3, #8
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4013      	ands	r3, r2
 800e814:	2b00      	cmp	r3, #0
 800e816:	d10d      	bne.n	800e834 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	3308      	adds	r3, #8
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	43da      	mvns	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	3308      	adds	r3, #8
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d101      	bne.n	800e834 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e830:	2301      	movs	r3, #1
 800e832:	e000      	b.n	800e836 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e834:	2300      	movs	r3, #0
  }
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
	...

0800e844 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e84a:	2300      	movs	r3, #0
 800e84c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e84e:	4b12      	ldr	r3, [pc, #72]	; (800e898 <ip_reass_tmr+0x54>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e854:	e018      	b.n	800e888 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	7fdb      	ldrb	r3, [r3, #31]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00b      	beq.n	800e876 <ip_reass_tmr+0x32>
      r->timer--;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	7fdb      	ldrb	r3, [r3, #31]
 800e862:	3b01      	subs	r3, #1
 800e864:	b2da      	uxtb	r2, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	60fb      	str	r3, [r7, #12]
 800e874:	e008      	b.n	800e888 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e880:	68b9      	ldr	r1, [r7, #8]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f80a 	bl	800e89c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1e3      	bne.n	800e856 <ip_reass_tmr+0x12>
     }
   }
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	200003e4 	.word	0x200003e4

0800e89c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b088      	sub	sp, #32
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d105      	bne.n	800e8be <ip_reass_free_complete_datagram+0x22>
 800e8b2:	4b45      	ldr	r3, [pc, #276]	; (800e9c8 <ip_reass_free_complete_datagram+0x12c>)
 800e8b4:	22ab      	movs	r2, #171	; 0xab
 800e8b6:	4945      	ldr	r1, [pc, #276]	; (800e9cc <ip_reass_free_complete_datagram+0x130>)
 800e8b8:	4845      	ldr	r0, [pc, #276]	; (800e9d0 <ip_reass_free_complete_datagram+0x134>)
 800e8ba:	f004 feb5 	bl	8013628 <iprintf>
  if (prev != NULL) {
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00a      	beq.n	800e8da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d005      	beq.n	800e8da <ip_reass_free_complete_datagram+0x3e>
 800e8ce:	4b3e      	ldr	r3, [pc, #248]	; (800e9c8 <ip_reass_free_complete_datagram+0x12c>)
 800e8d0:	22ad      	movs	r2, #173	; 0xad
 800e8d2:	4940      	ldr	r1, [pc, #256]	; (800e9d4 <ip_reass_free_complete_datagram+0x138>)
 800e8d4:	483e      	ldr	r0, [pc, #248]	; (800e9d0 <ip_reass_free_complete_datagram+0x134>)
 800e8d6:	f004 fea7 	bl	8013628 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	889b      	ldrh	r3, [r3, #4]
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d12a      	bne.n	800e942 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	6858      	ldr	r0, [r3, #4]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3308      	adds	r3, #8
 800e902:	2214      	movs	r2, #20
 800e904:	4619      	mov	r1, r3
 800e906:	f004 faf2 	bl	8012eee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e90a:	2101      	movs	r1, #1
 800e90c:	69b8      	ldr	r0, [r7, #24]
 800e90e:	f7ff fc5b 	bl	800e1c8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e912:	69b8      	ldr	r0, [r7, #24]
 800e914:	f7f8 fc46 	bl	80071a4 <pbuf_clen>
 800e918:	4603      	mov	r3, r0
 800e91a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e91c:	8bfa      	ldrh	r2, [r7, #30]
 800e91e:	8a7b      	ldrh	r3, [r7, #18]
 800e920:	4413      	add	r3, r2
 800e922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e926:	db05      	blt.n	800e934 <ip_reass_free_complete_datagram+0x98>
 800e928:	4b27      	ldr	r3, [pc, #156]	; (800e9c8 <ip_reass_free_complete_datagram+0x12c>)
 800e92a:	22bc      	movs	r2, #188	; 0xbc
 800e92c:	492a      	ldr	r1, [pc, #168]	; (800e9d8 <ip_reass_free_complete_datagram+0x13c>)
 800e92e:	4828      	ldr	r0, [pc, #160]	; (800e9d0 <ip_reass_free_complete_datagram+0x134>)
 800e930:	f004 fe7a 	bl	8013628 <iprintf>
    pbufs_freed += clen;
 800e934:	8bfa      	ldrh	r2, [r7, #30]
 800e936:	8a7b      	ldrh	r3, [r7, #18]
 800e938:	4413      	add	r3, r2
 800e93a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e93c:	69b8      	ldr	r0, [r7, #24]
 800e93e:	f7f8 fb9d 	bl	800707c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e948:	e01f      	b.n	800e98a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f7f8 fc22 	bl	80071a4 <pbuf_clen>
 800e960:	4603      	mov	r3, r0
 800e962:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e964:	8bfa      	ldrh	r2, [r7, #30]
 800e966:	8a7b      	ldrh	r3, [r7, #18]
 800e968:	4413      	add	r3, r2
 800e96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e96e:	db05      	blt.n	800e97c <ip_reass_free_complete_datagram+0xe0>
 800e970:	4b15      	ldr	r3, [pc, #84]	; (800e9c8 <ip_reass_free_complete_datagram+0x12c>)
 800e972:	22cc      	movs	r2, #204	; 0xcc
 800e974:	4918      	ldr	r1, [pc, #96]	; (800e9d8 <ip_reass_free_complete_datagram+0x13c>)
 800e976:	4816      	ldr	r0, [pc, #88]	; (800e9d0 <ip_reass_free_complete_datagram+0x134>)
 800e978:	f004 fe56 	bl	8013628 <iprintf>
    pbufs_freed += clen;
 800e97c:	8bfa      	ldrh	r2, [r7, #30]
 800e97e:	8a7b      	ldrh	r3, [r7, #18]
 800e980:	4413      	add	r3, r2
 800e982:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7f8 fb79 	bl	800707c <pbuf_free>
  while (p != NULL) {
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1dc      	bne.n	800e94a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 f8c2 	bl	800eb1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800e998:	4b10      	ldr	r3, [pc, #64]	; (800e9dc <ip_reass_free_complete_datagram+0x140>)
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	8bfa      	ldrh	r2, [r7, #30]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d905      	bls.n	800e9ae <ip_reass_free_complete_datagram+0x112>
 800e9a2:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <ip_reass_free_complete_datagram+0x12c>)
 800e9a4:	22d2      	movs	r2, #210	; 0xd2
 800e9a6:	490e      	ldr	r1, [pc, #56]	; (800e9e0 <ip_reass_free_complete_datagram+0x144>)
 800e9a8:	4809      	ldr	r0, [pc, #36]	; (800e9d0 <ip_reass_free_complete_datagram+0x134>)
 800e9aa:	f004 fe3d 	bl	8013628 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <ip_reass_free_complete_datagram+0x140>)
 800e9b0:	881a      	ldrh	r2, [r3, #0]
 800e9b2:	8bfb      	ldrh	r3, [r7, #30]
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	4b08      	ldr	r3, [pc, #32]	; (800e9dc <ip_reass_free_complete_datagram+0x140>)
 800e9ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e9bc:	8bfb      	ldrh	r3, [r7, #30]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3720      	adds	r7, #32
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	08016a9c 	.word	0x08016a9c
 800e9cc:	08016ad8 	.word	0x08016ad8
 800e9d0:	08016ae4 	.word	0x08016ae4
 800e9d4:	08016b0c 	.word	0x08016b0c
 800e9d8:	08016b20 	.word	0x08016b20
 800e9dc:	200003e8 	.word	0x200003e8
 800e9e0:	08016b40 	.word	0x08016b40

0800e9e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b08a      	sub	sp, #40	; 0x28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ea02:	4b28      	ldr	r3, [pc, #160]	; (800eaa4 <ip_reass_remove_oldest_datagram+0xc0>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ea08:	e030      	b.n	800ea6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	695a      	ldr	r2, [r3, #20]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d10c      	bne.n	800ea30 <ip_reass_remove_oldest_datagram+0x4c>
 800ea16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea18:	699a      	ldr	r2, [r3, #24]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d106      	bne.n	800ea30 <ip_reass_remove_oldest_datagram+0x4c>
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	899a      	ldrh	r2, [r3, #12]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	889b      	ldrh	r3, [r3, #4]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d014      	beq.n	800ea5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	3301      	adds	r3, #1
 800ea34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ea36:	6a3b      	ldr	r3, [r7, #32]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d104      	bne.n	800ea46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	61bb      	str	r3, [r7, #24]
 800ea44:	e009      	b.n	800ea5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	7fda      	ldrb	r2, [r3, #31]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	7fdb      	ldrb	r3, [r3, #31]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d803      	bhi.n	800ea5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1cb      	bne.n	800ea0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d008      	beq.n	800ea8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ea78:	69b9      	ldr	r1, [r7, #24]
 800ea7a:	6a38      	ldr	r0, [r7, #32]
 800ea7c:	f7ff ff0e 	bl	800e89c <ip_reass_free_complete_datagram>
 800ea80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	4413      	add	r3, r2
 800ea88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	da02      	bge.n	800ea98 <ip_reass_remove_oldest_datagram+0xb4>
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	dcac      	bgt.n	800e9f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ea98:	697b      	ldr	r3, [r7, #20]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3728      	adds	r7, #40	; 0x28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	200003e4 	.word	0x200003e4

0800eaa8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eab2:	2005      	movs	r0, #5
 800eab4:	f7f7 fd64 	bl	8006580 <memp_malloc>
 800eab8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d110      	bne.n	800eae2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7ff ff8e 	bl	800e9e4 <ip_reass_remove_oldest_datagram>
 800eac8:	4602      	mov	r2, r0
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	4293      	cmp	r3, r2
 800eace:	dc03      	bgt.n	800ead8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ead0:	2005      	movs	r0, #5
 800ead2:	f7f7 fd55 	bl	8006580 <memp_malloc>
 800ead6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d101      	bne.n	800eae2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	e016      	b.n	800eb10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800eae2:	2220      	movs	r2, #32
 800eae4:	2100      	movs	r1, #0
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f004 fa25 	bl	8012f36 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2203      	movs	r2, #3
 800eaf0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800eaf2:	4b09      	ldr	r3, [pc, #36]	; (800eb18 <ip_reass_enqueue_new_datagram+0x70>)
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800eafa:	4a07      	ldr	r2, [pc, #28]	; (800eb18 <ip_reass_enqueue_new_datagram+0x70>)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3308      	adds	r3, #8
 800eb04:	2214      	movs	r2, #20
 800eb06:	6879      	ldr	r1, [r7, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f004 f9f0 	bl	8012eee <memcpy>
  return ipr;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	200003e4 	.word	0x200003e4

0800eb1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800eb26:	4b10      	ldr	r3, [pc, #64]	; (800eb68 <ip_reass_dequeue_datagram+0x4c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d104      	bne.n	800eb3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a0c      	ldr	r2, [pc, #48]	; (800eb68 <ip_reass_dequeue_datagram+0x4c>)
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	e00d      	b.n	800eb56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d106      	bne.n	800eb4e <ip_reass_dequeue_datagram+0x32>
 800eb40:	4b0a      	ldr	r3, [pc, #40]	; (800eb6c <ip_reass_dequeue_datagram+0x50>)
 800eb42:	f240 1245 	movw	r2, #325	; 0x145
 800eb46:	490a      	ldr	r1, [pc, #40]	; (800eb70 <ip_reass_dequeue_datagram+0x54>)
 800eb48:	480a      	ldr	r0, [pc, #40]	; (800eb74 <ip_reass_dequeue_datagram+0x58>)
 800eb4a:	f004 fd6d 	bl	8013628 <iprintf>
    prev->next = ipr->next;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800eb56:	6879      	ldr	r1, [r7, #4]
 800eb58:	2005      	movs	r0, #5
 800eb5a:	f7f7 fd5d 	bl	8006618 <memp_free>
}
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	200003e4 	.word	0x200003e4
 800eb6c:	08016a9c 	.word	0x08016a9c
 800eb70:	08016b5c 	.word	0x08016b5c
 800eb74:	08016ae4 	.word	0x08016ae4

0800eb78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08c      	sub	sp, #48	; 0x30
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800eb84:	2300      	movs	r3, #0
 800eb86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	885b      	ldrh	r3, [r3, #2]
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f7 f942 	bl	8005e22 <lwip_htons>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	461a      	mov	r2, r3
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	f003 030f 	and.w	r3, r3, #15
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	88db      	ldrh	r3, [r3, #6]
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7f7 f930 	bl	8005e22 <lwip_htons>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	00db      	lsls	r3, r3, #3
 800ebcc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ebd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	701a      	strb	r2, [r3, #0]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	705a      	strb	r2, [r3, #1]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	709a      	strb	r2, [r3, #2]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ebe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe8:	8b3a      	ldrh	r2, [r7, #24]
 800ebea:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800ebec:	8b3a      	ldrh	r2, [r7, #24]
 800ebee:	8b7b      	ldrh	r3, [r7, #26]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	627b      	str	r3, [r7, #36]	; 0x24
 800ebfe:	e061      	b.n	800ecc4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800ec06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec08:	889b      	ldrh	r3, [r3, #4]
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	889b      	ldrh	r3, [r3, #4]
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d232      	bcs.n	800ec7c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ec16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec1a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ec1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d01f      	beq.n	800ec62 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ec22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec24:	889b      	ldrh	r3, [r3, #4]
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	88db      	ldrh	r3, [r3, #6]
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	f0c0 80e3 	bcc.w	800edfa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	88db      	ldrh	r3, [r3, #6]
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	889b      	ldrh	r3, [r3, #4]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	429a      	cmp	r2, r3
 800ec42:	f200 80da 	bhi.w	800edfa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ec4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4e:	88db      	ldrh	r3, [r3, #6]
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	889b      	ldrh	r3, [r3, #4]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d037      	beq.n	800eccc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ec60:	e034      	b.n	800eccc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	88db      	ldrh	r3, [r3, #6]
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	889b      	ldrh	r3, [r3, #4]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	f200 80c5 	bhi.w	800edfe <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	605a      	str	r2, [r3, #4]
      break;
 800ec7a:	e027      	b.n	800eccc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7e:	889b      	ldrh	r3, [r3, #4]
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	889b      	ldrh	r3, [r3, #4]
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	f000 80ba 	beq.w	800ee02 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	889b      	ldrh	r3, [r3, #4]
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	88db      	ldrh	r3, [r3, #6]
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	f0c0 80b3 	bcc.w	800ee06 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d009      	beq.n	800ecba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	88db      	ldrh	r3, [r3, #6]
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	889b      	ldrh	r3, [r3, #4]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d001      	beq.n	800ecba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d19a      	bne.n	800ec00 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800ecca:	e000      	b.n	800ecce <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800eccc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d12d      	bne.n	800ed30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d01c      	beq.n	800ed14 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ecda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecdc:	88db      	ldrh	r3, [r3, #6]
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	889b      	ldrh	r3, [r3, #4]
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d906      	bls.n	800ecf8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800ecea:	4b51      	ldr	r3, [pc, #324]	; (800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ecec:	f240 12ab 	movw	r2, #427	; 0x1ab
 800ecf0:	4950      	ldr	r1, [pc, #320]	; (800ee34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ecf2:	4851      	ldr	r0, [pc, #324]	; (800ee38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ecf4:	f004 fc98 	bl	8013628 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ecf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed00:	88db      	ldrh	r3, [r3, #6]
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed06:	889b      	ldrh	r3, [r3, #4]
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d010      	beq.n	800ed30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	623b      	str	r3, [r7, #32]
 800ed12:	e00d      	b.n	800ed30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d006      	beq.n	800ed2a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800ed1c:	4b44      	ldr	r3, [pc, #272]	; (800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ed1e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800ed22:	4946      	ldr	r1, [pc, #280]	; (800ee3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed24:	4844      	ldr	r0, [pc, #272]	; (800ee38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ed26:	f004 fc7f 	bl	8013628 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d105      	bne.n	800ed42 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	7f9b      	ldrb	r3, [r3, #30]
 800ed3a:	f003 0301 	and.w	r3, r3, #1
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d059      	beq.n	800edf6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d04f      	beq.n	800ede8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d006      	beq.n	800ed5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	889b      	ldrh	r3, [r3, #4]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d002      	beq.n	800ed64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	623b      	str	r3, [r7, #32]
 800ed62:	e041      	b.n	800ede8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ed68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ed6e:	e012      	b.n	800ed96 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	88db      	ldrh	r3, [r3, #6]
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	889b      	ldrh	r3, [r3, #4]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d002      	beq.n	800ed8c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	623b      	str	r3, [r7, #32]
            break;
 800ed8a:	e007      	b.n	800ed9c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ed96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1e9      	bne.n	800ed70 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d022      	beq.n	800ede8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d106      	bne.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800edaa:	4b21      	ldr	r3, [pc, #132]	; (800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800edac:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800edb0:	4923      	ldr	r1, [pc, #140]	; (800ee40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800edb2:	4821      	ldr	r0, [pc, #132]	; (800ee38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800edb4:	f004 fc38 	bl	8013628 <iprintf>
          LWIP_ASSERT("sanity check",
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d106      	bne.n	800edd2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800edc4:	4b1a      	ldr	r3, [pc, #104]	; (800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800edc6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800edca:	491d      	ldr	r1, [pc, #116]	; (800ee40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800edcc:	481a      	ldr	r0, [pc, #104]	; (800ee38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800edce:	f004 fc2b 	bl	8013628 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800edd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d006      	beq.n	800ede8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800edda:	4b15      	ldr	r3, [pc, #84]	; (800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800eddc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800ede0:	4918      	ldr	r1, [pc, #96]	; (800ee44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ede2:	4815      	ldr	r0, [pc, #84]	; (800ee38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ede4:	f004 fc20 	bl	8013628 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ede8:	6a3b      	ldr	r3, [r7, #32]
 800edea:	2b00      	cmp	r3, #0
 800edec:	bf14      	ite	ne
 800edee:	2301      	movne	r3, #1
 800edf0:	2300      	moveq	r3, #0
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	e018      	b.n	800ee28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800edf6:	2300      	movs	r3, #0
 800edf8:	e016      	b.n	800ee28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800edfa:	bf00      	nop
 800edfc:	e004      	b.n	800ee08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800edfe:	bf00      	nop
 800ee00:	e002      	b.n	800ee08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800ee02:	bf00      	nop
 800ee04:	e000      	b.n	800ee08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800ee06:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800ee08:	68b8      	ldr	r0, [r7, #8]
 800ee0a:	f7f8 f9cb 	bl	80071a4 <pbuf_clen>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	461a      	mov	r2, r3
 800ee12:	4b0d      	ldr	r3, [pc, #52]	; (800ee48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	1a9b      	subs	r3, r3, r2
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	4b0b      	ldr	r3, [pc, #44]	; (800ee48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ee1c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800ee1e:	68b8      	ldr	r0, [r7, #8]
 800ee20:	f7f8 f92c 	bl	800707c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3730      	adds	r7, #48	; 0x30
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	08016a9c 	.word	0x08016a9c
 800ee34:	08016b78 	.word	0x08016b78
 800ee38:	08016ae4 	.word	0x08016ae4
 800ee3c:	08016b98 	.word	0x08016b98
 800ee40:	08016bd0 	.word	0x08016bd0
 800ee44:	08016be0 	.word	0x08016be0
 800ee48:	200003e8 	.word	0x200003e8

0800ee4c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b08e      	sub	sp, #56	; 0x38
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	f003 030f 	and.w	r3, r3, #15
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	2b14      	cmp	r3, #20
 800ee66:	f040 8131 	bne.w	800f0cc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ee6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6c:	88db      	ldrh	r3, [r3, #6]
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7f6 ffd6 	bl	8005e22 <lwip_htons>
 800ee76:	4603      	mov	r3, r0
 800ee78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	885b      	ldrh	r3, [r3, #2]
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7f6 ffca 	bl	8005e22 <lwip_htons>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	461a      	mov	r2, r3
 800ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	f003 030f 	and.w	r3, r3, #15
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7f8 f97c 	bl	80071a4 <pbuf_clen>
 800eeac:	4603      	mov	r3, r0
 800eeae:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eeb0:	4b8d      	ldr	r3, [pc, #564]	; (800f0e8 <ip4_reass+0x29c>)
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeb8:	4413      	add	r3, r2
 800eeba:	2b0a      	cmp	r3, #10
 800eebc:	dd10      	ble.n	800eee0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eec0:	4619      	mov	r1, r3
 800eec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec4:	f7ff fd8e 	bl	800e9e4 <ip_reass_remove_oldest_datagram>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 8100 	beq.w	800f0d0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eed0:	4b85      	ldr	r3, [pc, #532]	; (800f0e8 <ip4_reass+0x29c>)
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eed8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eeda:	2b0a      	cmp	r3, #10
 800eedc:	f300 80f8 	bgt.w	800f0d0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eee0:	4b82      	ldr	r3, [pc, #520]	; (800f0ec <ip4_reass+0x2a0>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	633b      	str	r3, [r7, #48]	; 0x30
 800eee6:	e015      	b.n	800ef14 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	695a      	ldr	r2, [r3, #20]
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d10c      	bne.n	800ef0e <ip4_reass+0xc2>
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	699a      	ldr	r2, [r3, #24]
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	691b      	ldr	r3, [r3, #16]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d106      	bne.n	800ef0e <ip4_reass+0xc2>
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	899a      	ldrh	r2, [r3, #12]
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	889b      	ldrh	r3, [r3, #4]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d006      	beq.n	800ef1c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ef0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	633b      	str	r3, [r7, #48]	; 0x30
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1e6      	bne.n	800eee8 <ip4_reass+0x9c>
 800ef1a:	e000      	b.n	800ef1e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ef1c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d109      	bne.n	800ef38 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ef24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef26:	4619      	mov	r1, r3
 800ef28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef2a:	f7ff fdbd 	bl	800eaa8 <ip_reass_enqueue_new_datagram>
 800ef2e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ef30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d11c      	bne.n	800ef70 <ip4_reass+0x124>
      goto nullreturn;
 800ef36:	e0ce      	b.n	800f0d6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ef38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3a:	88db      	ldrh	r3, [r3, #6]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7f6 ff6f 	bl	8005e22 <lwip_htons>
 800ef44:	4603      	mov	r3, r0
 800ef46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d110      	bne.n	800ef70 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	89db      	ldrh	r3, [r3, #14]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f6 ff65 	bl	8005e22 <lwip_htons>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d006      	beq.n	800ef70 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	3308      	adds	r3, #8
 800ef66:	2214      	movs	r2, #20
 800ef68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f003 ffbf 	bl	8012eee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ef70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef72:	88db      	ldrh	r3, [r3, #6]
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	f003 0320 	and.w	r3, r3, #32
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	bf0c      	ite	eq
 800ef7e:	2301      	moveq	r3, #1
 800ef80:	2300      	movne	r3, #0
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00e      	beq.n	800efaa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800ef8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ef8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef90:	4413      	add	r3, r2
 800ef92:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ef94:	8b7a      	ldrh	r2, [r7, #26]
 800ef96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	f0c0 8099 	bcc.w	800f0d0 <ip4_reass+0x284>
 800ef9e:	8b7b      	ldrh	r3, [r7, #26]
 800efa0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800efa4:	4293      	cmp	r3, r2
 800efa6:	f200 8093 	bhi.w	800f0d0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800efaa:	69fa      	ldr	r2, [r7, #28]
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efb0:	f7ff fde2 	bl	800eb78 <ip_reass_chain_frag_into_datagram_and_validate>
 800efb4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efbc:	f000 808a 	beq.w	800f0d4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800efc0:	4b49      	ldr	r3, [pc, #292]	; (800f0e8 <ip4_reass+0x29c>)
 800efc2:	881a      	ldrh	r2, [r3, #0]
 800efc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efc6:	4413      	add	r3, r2
 800efc8:	b29a      	uxth	r2, r3
 800efca:	4b47      	ldr	r3, [pc, #284]	; (800f0e8 <ip4_reass+0x29c>)
 800efcc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00d      	beq.n	800eff0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800efd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800efd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efd8:	4413      	add	r3, r2
 800efda:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	8a7a      	ldrh	r2, [r7, #18]
 800efe0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	7f9b      	ldrb	r3, [r3, #30]
 800efe6:	f043 0301 	orr.w	r3, r3, #1
 800efea:	b2da      	uxtb	r2, r3
 800efec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efee:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d168      	bne.n	800f0c8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800eff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff8:	8b9b      	ldrh	r3, [r3, #28]
 800effa:	3314      	adds	r3, #20
 800effc:	b29a      	uxth	r2, r3
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	3308      	adds	r3, #8
 800f018:	2214      	movs	r2, #20
 800f01a:	4619      	mov	r1, r3
 800f01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f01e:	f003 ff66 	bl	8012eee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	8b9b      	ldrh	r3, [r3, #28]
 800f026:	4618      	mov	r0, r3
 800f028:	f7f6 fefb 	bl	8005e22 <lwip_htons>
 800f02c:	4603      	mov	r3, r0
 800f02e:	461a      	mov	r2, r3
 800f030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f032:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f036:	2200      	movs	r2, #0
 800f038:	719a      	strb	r2, [r3, #6]
 800f03a:	2200      	movs	r2, #0
 800f03c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	2200      	movs	r2, #0
 800f042:	729a      	strb	r2, [r3, #10]
 800f044:	2200      	movs	r2, #0
 800f046:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f04e:	e00e      	b.n	800f06e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800f050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f056:	f06f 0113 	mvn.w	r1, #19
 800f05a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f05c:	f7f7 ffea 	bl	8007034 <pbuf_header>
      pbuf_cat(p, r);
 800f060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7f8 f8d8 	bl	8007218 <pbuf_cat>
      r = iprh->next_pbuf;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1ed      	bne.n	800f050 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f074:	4b1d      	ldr	r3, [pc, #116]	; (800f0ec <ip4_reass+0x2a0>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d102      	bne.n	800f084 <ip4_reass+0x238>
      ipr_prev = NULL;
 800f07e:	2300      	movs	r3, #0
 800f080:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f082:	e010      	b.n	800f0a6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f084:	4b19      	ldr	r3, [pc, #100]	; (800f0ec <ip4_reass+0x2a0>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f08a:	e007      	b.n	800f09c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f092:	429a      	cmp	r2, r3
 800f094:	d006      	beq.n	800f0a4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1f4      	bne.n	800f08c <ip4_reass+0x240>
 800f0a2:	e000      	b.n	800f0a6 <ip4_reass+0x25a>
          break;
 800f0a4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f0a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0aa:	f7ff fd37 	bl	800eb1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7f8 f878 	bl	80071a4 <pbuf_clen>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	4b0b      	ldr	r3, [pc, #44]	; (800f0e8 <ip4_reass+0x29c>)
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	1a9b      	subs	r3, r3, r2
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <ip4_reass+0x29c>)
 800f0c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	e00a      	b.n	800f0de <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	e008      	b.n	800f0de <ip4_reass+0x292>
    goto nullreturn;
 800f0cc:	bf00      	nop
 800f0ce:	e002      	b.n	800f0d6 <ip4_reass+0x28a>

nullreturn:
 800f0d0:	bf00      	nop
 800f0d2:	e000      	b.n	800f0d6 <ip4_reass+0x28a>
    goto nullreturn;
 800f0d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7f7 ffd0 	bl	800707c <pbuf_free>
  return NULL;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3738      	adds	r7, #56	; 0x38
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	200003e8 	.word	0x200003e8
 800f0ec:	200003e4 	.word	0x200003e4

0800f0f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800f0f4:	2006      	movs	r0, #6
 800f0f6:	f7f7 fa43 	bl	8006580 <memp_malloc>
 800f0fa:	4603      	mov	r3, r0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d106      	bne.n	800f11c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f10e:	4b07      	ldr	r3, [pc, #28]	; (800f12c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f110:	f240 22ae 	movw	r2, #686	; 0x2ae
 800f114:	4906      	ldr	r1, [pc, #24]	; (800f130 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f116:	4807      	ldr	r0, [pc, #28]	; (800f134 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f118:	f004 fa86 	bl	8013628 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f11c:	6879      	ldr	r1, [r7, #4]
 800f11e:	2006      	movs	r0, #6
 800f120:	f7f7 fa7a 	bl	8006618 <memp_free>
}
 800f124:	bf00      	nop
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	08016a9c 	.word	0x08016a9c
 800f130:	08016c04 	.word	0x08016c04
 800f134:	08016ae4 	.word	0x08016ae4

0800f138 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <ipfrag_free_pbuf_custom+0x20>
 800f14a:	4b11      	ldr	r3, [pc, #68]	; (800f190 <ipfrag_free_pbuf_custom+0x58>)
 800f14c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800f150:	4910      	ldr	r1, [pc, #64]	; (800f194 <ipfrag_free_pbuf_custom+0x5c>)
 800f152:	4811      	ldr	r0, [pc, #68]	; (800f198 <ipfrag_free_pbuf_custom+0x60>)
 800f154:	f004 fa68 	bl	8013628 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d006      	beq.n	800f16e <ipfrag_free_pbuf_custom+0x36>
 800f160:	4b0b      	ldr	r3, [pc, #44]	; (800f190 <ipfrag_free_pbuf_custom+0x58>)
 800f162:	f240 22b9 	movw	r2, #697	; 0x2b9
 800f166:	490d      	ldr	r1, [pc, #52]	; (800f19c <ipfrag_free_pbuf_custom+0x64>)
 800f168:	480b      	ldr	r0, [pc, #44]	; (800f198 <ipfrag_free_pbuf_custom+0x60>)
 800f16a:	f004 fa5d 	bl	8013628 <iprintf>
  if (pcr->original != NULL) {
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	695b      	ldr	r3, [r3, #20]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d004      	beq.n	800f180 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	695b      	ldr	r3, [r3, #20]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7f7 ff7e 	bl	800707c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f7ff ffbd 	bl	800f100 <ip_frag_free_pbuf_custom_ref>
}
 800f186:	bf00      	nop
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	08016a9c 	.word	0x08016a9c
 800f194:	08016c10 	.word	0x08016c10
 800f198:	08016ae4 	.word	0x08016ae4
 800f19c:	08016c1c 	.word	0x08016c1c

0800f1a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b092      	sub	sp, #72	; 0x48
 800f1a4:	af02      	add	r7, sp, #8
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f1b4:	3b14      	subs	r3, #20
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	da00      	bge.n	800f1bc <ip4_frag+0x1c>
 800f1ba:	3307      	adds	r3, #7
 800f1bc:	10db      	asrs	r3, r3, #3
 800f1be:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f1c0:	2314      	movs	r3, #20
 800f1c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800f1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	f003 030f 	and.w	r3, r3, #15
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	2b14      	cmp	r3, #20
 800f1da:	d009      	beq.n	800f1f0 <ip4_frag+0x50>
 800f1dc:	4b79      	ldr	r3, [pc, #484]	; (800f3c4 <ip4_frag+0x224>)
 800f1de:	f240 22e1 	movw	r2, #737	; 0x2e1
 800f1e2:	4979      	ldr	r1, [pc, #484]	; (800f3c8 <ip4_frag+0x228>)
 800f1e4:	4879      	ldr	r0, [pc, #484]	; (800f3cc <ip4_frag+0x22c>)
 800f1e6:	f004 fa1f 	bl	8013628 <iprintf>
 800f1ea:	f06f 0305 	mvn.w	r3, #5
 800f1ee:	e0e5      	b.n	800f3bc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	88db      	ldrh	r3, [r3, #6]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7f6 fe13 	bl	8005e22 <lwip_htons>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800f200:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f206:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800f208:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f20a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d009      	beq.n	800f226 <ip4_frag+0x86>
 800f212:	4b6c      	ldr	r3, [pc, #432]	; (800f3c4 <ip4_frag+0x224>)
 800f214:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f218:	496d      	ldr	r1, [pc, #436]	; (800f3d0 <ip4_frag+0x230>)
 800f21a:	486c      	ldr	r0, [pc, #432]	; (800f3cc <ip4_frag+0x22c>)
 800f21c:	f004 fa04 	bl	8013628 <iprintf>
 800f220:	f06f 0305 	mvn.w	r3, #5
 800f224:	e0ca      	b.n	800f3bc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	891b      	ldrh	r3, [r3, #8]
 800f22a:	3b14      	subs	r3, #20
 800f22c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800f22e:	e0bc      	b.n	800f3aa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800f230:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f232:	00da      	lsls	r2, r3, #3
 800f234:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f236:	4293      	cmp	r3, r2
 800f238:	bfa8      	it	ge
 800f23a:	4613      	movge	r3, r2
 800f23c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f23e:	2200      	movs	r2, #0
 800f240:	2114      	movs	r1, #20
 800f242:	2002      	movs	r0, #2
 800f244:	f7f7 fba8 	bl	8006998 <pbuf_alloc>
 800f248:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 80b2 	beq.w	800f3b6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	895b      	ldrh	r3, [r3, #10]
 800f256:	2b13      	cmp	r3, #19
 800f258:	d806      	bhi.n	800f268 <ip4_frag+0xc8>
 800f25a:	4b5a      	ldr	r3, [pc, #360]	; (800f3c4 <ip4_frag+0x224>)
 800f25c:	f240 3209 	movw	r2, #777	; 0x309
 800f260:	495c      	ldr	r1, [pc, #368]	; (800f3d4 <ip4_frag+0x234>)
 800f262:	485a      	ldr	r0, [pc, #360]	; (800f3cc <ip4_frag+0x22c>)
 800f264:	f004 f9e0 	bl	8013628 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	2214      	movs	r2, #20
 800f26e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f270:	4618      	mov	r0, r3
 800f272:	f003 fe3c 	bl	8012eee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800f27c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f27e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800f280:	e04f      	b.n	800f322 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	895a      	ldrh	r2, [r3, #10]
 800f286:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f28c:	8b7a      	ldrh	r2, [r7, #26]
 800f28e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f290:	4293      	cmp	r3, r2
 800f292:	bf28      	it	cs
 800f294:	4613      	movcs	r3, r2
 800f296:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f298:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d105      	bne.n	800f2aa <ip4_frag+0x10a>
        poff = 0;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	60fb      	str	r3, [r7, #12]
        continue;
 800f2a8:	e03b      	b.n	800f322 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f2aa:	f7ff ff21 	bl	800f0f0 <ip_frag_alloc_pbuf_custom_ref>
 800f2ae:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d103      	bne.n	800f2be <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800f2b6:	6a38      	ldr	r0, [r7, #32]
 800f2b8:	f7f7 fee0 	bl	800707c <pbuf_free>
        goto memerr;
 800f2bc:	e07c      	b.n	800f3b8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f2be:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f2c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2c6:	4413      	add	r3, r2
 800f2c8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800f2ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f2cc:	9201      	str	r2, [sp, #4]
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2202      	movs	r2, #2
 800f2d4:	2004      	movs	r0, #4
 800f2d6:	f7f7 fcf3 	bl	8006cc0 <pbuf_alloced_custom>
 800f2da:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d106      	bne.n	800f2f0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f2e2:	6978      	ldr	r0, [r7, #20]
 800f2e4:	f7ff ff0c 	bl	800f100 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f2e8:	6a38      	ldr	r0, [r7, #32]
 800f2ea:	f7f7 fec7 	bl	800707c <pbuf_free>
        goto memerr;
 800f2ee:	e063      	b.n	800f3b8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f7f7 ff6f 	bl	80071d4 <pbuf_ref>
      pcr->original = p;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	4a36      	ldr	r2, [pc, #216]	; (800f3d8 <ip4_frag+0x238>)
 800f300:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f302:	6939      	ldr	r1, [r7, #16]
 800f304:	6a38      	ldr	r0, [r7, #32]
 800f306:	f7f7 ff87 	bl	8007218 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800f30a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f30c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800f312:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f314:	2b00      	cmp	r3, #0
 800f316:	d004      	beq.n	800f322 <ip4_frag+0x182>
        poff = 0;
 800f318:	2300      	movs	r3, #0
 800f31a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f322:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1ac      	bne.n	800f282 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800f328:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f32a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f32c:	4413      	add	r3, r2
 800f32e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f330:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f336:	3b14      	subs	r3, #20
 800f338:	429a      	cmp	r2, r3
 800f33a:	bfd4      	ite	le
 800f33c:	2301      	movle	r3, #1
 800f33e:	2300      	movgt	r3, #0
 800f340:	b2db      	uxtb	r3, r3
 800f342:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f344:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f34a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d103      	bne.n	800f35a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800f352:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f358:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f35a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7f6 fd60 	bl	8005e22 <lwip_htons>
 800f362:	4603      	mov	r3, r0
 800f364:	461a      	mov	r2, r3
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800f36a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f36c:	3314      	adds	r3, #20
 800f36e:	b29b      	uxth	r3, r3
 800f370:	4618      	mov	r0, r3
 800f372:	f7f6 fd56 	bl	8005e22 <lwip_htons>
 800f376:	4603      	mov	r3, r0
 800f378:	461a      	mov	r2, r3
 800f37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	2200      	movs	r2, #0
 800f382:	729a      	strb	r2, [r3, #10]
 800f384:	2200      	movs	r2, #0
 800f386:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	695b      	ldr	r3, [r3, #20]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	6a39      	ldr	r1, [r7, #32]
 800f390:	68b8      	ldr	r0, [r7, #8]
 800f392:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f394:	6a38      	ldr	r0, [r7, #32]
 800f396:	f7f7 fe71 	bl	800707c <pbuf_free>
    left -= fragsize;
 800f39a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f39c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800f3a2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f3a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f3a6:	4413      	add	r3, r2
 800f3a8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800f3aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f47f af3f 	bne.w	800f230 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e002      	b.n	800f3bc <ip4_frag+0x21c>
      goto memerr;
 800f3b6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3740      	adds	r7, #64	; 0x40
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	08016a9c 	.word	0x08016a9c
 800f3c8:	08016c28 	.word	0x08016c28
 800f3cc:	08016ae4 	.word	0x08016ae4
 800f3d0:	08016c50 	.word	0x08016c50
 800f3d4:	08016c6c 	.word	0x08016c6c
 800f3d8:	0800f139 	.word	0x0800f139

0800f3dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800f3e6:	230e      	movs	r3, #14
 800f3e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	895b      	ldrh	r3, [r3, #10]
 800f3ee:	2b0e      	cmp	r3, #14
 800f3f0:	d977      	bls.n	800f4e2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	7b1a      	ldrb	r2, [r3, #12]
 800f3fc:	7b5b      	ldrb	r3, [r3, #13]
 800f3fe:	021b      	lsls	r3, r3, #8
 800f400:	4313      	orrs	r3, r2
 800f402:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	f003 0301 	and.w	r3, r3, #1
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d023      	beq.n	800f458 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d10f      	bne.n	800f438 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	785b      	ldrb	r3, [r3, #1]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d11b      	bne.n	800f458 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f424:	2b5e      	cmp	r3, #94	; 0x5e
 800f426:	d117      	bne.n	800f458 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	7b5b      	ldrb	r3, [r3, #13]
 800f42c:	f043 0310 	orr.w	r3, r3, #16
 800f430:	b2da      	uxtb	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	735a      	strb	r2, [r3, #13]
 800f436:	e00f      	b.n	800f458 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	2206      	movs	r2, #6
 800f43c:	4930      	ldr	r1, [pc, #192]	; (800f500 <ethernet_input+0x124>)
 800f43e:	4618      	mov	r0, r3
 800f440:	f003 fd46 	bl	8012ed0 <memcmp>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d106      	bne.n	800f458 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	7b5b      	ldrb	r3, [r3, #13]
 800f44e:	f043 0308 	orr.w	r3, r3, #8
 800f452:	b2da      	uxtb	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f458:	89fb      	ldrh	r3, [r7, #14]
 800f45a:	2b08      	cmp	r3, #8
 800f45c:	d003      	beq.n	800f466 <ethernet_input+0x8a>
 800f45e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f462:	d01e      	beq.n	800f4a2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f464:	e044      	b.n	800f4f0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f46c:	f003 0308 	and.w	r3, r3, #8
 800f470:	2b00      	cmp	r3, #0
 800f472:	d038      	beq.n	800f4e6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	895b      	ldrh	r3, [r3, #10]
 800f478:	461a      	mov	r2, r3
 800f47a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f47e:	429a      	cmp	r2, r3
 800f480:	db33      	blt.n	800f4ea <ethernet_input+0x10e>
 800f482:	8afb      	ldrh	r3, [r7, #22]
 800f484:	425b      	negs	r3, r3
 800f486:	b29b      	uxth	r3, r3
 800f488:	b21b      	sxth	r3, r3
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7f7 fdd1 	bl	8007034 <pbuf_header>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d128      	bne.n	800f4ea <ethernet_input+0x10e>
        ip4_input(p, netif);
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7fe ff76 	bl	800e38c <ip4_input>
      break;
 800f4a0:	e01d      	b.n	800f4de <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d01e      	beq.n	800f4ee <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	895b      	ldrh	r3, [r3, #10]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	db15      	blt.n	800f4ea <ethernet_input+0x10e>
 800f4be:	8afb      	ldrh	r3, [r7, #22]
 800f4c0:	425b      	negs	r3, r3
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	b21b      	sxth	r3, r3
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7f7 fdb3 	bl	8007034 <pbuf_header>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d10a      	bne.n	800f4ea <ethernet_input+0x10e>
        etharp_input(p, netif);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7fe f8f6 	bl	800d6c8 <etharp_input>
      break;
 800f4dc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	e00a      	b.n	800f4f8 <ethernet_input+0x11c>
    goto free_and_return;
 800f4e2:	bf00      	nop
 800f4e4:	e004      	b.n	800f4f0 <ethernet_input+0x114>
        goto free_and_return;
 800f4e6:	bf00      	nop
 800f4e8:	e002      	b.n	800f4f0 <ethernet_input+0x114>

free_and_return:
 800f4ea:	bf00      	nop
 800f4ec:	e000      	b.n	800f4f0 <ethernet_input+0x114>
        goto free_and_return;
 800f4ee:	bf00      	nop
  pbuf_free(p);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7f7 fdc3 	bl	800707c <pbuf_free>
  return ERR_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	08017458 	.word	0x08017458

0800f504 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f512:	8c3b      	ldrh	r3, [r7, #32]
 800f514:	4618      	mov	r0, r3
 800f516:	f7f6 fc84 	bl	8005e22 <lwip_htons>
 800f51a:	4603      	mov	r3, r0
 800f51c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800f51e:	210e      	movs	r1, #14
 800f520:	68b8      	ldr	r0, [r7, #8]
 800f522:	f7f7 fd87 	bl	8007034 <pbuf_header>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d125      	bne.n	800f578 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	8afa      	ldrh	r2, [r7, #22]
 800f536:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	2206      	movs	r2, #6
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	4618      	mov	r0, r3
 800f540:	f003 fcd5 	bl	8012eee <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	3306      	adds	r3, #6
 800f548:	2206      	movs	r2, #6
 800f54a:	6879      	ldr	r1, [r7, #4]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f003 fcce 	bl	8012eee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f558:	2b06      	cmp	r3, #6
 800f55a:	d006      	beq.n	800f56a <ethernet_output+0x66>
 800f55c:	4b0a      	ldr	r3, [pc, #40]	; (800f588 <ethernet_output+0x84>)
 800f55e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f562:	490a      	ldr	r1, [pc, #40]	; (800f58c <ethernet_output+0x88>)
 800f564:	480a      	ldr	r0, [pc, #40]	; (800f590 <ethernet_output+0x8c>)
 800f566:	f004 f85f 	bl	8013628 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	699b      	ldr	r3, [r3, #24]
 800f56e:	68b9      	ldr	r1, [r7, #8]
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	4798      	blx	r3
 800f574:	4603      	mov	r3, r0
 800f576:	e002      	b.n	800f57e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f578:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f57a:	f06f 0301 	mvn.w	r3, #1
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	08016c8c 	.word	0x08016c8c
 800f58c:	08016cc4 	.word	0x08016cc4
 800f590:	08016cf8 	.word	0x08016cf8

0800f594 <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	333c      	adds	r3, #60	; 0x3c
 800f5a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f5aa:	68b9      	ldr	r1, [r7, #8]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fa7f 	bl	800fab0 <fifo_init>
}
 800f5b2:	bf00      	nop
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 f872 	bl	800f6ac <SCPI_ErrorCount>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d11c      	bne.n	800f608 <SCPI_ErrorEmitEmpty+0x4e>
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fbe4 	bl	800fd9e <SCPI_RegGet>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d013      	beq.n	800f608 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 800f5e0:	2204      	movs	r2, #4
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 fcda 	bl	800ff9e <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00a      	beq.n	800f608 <SCPI_ErrorEmitEmpty+0x4e>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2100      	movs	r1, #0
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	4798      	blx	r3
        }
    }
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 800f61c:	2204      	movs	r2, #4
 800f61e:	2100      	movs	r1, #0
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fca1 	bl	800ff68 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00c      	beq.n	800f648 <SCPI_ErrorEmit+0x38>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d007      	beq.n	800f648 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f642:	4611      	mov	r1, r2
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	4798      	blx	r3
    }
}
 800f648:	bf00      	nop
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	333c      	adds	r3, #60	; 0x3c
 800f65c:	4618      	mov	r0, r3
 800f65e:	f000 fa43 	bl	800fae8 <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff ffa9 	bl	800f5ba <SCPI_ErrorEmitEmpty>
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d002      	beq.n	800f686 <SCPI_ErrorPop+0x16>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d101      	bne.n	800f68a <SCPI_ErrorPop+0x1a>
 800f686:	2300      	movs	r3, #0
 800f688:	e00c      	b.n	800f6a4 <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	2200      	movs	r2, #0
 800f68e:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	333c      	adds	r3, #60	; 0x3c
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	4618      	mov	r0, r3
 800f698:	f000 fa99 	bl	800fbce <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff ff8c 	bl	800f5ba <SCPI_ErrorEmitEmpty>

    return TRUE;
 800f6a2:	2301      	movs	r3, #1
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	333c      	adds	r3, #60	; 0x3c
 800f6bc:	f107 020e 	add.w	r2, r7, #14
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f000 faf6 	bl	800fcb4 <fifo_count>

    return result;
 800f6c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 800f6e8:	897b      	ldrh	r3, [r7, #10]
 800f6ea:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	333c      	adds	r3, #60	; 0x3c
 800f6f0:	f107 0210 	add.w	r2, r7, #16
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f000 fa30 	bl	800fb5c <fifo_add>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	f083 0301 	eor.w	r3, r3, #1
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d014      	beq.n	800f732 <SCPI_ErrorAddInternal+0x5e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	333c      	adds	r3, #60	; 0x3c
 800f70c:	f107 0210 	add.w	r2, r7, #16
 800f710:	4611      	mov	r1, r2
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fa92 	bl	800fc3c <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 800f718:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 800f71c:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	333c      	adds	r3, #60	; 0x3c
 800f722:	f107 0210 	add.w	r2, r7, #16
 800f726:	4611      	mov	r1, r2
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 fa17 	bl	800fb5c <fifo_add>
        return FALSE;
 800f72e:	2300      	movs	r3, #0
 800f730:	e000      	b.n	800f734 <SCPI_ErrorAddInternal+0x60>
    }
    return TRUE;
 800f732:	2301      	movs	r3, #1
}
 800f734:	4618      	mov	r0, r3
 800f736:	3718      	adds	r7, #24
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	607a      	str	r2, [r7, #4]
 800f746:	603b      	str	r3, [r7, #0]
 800f748:	460b      	mov	r3, r1
 800f74a:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d007      	beq.n	800f762 <SCPI_ErrorPushEx+0x26>
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d104      	bne.n	800f762 <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 800f758:	21ff      	movs	r1, #255	; 0xff
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f003 fb36 	bl	8012dcc <BSD_strnlen>
 800f760:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 800f762:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f7ff ffb2 	bl	800f6d4 <SCPI_ErrorAddInternal>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	bf14      	ite	ne
 800f776:	2301      	movne	r3, #1
 800f778:	2300      	moveq	r3, #0
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	f083 0301 	eor.w	r3, r3, #1
 800f780:	b2db      	uxtb	r3, r3
 800f782:	74fb      	strb	r3, [r7, #19]
 800f784:	7cfb      	ldrb	r3, [r7, #19]
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 800f78c:	2300      	movs	r3, #0
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e02b      	b.n	800f7ea <SCPI_ErrorPushEx+0xae>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 800f792:	4923      	ldr	r1, [pc, #140]	; (800f820 <SCPI_ErrorPushEx+0xe4>)
 800f794:	697a      	ldr	r2, [r7, #20]
 800f796:	4613      	mov	r3, r2
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	4413      	add	r3, r2
 800f79c:	005b      	lsls	r3, r3, #1
 800f79e:	440b      	add	r3, r1
 800f7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	dc1b      	bgt.n	800f7e4 <SCPI_ErrorPushEx+0xa8>
 800f7ac:	491c      	ldr	r1, [pc, #112]	; (800f820 <SCPI_ErrorPushEx+0xe4>)
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	4413      	add	r3, r2
 800f7b6:	005b      	lsls	r3, r3, #1
 800f7b8:	440b      	add	r3, r1
 800f7ba:	3302      	adds	r3, #2
 800f7bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	db0d      	blt.n	800f7e4 <SCPI_ErrorPushEx+0xa8>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 800f7c8:	4915      	ldr	r1, [pc, #84]	; (800f820 <SCPI_ErrorPushEx+0xe4>)
 800f7ca:	697a      	ldr	r2, [r7, #20]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4413      	add	r3, r2
 800f7d2:	005b      	lsls	r3, r3, #1
 800f7d4:	440b      	add	r3, r1
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	881b      	ldrh	r3, [r3, #0]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	2102      	movs	r1, #2
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f000 fbc2 	bl	800ff68 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	617b      	str	r3, [r7, #20]
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	2b08      	cmp	r3, #8
 800f7ee:	ddd0      	ble.n	800f792 <SCPI_ErrorPushEx+0x56>
        }
    }

    SCPI_ErrorEmit(context, err);
 800f7f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f7ff ff0a 	bl	800f610 <SCPI_ErrorEmit>
    if (queue_overflow) {
 800f7fc:	7cfb      	ldrb	r3, [r7, #19]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <SCPI_ErrorPushEx+0xce>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 800f802:	4908      	ldr	r1, [pc, #32]	; (800f824 <SCPI_ErrorPushEx+0xe8>)
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f7ff ff03 	bl	800f610 <SCPI_ErrorEmit>
    }

    if (context) {
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <SCPI_ErrorPushEx+0xdc>
        context->cmd_error = TRUE;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2201      	movs	r2, #1
 800f814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
}
 800f818:	bf00      	nop
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	08017468 	.word	0x08017468
 800f824:	fffffea2 	.word	0xfffffea2

0800f828 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 800f834:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f838:	2300      	movs	r3, #0
 800f83a:	2200      	movs	r2, #0
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7ff ff7d 	bl	800f73c <SCPI_ErrorPushEx>
    return;
 800f842:	bf00      	nop
}
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
	...

0800f84c <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 800f856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f85a:	f113 0f7c 	cmn.w	r3, #124	; 0x7c
 800f85e:	f000 80a6 	beq.w	800f9ae <SCPI_ErrorTranslate+0x162>
 800f862:	f113 0f7c 	cmn.w	r3, #124	; 0x7c
 800f866:	dc4a      	bgt.n	800f8fe <SCPI_ErrorTranslate+0xb2>
 800f868:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 800f86c:	f000 80b1 	beq.w	800f9d2 <SCPI_ErrorTranslate+0x186>
 800f870:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 800f874:	dc22      	bgt.n	800f8bc <SCPI_ErrorTranslate+0x70>
 800f876:	f46f 72b5 	mvn.w	r2, #362	; 0x16a
 800f87a:	4293      	cmp	r3, r2
 800f87c:	f000 80b1 	beq.w	800f9e2 <SCPI_ErrorTranslate+0x196>
 800f880:	f513 7fb5 	cmn.w	r3, #362	; 0x16a
 800f884:	da0d      	bge.n	800f8a2 <SCPI_ErrorTranslate+0x56>
 800f886:	f46f 72b9 	mvn.w	r2, #370	; 0x172
 800f88a:	4293      	cmp	r3, r2
 800f88c:	f000 80ad 	beq.w	800f9ea <SCPI_ErrorTranslate+0x19e>
 800f890:	f513 7fb9 	cmn.w	r3, #370	; 0x172
 800f894:	f000 80a7 	beq.w	800f9e6 <SCPI_ErrorTranslate+0x19a>
 800f898:	f513 7fba 	cmn.w	r3, #372	; 0x174
 800f89c:	f000 80a7 	beq.w	800f9ee <SCPI_ErrorTranslate+0x1a2>
 800f8a0:	e0bb      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f8a2:	f513 7faa 	cmn.w	r3, #340	; 0x154
 800f8a6:	f000 8098 	beq.w	800f9da <SCPI_ErrorTranslate+0x18e>
 800f8aa:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800f8ae:	f000 8092 	beq.w	800f9d6 <SCPI_ErrorTranslate+0x18a>
 800f8b2:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 800f8b6:	f000 8092 	beq.w	800f9de <SCPI_ErrorTranslate+0x192>
 800f8ba:	e0ae      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f8bc:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 800f8c0:	d07f      	beq.n	800f9c2 <SCPI_ErrorTranslate+0x176>
 800f8c2:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 800f8c6:	dc09      	bgt.n	800f8dc <SCPI_ErrorTranslate+0x90>
 800f8c8:	f113 0fdd 	cmn.w	r3, #221	; 0xdd
 800f8cc:	d07d      	beq.n	800f9ca <SCPI_ErrorTranslate+0x17e>
 800f8ce:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800f8d2:	d078      	beq.n	800f9c6 <SCPI_ErrorTranslate+0x17a>
 800f8d4:	f113 0fde 	cmn.w	r3, #222	; 0xde
 800f8d8:	d079      	beq.n	800f9ce <SCPI_ErrorTranslate+0x182>
 800f8da:	e09e      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f8dc:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800f8e0:	d06b      	beq.n	800f9ba <SCPI_ErrorTranslate+0x16e>
 800f8e2:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800f8e6:	dc03      	bgt.n	800f8f0 <SCPI_ErrorTranslate+0xa4>
 800f8e8:	f113 0f97 	cmn.w	r3, #151	; 0x97
 800f8ec:	d067      	beq.n	800f9be <SCPI_ErrorTranslate+0x172>
 800f8ee:	e094      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f8f0:	f113 0f83 	cmn.w	r3, #131	; 0x83
 800f8f4:	d05f      	beq.n	800f9b6 <SCPI_ErrorTranslate+0x16a>
 800f8f6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800f8fa:	d05a      	beq.n	800f9b2 <SCPI_ErrorTranslate+0x166>
 800f8fc:	e08d      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f8fe:	f240 22bd 	movw	r2, #701	; 0x2bd
 800f902:	4293      	cmp	r3, r2
 800f904:	d077      	beq.n	800f9f6 <SCPI_ErrorTranslate+0x1aa>
 800f906:	f240 22bd 	movw	r2, #701	; 0x2bd
 800f90a:	4293      	cmp	r3, r2
 800f90c:	dc1f      	bgt.n	800f94e <SCPI_ErrorTranslate+0x102>
 800f90e:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800f912:	d044      	beq.n	800f99e <SCPI_ErrorTranslate+0x152>
 800f914:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800f918:	dc09      	bgt.n	800f92e <SCPI_ErrorTranslate+0xe2>
 800f91a:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 800f91e:	d042      	beq.n	800f9a6 <SCPI_ErrorTranslate+0x15a>
 800f920:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 800f924:	d03d      	beq.n	800f9a2 <SCPI_ErrorTranslate+0x156>
 800f926:	f113 0f71 	cmn.w	r3, #113	; 0x71
 800f92a:	d03e      	beq.n	800f9aa <SCPI_ErrorTranslate+0x15e>
 800f92c:	e075      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f92e:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800f932:	d030      	beq.n	800f996 <SCPI_ErrorTranslate+0x14a>
 800f934:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800f938:	dc03      	bgt.n	800f942 <SCPI_ErrorTranslate+0xf6>
 800f93a:	f113 0f67 	cmn.w	r3, #103	; 0x67
 800f93e:	d02c      	beq.n	800f99a <SCPI_ErrorTranslate+0x14e>
 800f940:	e06b      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f942:	2b00      	cmp	r3, #0
 800f944:	d025      	beq.n	800f992 <SCPI_ErrorTranslate+0x146>
 800f946:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800f94a:	d052      	beq.n	800f9f2 <SCPI_ErrorTranslate+0x1a6>
 800f94c:	e065      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f94e:	f240 22c6 	movw	r2, #710	; 0x2c6
 800f952:	4293      	cmp	r3, r2
 800f954:	d057      	beq.n	800fa06 <SCPI_ErrorTranslate+0x1ba>
 800f956:	f240 22c6 	movw	r2, #710	; 0x2c6
 800f95a:	4293      	cmp	r3, r2
 800f95c:	dc0b      	bgt.n	800f976 <SCPI_ErrorTranslate+0x12a>
 800f95e:	f240 22bf 	movw	r2, #703	; 0x2bf
 800f962:	4293      	cmp	r3, r2
 800f964:	d04b      	beq.n	800f9fe <SCPI_ErrorTranslate+0x1b2>
 800f966:	f240 22bf 	movw	r2, #703	; 0x2bf
 800f96a:	4293      	cmp	r3, r2
 800f96c:	db45      	blt.n	800f9fa <SCPI_ErrorTranslate+0x1ae>
 800f96e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800f972:	d046      	beq.n	800fa02 <SCPI_ErrorTranslate+0x1b6>
 800f974:	e051      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
 800f976:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 800f97a:	d048      	beq.n	800fa0e <SCPI_ErrorTranslate+0x1c2>
 800f97c:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 800f980:	db43      	blt.n	800fa0a <SCPI_ErrorTranslate+0x1be>
 800f982:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800f986:	d044      	beq.n	800fa12 <SCPI_ErrorTranslate+0x1c6>
 800f988:	f240 3221 	movw	r2, #801	; 0x321
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d042      	beq.n	800fa16 <SCPI_ErrorTranslate+0x1ca>
 800f990:	e043      	b.n	800fa1a <SCPI_ErrorTranslate+0x1ce>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 800f992:	4b25      	ldr	r3, [pc, #148]	; (800fa28 <SCPI_ErrorTranslate+0x1dc>)
 800f994:	e042      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f996:	4b25      	ldr	r3, [pc, #148]	; (800fa2c <SCPI_ErrorTranslate+0x1e0>)
 800f998:	e040      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f99a:	4b25      	ldr	r3, [pc, #148]	; (800fa30 <SCPI_ErrorTranslate+0x1e4>)
 800f99c:	e03e      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f99e:	4b25      	ldr	r3, [pc, #148]	; (800fa34 <SCPI_ErrorTranslate+0x1e8>)
 800f9a0:	e03c      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9a2:	4b25      	ldr	r3, [pc, #148]	; (800fa38 <SCPI_ErrorTranslate+0x1ec>)
 800f9a4:	e03a      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9a6:	4b25      	ldr	r3, [pc, #148]	; (800fa3c <SCPI_ErrorTranslate+0x1f0>)
 800f9a8:	e038      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9aa:	4b25      	ldr	r3, [pc, #148]	; (800fa40 <SCPI_ErrorTranslate+0x1f4>)
 800f9ac:	e036      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9ae:	4b25      	ldr	r3, [pc, #148]	; (800fa44 <SCPI_ErrorTranslate+0x1f8>)
 800f9b0:	e034      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9b2:	4b25      	ldr	r3, [pc, #148]	; (800fa48 <SCPI_ErrorTranslate+0x1fc>)
 800f9b4:	e032      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9b6:	4b25      	ldr	r3, [pc, #148]	; (800fa4c <SCPI_ErrorTranslate+0x200>)
 800f9b8:	e030      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9ba:	4b25      	ldr	r3, [pc, #148]	; (800fa50 <SCPI_ErrorTranslate+0x204>)
 800f9bc:	e02e      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9be:	4b25      	ldr	r3, [pc, #148]	; (800fa54 <SCPI_ErrorTranslate+0x208>)
 800f9c0:	e02c      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9c2:	4b25      	ldr	r3, [pc, #148]	; (800fa58 <SCPI_ErrorTranslate+0x20c>)
 800f9c4:	e02a      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9c6:	4b25      	ldr	r3, [pc, #148]	; (800fa5c <SCPI_ErrorTranslate+0x210>)
 800f9c8:	e028      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9ca:	4b25      	ldr	r3, [pc, #148]	; (800fa60 <SCPI_ErrorTranslate+0x214>)
 800f9cc:	e026      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9ce:	4b25      	ldr	r3, [pc, #148]	; (800fa64 <SCPI_ErrorTranslate+0x218>)
 800f9d0:	e024      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9d2:	4b25      	ldr	r3, [pc, #148]	; (800fa68 <SCPI_ErrorTranslate+0x21c>)
 800f9d4:	e022      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9d6:	4b25      	ldr	r3, [pc, #148]	; (800fa6c <SCPI_ErrorTranslate+0x220>)
 800f9d8:	e020      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9da:	4b25      	ldr	r3, [pc, #148]	; (800fa70 <SCPI_ErrorTranslate+0x224>)
 800f9dc:	e01e      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9de:	4b25      	ldr	r3, [pc, #148]	; (800fa74 <SCPI_ErrorTranslate+0x228>)
 800f9e0:	e01c      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9e2:	4b25      	ldr	r3, [pc, #148]	; (800fa78 <SCPI_ErrorTranslate+0x22c>)
 800f9e4:	e01a      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9e6:	4b25      	ldr	r3, [pc, #148]	; (800fa7c <SCPI_ErrorTranslate+0x230>)
 800f9e8:	e018      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9ea:	4b25      	ldr	r3, [pc, #148]	; (800fa80 <SCPI_ErrorTranslate+0x234>)
 800f9ec:	e016      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9ee:	4b25      	ldr	r3, [pc, #148]	; (800fa84 <SCPI_ErrorTranslate+0x238>)
 800f9f0:	e014      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9f2:	4b25      	ldr	r3, [pc, #148]	; (800fa88 <SCPI_ErrorTranslate+0x23c>)
 800f9f4:	e012      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9f6:	4b25      	ldr	r3, [pc, #148]	; (800fa8c <SCPI_ErrorTranslate+0x240>)
 800f9f8:	e010      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9fa:	4b25      	ldr	r3, [pc, #148]	; (800fa90 <SCPI_ErrorTranslate+0x244>)
 800f9fc:	e00e      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800f9fe:	4b25      	ldr	r3, [pc, #148]	; (800fa94 <SCPI_ErrorTranslate+0x248>)
 800fa00:	e00c      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800fa02:	4b25      	ldr	r3, [pc, #148]	; (800fa98 <SCPI_ErrorTranslate+0x24c>)
 800fa04:	e00a      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800fa06:	4b25      	ldr	r3, [pc, #148]	; (800fa9c <SCPI_ErrorTranslate+0x250>)
 800fa08:	e008      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800fa0a:	4b25      	ldr	r3, [pc, #148]	; (800faa0 <SCPI_ErrorTranslate+0x254>)
 800fa0c:	e006      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800fa0e:	4b25      	ldr	r3, [pc, #148]	; (800faa4 <SCPI_ErrorTranslate+0x258>)
 800fa10:	e004      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800fa12:	4b25      	ldr	r3, [pc, #148]	; (800faa8 <SCPI_ErrorTranslate+0x25c>)
 800fa14:	e002      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
 800fa16:	4b1d      	ldr	r3, [pc, #116]	; (800fa8c <SCPI_ErrorTranslate+0x240>)
 800fa18:	e000      	b.n	800fa1c <SCPI_ErrorTranslate+0x1d0>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800fa1a:	4b24      	ldr	r3, [pc, #144]	; (800faac <SCPI_ErrorTranslate+0x260>)
    }
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr
 800fa28:	08016d20 	.word	0x08016d20
 800fa2c:	08016d2c 	.word	0x08016d2c
 800fa30:	08016d40 	.word	0x08016d40
 800fa34:	08016d54 	.word	0x08016d54
 800fa38:	08016d64 	.word	0x08016d64
 800fa3c:	08016d7c 	.word	0x08016d7c
 800fa40:	08016d90 	.word	0x08016d90
 800fa44:	08016da4 	.word	0x08016da4
 800fa48:	08016db4 	.word	0x08016db4
 800fa4c:	08016dd0 	.word	0x08016dd0
 800fa50:	08016de0 	.word	0x08016de0
 800fa54:	08016df4 	.word	0x08016df4
 800fa58:	08016e08 	.word	0x08016e08
 800fa5c:	08016e1c 	.word	0x08016e1c
 800fa60:	08016e2c 	.word	0x08016e2c
 800fa64:	08016e40 	.word	0x08016e40
 800fa68:	08016e54 	.word	0x08016e54
 800fa6c:	08016e6c 	.word	0x08016e6c
 800fa70:	08016e7c 	.word	0x08016e7c
 800fa74:	08016e90 	.word	0x08016e90
 800fa78:	08016ea0 	.word	0x08016ea0
 800fa7c:	08016eb8 	.word	0x08016eb8
 800fa80:	08016ecc 	.word	0x08016ecc
 800fa84:	08016edc 	.word	0x08016edc
 800fa88:	08016eec 	.word	0x08016eec
 800fa8c:	08016f0c 	.word	0x08016f0c
 800fa90:	08016f30 	.word	0x08016f30
 800fa94:	08016f4c 	.word	0x08016f4c
 800fa98:	08016f6c 	.word	0x08016f6c
 800fa9c:	08016f88 	.word	0x08016f88
 800faa0:	08016fa8 	.word	0x08016fa8
 800faa4:	08016fc4 	.word	0x08016fc4
 800faa8:	08016fdc 	.word	0x08016fdc
 800faac:	08016ff4 	.word	0x08016ff4

0800fab0 <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	4613      	mov	r3, r2
 800fabc:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2200      	movs	r2, #0
 800fac2:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2200      	movs	r2, #0
 800fac8:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	68ba      	ldr	r2, [r7, #8]
 800fad4:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	88fa      	ldrh	r2, [r7, #6]
 800fada:	80da      	strh	r2, [r3, #6]
}
 800fadc:	bf00      	nop
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2200      	movs	r2, #0
 800fb00:	809a      	strh	r2, [r3, #4]
}
 800fb02:	bf00      	nop
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 800fb0e:	b480      	push	{r7}
 800fb10:	b083      	sub	sp, #12
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bf0c      	ite	eq
 800fb20:	2301      	moveq	r3, #1
 800fb22:	2300      	movne	r3, #0
 800fb24:	b2db      	uxtb	r3, r3
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	370c      	adds	r7, #12
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 800fb32:	b480      	push	{r7}
 800fb34:	b083      	sub	sp, #12
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	bf0c      	ite	eq
 800fb4a:	2301      	moveq	r3, #1
 800fb4c:	2300      	movne	r3, #0
 800fb4e:	b2db      	uxtb	r3, r3
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	370c      	adds	r7, #12
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff ffe3 	bl	800fb32 <fifo_is_full>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <fifo_add+0x1a>
        return FALSE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	e027      	b.n	800fbc6 <fifo_add+0x6a>
    }
    if (!value) {
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <fifo_add+0x24>
        return FALSE;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e022      	b.n	800fbc6 <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	689a      	ldr	r2, [r3, #8]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	4413      	add	r3, r2
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	8812      	ldrh	r2, [r2, #0]
 800fb92:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fba2:	fb93 f1f2 	sdiv	r1, r3, r2
 800fba6:	fb02 f201 	mul.w	r2, r2, r1
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	b21a      	sxth	r2, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	3301      	adds	r3, #1
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	b21a      	sxth	r2, r3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	809a      	strh	r2, [r3, #4]
    return TRUE;
 800fbc4:	2301      	movs	r3, #1
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b082      	sub	sp, #8
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ff98 	bl	800fb0e <fifo_is_empty>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <fifo_remove+0x1a>
        return FALSE;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	e025      	b.n	800fc34 <fifo_remove+0x66>
    }

    if (value) {
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	689a      	ldr	r2, [r3, #8]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	441a      	add	r2, r3
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	8812      	ldrh	r2, [r2, #0]
 800fc00:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fc10:	fb93 f1f2 	sdiv	r1, r3, r2
 800fc14:	fb02 f201 	mul.w	r2, r2, r1
 800fc18:	1a9b      	subs	r3, r3, r2
 800fc1a:	b21a      	sxth	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	3b01      	subs	r3, #1
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	b21a      	sxth	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800fc32:	2301      	movs	r3, #1
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7ff ff61 	bl	800fb0e <fifo_is_empty>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <fifo_remove_last+0x1a>
        return FALSE;
 800fc52:	2300      	movs	r3, #0
 800fc54:	e02a      	b.n	800fcac <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fc64:	4413      	add	r3, r2
 800fc66:	3b01      	subs	r3, #1
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fc6e:	fb93 f1f2 	sdiv	r1, r3, r2
 800fc72:	fb02 f201 	mul.w	r2, r2, r1
 800fc76:	1a9b      	subs	r3, r3, r2
 800fc78:	b21a      	sxth	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	801a      	strh	r2, [r3, #0]

    if (value) {
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d009      	beq.n	800fc98 <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	689a      	ldr	r2, [r3, #8]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	441a      	add	r2, r3
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	8812      	ldrh	r2, [r2, #0]
 800fc96:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	3b01      	subs	r3, #1
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	b21a      	sxth	r2, r3
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800fcaa:	2301      	movs	r3, #1
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800fcc8:	2301      	movs	r3, #1
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	370c      	adds	r7, #12
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	460b      	mov	r3, r1
 800fce0:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800fce2:	78fb      	ldrb	r3, [r7, #3]
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f859 	bl	800fd9e <SCPI_RegGet>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	78fb      	ldrb	r3, [r7, #3]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 f88d 	bl	800fe14 <SCPI_RegSet>
}
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 800fd02:	b590      	push	{r4, r7, lr}
 800fd04:	b085      	sub	sp, #20
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	60f8      	str	r0, [r7, #12]
 800fd0a:	4608      	mov	r0, r1
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4603      	mov	r3, r0
 800fd12:	817b      	strh	r3, [r7, #10]
 800fd14:	460b      	mov	r3, r1
 800fd16:	813b      	strh	r3, [r7, #8]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	71fb      	strb	r3, [r7, #7]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 800fd1c:	897b      	ldrh	r3, [r7, #10]
 800fd1e:	43db      	mvns	r3, r3
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	893b      	ldrh	r3, [r7, #8]
 800fd24:	4013      	ands	r3, r2
 800fd26:	b29c      	uxth	r4, r3
 800fd28:	79fb      	ldrb	r3, [r7, #7]
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 f836 	bl	800fd9e <SCPI_RegGet>
 800fd32:	4603      	mov	r3, r0
 800fd34:	4323      	orrs	r3, r4
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f000 f869 	bl	800fe14 <SCPI_RegSet>
}
 800fd42:	bf00      	nop
 800fd44:	3714      	adds	r7, #20
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd90      	pop	{r4, r7, pc}

0800fd4a <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b084      	sub	sp, #16
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	60f8      	str	r0, [r7, #12]
 800fd52:	4608      	mov	r0, r1
 800fd54:	4611      	mov	r1, r2
 800fd56:	461a      	mov	r2, r3
 800fd58:	4603      	mov	r3, r0
 800fd5a:	817b      	strh	r3, [r7, #10]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	727b      	strb	r3, [r7, #9]
 800fd60:	4613      	mov	r3, r2
 800fd62:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 800fd64:	7a7b      	ldrb	r3, [r7, #9]
 800fd66:	4619      	mov	r1, r3
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f000 f818 	bl	800fd9e <SCPI_RegGet>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	461a      	mov	r2, r3
 800fd72:	897b      	ldrh	r3, [r7, #10]
 800fd74:	4013      	ands	r3, r2
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d006      	beq.n	800fd8a <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800fd7c:	88fb      	ldrh	r3, [r7, #6]
 800fd7e:	461a      	mov	r2, r3
 800fd80:	2100      	movs	r1, #0
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f000 f8f0 	bl	800ff68 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 800fd88:	e005      	b.n	800fd96 <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800fd8a:	88fb      	ldrh	r3, [r7, #6]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	2100      	movs	r1, #0
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f000 f904 	bl	800ff9e <SCPI_RegClearBits>
}
 800fd96:	bf00      	nop
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 800fd9e:	b480      	push	{r7}
 800fda0:	b083      	sub	sp, #12
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	460b      	mov	r3, r1
 800fda8:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 800fdaa:	78fb      	ldrb	r3, [r7, #3]
 800fdac:	2b09      	cmp	r3, #9
 800fdae:	d808      	bhi.n	800fdc2 <SCPI_RegGet+0x24>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d005      	beq.n	800fdc2 <SCPI_RegGet+0x24>
        return context->registers[name];
 800fdb6:	78fa      	ldrb	r2, [r7, #3]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	3224      	adds	r2, #36	; 0x24
 800fdbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fdc0:	e000      	b.n	800fdc4 <SCPI_RegGet+0x26>
    } else {
        return 0;
 800fdc2:	2300      	movs	r3, #0
    }
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	70fb      	strb	r3, [r7, #3]
 800fddc:	4613      	mov	r3, r2
 800fdde:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d011      	beq.n	800fe0a <writeControl+0x3a>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00d      	beq.n	800fe0a <writeControl+0x3a>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d008      	beq.n	800fe0a <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	883a      	ldrh	r2, [r7, #0]
 800fe00:	78f9      	ldrb	r1, [r7, #3]
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	4798      	blx	r3
 800fe06:	4603      	mov	r3, r0
 800fe08:	e000      	b.n	800fe0c <writeControl+0x3c>
    } else {
        return 0;
 800fe0a:	2300      	movs	r3, #0
    }
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	70fb      	strb	r3, [r7, #3]
 800fe20:	4613      	mov	r3, r2
 800fe22:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 800fe24:	2300      	movs	r3, #0
 800fe26:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 800fe28:	78fb      	ldrb	r3, [r7, #3]
 800fe2a:	2b09      	cmp	r3, #9
 800fe2c:	f200 8098 	bhi.w	800ff60 <SCPI_RegSet+0x14c>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f000 8094 	beq.w	800ff60 <SCPI_RegSet+0x14c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 800fe38:	78fa      	ldrb	r2, [r7, #3]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	3224      	adds	r2, #36	; 0x24
 800fe3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fe42:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 800fe44:	78fa      	ldrb	r2, [r7, #3]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	3224      	adds	r2, #36	; 0x24
 800fe4a:	8839      	ldrh	r1, [r7, #0]
 800fe4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
 800fe50:	78fb      	ldrb	r3, [r7, #3]
 800fe52:	2b0a      	cmp	r3, #10
 800fe54:	d870      	bhi.n	800ff38 <SCPI_RegSet+0x124>
 800fe56:	a201      	add	r2, pc, #4	; (adr r2, 800fe5c <SCPI_RegSet+0x48>)
 800fe58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5c:	0800fe89 	.word	0x0800fe89
 800fe60:	0800fec9 	.word	0x0800fec9
 800fe64:	0800fed3 	.word	0x0800fed3
 800fe68:	0800fee1 	.word	0x0800fee1
 800fe6c:	0800ff11 	.word	0x0800ff11
 800fe70:	0800ff1f 	.word	0x0800ff1f
 800fe74:	0800ff29 	.word	0x0800ff29
 800fe78:	0800feeb 	.word	0x0800feeb
 800fe7c:	0800fef9 	.word	0x0800fef9
 800fe80:	0800ff03 	.word	0x0800ff03
 800fe84:	0800ff39 	.word	0x0800ff39
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 800fe88:	2101      	movs	r1, #1
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff ff87 	bl	800fd9e <SCPI_RegGet>
 800fe90:	4603      	mov	r3, r0
 800fe92:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 800fe94:	897b      	ldrh	r3, [r7, #10]
 800fe96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe9a:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 800fe9c:	883a      	ldrh	r2, [r7, #0]
 800fe9e:	897b      	ldrh	r3, [r7, #10]
 800fea0:	4013      	ands	r3, r2
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00a      	beq.n	800febe <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 800fea8:	883b      	ldrh	r3, [r7, #0]
 800feaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feae:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 800feb0:	89ba      	ldrh	r2, [r7, #12]
 800feb2:	883b      	ldrh	r3, [r7, #0]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d03e      	beq.n	800ff36 <SCPI_RegSet+0x122>
                    srq = TRUE;
 800feb8:	2301      	movs	r3, #1
 800feba:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 800febc:	e03b      	b.n	800ff36 <SCPI_RegSet+0x122>
                val &= ~STB_SRQ;
 800febe:	883b      	ldrh	r3, [r7, #0]
 800fec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fec4:	803b      	strh	r3, [r7, #0]
            break;
 800fec6:	e036      	b.n	800ff36 <SCPI_RegSet+0x122>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 800fec8:	2100      	movs	r1, #0
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff ff03 	bl	800fcd6 <regUpdate>
            break;
 800fed0:	e032      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 800fed2:	8839      	ldrh	r1, [r7, #0]
 800fed4:	2320      	movs	r3, #32
 800fed6:	2203      	movs	r2, #3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff ff36 	bl	800fd4a <regUpdateSTB>
            break;
 800fede:	e02b      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 800fee0:	2102      	movs	r1, #2
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff fef7 	bl	800fcd6 <regUpdate>
            break;
 800fee8:	e026      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 800feea:	8839      	ldrh	r1, [r7, #0]
 800feec:	2308      	movs	r3, #8
 800feee:	2208      	movs	r2, #8
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f7ff ff2a 	bl	800fd4a <regUpdateSTB>
            break;
 800fef6:	e01f      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 800fef8:	2107      	movs	r1, #7
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f7ff feeb 	bl	800fcd6 <regUpdate>
            break;
 800ff00:	e01a      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 800ff02:	883a      	ldrh	r2, [r7, #0]
 800ff04:	89b9      	ldrh	r1, [r7, #12]
 800ff06:	2307      	movs	r3, #7
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff fefa 	bl	800fd02 <regUpdateEvent>
            break;
 800ff0e:	e013      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800ff10:	8839      	ldrh	r1, [r7, #0]
 800ff12:	2380      	movs	r3, #128	; 0x80
 800ff14:	2205      	movs	r2, #5
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff ff17 	bl	800fd4a <regUpdateSTB>
            break;
 800ff1c:	e00c      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 800ff1e:	2104      	movs	r1, #4
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7ff fed8 	bl	800fcd6 <regUpdate>
            break;
 800ff26:	e007      	b.n	800ff38 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 800ff28:	883a      	ldrh	r2, [r7, #0]
 800ff2a:	89b9      	ldrh	r1, [r7, #12]
 800ff2c:	2304      	movs	r3, #4
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7ff fee7 	bl	800fd02 <regUpdateEvent>
            break;
 800ff34:	e000      	b.n	800ff38 <SCPI_RegSet+0x124>
            break;
 800ff36:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 800ff38:	78fa      	ldrb	r2, [r7, #3]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	3224      	adds	r2, #36	; 0x24
 800ff3e:	8839      	ldrh	r1, [r7, #0]
 800ff40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (srq) {
 800ff44:	7bfb      	ldrb	r3, [r7, #15]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00b      	beq.n	800ff62 <SCPI_RegSet+0x14e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7ff ff26 	bl	800fd9e <SCPI_RegGet>
 800ff52:	4603      	mov	r3, r0
 800ff54:	461a      	mov	r2, r3
 800ff56:	2101      	movs	r1, #1
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ff39 	bl	800fdd0 <writeControl>
 800ff5e:	e000      	b.n	800ff62 <SCPI_RegSet+0x14e>
        return;
 800ff60:	bf00      	nop
    }
}
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	460b      	mov	r3, r1
 800ff72:	70fb      	strb	r3, [r7, #3]
 800ff74:	4613      	mov	r3, r2
 800ff76:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 800ff78:	78fb      	ldrb	r3, [r7, #3]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff ff0e 	bl	800fd9e <SCPI_RegGet>
 800ff82:	4603      	mov	r3, r0
 800ff84:	461a      	mov	r2, r3
 800ff86:	883b      	ldrh	r3, [r7, #0]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	78fb      	ldrb	r3, [r7, #3]
 800ff8e:	4619      	mov	r1, r3
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7ff ff3f 	bl	800fe14 <SCPI_RegSet>
}
 800ff96:	bf00      	nop
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b082      	sub	sp, #8
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	70fb      	strb	r3, [r7, #3]
 800ffaa:	4613      	mov	r3, r2
 800ffac:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 800ffae:	78fb      	ldrb	r3, [r7, #3]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff fef3 	bl	800fd9e <SCPI_RegGet>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	b21a      	sxth	r2, r3
 800ffbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ffc0:	43db      	mvns	r3, r3
 800ffc2:	b21b      	sxth	r3, r3
 800ffc4:	4013      	ands	r3, r2
 800ffc6:	b21b      	sxth	r3, r3
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	78fb      	ldrb	r3, [r7, #3]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7ff ff20 	bl	800fe14 <SCPI_RegSet>
}
 800ffd4:	bf00      	nop
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	2102      	movs	r1, #2
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7ff ff13 	bl	800fe14 <SCPI_RegSet>
}
 800ffee:	bf00      	nop
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f7ff ffec 	bl	800ffdc <SCPI_EventClear>
    SCPI_ErrorClear(context);
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff fb23 	bl	800f650 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 801000a:	2200      	movs	r2, #0
 801000c:	2104      	movs	r1, #4
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff ff00 	bl	800fe14 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8010014:	2200      	movs	r2, #0
 8010016:	2107      	movs	r1, #7
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f7ff fefb 	bl	800fe14 <SCPI_RegSet>
    return SCPI_RES_OK;
 801001e:	2301      	movs	r3, #1
}
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8010030:	f107 030c 	add.w	r3, r7, #12
 8010034:	2201      	movs	r2, #1
 8010036:	4619      	mov	r1, r3
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f001 ffc1 	bl	8011fc0 <SCPI_ParamInt32>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d008      	beq.n	8010056 <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	461a      	mov	r2, r3
 801004a:	2103      	movs	r1, #3
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f7ff fee1 	bl	800fe14 <SCPI_RegSet>
        return SCPI_RES_OK;
 8010052:	2301      	movs	r3, #1
 8010054:	e001      	b.n	801005a <SCPI_CoreEse+0x32>
    }
    return SCPI_RES_ERR;
 8010056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 8010062:	b580      	push	{r7, lr}
 8010064:	b082      	sub	sp, #8
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 801006a:	2103      	movs	r1, #3
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f7ff fe96 	bl	800fd9e <SCPI_RegGet>
 8010072:	4603      	mov	r3, r0
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f001 fcd1 	bl	8011a1e <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801007c:	2301      	movs	r3, #1
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 8010086:	b580      	push	{r7, lr}
 8010088:	b082      	sub	sp, #8
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 801008e:	2102      	movs	r1, #2
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff fe84 	bl	800fd9e <SCPI_RegGet>
 8010096:	4603      	mov	r3, r0
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f001 fcbf 	bl	8011a1e <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 80100a0:	2200      	movs	r2, #0
 80100a2:	2102      	movs	r1, #2
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff feb5 	bl	800fe14 <SCPI_RegSet>
    return SCPI_RES_OK;
 80100aa:	2301      	movs	r3, #1
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 80100b4:	b590      	push	{r4, r7, lr}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 80100bc:	2300      	movs	r3, #0
 80100be:	60fb      	str	r3, [r7, #12]
 80100c0:	e025      	b.n	801010e <SCPI_CoreIdnQ+0x5a>
        if (context->idn[i]) {
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	3320      	adds	r3, #32
 80100c8:	009b      	lsls	r3, r3, #2
 80100ca:	4413      	add	r3, r2
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d015      	beq.n	80100fe <SCPI_CoreIdnQ+0x4a>
            SCPI_ResultMnemonic(context, context->idn[i]);
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	3320      	adds	r3, #32
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	4413      	add	r3, r2
 80100dc:	685c      	ldr	r4, [r3, #4]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	3320      	adds	r3, #32
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4413      	add	r3, r2
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7f0 f8b2 	bl	8000254 <strlen>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
 80100f4:	4621      	mov	r1, r4
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f001 fc08 	bl	801190c <SCPI_ResultCharacters>
 80100fc:	e004      	b.n	8010108 <SCPI_CoreIdnQ+0x54>
        } else {
            SCPI_ResultMnemonic(context, "0");
 80100fe:	2201      	movs	r2, #1
 8010100:	4907      	ldr	r1, [pc, #28]	; (8010120 <SCPI_CoreIdnQ+0x6c>)
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f001 fc02 	bl	801190c <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	3301      	adds	r3, #1
 801010c:	60fb      	str	r3, [r7, #12]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2b03      	cmp	r3, #3
 8010112:	ddd6      	ble.n	80100c2 <SCPI_CoreIdnQ+0xe>
        }
    }
    return SCPI_RES_OK;
 8010114:	2301      	movs	r3, #1
}
 8010116:	4618      	mov	r0, r3
 8010118:	3714      	adds	r7, #20
 801011a:	46bd      	mov	sp, r7
 801011c:	bd90      	pop	{r4, r7, pc}
 801011e:	bf00      	nop
 8010120:	08017004 	.word	0x08017004

08010124 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 801012c:	2201      	movs	r2, #1
 801012e:	2102      	movs	r1, #2
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff ff19 	bl	800ff68 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 8010136:	2301      	movs	r3, #1
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 8010148:	2101      	movs	r1, #1
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f001 fc67 	bl	8011a1e <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8010150:	2301      	movs	r3, #1
}
 8010152:	4618      	mov	r0, r3
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->reset) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00f      	beq.n	8010188 <SCPI_CoreRst+0x2e>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00b      	beq.n	8010188 <SCPI_CoreRst+0x2e>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d006      	beq.n	8010188 <SCPI_CoreRst+0x2e>
        return context->interface->reset(context);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	4798      	blx	r3
 8010184:	4603      	mov	r3, r0
 8010186:	e000      	b.n	801018a <SCPI_CoreRst+0x30>
    }
    return SCPI_RES_OK;
 8010188:	2301      	movs	r3, #1
}
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 801019a:	f107 030c 	add.w	r3, r7, #12
 801019e:	2201      	movs	r2, #1
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f001 ff0c 	bl	8011fc0 <SCPI_ParamInt32>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d008      	beq.n	80101c0 <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	461a      	mov	r2, r3
 80101b4:	2101      	movs	r1, #1
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7ff fe2c 	bl	800fe14 <SCPI_RegSet>
        return SCPI_RES_OK;
 80101bc:	2301      	movs	r3, #1
 80101be:	e001      	b.n	80101c4 <SCPI_CoreSre+0x32>
    }
    return SCPI_RES_ERR;
 80101c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 80101d4:	2101      	movs	r1, #1
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7ff fde1 	bl	800fd9e <SCPI_RegGet>
 80101dc:	4603      	mov	r3, r0
 80101de:	4619      	mov	r1, r3
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f001 fc1c 	bl	8011a1e <SCPI_ResultInt32>
    return SCPI_RES_OK;
 80101e6:	2301      	movs	r3, #1
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 80101f8:	2100      	movs	r1, #0
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff fdcf 	bl	800fd9e <SCPI_RegGet>
 8010200:	4603      	mov	r3, r0
 8010202:	4619      	mov	r1, r3
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f001 fc0a 	bl	8011a1e <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801020a:	2301      	movs	r3, #1
}
 801020c:	4618      	mov	r0, r3
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 801021c:	2301      	movs	r3, #1
}
 801021e:	4618      	mov	r0, r3
 8010220:	370c      	adds	r7, #12
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 801022a:	b480      	push	{r7}
 801022c:	b083      	sub	sp, #12
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b20      	cmp	r3, #32
 8010236:	d002      	beq.n	801023e <isws+0x14>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b09      	cmp	r3, #9
 801023c:	d101      	bne.n	8010242 <isws+0x18>
        return 1;
 801023e:	2301      	movs	r3, #1
 8010240:	e000      	b.n	8010244 <isws+0x1a>
    }
    return 0;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	370c      	adds	r7, #12
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr

08010250 <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2b30      	cmp	r3, #48	; 0x30
 801025c:	d002      	beq.n	8010264 <isbdigit+0x14>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2b31      	cmp	r3, #49	; 0x31
 8010262:	d101      	bne.n	8010268 <isbdigit+0x18>
        return 1;
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <isbdigit+0x1a>
    }
    return 0;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	370c      	adds	r7, #12
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr

08010276 <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 8010276:	b480      	push	{r7}
 8010278:	b083      	sub	sp, #12
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2b30      	cmp	r3, #48	; 0x30
 8010282:	d014      	beq.n	80102ae <isqdigit+0x38>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b31      	cmp	r3, #49	; 0x31
 8010288:	d011      	beq.n	80102ae <isqdigit+0x38>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2b32      	cmp	r3, #50	; 0x32
 801028e:	d00e      	beq.n	80102ae <isqdigit+0x38>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b33      	cmp	r3, #51	; 0x33
 8010294:	d00b      	beq.n	80102ae <isqdigit+0x38>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b34      	cmp	r3, #52	; 0x34
 801029a:	d008      	beq.n	80102ae <isqdigit+0x38>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b35      	cmp	r3, #53	; 0x35
 80102a0:	d005      	beq.n	80102ae <isqdigit+0x38>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b36      	cmp	r3, #54	; 0x36
 80102a6:	d002      	beq.n	80102ae <isqdigit+0x38>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b37      	cmp	r3, #55	; 0x37
 80102ac:	d101      	bne.n	80102b2 <isqdigit+0x3c>
        return 1;
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <isqdigit+0x3e>
    }
    return 0;
 80102b2:	2300      	movs	r3, #0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	6892      	ldr	r2, [r2, #8]
 80102d0:	441a      	add	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d801      	bhi.n	80102de <iseos+0x1e>
        return 1;
 80102da:	2301      	movs	r3, #1
 80102dc:	e000      	b.n	80102e0 <iseos+0x20>
    } else {
        return 0;
 80102de:	2300      	movs	r3, #0
    }
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
    return iseos(state);
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7ff ffe3 	bl	80102c0 <iseos>
 80102fa:	4603      	mov	r3, r0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	460b      	mov	r3, r1
 801030e:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	78fa      	ldrb	r2, [r7, #3]
 8010318:	429a      	cmp	r2, r3
 801031a:	bf0c      	ite	eq
 801031c:	2301      	moveq	r3, #1
 801031e:	2300      	movne	r3, #0
 8010320:	b2db      	uxtb	r3, r3
}
 8010322:	4618      	mov	r0, r3
 8010324:	370c      	adds	r7, #12
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr

0801032e <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b2b      	cmp	r3, #43	; 0x2b
 801033a:	d002      	beq.n	8010342 <isplusmn+0x14>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b2d      	cmp	r3, #45	; 0x2d
 8010340:	d101      	bne.n	8010346 <isplusmn+0x18>
 8010342:	2301      	movs	r3, #1
 8010344:	e000      	b.n	8010348 <isplusmn+0x1a>
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2b68      	cmp	r3, #104	; 0x68
 8010360:	d002      	beq.n	8010368 <isH+0x14>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b48      	cmp	r3, #72	; 0x48
 8010366:	d101      	bne.n	801036c <isH+0x18>
 8010368:	2301      	movs	r3, #1
 801036a:	e000      	b.n	801036e <isH+0x1a>
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	370c      	adds	r7, #12
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr

0801037a <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 801037a:	b480      	push	{r7}
 801037c:	b083      	sub	sp, #12
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b62      	cmp	r3, #98	; 0x62
 8010386:	d002      	beq.n	801038e <isB+0x14>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b42      	cmp	r3, #66	; 0x42
 801038c:	d101      	bne.n	8010392 <isB+0x18>
 801038e:	2301      	movs	r3, #1
 8010390:	e000      	b.n	8010394 <isB+0x1a>
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	370c      	adds	r7, #12
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b71      	cmp	r3, #113	; 0x71
 80103ac:	d002      	beq.n	80103b4 <isQ+0x14>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2b51      	cmp	r3, #81	; 0x51
 80103b2:	d101      	bne.n	80103b8 <isQ+0x18>
 80103b4:	2301      	movs	r3, #1
 80103b6:	e000      	b.n	80103ba <isQ+0x1a>
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	370c      	adds	r7, #12
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr

080103c6 <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 80103c6:	b480      	push	{r7}
 80103c8:	b083      	sub	sp, #12
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b65      	cmp	r3, #101	; 0x65
 80103d2:	d002      	beq.n	80103da <isE+0x14>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2b45      	cmp	r3, #69	; 0x45
 80103d8:	d101      	bne.n	80103de <isE+0x18>
 80103da:	2301      	movs	r3, #1
 80103dc:	e000      	b.n	80103e0 <isE+0x1a>
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 80103f8:	e007      	b.n	801040a <skipWs+0x1e>
        state->pos++;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	605a      	str	r2, [r3, #4]
        someSpace++;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	3301      	adds	r3, #1
 8010408:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff ff58 	bl	80102c0 <iseos>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d108      	bne.n	8010428 <skipWs+0x3c>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff ff04 	bl	801022a <isws>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1e8      	bne.n	80103fa <skipWs+0xe>
    }

    return someSpace;
 8010428:	68fb      	ldr	r3, [r7, #12]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 8010432:	b580      	push	{r7, lr}
 8010434:	b082      	sub	sp, #8
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f7ff ff40 	bl	80102c0 <iseos>
 8010440:	4603      	mov	r3, r0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d113      	bne.n	801046e <skipDigit+0x3c>
 8010446:	f002 fd1b 	bl	8012e80 <__locale_ctype_ptr>
 801044a:	4602      	mov	r2, r0
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	3301      	adds	r3, #1
 8010454:	4413      	add	r3, r2
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0304 	and.w	r3, r3, #4
 801045c:	2b00      	cmp	r3, #0
 801045e:	d006      	beq.n	801046e <skipDigit+0x3c>
        state->pos++;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	1c5a      	adds	r2, r3, #1
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 801046a:	2301      	movs	r3, #1
 801046c:	e000      	b.n	8010470 <skipDigit+0x3e>
    } else {
        return SKIP_NONE;
 801046e:	2300      	movs	r3, #0
    }
}
 8010470:	4618      	mov	r0, r3
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8010480:	2300      	movs	r3, #0
 8010482:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8010484:	e007      	b.n	8010496 <skipNumbers+0x1e>
        state->pos++;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	1c5a      	adds	r2, r3, #1
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	3301      	adds	r3, #1
 8010494:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7ff ff12 	bl	80102c0 <iseos>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d10c      	bne.n	80104bc <skipNumbers+0x44>
 80104a2:	f002 fced 	bl	8012e80 <__locale_ctype_ptr>
 80104a6:	4602      	mov	r2, r0
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	3301      	adds	r3, #1
 80104b0:	4413      	add	r3, r2
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	f003 0304 	and.w	r3, r3, #4
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1e4      	bne.n	8010486 <skipNumbers+0xe>
    }
    return someNumbers;
 80104bc:	68fb      	ldr	r3, [r7, #12]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b082      	sub	sp, #8
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff fef6 	bl	80102c0 <iseos>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d10f      	bne.n	80104fa <skipPlusmn+0x34>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7ff ff24 	bl	801032e <isplusmn>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d006      	beq.n	80104fa <skipPlusmn+0x34>
        state->pos++;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	1c5a      	adds	r2, r3, #1
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e000      	b.n	80104fc <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 80104fa:	2300      	movs	r3, #0
    }
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 801050c:	2300      	movs	r3, #0
 801050e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8010510:	e007      	b.n	8010522 <skipAlpha+0x1e>
        state->pos++;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	1c5a      	adds	r2, r3, #1
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	605a      	str	r2, [r3, #4]
        someLetters++;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	3301      	adds	r3, #1
 8010520:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f7ff fecc 	bl	80102c0 <iseos>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d10c      	bne.n	8010548 <skipAlpha+0x44>
 801052e:	f002 fca7 	bl	8012e80 <__locale_ctype_ptr>
 8010532:	4602      	mov	r2, r0
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	3301      	adds	r3, #1
 801053c:	4413      	add	r3, r2
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	f003 0303 	and.w	r3, r3, #3
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1e4      	bne.n	8010512 <skipAlpha+0xe>
    }
    return someLetters;
 8010548:	68fb      	ldr	r3, [r7, #12]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 8010552:	b580      	push	{r7, lr}
 8010554:	b082      	sub	sp, #8
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	460b      	mov	r3, r1
 801055c:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7ff feae 	bl	80102c0 <iseos>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10e      	bne.n	8010588 <skipChr+0x36>
 801056a:	78fb      	ldrb	r3, [r7, #3]
 801056c:	4619      	mov	r1, r3
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f7ff fec8 	bl	8010304 <ischr>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d006      	beq.n	8010588 <skipChr+0x36>
        state->pos++;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	1c5a      	adds	r2, r3, #1
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8010584:	2301      	movs	r3, #1
 8010586:	e000      	b.n	801058a <skipChr+0x38>
    } else {
        return SKIP_NONE;
 8010588:	2300      	movs	r3, #0
    }
}
 801058a:	4618      	mov	r0, r3
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 8010592:	b590      	push	{r4, r7, lr}
 8010594:	b083      	sub	sp, #12
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7ff fe90 	bl	80102c0 <iseos>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d113      	bne.n	80105ce <skipSlashDot+0x3c>
 80105a6:	212f      	movs	r1, #47	; 0x2f
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff feab 	bl	8010304 <ischr>
 80105ae:	4604      	mov	r4, r0
 80105b0:	212e      	movs	r1, #46	; 0x2e
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f7ff fea6 	bl	8010304 <ischr>
 80105b8:	4603      	mov	r3, r0
 80105ba:	4323      	orrs	r3, r4
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d006      	beq.n	80105ce <skipSlashDot+0x3c>
        state->pos++;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 80105ce:	2300      	movs	r3, #0
    }
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd90      	pop	{r4, r7, pc}

080105d8 <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff fe6d 	bl	80102c0 <iseos>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10d      	bne.n	8010608 <skipStar+0x30>
 80105ec:	212a      	movs	r1, #42	; 0x2a
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7ff fe88 	bl	8010304 <ischr>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d006      	beq.n	8010608 <skipStar+0x30>
        state->pos++;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8010604:	2301      	movs	r3, #1
 8010606:	e000      	b.n	801060a <skipStar+0x32>
    } else {
        return SKIP_NONE;
 8010608:	2300      	movs	r3, #0
    }
}
 801060a:	4618      	mov	r0, r3
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 8010612:	b580      	push	{r7, lr}
 8010614:	b082      	sub	sp, #8
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff fe50 	bl	80102c0 <iseos>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d10d      	bne.n	8010642 <skipColon+0x30>
 8010626:	213a      	movs	r1, #58	; 0x3a
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff fe6b 	bl	8010304 <ischr>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <skipColon+0x30>
        state->pos++;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 801063e:	2301      	movs	r3, #1
 8010640:	e000      	b.n	8010644 <skipColon+0x32>
    } else {
        return SKIP_NONE;
 8010642:	2300      	movs	r3, #0
    }
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7ff fe30 	bl	80102c0 <iseos>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d131      	bne.n	80106ca <skipProgramMnemonic+0x7e>
 8010666:	f002 fc0b 	bl	8012e80 <__locale_ctype_ptr>
 801066a:	4602      	mov	r2, r0
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	4413      	add	r3, r2
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	f003 0303 	and.w	r3, r3, #3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d024      	beq.n	80106ca <skipProgramMnemonic+0x7e>
        state->pos++;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	1c5a      	adds	r2, r3, #1
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 801068a:	e004      	b.n	8010696 <skipProgramMnemonic+0x4a>
            state->pos++;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	1c5a      	adds	r2, r3, #1
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7ff fe12 	bl	80102c0 <iseos>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d113      	bne.n	80106ca <skipProgramMnemonic+0x7e>
 80106a2:	f002 fbed 	bl	8012e80 <__locale_ctype_ptr>
 80106a6:	4602      	mov	r2, r0
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	3301      	adds	r3, #1
 80106b0:	4413      	add	r3, r2
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	f003 0307 	and.w	r3, r3, #7
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1e7      	bne.n	801068c <skipProgramMnemonic+0x40>
 80106bc:	215f      	movs	r1, #95	; 0x5f
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f7ff fe20 	bl	8010304 <ischr>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d1e0      	bne.n	801068c <skipProgramMnemonic+0x40>
        }
    }

    if (iseos(state)) {
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7ff fdf8 	bl	80102c0 <iseos>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d004      	beq.n	80106e0 <skipProgramMnemonic+0x94>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	6852      	ldr	r2, [r2, #4]
 80106dc:	1a9b      	subs	r3, r3, r2
 80106de:	e004      	b.n	80106ea <skipProgramMnemonic+0x9e>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	461a      	mov	r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	1ad3      	subs	r3, r2, r3
    }
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b082      	sub	sp, #8
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	605a      	str	r2, [r3, #4]

    skipWs(state);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff fe71 	bl	80103ec <skipWs>

    token->len = state->pos - token->ptr;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	461a      	mov	r2, r3
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	1ad2      	subs	r2, r2, r3
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	2b00      	cmp	r3, #0
 8010720:	dd03      	ble.n	801072a <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2217      	movs	r2, #23
 8010726:	701a      	strb	r2, [r3, #0]
 8010728:	e002      	b.n	8010730 <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	221a      	movs	r2, #26
 801072e:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	689b      	ldr	r3, [r3, #8]
}
 8010734:	4618      	mov	r0, r3
 8010736:	3708      	adds	r7, #8
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff ff47 	bl	80105d8 <skipStar>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01c      	beq.n	801078a <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f7ff ff7b 	bl	801064c <skipProgramMnemonic>
 8010756:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d108      	bne.n	8010770 <skipCommonProgramHeader+0x34>
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7ff fdae 	bl	80102c0 <iseos>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d002      	beq.n	8010770 <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 801076a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801076e:	e00d      	b.n	801078c <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b00      	cmp	r3, #0
 8010774:	da01      	bge.n	801077a <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 8010776:	2301      	movs	r3, #1
 8010778:	e008      	b.n	801078c <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	dd01      	ble.n	8010784 <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 8010780:	2301      	movs	r3, #1
 8010782:	e003      	b.n	801078c <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 8010784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010788:	e000      	b.n	801078c <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff ff38 	bl	8010612 <skipColon>
 80107a2:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7ff ff51 	bl	801064c <skipProgramMnemonic>
 80107aa:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	dd17      	ble.n	80107e2 <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 80107b2:	e00e      	b.n	80107d2 <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff ff49 	bl	801064c <skipProgramMnemonic>
 80107ba:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	da01      	bge.n	80107c6 <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 80107c2:	2301      	movs	r3, #1
 80107c4:	e019      	b.n	80107fa <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d102      	bne.n	80107d2 <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 80107cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107d0:	e013      	b.n	80107fa <skipCompoundProgramHeader+0x66>
        while (skipColon(state)) {
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff ff1d 	bl	8010612 <skipColon>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1ea      	bne.n	80107b4 <skipCompoundProgramHeader+0x20>
            }
        }
        return SKIP_OK;
 80107de:	2301      	movs	r3, #1
 80107e0:	e00b      	b.n	80107fa <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	da01      	bge.n	80107ec <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 80107e8:	2301      	movs	r3, #1
 80107ea:	e006      	b.n	80107fa <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d002      	beq.n	80107f8 <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 80107f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107f6:	e000      	b.n	80107fa <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 80107f8:	2300      	movs	r3, #0
    }
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	685a      	ldr	r2, [r3, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	221a      	movs	r2, #26
 8010818:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7ff ff8e 	bl	801073c <skipCommonProgramHeader>
 8010820:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2b00      	cmp	r3, #0
 8010826:	dd0e      	ble.n	8010846 <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 8010828:	213f      	movs	r1, #63	; 0x3f
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7ff fe91 	bl	8010552 <skipChr>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	dd03      	ble.n	801083e <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	2216      	movs	r2, #22
 801083a:	701a      	strb	r2, [r3, #0]
 801083c:	e029      	b.n	8010892 <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2213      	movs	r2, #19
 8010842:	701a      	strb	r2, [r3, #0]
 8010844:	e025      	b.n	8010892 <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2b00      	cmp	r3, #0
 801084a:	da03      	bge.n	8010854 <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2214      	movs	r2, #20
 8010850:	701a      	strb	r2, [r3, #0]
 8010852:	e01e      	b.n	8010892 <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d11b      	bne.n	8010892 <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff ff9a 	bl	8010794 <skipCompoundProgramHeader>
 8010860:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd0e      	ble.n	8010886 <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 8010868:	213f      	movs	r1, #63	; 0x3f
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7ff fe71 	bl	8010552 <skipChr>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	dd03      	ble.n	801087e <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	2215      	movs	r2, #21
 801087a:	701a      	strb	r2, [r3, #0]
 801087c:	e009      	b.n	8010892 <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	2211      	movs	r2, #17
 8010882:	701a      	strb	r2, [r3, #0]
 8010884:	e005      	b.n	8010892 <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	da02      	bge.n	8010892 <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2212      	movs	r2, #18
 8010890:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	2b1a      	cmp	r3, #26
 8010898:	d008      	beq.n	80108ac <scpiLex_ProgramHeader+0xaa>
        token->len = state->pos - token->ptr;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	461a      	mov	r2, r3
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	1ad2      	subs	r2, r2, r3
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	609a      	str	r2, [r3, #8]
 80108aa:	e006      	b.n	80108ba <scpiLex_ProgramHeader+0xb8>
    } else {
        token->len = 0;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	2200      	movs	r2, #0
 80108b0:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	685a      	ldr	r2, [r3, #4]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	689b      	ldr	r3, [r3, #8]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b082      	sub	sp, #8
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	685a      	ldr	r2, [r3, #4]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f7ff fcf1 	bl	80102c0 <iseos>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d131      	bne.n	8010948 <scpiLex_CharacterProgramData+0x82>
 80108e4:	f002 facc 	bl	8012e80 <__locale_ctype_ptr>
 80108e8:	4602      	mov	r2, r0
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	3301      	adds	r3, #1
 80108f2:	4413      	add	r3, r2
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	f003 0303 	and.w	r3, r3, #3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d024      	beq.n	8010948 <scpiLex_CharacterProgramData+0x82>
        state->pos++;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	1c5a      	adds	r2, r3, #1
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8010908:	e004      	b.n	8010914 <scpiLex_CharacterProgramData+0x4e>
            state->pos++;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	1c5a      	adds	r2, r3, #1
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff fcd3 	bl	80102c0 <iseos>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d113      	bne.n	8010948 <scpiLex_CharacterProgramData+0x82>
 8010920:	f002 faae 	bl	8012e80 <__locale_ctype_ptr>
 8010924:	4602      	mov	r2, r0
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	3301      	adds	r3, #1
 801092e:	4413      	add	r3, r2
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	f003 0307 	and.w	r3, r3, #7
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1e7      	bne.n	801090a <scpiLex_CharacterProgramData+0x44>
 801093a:	215f      	movs	r1, #95	; 0x5f
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7ff fce1 	bl	8010304 <ischr>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1e0      	bne.n	801090a <scpiLex_CharacterProgramData+0x44>
        }
    }

    token->len = state->pos - token->ptr;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	461a      	mov	r2, r3
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	1ad2      	subs	r2, r2, r3
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	2b00      	cmp	r3, #0
 801095e:	dd03      	ble.n	8010968 <scpiLex_CharacterProgramData+0xa2>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2209      	movs	r2, #9
 8010964:	701a      	strb	r2, [r3, #0]
 8010966:	e002      	b.n	801096e <scpiLex_CharacterProgramData+0xa8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	221a      	movs	r2, #26
 801096c:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	689b      	ldr	r3, [r3, #8]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 801097a:	b580      	push	{r7, lr}
 801097c:	b084      	sub	sp, #16
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7ff fd9d 	bl	80104c6 <skipPlusmn>

    someNumbers += skipNumbers(state);
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7ff fd73 	bl	8010478 <skipNumbers>
 8010992:	4602      	mov	r2, r0
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	4413      	add	r3, r2
 8010998:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 801099a:	212e      	movs	r1, #46	; 0x2e
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff fdd8 	bl	8010552 <skipChr>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d006      	beq.n	80109b6 <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff fd65 	bl	8010478 <skipNumbers>
 80109ae:	4602      	mov	r2, r0
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	4413      	add	r3, r2
 80109b4:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 80109b6:	68fb      	ldr	r3, [r7, #12]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <skipExponent>:

static int skipExponent(lex_state_t * state) {
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff fc77 	bl	80102c0 <iseos>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d117      	bne.n	8010a08 <skipExponent+0x48>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff fcf1 	bl	80103c6 <isE>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00e      	beq.n	8010a08 <skipExponent+0x48>
        state->pos++;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	605a      	str	r2, [r3, #4]

        skipWs(state);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff fcf9 	bl	80103ec <skipWs>

        skipPlusmn(state);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f7ff fd63 	bl	80104c6 <skipPlusmn>

        someNumbers = skipNumbers(state);
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7ff fd39 	bl	8010478 <skipNumbers>
 8010a06:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 8010a08:	68fb      	ldr	r3, [r7, #12]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7ff ffa8 	bl	801097a <skipMantisa>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00f      	beq.n	8010a50 <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7ff fcd8 	bl	80103ec <skipWs>
        if (!skipExponent(state)) {
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7ff ffbf 	bl	80109c0 <skipExponent>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d107      	bne.n	8010a58 <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	605a      	str	r2, [r3, #4]
 8010a4e:	e003      	b.n	8010a58 <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	685a      	ldr	r2, [r3, #4]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	1ad2      	subs	r2, r2, r3
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	dd03      	ble.n	8010a78 <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	220a      	movs	r2, #10
 8010a74:	701a      	strb	r2, [r3, #0]
 8010a76:	e002      	b.n	8010a7e <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	221a      	movs	r2, #26
 8010a7c:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	689b      	ldr	r3, [r3, #8]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b082      	sub	sp, #8
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	685a      	ldr	r2, [r3, #4]
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 8010a9c:	212f      	movs	r1, #47	; 0x2f
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7ff fd57 	bl	8010552 <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f7ff fd2d 	bl	8010504 <skipAlpha>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d017      	beq.n	8010ae0 <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 8010ab0:	212d      	movs	r1, #45	; 0x2d
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff fd4d 	bl	8010552 <skipChr>
        skipDigit(state);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff fcba 	bl	8010432 <skipDigit>

        while (skipSlashDot(state)) {
 8010abe:	e009      	b.n	8010ad4 <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7ff fd1f 	bl	8010504 <skipAlpha>
            skipChr(state, '-');
 8010ac6:	212d      	movs	r1, #45	; 0x2d
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7ff fd42 	bl	8010552 <skipChr>
            skipDigit(state);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7ff fcaf 	bl	8010432 <skipDigit>
        while (skipSlashDot(state)) {
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fd5c 	bl	8010592 <skipSlashDot>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d1ef      	bne.n	8010ac0 <scpiLex_SuffixProgramData+0x36>
        }
    }

    token->len = state->pos - token->ptr;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	1ad2      	subs	r2, r2, r3
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	dd03      	ble.n	8010b00 <scpiLex_SuffixProgramData+0x76>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	220c      	movs	r2, #12
 8010afc:	701a      	strb	r2, [r3, #0]
 8010afe:	e009      	b.n	8010b14 <scpiLex_SuffixProgramData+0x8a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	221a      	movs	r2, #26
 8010b04:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	685a      	ldr	r2, [r3, #4]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	2200      	movs	r2, #0
 8010b12:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	689b      	ldr	r3, [r3, #8]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8010b2c:	e007      	b.n	8010b3e <skipHexNum+0x1e>
        state->pos++;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	1c5a      	adds	r2, r3, #1
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7ff fbbe 	bl	80102c0 <iseos>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10c      	bne.n	8010b64 <skipHexNum+0x44>
 8010b4a:	f002 f999 	bl	8012e80 <__locale_ctype_ptr>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	3301      	adds	r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d1e4      	bne.n	8010b2e <skipHexNum+0xe>
    }
    return someNumbers;
 8010b64:	68fb      	ldr	r3, [r7, #12]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b084      	sub	sp, #16
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8010b7a:	e007      	b.n	8010b8c <skipOctNum+0x1e>
        state->pos++;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	1c5a      	adds	r2, r3, #1
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f7ff fb97 	bl	80102c0 <iseos>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d108      	bne.n	8010baa <skipOctNum+0x3c>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7ff fb69 	bl	8010276 <isqdigit>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1e8      	bne.n	8010b7c <skipOctNum+0xe>
    }
    return someNumbers;
 8010baa:	68fb      	ldr	r3, [r7, #12]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3710      	adds	r7, #16
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 8010bc0:	e007      	b.n	8010bd2 <skipBinNum+0x1e>
        state->pos++;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	1c5a      	adds	r2, r3, #1
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff fb74 	bl	80102c0 <iseos>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d108      	bne.n	8010bf0 <skipBinNum+0x3c>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7ff fb33 	bl	8010250 <isbdigit>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d1e8      	bne.n	8010bc2 <skipBinNum+0xe>
    }
    return someNumbers;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b084      	sub	sp, #16
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	685a      	ldr	r2, [r3, #4]
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 8010c10:	2123      	movs	r1, #35	; 0x23
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff fc9d 	bl	8010552 <skipChr>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d046      	beq.n	8010cac <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7ff fb4e 	bl	80102c0 <iseos>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d140      	bne.n	8010cac <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff fb8f 	bl	8010354 <isH>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00c      	beq.n	8010c56 <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	1c5a      	adds	r2, r3, #1
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff ff6a 	bl	8010b20 <skipHexNum>
 8010c4c:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	2206      	movs	r2, #6
 8010c52:	701a      	strb	r2, [r3, #0]
 8010c54:	e02a      	b.n	8010cac <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fb9f 	bl	80103a0 <isQ>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d00c      	beq.n	8010c82 <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	1c5a      	adds	r2, r3, #1
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7ff ff7b 	bl	8010b6e <skipOctNum>
 8010c78:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	2207      	movs	r2, #7
 8010c7e:	701a      	strb	r2, [r3, #0]
 8010c80:	e014      	b.n	8010cac <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff fb76 	bl	801037a <isB>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00b      	beq.n	8010cac <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7ff ff88 	bl	8010bb4 <skipBinNum>
 8010ca4:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	2208      	movs	r2, #8
 8010caa:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00d      	beq.n	8010cce <scpiLex_NondecimalNumericData+0xd4>
        token->ptr += 2; /* ignore number prefix */
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	1c9a      	adds	r2, r3, #2
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	1ad2      	subs	r2, r2, r3
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	609a      	str	r2, [r3, #8]
 8010ccc:	e009      	b.n	8010ce2 <scpiLex_NondecimalNumericData+0xe8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	221a      	movs	r2, #26
 8010cd2:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	685a      	ldr	r2, [r3, #4]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	dd03      	ble.n	8010cf2 <scpiLex_NondecimalNumericData+0xf8>
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	689b      	ldr	r3, [r3, #8]
 8010cee:	3302      	adds	r3, #2
 8010cf0:	e000      	b.n	8010cf4 <scpiLex_NondecimalNumericData+0xfa>
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3710      	adds	r7, #16
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	db04      	blt.n	8010d14 <isascii7bit+0x18>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8010d0e:	dc01      	bgt.n	8010d14 <isascii7bit+0x18>
 8010d10:	2301      	movs	r3, #1
 8010d12:	e000      	b.n	8010d16 <isascii7bit+0x1a>
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	370c      	adds	r7, #12
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr

08010d22 <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 8010d2e:	e03d      	b.n	8010dac <skipQuoteProgramData+0x8a>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7ff ffe0 	bl	8010cfc <isascii7bit>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00d      	beq.n	8010d5e <skipQuoteProgramData+0x3c>
 8010d42:	78fb      	ldrb	r3, [r7, #3]
 8010d44:	4619      	mov	r1, r3
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff fadc 	bl	8010304 <ischr>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d105      	bne.n	8010d5e <skipQuoteProgramData+0x3c>
            state->pos++;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	1c5a      	adds	r2, r3, #1
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	605a      	str	r2, [r3, #4]
 8010d5c:	e026      	b.n	8010dac <skipQuoteProgramData+0x8a>
        } else if (ischr(state, quote)) {
 8010d5e:	78fb      	ldrb	r3, [r7, #3]
 8010d60:	4619      	mov	r1, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7ff face 	bl	8010304 <ischr>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d025      	beq.n	8010dba <skipQuoteProgramData+0x98>
            state->pos++;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	1c5a      	adds	r2, r3, #1
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7ff faa1 	bl	80102c0 <iseos>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d10d      	bne.n	8010da0 <skipQuoteProgramData+0x7e>
 8010d84:	78fb      	ldrb	r3, [r7, #3]
 8010d86:	4619      	mov	r1, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f7ff fabb 	bl	8010304 <ischr>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d005      	beq.n	8010da0 <skipQuoteProgramData+0x7e>
                state->pos++;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	1c5a      	adds	r2, r3, #1
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	605a      	str	r2, [r3, #4]
 8010d9e:	e005      	b.n	8010dac <skipQuoteProgramData+0x8a>
            } else {
                state->pos--;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	1e5a      	subs	r2, r3, #1
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	605a      	str	r2, [r3, #4]
                break;
 8010daa:	e007      	b.n	8010dbc <skipQuoteProgramData+0x9a>
    while (!iseos(state)) {
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7ff fa87 	bl	80102c0 <iseos>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d0bb      	beq.n	8010d30 <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 8010db8:	e000      	b.n	8010dbc <skipQuoteProgramData+0x9a>
            break;
 8010dba:	bf00      	nop
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 8010dcc:	2122      	movs	r1, #34	; 0x22
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f7ff ffa7 	bl	8010d22 <skipQuoteProgramData>
}
 8010dd4:	bf00      	nop
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 8010de4:	2127      	movs	r1, #39	; 0x27
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f7ff ff9b 	bl	8010d22 <skipQuoteProgramData>
}
 8010dec:	bf00      	nop
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	685a      	ldr	r2, [r3, #4]
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7ff fa5a 	bl	80102c0 <iseos>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d162      	bne.n	8010ed8 <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 8010e12:	2122      	movs	r1, #34	; 0x22
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff fa75 	bl	8010304 <ischr>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d02a      	beq.n	8010e76 <scpiLex_StringProgramData+0x82>
            state->pos++;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	1c5a      	adds	r2, r3, #1
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	220f      	movs	r2, #15
 8010e2e:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7ff ffc7 	bl	8010dc4 <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7ff fa42 	bl	80102c0 <iseos>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d114      	bne.n	8010e6c <scpiLex_StringProgramData+0x78>
 8010e42:	2122      	movs	r1, #34	; 0x22
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7ff fa5d 	bl	8010304 <ischr>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00d      	beq.n	8010e6c <scpiLex_StringProgramData+0x78>
                state->pos++;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	1c5a      	adds	r2, r3, #1
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	1ad2      	subs	r2, r2, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	609a      	str	r2, [r3, #8]
 8010e6a:	e035      	b.n	8010ed8 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	685a      	ldr	r2, [r3, #4]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	605a      	str	r2, [r3, #4]
 8010e74:	e030      	b.n	8010ed8 <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 8010e76:	2127      	movs	r1, #39	; 0x27
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f7ff fa43 	bl	8010304 <ischr>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d029      	beq.n	8010ed8 <scpiLex_StringProgramData+0xe4>
            state->pos++;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	1c5a      	adds	r2, r3, #1
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	220e      	movs	r2, #14
 8010e92:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7ff ffa1 	bl	8010ddc <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f7ff fa10 	bl	80102c0 <iseos>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d114      	bne.n	8010ed0 <scpiLex_StringProgramData+0xdc>
 8010ea6:	2127      	movs	r1, #39	; 0x27
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7ff fa2b 	bl	8010304 <ischr>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d00d      	beq.n	8010ed0 <scpiLex_StringProgramData+0xdc>
                state->pos++;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	1ad2      	subs	r2, r2, r3
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	609a      	str	r2, [r3, #8]
 8010ece:	e003      	b.n	8010ed8 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	685a      	ldr	r2, [r3, #4]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	461a      	mov	r2, r3
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	1ad2      	subs	r2, r2, r3
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	689b      	ldr	r3, [r3, #8]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	dc09      	bgt.n	8010f04 <scpiLex_StringProgramData+0x110>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	221a      	movs	r2, #26
 8010ef4:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	685a      	ldr	r2, [r3, #4]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	2200      	movs	r2, #0
 8010f02:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 8010f1c:	f001 ffb0 	bl	8012e80 <__locale_ctype_ptr>
 8010f20:	4602      	mov	r2, r0
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	3301      	adds	r3, #1
 8010f26:	4413      	add	r3, r2
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	f003 0304 	and.w	r3, r3, #4
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d004      	beq.n	8010f3c <isNonzeroDigit+0x28>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b30      	cmp	r3, #48	; 0x30
 8010f36:	d001      	beq.n	8010f3c <isNonzeroDigit+0x28>
 8010f38:	2301      	movs	r3, #1
 8010f3a:	e000      	b.n	8010f3e <isNonzeroDigit+0x2a>
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b086      	sub	sp, #24
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 8010f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f5e:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	685a      	ldr	r2, [r3, #4]
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 8010f68:	2123      	movs	r1, #35	; 0x23
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7ff faf1 	bl	8010552 <skipChr>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d079      	beq.n	801106a <scpiLex_ArbitraryBlockProgramData+0x124>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f7ff f9a2 	bl	80102c0 <iseos>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d169      	bne.n	8011056 <scpiLex_ArbitraryBlockProgramData+0x110>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7ff ffc3 	bl	8010f14 <isNonzeroDigit>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d060      	beq.n	8011056 <scpiLex_ArbitraryBlockProgramData+0x110>
            /* Get number of digits */
            i = state->pos[0] - '0';
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	3b30      	subs	r3, #48	; 0x30
 8010f9c:	617b      	str	r3, [r7, #20]
            state->pos++;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	1c5a      	adds	r2, r3, #1
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 8010fa8:	e027      	b.n	8010ffa <scpiLex_ArbitraryBlockProgramData+0xb4>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7ff f988 	bl	80102c0 <iseos>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d124      	bne.n	8011000 <scpiLex_ArbitraryBlockProgramData+0xba>
 8010fb6:	f001 ff63 	bl	8012e80 <__locale_ctype_ptr>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	4413      	add	r3, r2
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 0304 	and.w	r3, r3, #4
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d017      	beq.n	8011000 <scpiLex_ArbitraryBlockProgramData+0xba>
                    arbitraryBlockLength *= 10;
 8010fd0:	693a      	ldr	r2, [r7, #16]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4413      	add	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	3b30      	subs	r3, #48	; 0x30
 8010fe4:	693a      	ldr	r2, [r7, #16]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	613b      	str	r3, [r7, #16]
                    state->pos++;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	1c5a      	adds	r2, r3, #1
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	617b      	str	r3, [r7, #20]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	dcd4      	bgt.n	8010faa <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d11e      	bne.n	8011044 <scpiLex_ArbitraryBlockProgramData+0xfe>
                state->pos += arbitraryBlockLength;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	685a      	ldr	r2, [r3, #4]
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	441a      	add	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	6892      	ldr	r2, [r2, #8]
 801101a:	441a      	add	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d30c      	bcc.n	801103e <scpiLex_ArbitraryBlockProgramData+0xf8>
                    token->ptr = state->pos - arbitraryBlockLength;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	425b      	negs	r3, r3
 801102c:	441a      	add	r2, r3
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	693a      	ldr	r2, [r7, #16]
 8011036:	609a      	str	r2, [r3, #8]
                    validData = 1;
 8011038:	2301      	movs	r3, #1
 801103a:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 801103c:	e014      	b.n	8011068 <scpiLex_ArbitraryBlockProgramData+0x122>
                } else {
                    validData = 0;
 801103e:	2300      	movs	r3, #0
 8011040:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 8011042:	e011      	b.n	8011068 <scpiLex_ArbitraryBlockProgramData+0x122>
                }
            } else if (iseos(state)) {
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7ff f93b 	bl	80102c0 <iseos>
 801104a:	4603      	mov	r3, r0
 801104c:	2b00      	cmp	r3, #0
 801104e:	d00b      	beq.n	8011068 <scpiLex_ArbitraryBlockProgramData+0x122>
                validData = 0;
 8011050:	2300      	movs	r3, #0
 8011052:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 8011054:	e008      	b.n	8011068 <scpiLex_ArbitraryBlockProgramData+0x122>
            }
        } else if (iseos(state)) {
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f7ff f932 	bl	80102c0 <iseos>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <scpiLex_ArbitraryBlockProgramData+0x124>
            validData = 0;
 8011062:	2300      	movs	r3, #0
 8011064:	60fb      	str	r3, [r7, #12]
 8011066:	e000      	b.n	801106a <scpiLex_ArbitraryBlockProgramData+0x124>
            if (i == 0) {
 8011068:	bf00      	nop
        }
    }

    if (validData == 1) {
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d103      	bne.n	8011078 <scpiLex_ArbitraryBlockProgramData+0x132>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	220d      	movs	r2, #13
 8011074:	701a      	strb	r2, [r3, #0]
 8011076:	e01a      	b.n	80110ae <scpiLex_ArbitraryBlockProgramData+0x168>
    } else if (validData == 0) {
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d10d      	bne.n	801109a <scpiLex_ArbitraryBlockProgramData+0x154>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	221a      	movs	r2, #26
 8011082:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	2200      	movs	r2, #0
 8011088:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	6892      	ldr	r2, [r2, #8]
 8011092:	441a      	add	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	605a      	str	r2, [r3, #4]
 8011098:	e009      	b.n	80110ae <scpiLex_ArbitraryBlockProgramData+0x168>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	221a      	movs	r2, #26
 801109e:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	685a      	ldr	r2, [r3, #4]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	2200      	movs	r2, #0
 80110ac:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	689a      	ldr	r2, [r3, #8]
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	4619      	mov	r1, r3
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	1acb      	subs	r3, r1, r3
 80110bc:	4413      	add	r3, r2
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3718      	adds	r7, #24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 80110c6:	b480      	push	{r7}
 80110c8:	b083      	sub	sp, #12
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2b1f      	cmp	r3, #31
 80110d2:	dd16      	ble.n	8011102 <isProgramExpression+0x3c>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2b7e      	cmp	r3, #126	; 0x7e
 80110d8:	dc13      	bgt.n	8011102 <isProgramExpression+0x3c>
        if ((c != '"')
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b22      	cmp	r3, #34	; 0x22
 80110de:	d010      	beq.n	8011102 <isProgramExpression+0x3c>
                && (c != '#')
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2b23      	cmp	r3, #35	; 0x23
 80110e4:	d00d      	beq.n	8011102 <isProgramExpression+0x3c>
                && (c != '\'')
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b27      	cmp	r3, #39	; 0x27
 80110ea:	d00a      	beq.n	8011102 <isProgramExpression+0x3c>
                && (c != '(')
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2b28      	cmp	r3, #40	; 0x28
 80110f0:	d007      	beq.n	8011102 <isProgramExpression+0x3c>
                && (c != ')')
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b29      	cmp	r3, #41	; 0x29
 80110f6:	d004      	beq.n	8011102 <isProgramExpression+0x3c>
                && (c != ';')) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b3b      	cmp	r3, #59	; 0x3b
 80110fc:	d001      	beq.n	8011102 <isProgramExpression+0x3c>
            return 1;
 80110fe:	2301      	movs	r3, #1
 8011100:	e000      	b.n	8011104 <isProgramExpression+0x3e>
        }
    }

    return 0;
 8011102:	2300      	movs	r3, #0
}
 8011104:	4618      	mov	r0, r3
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8011118:	e004      	b.n	8011124 <skipProgramExpression+0x14>
        state->pos++;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	1c5a      	adds	r2, r3, #1
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7ff f8cb 	bl	80102c0 <iseos>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d108      	bne.n	8011142 <skipProgramExpression+0x32>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	4618      	mov	r0, r3
 8011138:	f7ff ffc5 	bl	80110c6 <isProgramExpression>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1eb      	bne.n	801111a <skipProgramExpression+0xa>
    }
}
 8011142:	bf00      	nop
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 801114a:	b580      	push	{r7, lr}
 801114c:	b082      	sub	sp, #8
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	685a      	ldr	r2, [r3, #4]
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff f8af 	bl	80102c0 <iseos>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d12c      	bne.n	80111c2 <scpiLex_ProgramExpression+0x78>
 8011168:	2128      	movs	r1, #40	; 0x28
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7ff f8ca 	bl	8010304 <ischr>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d025      	beq.n	80111c2 <scpiLex_ProgramExpression+0x78>
        state->pos++;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	1c5a      	adds	r2, r3, #1
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff ffc5 	bl	8011110 <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7ff f89a 	bl	80102c0 <iseos>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d114      	bne.n	80111bc <scpiLex_ProgramExpression+0x72>
 8011192:	2129      	movs	r1, #41	; 0x29
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7ff f8b5 	bl	8010304 <ischr>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d00d      	beq.n	80111bc <scpiLex_ProgramExpression+0x72>
            state->pos++;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	1c5a      	adds	r2, r3, #1
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	461a      	mov	r2, r3
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	1ad2      	subs	r2, r2, r3
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	609a      	str	r2, [r3, #8]
 80111ba:	e002      	b.n	80111c2 <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	2200      	movs	r2, #0
 80111c0:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	dd03      	ble.n	80111d2 <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	2210      	movs	r2, #16
 80111ce:	701a      	strb	r2, [r3, #0]
 80111d0:	e009      	b.n	80111e6 <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	221a      	movs	r2, #26
 80111d6:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	2200      	movs	r2, #0
 80111e4:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	689b      	ldr	r3, [r3, #8]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b082      	sub	sp, #8
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	685a      	ldr	r2, [r3, #4]
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 8011204:	212c      	movs	r1, #44	; 0x2c
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff f9a3 	bl	8010552 <skipChr>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d006      	beq.n	8011220 <scpiLex_Comma+0x2e>
        token->len = 1;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	2201      	movs	r2, #1
 8011216:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2200      	movs	r2, #0
 801121c:	701a      	strb	r2, [r3, #0]
 801121e:	e005      	b.n	801122c <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	2200      	movs	r2, #0
 8011224:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	221a      	movs	r2, #26
 801122a:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	689b      	ldr	r3, [r3, #8]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 801124a:	213b      	movs	r1, #59	; 0x3b
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7ff f980 	bl	8010552 <skipChr>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d006      	beq.n	8011266 <scpiLex_Semicolon+0x2e>
        token->len = 1;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2201      	movs	r2, #1
 801125c:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	2201      	movs	r2, #1
 8011262:	701a      	strb	r2, [r3, #0]
 8011264:	e005      	b.n	8011272 <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	2200      	movs	r2, #0
 801126a:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	221a      	movs	r2, #26
 8011270:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	689b      	ldr	r3, [r3, #8]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 801127e:	b580      	push	{r7, lr}
 8011280:	b082      	sub	sp, #8
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
 8011286:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	685a      	ldr	r2, [r3, #4]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 8011290:	210d      	movs	r1, #13
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7ff f95d 	bl	8010552 <skipChr>
    skipChr(state, '\n');
 8011298:	210a      	movs	r1, #10
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7ff f959 	bl	8010552 <skipChr>

    token->len = state->pos - token->ptr;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	461a      	mov	r2, r3
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	1ad2      	subs	r2, r2, r3
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	dd03      	ble.n	80112c0 <scpiLex_NewLine+0x42>
        token->type = SCPI_TOKEN_NL;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	2205      	movs	r2, #5
 80112bc:	701a      	strb	r2, [r3, #0]
 80112be:	e009      	b.n	80112d4 <scpiLex_NewLine+0x56>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	221a      	movs	r2, #26
 80112c4:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	685a      	ldr	r2, [r3, #4]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	2200      	movs	r2, #0
 80112d2:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	689b      	ldr	r3, [r3, #8]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 80112e8:	2206      	movs	r2, #6
 80112ea:	4904      	ldr	r1, [pc, #16]	; (80112fc <SCPI_SystemVersionQ+0x1c>)
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fb0d 	bl	801190c <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 80112f2:	2301      	movs	r3, #1
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	08017008 	.word	0x08017008

08011300 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8011308:	f107 030c 	add.w	r3, r7, #12
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7fe f9ae 	bl	800f670 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8011314:	f107 030c 	add.w	r3, r7, #12
 8011318:	4619      	mov	r1, r3
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 fba2 	bl	8011a64 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 8011320:	2301      	movs	r3, #1
}
 8011322:	4618      	mov	r0, r3
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 801132a:	b580      	push	{r7, lr}
 801132c:	b082      	sub	sp, #8
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f7fe f9ba 	bl	800f6ac <SCPI_ErrorCount>
 8011338:	4603      	mov	r3, r0
 801133a:	4619      	mov	r1, r3
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f000 fb6e 	bl	8011a1e <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8011342:	2301      	movs	r3, #1
}
 8011344:	4618      	mov	r0, r3
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
 801134c:	b580      	push	{r7, lr}
 801134e:	b082      	sub	sp, #8
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUES));
 8011354:	2107      	movs	r1, #7
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7fe fd21 	bl	800fd9e <SCPI_RegGet>
 801135c:	4603      	mov	r3, r0
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f000 fb5c 	bl	8011a1e <SCPI_ResultInt32>

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8011366:	2200      	movs	r2, #0
 8011368:	2107      	movs	r1, #7
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7fe fd52 	bl	800fe14 <SCPI_RegSet>

    return SCPI_RES_OK;
 8011370:	2301      	movs	r3, #1
}
 8011372:	4618      	mov	r0, r3
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}

0801137a <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
 801137a:	b580      	push	{r7, lr}
 801137c:	b082      	sub	sp, #8
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUESE));
 8011382:	2108      	movs	r1, #8
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7fe fd0a 	bl	800fd9e <SCPI_RegGet>
 801138a:	4603      	mov	r3, r0
 801138c:	4619      	mov	r1, r3
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 fb45 	bl	8011a1e <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8011394:	2301      	movs	r3, #1
}
 8011396:	4618      	mov	r0, r3
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
 801139e:	b580      	push	{r7, lr}
 80113a0:	b084      	sub	sp, #16
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
    int32_t new_QUESE;
    if (SCPI_ParamInt32(context, &new_QUESE, TRUE)) {
 80113a6:	f107 030c 	add.w	r3, r7, #12
 80113aa:	2201      	movs	r2, #1
 80113ac:	4619      	mov	r1, r3
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 fe06 	bl	8011fc0 <SCPI_ParamInt32>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d006      	beq.n	80113c8 <SCPI_StatusQuestionableEnable+0x2a>
        SCPI_RegSet(context, SCPI_REG_QUESE, (scpi_reg_val_t) new_QUESE);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	b29b      	uxth	r3, r3
 80113be:	461a      	mov	r2, r3
 80113c0:	2108      	movs	r1, #8
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7fe fd26 	bl	800fe14 <SCPI_RegSet>
    }
    return SCPI_RES_OK;
 80113c8:	2301      	movs	r3, #1
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
 80113d2:	b580      	push	{r7, lr}
 80113d4:	b082      	sub	sp, #8
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 80113da:	2200      	movs	r2, #0
 80113dc:	2107      	movs	r1, #7
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7fe fd18 	bl	800fe14 <SCPI_RegSet>
    return SCPI_RES_OK;
 80113e4:	2301      	movs	r3, #1
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3708      	adds	r7, #8
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b084      	sub	sp, #16
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	60f8      	str	r0, [r7, #12]
 80113f6:	60b9      	str	r1, [r7, #8]
 80113f8:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d008      	beq.n	8011412 <writeData+0x24>
        return context->interface->write(context, data, len);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	68b9      	ldr	r1, [r7, #8]
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	4798      	blx	r3
 801140e:	4603      	mov	r3, r0
 8011410:	e000      	b.n	8011414 <writeData+0x26>
    } else {
        return 0;
 8011412:	2300      	movs	r3, #0
    }
}
 8011414:	4618      	mov	r0, r3
 8011416:	3710      	adds	r7, #16
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00f      	beq.n	801144a <flushData+0x2e>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00b      	beq.n	801144a <flushData+0x2e>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d006      	beq.n	801144a <flushData+0x2e>
        return context->interface->flush(context);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	4798      	blx	r3
 8011446:	4603      	mov	r3, r0
 8011448:	e000      	b.n	801144c <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 801144a:	2301      	movs	r3, #1
    }
}
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011460:	2b00      	cmp	r3, #0
 8011462:	dd06      	ble.n	8011472 <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 8011464:	2201      	movs	r2, #1
 8011466:	4905      	ldr	r1, [pc, #20]	; (801147c <writeDelimiter+0x28>)
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff ffc0 	bl	80113ee <writeData>
 801146e:	4603      	mov	r3, r0
 8011470:	e000      	b.n	8011474 <writeDelimiter+0x20>
    } else {
        return 0;
 8011472:	2300      	movs	r3, #0
    }
}
 8011474:	4618      	mov	r0, r3
 8011476:	3708      	adds	r7, #8
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	08017010 	.word	0x08017010

08011480 <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801148c:	2b00      	cmp	r3, #0
 801148e:	dd0a      	ble.n	80114a6 <writeNewLine+0x26>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 8011490:	2202      	movs	r2, #2
 8011492:	4907      	ldr	r1, [pc, #28]	; (80114b0 <writeNewLine+0x30>)
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7ff ffaa 	bl	80113ee <writeData>
 801149a:	60f8      	str	r0, [r7, #12]
        flushData(context);
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff ffbd 	bl	801141c <flushData>
        return len;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	e000      	b.n	80114a8 <writeNewLine+0x28>
    } else {
        return 0;
 80114a6:	2300      	movs	r3, #0
    }
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3710      	adds	r7, #16
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	08017014 	.word	0x08017014

080114b4 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	dd06      	ble.n	80114d2 <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 80114c4:	2201      	movs	r2, #1
 80114c6:	4905      	ldr	r1, [pc, #20]	; (80114dc <writeSemicolon+0x28>)
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7ff ff90 	bl	80113ee <writeData>
 80114ce:	4603      	mov	r3, r0
 80114d0:	e000      	b.n	80114d4 <writeSemicolon+0x20>
    } else {
        return 0;
 80114d2:	2300      	movs	r3, #0
    }
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3708      	adds	r7, #8
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	08017018 	.word	0x08017018

080114e0 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	691b      	ldr	r3, [r3, #16]
 80114ec:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	3314      	adds	r3, #20
 80114f2:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 80114f4:	2301      	movs	r3, #1
 80114f6:	75fb      	strb	r3, [r7, #23]

    /* conditionaly write ; */
    writeSemicolon(context);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7ff ffdb 	bl	80114b4 <writeSemicolon>

    context->cmd_error = FALSE;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context->output_count = 0;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2200      	movs	r2, #0
 801150a:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_reminding = 0;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2200      	movs	r2, #0
 8011516:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d01d      	beq.n	801155e <processCommand+0x7e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	4798      	blx	r3
 801152a:	4603      	mov	r3, r0
 801152c:	2b01      	cmp	r3, #1
 801152e:	d00f      	beq.n	8011550 <processCommand+0x70>
            if (!context->cmd_error) {
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011536:	f083 0301 	eor.w	r3, r3, #1
 801153a:	b2db      	uxtb	r3, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d004      	beq.n	801154a <processCommand+0x6a>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8011540:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7fe f96f 	bl	800f828 <SCPI_ErrorPush>
            }
            result = FALSE;
 801154a:	2300      	movs	r3, #0
 801154c:	75fb      	strb	r3, [r7, #23]
 801154e:	e006      	b.n	801155e <processCommand+0x7e>
        } else {
            if (context->cmd_error) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011556:	2b00      	cmp	r3, #0
 8011558:	d001      	beq.n	801155e <processCommand+0x7e>
                result = FALSE;
 801155a:	2300      	movs	r3, #0
 801155c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	685a      	ldr	r2, [r3, #4]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	68f9      	ldr	r1, [r7, #12]
 8011568:	6889      	ldr	r1, [r1, #8]
 801156a:	440b      	add	r3, r1
 801156c:	429a      	cmp	r2, r3
 801156e:	d20e      	bcs.n	801158e <processCommand+0xae>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011576:	f083 0301 	eor.w	r3, r3, #1
 801157a:	b2db      	uxtb	r3, r3
 801157c:	2b00      	cmp	r3, #0
 801157e:	d006      	beq.n	801158e <processCommand+0xae>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 8011580:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7fe f94f 	bl	800f828 <SCPI_ErrorPush>
        result = FALSE;
 801158a:	2300      	movs	r3, #0
 801158c:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 801158e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011590:	4618      	mov	r0, r3
 8011592:	3718      	adds	r7, #24
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}

08011598 <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 8011598:	b580      	push	{r7, lr}
 801159a:	b088      	sub	sp, #32
 801159c:	af02      	add	r7, sp, #8
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 80115a4:	2300      	movs	r3, #0
 80115a6:	617b      	str	r3, [r7, #20]
 80115a8:	e01e      	b.n	80115e8 <findCommandHeader+0x50>
        cmd = &context->cmdlist[i];
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6819      	ldr	r1, [r3, #0]
 80115ae:	697a      	ldr	r2, [r7, #20]
 80115b0:	4613      	mov	r3, r2
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	4413      	add	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	440b      	add	r3, r1
 80115ba:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	6818      	ldr	r0, [r3, #0]
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	2300      	movs	r3, #0
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	2300      	movs	r3, #0
 80115c8:	9300      	str	r3, [sp, #0]
 80115ca:	2300      	movs	r3, #0
 80115cc:	68b9      	ldr	r1, [r7, #8]
 80115ce:	f001 f9d0 	bl	8012972 <matchCommand>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d004      	beq.n	80115e2 <findCommandHeader+0x4a>
            context->param_list.cmd = cmd;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	693a      	ldr	r2, [r7, #16]
 80115dc:	611a      	str	r2, [r3, #16]
            return TRUE;
 80115de:	2301      	movs	r3, #1
 80115e0:	e00e      	b.n	8011600 <findCommandHeader+0x68>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	3301      	adds	r3, #1
 80115e6:	617b      	str	r3, [r7, #20]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	6819      	ldr	r1, [r3, #0]
 80115ec:	697a      	ldr	r2, [r7, #20]
 80115ee:	4613      	mov	r3, r2
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	4413      	add	r3, r2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	440b      	add	r3, r1
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1d5      	bne.n	80115aa <findCommandHeader+0x12>
        }
    }
    return FALSE;
 80115fe:	2300      	movs	r3, #0
}
 8011600:	4618      	mov	r0, r3
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8011608:	b580      	push	{r7, lr}
 801160a:	b08c      	sub	sp, #48	; 0x30
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 8011614:	2301      	movs	r3, #1
 8011616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 801161a:	231a      	movs	r3, #26
 801161c:	753b      	strb	r3, [r7, #20]
 801161e:	2300      	movs	r3, #0
 8011620:	61bb      	str	r3, [r7, #24]
 8011622:	2300      	movs	r3, #0
 8011624:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d101      	bne.n	8011630 <SCPI_Parse+0x28>
        return FALSE;
 801162c:	2300      	movs	r3, #0
 801162e:	e08f      	b.n	8011750 <SCPI_Parse+0x148>
    }

    state = &context->parser_state;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	3364      	adds	r3, #100	; 0x64
 8011634:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2200      	movs	r2, #0
 801163a:	631a      	str	r2, [r3, #48]	; 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	68b9      	ldr	r1, [r7, #8]
 8011640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011642:	f000 feca 	bl	80123da <scpiParser_detectProgramMessageUnit>
 8011646:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	2b19      	cmp	r3, #25
 801164e:	d108      	bne.n	8011662 <SCPI_Parse+0x5a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 8011650:	f06f 0164 	mvn.w	r1, #100	; 0x64
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f7fe f8e7 	bl	800f828 <SCPI_ErrorPush>
            result = FALSE;
 801165a:	2300      	movs	r3, #0
 801165c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011660:	e063      	b.n	801172a <SCPI_Parse+0x122>
        } else if (state->programHeader.len > 0) {
 8011662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	2b00      	cmp	r3, #0
 8011668:	dd5f      	ble.n	801172a <SCPI_Parse+0x122>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 801166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801166c:	f107 0314 	add.w	r3, r7, #20
 8011670:	4611      	mov	r1, r2
 8011672:	4618      	mov	r0, r3
 8011674:	f001 fb46 	bl	8012d04 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	6859      	ldr	r1, [r3, #4]
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	461a      	mov	r2, r3
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff ff88 	bl	8011598 <findCommandHeader>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d02c      	beq.n	80116e8 <SCPI_Parse+0xe0>

                context->param_list.lex_state.buffer = state->programData.ptr;
 801168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011690:	691a      	ldr	r2, [r3, #16]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	695a      	ldr	r2, [r3, #20]
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 801169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a0:	695a      	ldr	r2, [r3, #20]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 80116a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a8:	685a      	ldr	r2, [r3, #4]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2200      	movs	r2, #0
 80116b2:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 80116b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	461a      	mov	r2, r3
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f7ff ff0e 	bl	80114e0 <processCommand>
 80116c4:	4603      	mov	r3, r0
 80116c6:	461a      	mov	r2, r3
 80116c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116cc:	4013      	ands	r3, r2
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	bf14      	ite	ne
 80116d2:	2301      	movne	r3, #1
 80116d4:	2300      	moveq	r3, #0
 80116d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 80116da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116dc:	f107 0314 	add.w	r3, r7, #20
 80116e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80116e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80116e6:	e020      	b.n	801172a <SCPI_Parse+0x122>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 80116e8:	6a3b      	ldr	r3, [r7, #32]
 80116ea:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 80116ec:	e002      	b.n	80116f4 <SCPI_Parse+0xec>
 80116ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f0:	3b01      	subs	r3, #1
 80116f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80116f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d00d      	beq.n	8011716 <SCPI_Parse+0x10e>
 80116fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fc:	3b01      	subs	r3, #1
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	4413      	add	r3, r2
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	2b0d      	cmp	r3, #13
 8011706:	d0f2      	beq.n	80116ee <SCPI_Parse+0xe6>
 8011708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170a:	3b01      	subs	r3, #1
 801170c:	68ba      	ldr	r2, [r7, #8]
 801170e:	4413      	add	r3, r2
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	2b0a      	cmp	r3, #10
 8011714:	d0eb      	beq.n	80116ee <SCPI_Parse+0xe6>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 8011716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011718:	68ba      	ldr	r2, [r7, #8]
 801171a:	f06f 0170 	mvn.w	r1, #112	; 0x70
 801171e:	68f8      	ldr	r0, [r7, #12]
 8011720:	f7fe f80c 	bl	800f73c <SCPI_ErrorPushEx>
                result = FALSE;
 8011724:	2300      	movs	r3, #0
 8011726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 801172a:	6a3a      	ldr	r2, [r7, #32]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	429a      	cmp	r2, r3
 8011730:	da08      	bge.n	8011744 <SCPI_Parse+0x13c>
            data += r;
 8011732:	6a3b      	ldr	r3, [r7, #32]
 8011734:	68ba      	ldr	r2, [r7, #8]
 8011736:	4413      	add	r3, r2
 8011738:	60bb      	str	r3, [r7, #8]
            len -= r;
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	6a3b      	ldr	r3, [r7, #32]
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8011742:	e77b      	b.n	801163c <SCPI_Parse+0x34>
        } else {
            break;
 8011744:	bf00      	nop
        }

    }

    /* conditionaly write new line */
    writeNewLine(context);
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f7ff fe9a 	bl	8011480 <writeNewLine>

    return result;
 801174c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011750:	4618      	mov	r0, r3
 8011752:	3730      	adds	r7, #48	; 0x30
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 8011766:	2298      	movs	r2, #152	; 0x98
 8011768:	2100      	movs	r1, #0
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f001 fbe3 	bl	8012f36 <memset>
    context->cmdlist = commands;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	683a      	ldr	r2, [r7, #0]
 8011780:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	69fa      	ldr	r2, [r7, #28]
 801178e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6a3a      	ldr	r2, [r7, #32]
 8011796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801179e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    context->buffer.data = input_buffer;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117a6:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117ac:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	609a      	str	r2, [r3, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 80117b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80117b8:	461a      	mov	r2, r3
 80117ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f7fd fee9 	bl	800f594 <SCPI_ErrorInit>
}
 80117c2:	bf00      	nop
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}

080117ca <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b088      	sub	sp, #32
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	60f8      	str	r0, [r7, #12]
 80117d2:	60b9      	str	r1, [r7, #8]
 80117d4:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 80117d6:	2301      	movs	r3, #1
 80117d8:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d114      	bne.n	8011812 <SCPI_Input+0x48>
        context->buffer.data[context->buffer.position] = 0;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	68da      	ldr	r2, [r3, #12]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	689b      	ldr	r3, [r3, #8]
 80117f0:	4413      	add	r3, r2
 80117f2:	2200      	movs	r2, #0
 80117f4:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	68d9      	ldr	r1, [r3, #12]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	689b      	ldr	r3, [r3, #8]
 80117fe:	461a      	mov	r2, r3
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f7ff ff01 	bl	8011608 <SCPI_Parse>
 8011806:	4603      	mov	r3, r0
 8011808:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2200      	movs	r2, #0
 801180e:	609a      	str	r2, [r3, #8]
 8011810:	e077      	b.n	8011902 <SCPI_Input+0x138>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	685a      	ldr	r2, [r3, #4]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	689b      	ldr	r3, [r3, #8]
 801181a:	1ad3      	subs	r3, r2, r3
 801181c:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	3b01      	subs	r3, #1
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	429a      	cmp	r2, r3
 8011826:	dd10      	ble.n	801184a <SCPI_Input+0x80>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2200      	movs	r2, #0
 801182c:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	68da      	ldr	r2, [r3, #12]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	4413      	add	r3, r2
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 801183c:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f7fd fff1 	bl	800f828 <SCPI_ErrorPush>
            return FALSE;
 8011846:	2300      	movs	r3, #0
 8011848:	e05c      	b.n	8011904 <SCPI_Input+0x13a>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	68da      	ldr	r2, [r3, #12]
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	4413      	add	r3, r2
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	68b9      	ldr	r1, [r7, #8]
 8011858:	4618      	mov	r0, r3
 801185a:	f001 fb48 	bl	8012eee <memcpy>
        context->buffer.position += len;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	689a      	ldr	r2, [r3, #8]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	441a      	add	r2, r3
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	68da      	ldr	r2, [r3, #12]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	4413      	add	r3, r2
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	68da      	ldr	r2, [r3, #12]
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	18d1      	adds	r1, r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	689a      	ldr	r2, [r3, #8]
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	1ad3      	subs	r3, r2, r3
 801188e:	461a      	mov	r2, r3
 8011890:	f000 fda3 	bl	80123da <scpiParser_detectProgramMessageUnit>
 8011894:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	69ba      	ldr	r2, [r7, #24]
 801189a:	4413      	add	r3, r2
 801189c:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d11e      	bne.n	80118e6 <SCPI_Input+0x11c>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	69ba      	ldr	r2, [r7, #24]
 80118ae:	4619      	mov	r1, r3
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f7ff fea9 	bl	8011608 <SCPI_Parse>
 80118b6:	4603      	mov	r3, r0
 80118b8:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	68d8      	ldr	r0, [r3, #12]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	68da      	ldr	r2, [r3, #12]
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	18d1      	adds	r1, r2, r3
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	689a      	ldr	r2, [r3, #8]
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	461a      	mov	r2, r3
 80118d0:	f001 fb18 	bl	8012f04 <memmove>
                context->buffer.position -= totcmdlen;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	689a      	ldr	r2, [r3, #8]
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	1ad2      	subs	r2, r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 80118e0:	2300      	movs	r3, #0
 80118e2:	61bb      	str	r3, [r7, #24]
 80118e4:	e7c8      	b.n	8011878 <SCPI_Input+0xae>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN) break;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80118ec:	2b1a      	cmp	r3, #26
 80118ee:	d005      	beq.n	80118fc <SCPI_Input+0x132>
                if (totcmdlen >= context->buffer.position) break;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	69ba      	ldr	r2, [r7, #24]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d202      	bcs.n	8011900 <SCPI_Input+0x136>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80118fa:	e7bd      	b.n	8011878 <SCPI_Input+0xae>
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN) break;
 80118fc:	bf00      	nop
 80118fe:	e000      	b.n	8011902 <SCPI_Input+0x138>
                if (totcmdlen >= context->buffer.position) break;
 8011900:	bf00      	nop
            }
        }
    }

    return result;
 8011902:	7ffb      	ldrb	r3, [r7, #31]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3720      	adds	r7, #32
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 801190c:	b580      	push	{r7, lr}
 801190e:	b086      	sub	sp, #24
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	f7ff fd99 	bl	8011454 <writeDelimiter>
 8011922:	4602      	mov	r2, r0
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	4413      	add	r3, r2
 8011928:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	68b9      	ldr	r1, [r7, #8]
 801192e:	68f8      	ldr	r0, [r7, #12]
 8011930:	f7ff fd5d 	bl	80113ee <writeData>
 8011934:	4602      	mov	r2, r0
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	4413      	add	r3, r2
 801193a:	617b      	str	r3, [r7, #20]
    context->output_count++;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011940:	1c5a      	adds	r2, r3, #1
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8011946:	697b      	ldr	r3, [r7, #20]
}
 8011948:	4618      	mov	r0, r3
 801194a:	3718      	adds	r7, #24
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 801195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801195e:	2b08      	cmp	r3, #8
 8011960:	d005      	beq.n	801196e <getBasePrefix+0x1e>
 8011962:	2b10      	cmp	r3, #16
 8011964:	d005      	beq.n	8011972 <getBasePrefix+0x22>
 8011966:	2b02      	cmp	r3, #2
 8011968:	d105      	bne.n	8011976 <getBasePrefix+0x26>
        case 2: return "#B";
 801196a:	4b06      	ldr	r3, [pc, #24]	; (8011984 <getBasePrefix+0x34>)
 801196c:	e004      	b.n	8011978 <getBasePrefix+0x28>
        case 8: return "#Q";
 801196e:	4b06      	ldr	r3, [pc, #24]	; (8011988 <getBasePrefix+0x38>)
 8011970:	e002      	b.n	8011978 <getBasePrefix+0x28>
        case 16: return "#H";
 8011972:	4b06      	ldr	r3, [pc, #24]	; (801198c <getBasePrefix+0x3c>)
 8011974:	e000      	b.n	8011978 <getBasePrefix+0x28>
        default: return NULL;
 8011976:	2300      	movs	r3, #0
    }
}
 8011978:	4618      	mov	r0, r3
 801197a:	370c      	adds	r7, #12
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr
 8011984:	0801701c 	.word	0x0801701c
 8011988:	08017020 	.word	0x08017020
 801198c:	08017024 	.word	0x08017024

08011990 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8011990:	b580      	push	{r7, lr}
 8011992:	b092      	sub	sp, #72	; 0x48
 8011994:	af02      	add	r7, sp, #8
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	4611      	mov	r1, r2
 801199c:	461a      	mov	r2, r3
 801199e:	460b      	mov	r3, r1
 80119a0:	71fb      	strb	r3, [r7, #7]
 80119a2:	4613      	mov	r3, r2
 80119a4:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 80119a6:	2300      	movs	r3, #0
 80119a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 80119aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80119ae:	f107 0110 	add.w	r1, r7, #16
 80119b2:	79bb      	ldrb	r3, [r7, #6]
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	4613      	mov	r3, r2
 80119b8:	2221      	movs	r2, #33	; 0x21
 80119ba:	68b8      	ldr	r0, [r7, #8]
 80119bc:	f000 fdd8 	bl	8012570 <UInt32ToStrBaseSign>
 80119c0:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 80119c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff ffc2 	bl	8011950 <getBasePrefix>
 80119cc:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f7ff fd40 	bl	8011454 <writeDelimiter>
 80119d4:	4602      	mov	r2, r0
 80119d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d8:	4413      	add	r3, r2
 80119da:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 80119dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d008      	beq.n	80119f4 <resultUInt32BaseSign+0x64>
        result += writeData(context, basePrefix, 2);
 80119e2:	2202      	movs	r2, #2
 80119e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f7ff fd01 	bl	80113ee <writeData>
 80119ec:	4602      	mov	r2, r0
 80119ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f0:	4413      	add	r3, r2
 80119f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 80119f4:	f107 0310 	add.w	r3, r7, #16
 80119f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119fa:	4619      	mov	r1, r3
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f7ff fcf6 	bl	80113ee <writeData>
 8011a02:	4602      	mov	r2, r0
 8011a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a06:	4413      	add	r3, r2
 8011a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a0e:	1c5a      	adds	r2, r3, #1
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8011a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3740      	adds	r7, #64	; 0x40
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}

08011a1e <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 8011a1e:	b580      	push	{r7, lr}
 8011a20:	b082      	sub	sp, #8
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
 8011a26:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	220a      	movs	r2, #10
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f7ff ffae 	bl	8011990 <resultUInt32BaseSign>
 8011a34:	4603      	mov	r3, r0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3708      	adds	r7, #8
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <SCPI_ResultUInt32Base>:
 * Write signed/unsigned 32 bit integer value in specific base to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultUInt32Base(scpi_t * context, uint32_t val, int8_t base) {
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	b084      	sub	sp, #16
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	60f8      	str	r0, [r7, #12]
 8011a46:	60b9      	str	r1, [r7, #8]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	71fb      	strb	r3, [r7, #7]
    return resultUInt32BaseSign(context, val, base, FALSE);
 8011a4c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011a50:	2300      	movs	r3, #0
 8011a52:	68b9      	ldr	r1, [r7, #8]
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f7ff ff9b 	bl	8011990 <resultUInt32BaseSign>
 8011a5a:	4603      	mov	r3, r0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b08a      	sub	sp, #40	; 0x28
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 8011a72:	23ff      	movs	r3, #255	; 0xff
 8011a74:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 8011a76:	2300      	movs	r3, #0
 8011a78:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fd fee3 	bl	800f84c <SCPI_ErrorTranslate>
 8011a86:	4603      	mov	r3, r0
 8011a88:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7ee fbe1 	bl	8000254 <strlen>
 8011a92:	4603      	mov	r3, r0
 8011a94:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7ff ffbd 	bl	8011a1e <SCPI_ResultInt32>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa8:	4413      	add	r3, r2
 8011aaa:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f7ff fcd1 	bl	8011454 <writeDelimiter>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab6:	4413      	add	r3, r2
 8011ab8:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 8011aba:	2201      	movs	r2, #1
 8011abc:	4976      	ldr	r1, [pc, #472]	; (8011c98 <SCPI_ResultError+0x234>)
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff fc95 	bl	80113ee <writeData>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac8:	4413      	add	r3, r2
 8011aca:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 8011acc:	2300      	movs	r3, #0
 8011ace:	61fb      	str	r3, [r7, #28]
 8011ad0:	e0c4      	b.n	8011c5c <SCPI_ResultError+0x1f8>
        if (i == 1) {
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	d109      	bne.n	8011aec <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f7ff fceb 	bl	80114b4 <writeSemicolon>
 8011ade:	4602      	mov	r2, r0
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae2:	4413      	add	r3, r2
 8011ae4:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011af4:	4413      	add	r3, r2
 8011af6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011afa:	6a3a      	ldr	r2, [r7, #32]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d273      	bcs.n	8011be8 <SCPI_ResultError+0x184>
            len[i] = outputlimit;
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011b08:	4413      	add	r3, r2
 8011b0a:	6a3a      	ldr	r2, [r7, #32]
 8011b0c:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8011b10:	e06a      	b.n	8011be8 <SCPI_ResultError+0x184>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 8011b12:	697a      	ldr	r2, [r7, #20]
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	009b      	lsls	r3, r3, #2
 8011b18:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011b1c:	440b      	add	r3, r1
 8011b1e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	3301      	adds	r3, #1
 8011b26:	61bb      	str	r3, [r7, #24]
 8011b28:	69ba      	ldr	r2, [r7, #24]
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d312      	bcc.n	8011b56 <SCPI_ResultError+0xf2>
                len[i] -= 1;
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011b38:	4413      	add	r3, r2
 8011b3a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011b3e:	1e5a      	subs	r2, r3, #1
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011b48:	440b      	add	r3, r1
 8011b4a:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 8011b4e:	6a3b      	ldr	r3, [r7, #32]
 8011b50:	3b01      	subs	r3, #1
 8011b52:	623b      	str	r3, [r7, #32]
                break;
 8011b54:	e05f      	b.n	8011c16 <SCPI_ResultError+0x1b2>
            }
            result += writeData(context, data[i], step);
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011b5e:	4413      	add	r3, r2
 8011b60:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8011b64:	69ba      	ldr	r2, [r7, #24]
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff fc40 	bl	80113ee <writeData>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b72:	4413      	add	r3, r2
 8011b74:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 8011b76:	2201      	movs	r2, #1
 8011b78:	4947      	ldr	r1, [pc, #284]	; (8011c98 <SCPI_ResultError+0x234>)
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f7ff fc37 	bl	80113ee <writeData>
 8011b80:	4602      	mov	r2, r0
 8011b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b84:	4413      	add	r3, r2
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011b90:	4413      	add	r3, r2
 8011b92:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	1ad2      	subs	r2, r2, r3
 8011b9a:	69fb      	ldr	r3, [r7, #28]
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011ba2:	440b      	add	r3, r1
 8011ba4:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 8011ba8:	6a3a      	ldr	r2, [r7, #32]
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	1ad3      	subs	r3, r2, r3
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	1c5a      	adds	r2, r3, #1
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011bbe:	440b      	add	r3, r1
 8011bc0:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011bcc:	4413      	add	r3, r2
 8011bce:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011bd2:	6a3a      	ldr	r2, [r7, #32]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d207      	bcs.n	8011be8 <SCPI_ResultError+0x184>
                len[i] = outputlimit;
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011be0:	4413      	add	r3, r2
 8011be2:	6a3a      	ldr	r2, [r7, #32]
 8011be4:	f843 2c1c 	str.w	r2, [r3, #-28]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011bf0:	4413      	add	r3, r2
 8011bf2:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011bfe:	4413      	add	r3, r2
 8011c00:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011c04:	4a24      	ldr	r2, [pc, #144]	; (8011c98 <SCPI_ResultError+0x234>)
 8011c06:	4619      	mov	r1, r3
 8011c08:	f000 fc82 	bl	8012510 <strnpbrk>
 8011c0c:	6178      	str	r0, [r7, #20]
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f47f af7e 	bne.w	8011b12 <SCPI_ResultError+0xae>
            }
        }

        result += writeData(context, data[i], len[i]);
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c1e:	4413      	add	r3, r2
 8011c20:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c2c:	4413      	add	r3, r2
 8011c2e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011c32:	461a      	mov	r2, r3
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7ff fbda 	bl	80113ee <writeData>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3e:	4413      	add	r3, r2
 8011c40:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c4a:	4413      	add	r3, r2
 8011c4c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011c50:	6a3a      	ldr	r2, [r7, #32]
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	61fb      	str	r3, [r7, #28]
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10c      	bne.n	8011c7c <SCPI_ResultError+0x218>
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c6a:	4413      	add	r3, r2
 8011c6c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d003      	beq.n	8011c7c <SCPI_ResultError+0x218>
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f47f af2b 	bne.w	8011ad2 <SCPI_ResultError+0x6e>
    }
    result += writeData(context, "\"", 1);
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	4906      	ldr	r1, [pc, #24]	; (8011c98 <SCPI_ResultError+0x234>)
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f7ff fbb4 	bl	80113ee <writeData>
 8011c86:	4602      	mov	r2, r0
 8011c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8a:	4413      	add	r3, r2
 8011c8c:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3728      	adds	r7, #40	; 0x28
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	08017028 	.word	0x08017028

08011c9c <SCPI_ResultBool>:
 * Write boolean value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultBool(scpi_t * context, scpi_bool_t val) {
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	70fb      	strb	r3, [r7, #3]
    return resultUInt32BaseSign(context, val ? 1 : 0, 10, FALSE);
 8011ca8:	78fb      	ldrb	r3, [r7, #3]
 8011caa:	4619      	mov	r1, r3
 8011cac:	2300      	movs	r3, #0
 8011cae:	220a      	movs	r2, #10
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7ff fe6d 	bl	8011990 <resultUInt32BaseSign>
 8011cb6:	4603      	mov	r3, r0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
    token->len = 0;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	221a      	movs	r2, #26
 8011cda:	701a      	strb	r2, [r3, #0]
}
 8011cdc:	bf00      	nop
 8011cde:	370c      	adds	r7, #12
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr

08011ce8 <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d105      	bne.n	8011d08 <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8011cfc:	4939      	ldr	r1, [pc, #228]	; (8011de4 <SCPI_Parameter+0xfc>)
 8011cfe:	68f8      	ldr	r0, [r7, #12]
 8011d00:	f7fd fd92 	bl	800f828 <SCPI_ErrorPush>
        return FALSE;
 8011d04:	2300      	movs	r3, #0
 8011d06:	e069      	b.n	8011ddc <SCPI_Parameter+0xf4>
    }

    invalidateToken(parameter, NULL);
 8011d08:	2100      	movs	r1, #0
 8011d0a:	68b8      	ldr	r0, [r7, #8]
 8011d0c:	f7ff ffd8 	bl	8011cc0 <invalidateToken>

    state = &context->param_list.lex_state;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	3314      	adds	r3, #20
 8011d14:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	685a      	ldr	r2, [r3, #4]
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	6979      	ldr	r1, [r7, #20]
 8011d20:	6889      	ldr	r1, [r1, #8]
 8011d22:	440b      	add	r3, r1
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d30d      	bcc.n	8011d44 <SCPI_Parameter+0x5c>
        if (mandatory) {
 8011d28:	79fb      	ldrb	r3, [r7, #7]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d005      	beq.n	8011d3a <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8011d2e:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f7fd fd78 	bl	800f828 <SCPI_ErrorPush>
 8011d38:	e002      	b.n	8011d40 <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2209      	movs	r2, #9
 8011d3e:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 8011d40:	2300      	movs	r3, #0
 8011d42:	e04b      	b.n	8011ddc <SCPI_Parameter+0xf4>
    }
    if (context->input_count != 0) {
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d012      	beq.n	8011d72 <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 8011d4c:	68b9      	ldr	r1, [r7, #8]
 8011d4e:	6978      	ldr	r0, [r7, #20]
 8011d50:	f7ff fa4f 	bl	80111f2 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d00a      	beq.n	8011d72 <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	68b8      	ldr	r0, [r7, #8]
 8011d60:	f7ff ffae 	bl	8011cc0 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8011d64:	f06f 0166 	mvn.w	r1, #102	; 0x66
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f7fd fd5d 	bl	800f828 <SCPI_ErrorPush>
            return FALSE;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e034      	b.n	8011ddc <SCPI_Parameter+0xf4>
        }
    }

    context->input_count++;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	3314      	adds	r3, #20
 8011d80:	68b9      	ldr	r1, [r7, #8]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fa4e 	bl	8012224 <scpiParser_parseProgramData>

    switch (parameter->type) {
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	3b06      	subs	r3, #6
 8011d8e:	2b0a      	cmp	r3, #10
 8011d90:	d81a      	bhi.n	8011dc8 <SCPI_Parameter+0xe0>
 8011d92:	a201      	add	r2, pc, #4	; (adr r2, 8011d98 <SCPI_Parameter+0xb0>)
 8011d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d98:	08011dc5 	.word	0x08011dc5
 8011d9c:	08011dc5 	.word	0x08011dc5
 8011da0:	08011dc5 	.word	0x08011dc5
 8011da4:	08011dc5 	.word	0x08011dc5
 8011da8:	08011dc5 	.word	0x08011dc5
 8011dac:	08011dc5 	.word	0x08011dc5
 8011db0:	08011dc9 	.word	0x08011dc9
 8011db4:	08011dc5 	.word	0x08011dc5
 8011db8:	08011dc5 	.word	0x08011dc5
 8011dbc:	08011dc5 	.word	0x08011dc5
 8011dc0:	08011dc5 	.word	0x08011dc5
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e009      	b.n	8011ddc <SCPI_Parameter+0xf4>
        default:
            invalidateToken(parameter, NULL);
 8011dc8:	2100      	movs	r1, #0
 8011dca:	68b8      	ldr	r0, [r7, #8]
 8011dcc:	f7ff ff78 	bl	8011cc0 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8011dd0:	f06f 0196 	mvn.w	r1, #150	; 0x96
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f7fd fd27 	bl	800f828 <SCPI_ErrorPush>
            return FALSE;
 8011dda:	2300      	movs	r3, #0
    }
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3718      	adds	r7, #24
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	fffffeca 	.word	0xfffffeca

08011de8 <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	3b06      	subs	r3, #6
 8011dfa:	2b05      	cmp	r3, #5
 8011dfc:	d812      	bhi.n	8011e24 <SCPI_ParamIsNumber+0x3c>
 8011dfe:	a201      	add	r2, pc, #4	; (adr r2, 8011e04 <SCPI_ParamIsNumber+0x1c>)
 8011e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e04:	08011e1d 	.word	0x08011e1d
 8011e08:	08011e1d 	.word	0x08011e1d
 8011e0c:	08011e1d 	.word	0x08011e1d
 8011e10:	08011e25 	.word	0x08011e25
 8011e14:	08011e1d 	.word	0x08011e1d
 8011e18:	08011e21 	.word	0x08011e21
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e002      	b.n	8011e26 <SCPI_ParamIsNumber+0x3e>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 8011e20:	78fb      	ldrb	r3, [r7, #3]
 8011e22:	e000      	b.n	8011e26 <SCPI_ParamIsNumber+0x3e>
        default:
            return FALSE;
 8011e24:	2300      	movs	r3, #0
    }
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	370c      	adds	r7, #12
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr
 8011e32:	bf00      	nop

08011e34 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
 8011e40:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d105      	bne.n	8011e54 <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8011e48:	4933      	ldr	r1, [pc, #204]	; (8011f18 <ParamSignToUInt32+0xe4>)
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7fd fcec 	bl	800f828 <SCPI_ErrorPush>
        return FALSE;
 8011e50:	2300      	movs	r3, #0
 8011e52:	e05d      	b.n	8011f10 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	3b06      	subs	r3, #6
 8011e5a:	2b05      	cmp	r3, #5
 8011e5c:	d857      	bhi.n	8011f0e <ParamSignToUInt32+0xda>
 8011e5e:	a201      	add	r2, pc, #4	; (adr r2, 8011e64 <ParamSignToUInt32+0x30>)
 8011e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e64:	08011e7d 	.word	0x08011e7d
 8011e68:	08011e99 	.word	0x08011e99
 8011e6c:	08011eb5 	.word	0x08011eb5
 8011e70:	08011f0f 	.word	0x08011f0f
 8011e74:	08011ed1 	.word	0x08011ed1
 8011e78:	08011ed1 	.word	0x08011ed1
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	2210      	movs	r2, #16
 8011e82:	6879      	ldr	r1, [r7, #4]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f000 fc2d 	bl	80126e4 <strBaseToUInt32>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	bf14      	ite	ne
 8011e90:	2301      	movne	r3, #1
 8011e92:	2300      	moveq	r3, #0
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	e03b      	b.n	8011f10 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	2208      	movs	r2, #8
 8011e9e:	6879      	ldr	r1, [r7, #4]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f000 fc1f 	bl	80126e4 <strBaseToUInt32>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	bf14      	ite	ne
 8011eac:	2301      	movne	r3, #1
 8011eae:	2300      	moveq	r3, #0
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	e02d      	b.n	8011f10 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	2202      	movs	r2, #2
 8011eba:	6879      	ldr	r1, [r7, #4]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f000 fc11 	bl	80126e4 <strBaseToUInt32>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	bf14      	ite	ne
 8011ec8:	2301      	movne	r3, #1
 8011eca:	2300      	moveq	r3, #0
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	e01f      	b.n	8011f10 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 8011ed0:	78fb      	ldrb	r3, [r7, #3]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d00d      	beq.n	8011ef2 <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	220a      	movs	r2, #10
 8011edc:	6879      	ldr	r1, [r7, #4]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 fbe6 	bl	80126b0 <strBaseToInt32>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	bf14      	ite	ne
 8011eea:	2301      	movne	r3, #1
 8011eec:	2300      	moveq	r3, #0
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	e00e      	b.n	8011f10 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	220a      	movs	r2, #10
 8011ef8:	6879      	ldr	r1, [r7, #4]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fbf2 	bl	80126e4 <strBaseToUInt32>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	bf14      	ite	ne
 8011f06:	2301      	movne	r3, #1
 8011f08:	2300      	moveq	r3, #0
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	e000      	b.n	8011f10 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 8011f0e:	2300      	movs	r3, #0
    }
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3710      	adds	r7, #16
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	fffffeca 	.word	0xfffffeca

08011f1c <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b088      	sub	sp, #32
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	4611      	mov	r1, r2
 8011f28:	461a      	mov	r2, r3
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	71fb      	strb	r3, [r7, #7]
 8011f2e:	4613      	mov	r3, r2
 8011f30:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d105      	bne.n	8011f44 <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8011f38:	4920      	ldr	r1, [pc, #128]	; (8011fbc <ParamSignUInt32+0xa0>)
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7fd fc74 	bl	800f828 <SCPI_ErrorPush>
        return FALSE;
 8011f40:	2300      	movs	r3, #0
 8011f42:	e037      	b.n	8011fb4 <ParamSignUInt32+0x98>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8011f44:	79fa      	ldrb	r2, [r7, #7]
 8011f46:	f107 0310 	add.w	r3, r7, #16
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7ff fecb 	bl	8011ce8 <SCPI_Parameter>
 8011f52:	4603      	mov	r3, r0
 8011f54:	77fb      	strb	r3, [r7, #31]
    if (result) {
 8011f56:	7ffb      	ldrb	r3, [r7, #31]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d02a      	beq.n	8011fb2 <ParamSignUInt32+0x96>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8011f5c:	f107 0310 	add.w	r3, r7, #16
 8011f60:	2100      	movs	r1, #0
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7ff ff40 	bl	8011de8 <SCPI_ParamIsNumber>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d009      	beq.n	8011f82 <ParamSignUInt32+0x66>
            result = ParamSignToUInt32(context, &param, value, sign);
 8011f6e:	79bb      	ldrb	r3, [r7, #6]
 8011f70:	f107 0110 	add.w	r1, r7, #16
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	68f8      	ldr	r0, [r7, #12]
 8011f78:	f7ff ff5c 	bl	8011e34 <ParamSignToUInt32>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	77fb      	strb	r3, [r7, #31]
 8011f80:	e017      	b.n	8011fb2 <ParamSignUInt32+0x96>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8011f82:	f107 0310 	add.w	r3, r7, #16
 8011f86:	2101      	movs	r1, #1
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff ff2d 	bl	8011de8 <SCPI_ParamIsNumber>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d007      	beq.n	8011fa4 <ParamSignUInt32+0x88>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8011f94:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7fd fc45 	bl	800f828 <SCPI_ErrorPush>
            result = FALSE;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	77fb      	strb	r3, [r7, #31]
 8011fa2:	e006      	b.n	8011fb2 <ParamSignUInt32+0x96>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8011fa4:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f7fd fc3d 	bl	800f828 <SCPI_ErrorPush>
            result = FALSE;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 8011fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3720      	adds	r7, #32
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	fffffeca 	.word	0xfffffeca

08011fc0 <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	4613      	mov	r3, r2
 8011fcc:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 8011fce:	79fa      	ldrb	r2, [r7, #7]
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	68b9      	ldr	r1, [r7, #8]
 8011fd4:	68f8      	ldr	r0, [r7, #12]
 8011fd6:	f7ff ffa1 	bl	8011f1c <ParamSignUInt32>
 8011fda:	4603      	mov	r3, r0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <SCPI_ParamUInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory) {
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	4613      	mov	r3, r2
 8011ff0:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, value, mandatory, FALSE);
 8011ff2:	79fa      	ldrb	r2, [r7, #7]
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	68b9      	ldr	r1, [r7, #8]
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	f7ff ff8f 	bl	8011f1c <ParamSignUInt32>
 8011ffe:	4603      	mov	r3, r0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <SCPI_ParamCopyText>:
    }

    return result;
}

scpi_bool_t SCPI_ParamCopyText(scpi_t * context, char * buffer, size_t buffer_len, size_t * copy_len, scpi_bool_t mandatory) {
 8012008:	b580      	push	{r7, lr}
 801200a:	b08c      	sub	sp, #48	; 0x30
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
 8012014:	603b      	str	r3, [r7, #0]
    scpi_parameter_t param;
    size_t i_from;
    size_t i_to;
    char quote;

    if (!buffer || !copy_len) {
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <SCPI_ParamCopyText+0x1a>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d105      	bne.n	801202e <SCPI_ParamCopyText+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8012022:	4935      	ldr	r1, [pc, #212]	; (80120f8 <SCPI_ParamCopyText+0xf0>)
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f7fd fbff 	bl	800f828 <SCPI_ErrorPush>
        return FALSE;
 801202a:	2300      	movs	r3, #0
 801202c:	e05f      	b.n	80120ee <SCPI_ParamCopyText+0xe6>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 801202e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012032:	f107 0314 	add.w	r3, r7, #20
 8012036:	4619      	mov	r1, r3
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f7ff fe55 	bl	8011ce8 <SCPI_Parameter>
 801203e:	4603      	mov	r3, r0
 8012040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (result) {
 8012044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012048:	2b00      	cmp	r3, #0
 801204a:	d04b      	beq.n	80120e4 <SCPI_ParamCopyText+0xdc>

        switch (param.type) {
 801204c:	7d3b      	ldrb	r3, [r7, #20]
 801204e:	3b0e      	subs	r3, #14
 8012050:	2b01      	cmp	r3, #1
 8012052:	d83e      	bhi.n	80120d2 <SCPI_ParamCopyText+0xca>
            case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
            case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
                quote = param.type == SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA ? '\'' : '"';
 8012054:	7d3b      	ldrb	r3, [r7, #20]
 8012056:	2b0e      	cmp	r3, #14
 8012058:	d101      	bne.n	801205e <SCPI_ParamCopyText+0x56>
 801205a:	2327      	movs	r3, #39	; 0x27
 801205c:	e000      	b.n	8012060 <SCPI_ParamCopyText+0x58>
 801205e:	2322      	movs	r3, #34	; 0x22
 8012060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8012064:	2301      	movs	r3, #1
 8012066:	62bb      	str	r3, [r7, #40]	; 0x28
 8012068:	2300      	movs	r3, #0
 801206a:	627b      	str	r3, [r7, #36]	; 0x24
 801206c:	e01c      	b.n	80120a8 <SCPI_ParamCopyText+0xa0>
                    if (i_from >= buffer_len) {
 801206e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	429a      	cmp	r2, r3
 8012074:	d21f      	bcs.n	80120b6 <SCPI_ParamCopyText+0xae>
                        break;
                    }
                    buffer[i_to] = param.ptr[i_from];
 8012076:	69ba      	ldr	r2, [r7, #24]
 8012078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207a:	441a      	add	r2, r3
 801207c:	68b9      	ldr	r1, [r7, #8]
 801207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012080:	440b      	add	r3, r1
 8012082:	7812      	ldrb	r2, [r2, #0]
 8012084:	701a      	strb	r2, [r3, #0]
                    i_to++;
 8012086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012088:	3301      	adds	r3, #1
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
                    if (param.ptr[i_from] == quote) {
 801208c:	69ba      	ldr	r2, [r7, #24]
 801208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012090:	4413      	add	r3, r2
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8012098:	429a      	cmp	r2, r3
 801209a:	d102      	bne.n	80120a2 <SCPI_ParamCopyText+0x9a>
                        i_from++;
 801209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209e:	3301      	adds	r3, #1
 80120a0:	62bb      	str	r3, [r7, #40]	; 0x28
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 80120a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a4:	3301      	adds	r3, #1
 80120a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	461a      	mov	r2, r3
 80120ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d3dc      	bcc.n	801206e <SCPI_ParamCopyText+0x66>
 80120b4:	e000      	b.n	80120b8 <SCPI_ParamCopyText+0xb0>
                        break;
 80120b6:	bf00      	nop
                    }
                }
                *copy_len = i_to;
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120bc:	601a      	str	r2, [r3, #0]
                if (i_to < buffer_len) {
 80120be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d210      	bcs.n	80120e8 <SCPI_ParamCopyText+0xe0>
                    buffer[i_to] = 0;
 80120c6:	68ba      	ldr	r2, [r7, #8]
 80120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ca:	4413      	add	r3, r2
 80120cc:	2200      	movs	r2, #0
 80120ce:	701a      	strb	r2, [r3, #0]
                }
                break;
 80120d0:	e00a      	b.n	80120e8 <SCPI_ParamCopyText+0xe0>
            default:
                SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 80120d2:	f06f 0167 	mvn.w	r1, #103	; 0x67
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f7fd fba6 	bl	800f828 <SCPI_ErrorPush>
                result = FALSE;
 80120dc:	2300      	movs	r3, #0
 80120de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120e2:	e002      	b.n	80120ea <SCPI_ParamCopyText+0xe2>
        }
    }
 80120e4:	bf00      	nop
 80120e6:	e000      	b.n	80120ea <SCPI_ParamCopyText+0xe2>
                break;
 80120e8:	bf00      	nop

    return result;
 80120ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3730      	adds	r7, #48	; 0x30
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	fffffeca 	.word	0xfffffeca

080120fc <SCPI_ParamToChoice>:
 * @param parameter - should be PROGRAM_MNEMONIC
 * @param options - NULL terminated list of choices
 * @param value - index to options
 * @return
 */
scpi_bool_t SCPI_ParamToChoice(scpi_t * context, scpi_parameter_t * parameter, const scpi_choice_def_t * options, int32_t * value) {
 80120fc:	b590      	push	{r4, r7, lr}
 80120fe:	b089      	sub	sp, #36	; 0x24
 8012100:	af02      	add	r7, sp, #8
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	607a      	str	r2, [r7, #4]
 8012108:	603b      	str	r3, [r7, #0]
    size_t res;
    scpi_bool_t result = FALSE;
 801210a:	2300      	movs	r3, #0
 801210c:	74fb      	strb	r3, [r7, #19]

    if (!options || !value) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d002      	beq.n	801211a <SCPI_ParamToChoice+0x1e>
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d105      	bne.n	8012126 <SCPI_ParamToChoice+0x2a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 801211a:	4929      	ldr	r1, [pc, #164]	; (80121c0 <SCPI_ParamToChoice+0xc4>)
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f7fd fb83 	bl	800f828 <SCPI_ErrorPush>
        return FALSE;
 8012122:	2300      	movs	r3, #0
 8012124:	e048      	b.n	80121b8 <SCPI_ParamToChoice+0xbc>
    }

    if (parameter->type == SCPI_TOKEN_PROGRAM_MNEMONIC) {
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	2b09      	cmp	r3, #9
 801212c:	d13e      	bne.n	80121ac <SCPI_ParamToChoice+0xb0>
        for (res = 0; options[res].name; ++res) {
 801212e:	2300      	movs	r3, #0
 8012130:	617b      	str	r3, [r7, #20]
 8012132:	e028      	b.n	8012186 <SCPI_ParamToChoice+0x8a>
            if (matchPattern(options[res].name, strlen(options[res].name), parameter->ptr, parameter->len, NULL)) {
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	4413      	add	r3, r2
 801213c:	681c      	ldr	r4, [r3, #0]
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	00db      	lsls	r3, r3, #3
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	4413      	add	r3, r2
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	4618      	mov	r0, r3
 801214a:	f7ee f883 	bl	8000254 <strlen>
 801214e:	4601      	mov	r1, r0
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	685a      	ldr	r2, [r3, #4]
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	4618      	mov	r0, r3
 801215a:	2300      	movs	r3, #0
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	4603      	mov	r3, r0
 8012160:	4620      	mov	r0, r4
 8012162:	f000 fbad 	bl	80128c0 <matchPattern>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d009      	beq.n	8012180 <SCPI_ParamToChoice+0x84>
                *value = options[res].tag;
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	4413      	add	r3, r2
 8012174:	685a      	ldr	r2, [r3, #4]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	601a      	str	r2, [r3, #0]
                result = TRUE;
 801217a:	2301      	movs	r3, #1
 801217c:	74fb      	strb	r3, [r7, #19]
                break;
 801217e:	e009      	b.n	8012194 <SCPI_ParamToChoice+0x98>
        for (res = 0; options[res].name; ++res) {
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	3301      	adds	r3, #1
 8012184:	617b      	str	r3, [r7, #20]
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	00db      	lsls	r3, r3, #3
 801218a:	687a      	ldr	r2, [r7, #4]
 801218c:	4413      	add	r3, r2
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1cf      	bne.n	8012134 <SCPI_ParamToChoice+0x38>
            }
        }

        if (!result) {
 8012194:	7cfb      	ldrb	r3, [r7, #19]
 8012196:	f083 0301 	eor.w	r3, r3, #1
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00a      	beq.n	80121b6 <SCPI_ParamToChoice+0xba>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80121a0:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f7fd fb3f 	bl	800f828 <SCPI_ErrorPush>
 80121aa:	e004      	b.n	80121b6 <SCPI_ParamToChoice+0xba>
        }
    } else {
        SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 80121ac:	f06f 0167 	mvn.w	r1, #103	; 0x67
 80121b0:	68f8      	ldr	r0, [r7, #12]
 80121b2:	f7fd fb39 	bl	800f828 <SCPI_ErrorPush>
    }

    return result;
 80121b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	371c      	adds	r7, #28
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd90      	pop	{r4, r7, pc}
 80121c0:	fffffeca 	.word	0xfffffeca

080121c4 <SCPI_ParamChoice>:
 * @param options
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamChoice(scpi_t * context, const scpi_choice_def_t * options, int32_t * value, scpi_bool_t mandatory) {
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b088      	sub	sp, #32
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
 80121d0:	70fb      	strb	r3, [r7, #3]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!options || !value) {
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d002      	beq.n	80121de <SCPI_ParamChoice+0x1a>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d105      	bne.n	80121ea <SCPI_ParamChoice+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80121de:	4910      	ldr	r1, [pc, #64]	; (8012220 <SCPI_ParamChoice+0x5c>)
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7fd fb21 	bl	800f828 <SCPI_ErrorPush>
        return FALSE;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e015      	b.n	8012216 <SCPI_ParamChoice+0x52>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 80121ea:	78fa      	ldrb	r2, [r7, #3]
 80121ec:	f107 0310 	add.w	r3, r7, #16
 80121f0:	4619      	mov	r1, r3
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f7ff fd78 	bl	8011ce8 <SCPI_Parameter>
 80121f8:	4603      	mov	r3, r0
 80121fa:	77fb      	strb	r3, [r7, #31]
    if (result) {
 80121fc:	7ffb      	ldrb	r3, [r7, #31]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d008      	beq.n	8012214 <SCPI_ParamChoice+0x50>
        result = SCPI_ParamToChoice(context, &param, options, value);
 8012202:	f107 0110 	add.w	r1, r7, #16
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	68ba      	ldr	r2, [r7, #8]
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f7ff ff76 	bl	80120fc <SCPI_ParamToChoice>
 8012210:	4603      	mov	r3, r0
 8012212:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 8012214:	7ffb      	ldrb	r3, [r7, #31]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3720      	adds	r7, #32
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	fffffeca 	.word	0xfffffeca

08012224 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8012224:	b580      	push	{r7, lr}
 8012226:	b08a      	sub	sp, #40	; 0x28
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 801222e:	2300      	movs	r3, #0
 8012230:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 8012232:	2300      	movs	r3, #0
 8012234:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8012236:	f107 030c 	add.w	r3, r7, #12
 801223a:	4619      	mov	r1, r3
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7fe fa58 	bl	80106f2 <scpiLex_WhiteSpace>
 8012242:	4602      	mov	r2, r0
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	4413      	add	r3, r2
 8012248:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	2b00      	cmp	r3, #0
 801224e:	d104      	bne.n	801225a <scpiParser_parseProgramData+0x36>
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7fe fcd1 	bl	8010bfa <scpiLex_NondecimalNumericData>
 8012258:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 801225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225c:	2b00      	cmp	r3, #0
 801225e:	d104      	bne.n	801226a <scpiParser_parseProgramData+0x46>
 8012260:	6839      	ldr	r1, [r7, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7fe fb2f 	bl	80108c6 <scpiLex_CharacterProgramData>
 8012268:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 801226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226c:	2b00      	cmp	r3, #0
 801226e:	d126      	bne.n	80122be <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8012270:	6839      	ldr	r1, [r7, #0]
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7fe fbcd 	bl	8010a12 <scpiLex_DecimalNumericProgramData>
 8012278:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 801227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227c:	2b00      	cmp	r3, #0
 801227e:	d01e      	beq.n	80122be <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8012280:	f107 030c 	add.w	r3, r7, #12
 8012284:	4619      	mov	r1, r3
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7fe fa33 	bl	80106f2 <scpiLex_WhiteSpace>
 801228c:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 801228e:	f107 030c 	add.w	r3, r7, #12
 8012292:	4619      	mov	r1, r3
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7fe fbf8 	bl	8010a8a <scpiLex_SuffixProgramData>
 801229a:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	dd0d      	ble.n	80122be <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	689a      	ldr	r2, [r3, #8]
 80122a6:	69f9      	ldr	r1, [r7, #28]
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	440b      	add	r3, r1
 80122ac:	441a      	add	r2, r3
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	220b      	movs	r2, #11
 80122b6:	701a      	strb	r2, [r3, #0]
                result = token->len;
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	689b      	ldr	r3, [r3, #8]
 80122bc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d104      	bne.n	80122ce <scpiParser_parseProgramData+0xaa>
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7fe fd94 	bl	8010df4 <scpiLex_StringProgramData>
 80122cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 80122ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d104      	bne.n	80122de <scpiParser_parseProgramData+0xba>
 80122d4:	6839      	ldr	r1, [r7, #0]
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7fe fe35 	bl	8010f46 <scpiLex_ArbitraryBlockProgramData>
 80122dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 80122de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d104      	bne.n	80122ee <scpiParser_parseProgramData+0xca>
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7fe ff2f 	bl	801114a <scpiLex_ProgramExpression>
 80122ec:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 80122ee:	f107 030c 	add.w	r3, r7, #12
 80122f2:	4619      	mov	r1, r3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7fe f9fc 	bl	80106f2 <scpiLex_WhiteSpace>
 80122fa:	4602      	mov	r2, r0
 80122fc:	6a3b      	ldr	r3, [r7, #32]
 80122fe:	4413      	add	r3, r2
 8012300:	623b      	str	r3, [r7, #32]

    return result + realLen;
 8012302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	4413      	add	r3, r2
}
 8012308:	4618      	mov	r0, r3
 801230a:	3728      	adds	r7, #40	; 0x28
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8012310:	b580      	push	{r7, lr}
 8012312:	b08a      	sub	sp, #40	; 0x28
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 801231c:	2300      	movs	r3, #0
 801231e:	623b      	str	r3, [r7, #32]

    token->len = -1;
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012326:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2218      	movs	r2, #24
 801232c:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	685a      	ldr	r2, [r3, #4]
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8012336:	2301      	movs	r3, #1
 8012338:	627b      	str	r3, [r7, #36]	; 0x24
 801233a:	e037      	b.n	80123ac <scpiParser_parseAllProgramData+0x9c>
        token->len += result;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	689a      	ldr	r2, [r3, #8]
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	441a      	add	r2, r3
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	2b00      	cmp	r3, #0
 801234c:	d109      	bne.n	8012362 <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	221a      	movs	r2, #26
 8012352:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	2200      	movs	r2, #0
 8012358:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 801235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801235e:	623b      	str	r3, [r7, #32]
            break;
 8012360:	e027      	b.n	80123b2 <scpiParser_parseAllProgramData+0xa2>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 8012362:	f107 0314 	add.w	r3, r7, #20
 8012366:	4619      	mov	r1, r3
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f7ff ff5b 	bl	8012224 <scpiParser_parseProgramData>
 801236e:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 8012370:	7d3b      	ldrb	r3, [r7, #20]
 8012372:	2b1a      	cmp	r3, #26
 8012374:	d006      	beq.n	8012384 <scpiParser_parseAllProgramData+0x74>
            token->len += result;
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	689a      	ldr	r2, [r3, #8]
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	441a      	add	r2, r3
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	609a      	str	r2, [r3, #8]
 8012382:	e009      	b.n	8012398 <scpiParser_parseAllProgramData+0x88>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	221a      	movs	r2, #26
 8012388:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	2200      	movs	r2, #0
 801238e:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 8012390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012394:	623b      	str	r3, [r7, #32]
            break;
 8012396:	e00c      	b.n	80123b2 <scpiParser_parseAllProgramData+0xa2>
        }
        paramCount++;
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	3301      	adds	r3, #1
 801239c:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 801239e:	f107 0314 	add.w	r3, r7, #20
 80123a2:	4619      	mov	r1, r3
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f7fe ff24 	bl	80111f2 <scpiLex_Comma>
 80123aa:	6278      	str	r0, [r7, #36]	; 0x24
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1c4      	bne.n	801233c <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	689b      	ldr	r3, [r3, #8]
 80123b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123ba:	d102      	bne.n	80123c2 <scpiParser_parseAllProgramData+0xb2>
        token->len = 0;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	2200      	movs	r2, #0
 80123c0:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d002      	beq.n	80123ce <scpiParser_parseAllProgramData+0xbe>
        *numberOfParameters = paramCount;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a3a      	ldr	r2, [r7, #32]
 80123cc:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	689b      	ldr	r3, [r3, #8]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3728      	adds	r7, #40	; 0x28
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 80123da:	b580      	push	{r7, lr}
 80123dc:	b08c      	sub	sp, #48	; 0x30
 80123de:	af00      	add	r7, sp, #0
 80123e0:	60f8      	str	r0, [r7, #12]
 80123e2:	60b9      	str	r1, [r7, #8]
 80123e4:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	627b      	str	r3, [r7, #36]	; 0x24
 80123ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f0:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 80123fc:	f107 0214 	add.w	r2, r7, #20
 8012400:	f107 0320 	add.w	r3, r7, #32
 8012404:	4611      	mov	r1, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe f973 	bl	80106f2 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	f107 0320 	add.w	r3, r7, #32
 8012412:	4611      	mov	r1, r2
 8012414:	4618      	mov	r0, r3
 8012416:	f7fe f9f4 	bl	8010802 <scpiLex_ProgramHeader>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	db1e      	blt.n	801245e <scpiParser_detectProgramMessageUnit+0x84>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 8012420:	f107 0214 	add.w	r2, r7, #20
 8012424:	f107 0320 	add.w	r3, r7, #32
 8012428:	4611      	mov	r1, r2
 801242a:	4618      	mov	r0, r3
 801242c:	f7fe f961 	bl	80106f2 <scpiLex_WhiteSpace>
 8012430:	4603      	mov	r3, r0
 8012432:	2b00      	cmp	r3, #0
 8012434:	dd0b      	ble.n	801244e <scpiParser_detectProgramMessageUnit+0x74>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f103 010c 	add.w	r1, r3, #12
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f103 0218 	add.w	r2, r3, #24
 8012442:	f107 0320 	add.w	r3, r7, #32
 8012446:	4618      	mov	r0, r3
 8012448:	f7ff ff62 	bl	8012310 <scpiParser_parseAllProgramData>
 801244c:	e014      	b.n	8012478 <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	330c      	adds	r3, #12
 8012452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012454:	4611      	mov	r1, r2
 8012456:	4618      	mov	r0, r3
 8012458:	f7ff fc32 	bl	8011cc0 <invalidateToken>
 801245c:	e00c      	b.n	8012478 <scpiParser_detectProgramMessageUnit+0x9e>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6a3a      	ldr	r2, [r7, #32]
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f7ff fc2b 	bl	8011cc0 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	330c      	adds	r3, #12
 801246e:	6a3a      	ldr	r2, [r7, #32]
 8012470:	4611      	mov	r1, r2
 8012472:	4618      	mov	r0, r3
 8012474:	f7ff fc24 	bl	8011cc0 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8012478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247a:	2b00      	cmp	r3, #0
 801247c:	d108      	bne.n	8012490 <scpiParser_detectProgramMessageUnit+0xb6>
 801247e:	f107 0214 	add.w	r2, r7, #20
 8012482:	f107 0320 	add.w	r3, r7, #32
 8012486:	4611      	mov	r1, r2
 8012488:	4618      	mov	r0, r3
 801248a:	f7fe fef8 	bl	801127e <scpiLex_NewLine>
 801248e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8012490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012492:	2b00      	cmp	r3, #0
 8012494:	d108      	bne.n	80124a8 <scpiParser_detectProgramMessageUnit+0xce>
 8012496:	f107 0214 	add.w	r2, r7, #20
 801249a:	f107 0320 	add.w	r3, r7, #32
 801249e:	4611      	mov	r1, r2
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fe fec9 	bl	8011238 <scpiLex_Semicolon>
 80124a6:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 80124a8:	f107 0320 	add.w	r3, r7, #32
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fd ff1d 	bl	80102ec <scpiLex_IsEos>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d112      	bne.n	80124de <scpiParser_detectProgramMessageUnit+0x104>
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10f      	bne.n	80124de <scpiParser_detectProgramMessageUnit+0x104>
        lex_state.pos++;
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	3301      	adds	r3, #1
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2201      	movs	r2, #1
 80124c8:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2219      	movs	r2, #25
 80124ce:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	330c      	adds	r3, #12
 80124d4:	6a3a      	ldr	r2, [r7, #32]
 80124d6:	4611      	mov	r1, r2
 80124d8:	4618      	mov	r0, r3
 80124da:	f7ff fbf1 	bl	8011cc0 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 80124de:	7d3b      	ldrb	r3, [r7, #20]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d103      	bne.n	80124ec <scpiParser_detectProgramMessageUnit+0x112>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2202      	movs	r2, #2
 80124e8:	771a      	strb	r2, [r3, #28]
 80124ea:	e009      	b.n	8012500 <scpiParser_detectProgramMessageUnit+0x126>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 80124ec:	7d3b      	ldrb	r3, [r7, #20]
 80124ee:	2b05      	cmp	r3, #5
 80124f0:	d103      	bne.n	80124fa <scpiParser_detectProgramMessageUnit+0x120>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2201      	movs	r2, #1
 80124f6:	771a      	strb	r2, [r3, #28]
 80124f8:	e002      	b.n	8012500 <scpiParser_detectProgramMessageUnit+0x126>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2200      	movs	r2, #0
 80124fe:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 8012500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012502:	461a      	mov	r2, r3
 8012504:	6a3b      	ldr	r3, [r7, #32]
 8012506:	1ad3      	subs	r3, r2, r3
}
 8012508:	4618      	mov	r0, r3
 801250a:	3730      	adds	r7, #48	; 0x30
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 8012510:	b480      	push	{r7}
 8012512:	b089      	sub	sp, #36	; 0x24
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	4413      	add	r3, r2
 8012522:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 8012524:	e011      	b.n	801254a <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	61fb      	str	r3, [r7, #28]
 801252a:	e006      	b.n	801253a <strnpbrk+0x2a>
            if (sc == c)
 801252c:	693a      	ldr	r2, [r7, #16]
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	429a      	cmp	r2, r3
 8012532:	d102      	bne.n	801253a <strnpbrk+0x2a>
                return ((char *) (str - 1));
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	3b01      	subs	r3, #1
 8012538:	e014      	b.n	8012564 <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	61fa      	str	r2, [r7, #28]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	613b      	str	r3, [r7, #16]
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1f0      	bne.n	801252c <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 801254a:	69ba      	ldr	r2, [r7, #24]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	429a      	cmp	r2, r3
 8012550:	d007      	beq.n	8012562 <strnpbrk+0x52>
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	60fa      	str	r2, [r7, #12]
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	617b      	str	r3, [r7, #20]
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d1e1      	bne.n	8012526 <strnpbrk+0x16>
    }
    return (NULL);
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3724      	adds	r7, #36	; 0x24
 8012568:	46bd      	mov	sp, r7
 801256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256e:	4770      	bx	lr

08012570 <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8012570:	b4b0      	push	{r4, r5, r7}
 8012572:	b08f      	sub	sp, #60	; 0x3c
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 801257e:	4b4a      	ldr	r3, [pc, #296]	; (80126a8 <UInt32ToStrBaseSign+0x138>)
 8012580:	f107 0414 	add.w	r4, r7, #20
 8012584:	461d      	mov	r5, r3
 8012586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801258a:	682b      	ldr	r3, [r5, #0]
 801258c:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 8012592:	2300      	movs	r3, #0
 8012594:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 801259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10b      	bne.n	80125b8 <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 80125a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d26f      	bcs.n	8012688 <UInt32ToStrBaseSign+0x118>
 80125a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125aa:	1c5a      	adds	r2, r3, #1
 80125ac:	633a      	str	r2, [r7, #48]	; 0x30
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	4413      	add	r3, r2
 80125b2:	2230      	movs	r2, #48	; 0x30
 80125b4:	701a      	strb	r2, [r3, #0]
 80125b6:	e067      	b.n	8012688 <UInt32ToStrBaseSign+0x118>
    } else {

        switch (base) {
 80125b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125bc:	2b08      	cmp	r3, #8
 80125be:	d007      	beq.n	80125d0 <UInt32ToStrBaseSign+0x60>
 80125c0:	2b10      	cmp	r3, #16
 80125c2:	d00e      	beq.n	80125e2 <UInt32ToStrBaseSign+0x72>
 80125c4:	2b02      	cmp	r3, #2
 80125c6:	d107      	bne.n	80125d8 <UInt32ToStrBaseSign+0x68>
            case 2:
                x = 0x80000000L;
 80125c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125cc:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80125ce:	e00c      	b.n	80125ea <UInt32ToStrBaseSign+0x7a>
            case 8:
                x = 0x40000000L;
 80125d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125d4:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80125d6:	e008      	b.n	80125ea <UInt32ToStrBaseSign+0x7a>
            default:
            case 10:
                base = 10;
 80125d8:	230a      	movs	r3, #10
 80125da:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 80125dc:	4b33      	ldr	r3, [pc, #204]	; (80126ac <UInt32ToStrBaseSign+0x13c>)
 80125de:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80125e0:	e003      	b.n	80125ea <UInt32ToStrBaseSign+0x7a>
            case 16:
                x = 0x10000000L;
 80125e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80125e6:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 80125e8:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 80125ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d01b      	beq.n	801262a <UInt32ToStrBaseSign+0xba>
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	da18      	bge.n	801262a <UInt32ToStrBaseSign+0xba>
 80125f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125fc:	2b0a      	cmp	r3, #10
 80125fe:	d114      	bne.n	801262a <UInt32ToStrBaseSign+0xba>
            uval = -val;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	425b      	negs	r3, r3
 8012604:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 8012606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	429a      	cmp	r2, r3
 801260c:	d20d      	bcs.n	801262a <UInt32ToStrBaseSign+0xba>
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	1c5a      	adds	r2, r3, #1
 8012612:	633a      	str	r2, [r7, #48]	; 0x30
 8012614:	68ba      	ldr	r2, [r7, #8]
 8012616:	4413      	add	r3, r2
 8012618:	222d      	movs	r2, #45	; 0x2d
 801261a:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 801261c:	e005      	b.n	801262a <UInt32ToStrBaseSign+0xba>
            x /= base;
 801261e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012624:	fbb2 f3f3 	udiv	r3, r2, r3
 8012628:	637b      	str	r3, [r7, #52]	; 0x34
        while ((uval / x) == 0) {
 801262a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012632:	2b00      	cmp	r3, #0
 8012634:	d0f3      	beq.n	801261e <UInt32ToStrBaseSign+0xae>
        }

        do {
            digit = (uint8_t) (uval / x);
 8012636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801263a:	fbb2 f3f3 	udiv	r3, r2, r3
 801263e:	b2db      	uxtb	r3, r3
 8012640:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 8012642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	429a      	cmp	r2, r3
 8012648:	d20a      	bcs.n	8012660 <UInt32ToStrBaseSign+0xf0>
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	1c5a      	adds	r2, r3, #1
 801264e:	633a      	str	r2, [r7, #48]	; 0x30
 8012650:	68ba      	ldr	r2, [r7, #8]
 8012652:	4413      	add	r3, r2
 8012654:	f107 0114 	add.w	r1, r7, #20
 8012658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801265a:	440a      	add	r2, r1
 801265c:	7812      	ldrb	r2, [r2, #0]
 801265e:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 8012660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012664:	fb02 f303 	mul.w	r3, r2, r3
 8012668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 801266e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012674:	fbb2 f3f3 	udiv	r3, r2, r3
 8012678:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 801267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801267c:	2b00      	cmp	r3, #0
 801267e:	d003      	beq.n	8012688 <UInt32ToStrBaseSign+0x118>
 8012680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	429a      	cmp	r2, r3
 8012686:	d3d6      	bcc.n	8012636 <UInt32ToStrBaseSign+0xc6>
    }

    if (pos < len) str[pos] = 0;
 8012688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	429a      	cmp	r2, r3
 801268e:	d204      	bcs.n	801269a <UInt32ToStrBaseSign+0x12a>
 8012690:	68ba      	ldr	r2, [r7, #8]
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	4413      	add	r3, r2
 8012696:	2200      	movs	r2, #0
 8012698:	701a      	strb	r2, [r3, #0]
    return pos;
 801269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 801269c:	4618      	mov	r0, r3
 801269e:	373c      	adds	r7, #60	; 0x3c
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bcb0      	pop	{r4, r5, r7}
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop
 80126a8:	080170f0 	.word	0x080170f0
 80126ac:	3b9aca00 	.word	0x3b9aca00

080126b0 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	4613      	mov	r3, r2
 80126bc:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 80126be:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80126c2:	f107 0314 	add.w	r3, r7, #20
 80126c6:	4619      	mov	r1, r3
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f001 f925 	bl	8013918 <strtol>
 80126ce:	4602      	mov	r2, r0
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	601a      	str	r2, [r3, #0]
    return endptr - str;
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	461a      	mov	r2, r3
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	1ad3      	subs	r3, r2, r3
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3718      	adds	r7, #24
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	4613      	mov	r3, r2
 80126f0:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 80126f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80126f6:	f107 0314 	add.w	r3, r7, #20
 80126fa:	4619      	mov	r1, r3
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f001 f9ad 	bl	8013a5c <strtoul>
 8012702:	4602      	mov	r2, r0
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	461a      	mov	r2, r3
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	1ad3      	subs	r3, r2, r3
}
 8012710:	4618      	mov	r0, r3
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}

08012718 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	607a      	str	r2, [r7, #4]
 8012724:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 8012726:	68ba      	ldr	r2, [r7, #8]
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	429a      	cmp	r2, r3
 801272c:	d001      	beq.n	8012732 <compareStr+0x1a>
        return FALSE;
 801272e:	2300      	movs	r3, #0
 8012730:	e00a      	b.n	8012748 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 8012732:	683a      	ldr	r2, [r7, #0]
 8012734:	6879      	ldr	r1, [r7, #4]
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f001 f83c 	bl	80137b4 <strncasecmp>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d101      	bne.n	8012746 <compareStr+0x2e>
        return TRUE;
 8012742:	2301      	movs	r3, #1
 8012744:	e000      	b.n	8012748 <compareStr+0x30>
    }

    return FALSE;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8012750:	b580      	push	{r7, lr}
 8012752:	b088      	sub	sp, #32
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 801275e:	2300      	movs	r3, #0
 8012760:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	429a      	cmp	r2, r3
 8012768:	d201      	bcs.n	801276e <compareStrAndNum+0x1e>
        return FALSE;
 801276a:	2300      	movs	r3, #0
 801276c:	e044      	b.n	80127f8 <compareStrAndNum+0xa8>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	6879      	ldr	r1, [r7, #4]
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	f001 f81e 	bl	80137b4 <strncasecmp>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d13b      	bne.n	80127f6 <compareStrAndNum+0xa6>
        result = TRUE;
 801277e:	2301      	movs	r3, #1
 8012780:	77fb      	strb	r3, [r7, #31]

        if (num) {
 8012782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012784:	2b00      	cmp	r3, #0
 8012786:	d01b      	beq.n	80127c0 <compareStrAndNum+0x70>
            if (len1 == len2) {
 8012788:	68ba      	ldr	r2, [r7, #8]
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	429a      	cmp	r2, r3
 801278e:	d032      	beq.n	80127f6 <compareStrAndNum+0xa6>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	4413      	add	r3, r2
 8012796:	f107 0114 	add.w	r1, r7, #20
 801279a:	220a      	movs	r2, #10
 801279c:	4618      	mov	r0, r3
 801279e:	f7ff ff87 	bl	80126b0 <strBaseToInt32>
 80127a2:	4602      	mov	r2, r0
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	4413      	add	r3, r2
 80127a8:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 80127aa:	69ba      	ldr	r2, [r7, #24]
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d002      	beq.n	80127b8 <compareStrAndNum+0x68>
                    result = FALSE;
 80127b2:	2300      	movs	r3, #0
 80127b4:	77fb      	strb	r3, [r7, #31]
 80127b6:	e01e      	b.n	80127f6 <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
 80127b8:	697a      	ldr	r2, [r7, #20]
 80127ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127bc:	601a      	str	r2, [r3, #0]
 80127be:	e01a      	b.n	80127f6 <compareStrAndNum+0xa6>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	61bb      	str	r3, [r7, #24]
 80127c4:	e013      	b.n	80127ee <compareStrAndNum+0x9e>
                if (!isdigit((int) str2[i])) {
 80127c6:	f000 fb5b 	bl	8012e80 <__locale_ctype_ptr>
 80127ca:	4601      	mov	r1, r0
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	4413      	add	r3, r2
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	3301      	adds	r3, #1
 80127d6:	440b      	add	r3, r1
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	f003 0304 	and.w	r3, r3, #4
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d102      	bne.n	80127e8 <compareStrAndNum+0x98>
                    result = FALSE;
 80127e2:	2300      	movs	r3, #0
 80127e4:	77fb      	strb	r3, [r7, #31]
                    break;
 80127e6:	e006      	b.n	80127f6 <compareStrAndNum+0xa6>
            for (i = len1; i < len2; i++) {
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	3301      	adds	r3, #1
 80127ec:	61bb      	str	r3, [r7, #24]
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d3e7      	bcc.n	80127c6 <compareStrAndNum+0x76>
                }
            }
        }
    }

    return result;
 80127f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3720      	adds	r7, #32
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 801280a:	2300      	movs	r3, #0
 801280c:	60fb      	str	r3, [r7, #12]
 801280e:	e012      	b.n	8012836 <patternSeparatorShortPos+0x36>
        if (islower((unsigned char) pattern[i])) {
 8012810:	f000 fb36 	bl	8012e80 <__locale_ctype_ptr>
 8012814:	4601      	mov	r1, r0
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	4413      	add	r3, r2
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	3301      	adds	r3, #1
 8012820:	440b      	add	r3, r1
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	f003 0303 	and.w	r3, r3, #3
 8012828:	2b02      	cmp	r3, #2
 801282a:	d101      	bne.n	8012830 <patternSeparatorShortPos+0x30>
            return i;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	e00d      	b.n	801284c <patternSeparatorShortPos+0x4c>
    for (i = 0; (i < len) && pattern[i]; i++) {
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	3301      	adds	r3, #1
 8012834:	60fb      	str	r3, [r7, #12]
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	429a      	cmp	r2, r3
 801283c:	d205      	bcs.n	801284a <patternSeparatorShortPos+0x4a>
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	4413      	add	r3, r2
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1e2      	bne.n	8012810 <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 801284a:	68fb      	ldr	r3, [r7, #12]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 801285e:	4a09      	ldr	r2, [pc, #36]	; (8012884 <patternSeparatorPos+0x30>)
 8012860:	6839      	ldr	r1, [r7, #0]
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff fe54 	bl	8012510 <strnpbrk>
 8012868:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <patternSeparatorPos+0x20>
        return len;
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	e002      	b.n	801287a <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 8012874:	68fa      	ldr	r2, [r7, #12]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	1ad3      	subs	r3, r2, r3
    }
}
 801287a:	4618      	mov	r0, r3
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	08017110 	.word	0x08017110

08012888 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 8012892:	4a0a      	ldr	r2, [pc, #40]	; (80128bc <cmdSeparatorPos+0x34>)
 8012894:	6839      	ldr	r1, [r7, #0]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ff fe3a 	bl	8012510 <strnpbrk>
 801289c:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d102      	bne.n	80128aa <cmdSeparatorPos+0x22>
        result = len;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	60fb      	str	r3, [r7, #12]
 80128a8:	e003      	b.n	80128b2 <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 80128aa:	68ba      	ldr	r2, [r7, #8]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	1ad3      	subs	r3, r2, r3
 80128b0:	60fb      	str	r3, [r7, #12]
    }

    return result;
 80128b2:	68fb      	ldr	r3, [r7, #12]
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	08017118 	.word	0x08017118

080128c0 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b088      	sub	sp, #32
 80128c4:	af02      	add	r7, sp, #8
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]
 80128cc:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d02c      	beq.n	801292e <matchPattern+0x6e>
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	3b01      	subs	r3, #1
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	4413      	add	r3, r2
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	2b23      	cmp	r3, #35	; 0x23
 80128e0:	d125      	bne.n	801292e <matchPattern+0x6e>
        size_t new_pattern_len = pattern_len - 1;
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	3b01      	subs	r3, #1
 80128e6:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 80128e8:	6979      	ldr	r1, [r7, #20]
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f7ff ff88 	bl	8012800 <patternSeparatorShortPos>
 80128f0:	4603      	mov	r3, r0
 80128f2:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 80128f4:	6a3b      	ldr	r3, [r7, #32]
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	6979      	ldr	r1, [r7, #20]
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f7ff ff26 	bl	8012750 <compareStrAndNum>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d10a      	bne.n	8012920 <matchPattern+0x60>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 801290a:	6939      	ldr	r1, [r7, #16]
 801290c:	6a3b      	ldr	r3, [r7, #32]
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	68f8      	ldr	r0, [r7, #12]
 8012916:	f7ff ff1b 	bl	8012750 <compareStrAndNum>
 801291a:	4603      	mov	r3, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <matchPattern+0x64>
 8012920:	2301      	movs	r3, #1
 8012922:	e000      	b.n	8012926 <matchPattern+0x66>
 8012924:	2300      	movs	r3, #0
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	b2db      	uxtb	r3, r3
 801292c:	e01d      	b.n	801296a <matchPattern+0xaa>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 801292e:	68b9      	ldr	r1, [r7, #8]
 8012930:	68f8      	ldr	r0, [r7, #12]
 8012932:	f7ff ff65 	bl	8012800 <patternSeparatorShortPos>
 8012936:	4603      	mov	r3, r0
 8012938:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	68b9      	ldr	r1, [r7, #8]
 8012940:	68f8      	ldr	r0, [r7, #12]
 8012942:	f7ff fee9 	bl	8012718 <compareStr>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d108      	bne.n	801295e <matchPattern+0x9e>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 801294c:	6939      	ldr	r1, [r7, #16]
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f7ff fee0 	bl	8012718 <compareStr>
 8012958:	4603      	mov	r3, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 801295a:	2b00      	cmp	r3, #0
 801295c:	d001      	beq.n	8012962 <matchPattern+0xa2>
 801295e:	2301      	movs	r3, #1
 8012960:	e000      	b.n	8012964 <matchPattern+0xa4>
 8012962:	2300      	movs	r3, #0
 8012964:	f003 0301 	and.w	r3, r3, #1
 8012968:	b2db      	uxtb	r3, r3
    }
}
 801296a:	4618      	mov	r0, r3
 801296c:	3718      	adds	r7, #24
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8012972:	b580      	push	{r7, lr}
 8012974:	b090      	sub	sp, #64	; 0x40
 8012976:	af02      	add	r7, sp, #8
 8012978:	60f8      	str	r0, [r7, #12]
 801297a:	60b9      	str	r1, [r7, #8]
 801297c:	607a      	str	r2, [r7, #4]
 801297e:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 8012980:	2300      	movs	r3, #0
 8012982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 8012986:	2300      	movs	r3, #0
 8012988:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 801298a:	2300      	movs	r3, #0
 801298c:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 801298e:	2300      	movs	r3, #0
 8012990:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 801299a:	68f8      	ldr	r0, [r7, #12]
 801299c:	f7ed fc5a 	bl	8000254 <strlen>
 80129a0:	4603      	mov	r3, r0
 80129a2:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80129a8:	6879      	ldr	r1, [r7, #4]
 80129aa:	68b8      	ldr	r0, [r7, #8]
 80129ac:	f000 fa0e 	bl	8012dcc <BSD_strnlen>
 80129b0:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80129b2:	6a3b      	ldr	r3, [r7, #32]
 80129b4:	3b01      	subs	r3, #1
 80129b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129b8:	4413      	add	r3, r2
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b3f      	cmp	r3, #63	; 0x3f
 80129be:	d10f      	bne.n	80129e0 <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	3b01      	subs	r3, #1
 80129c4:	69fa      	ldr	r2, [r7, #28]
 80129c6:	4413      	add	r3, r2
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b3f      	cmp	r3, #63	; 0x3f
 80129cc:	d106      	bne.n	80129dc <matchCommand+0x6a>
            cmd_len -= 1;
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 80129d4:	6a3b      	ldr	r3, [r7, #32]
 80129d6:	3b01      	subs	r3, #1
 80129d8:	623b      	str	r3, [r7, #32]
 80129da:	e001      	b.n	80129e0 <matchCommand+0x6e>
        } else {
            return FALSE;
 80129dc:	2300      	movs	r3, #0
 80129de:	e18d      	b.n	8012cfc <matchCommand+0x38a>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 80129e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	2b5b      	cmp	r3, #91	; 0x5b
 80129e6:	d108      	bne.n	80129fa <matchCommand+0x88>
        SKIP_PATTERN(1);
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ea:	3301      	adds	r3, #1
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
 80129ee:	6a3b      	ldr	r3, [r7, #32]
 80129f0:	3b01      	subs	r3, #1
 80129f2:	623b      	str	r3, [r7, #32]
        brackets++;
 80129f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f6:	3301      	adds	r3, #1
 80129f8:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	2b3a      	cmp	r3, #58	; 0x3a
 8012a00:	d105      	bne.n	8012a0e <matchCommand+0x9c>
        SKIP_PATTERN(1);
 8012a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a04:	3301      	adds	r3, #1
 8012a06:	627b      	str	r3, [r7, #36]	; 0x24
 8012a08:	6a3b      	ldr	r3, [r7, #32]
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 8012a0e:	69fb      	ldr	r3, [r7, #28]
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	2b3a      	cmp	r3, #58	; 0x3a
 8012a14:	d110      	bne.n	8012a38 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d90d      	bls.n	8012a38 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	2b2a      	cmp	r3, #42	; 0x2a
 8012a24:	d006      	beq.n	8012a34 <matchCommand+0xc2>
                SKIP_CMD(1);
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	3301      	adds	r3, #1
 8012a2a:	61fb      	str	r3, [r7, #28]
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	61bb      	str	r3, [r7, #24]
 8012a32:	e001      	b.n	8012a38 <matchCommand+0xc6>
            } else {
                return FALSE;
 8012a34:	2300      	movs	r3, #0
 8012a36:	e161      	b.n	8012cfc <matchCommand+0x38a>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8012a38:	6a3b      	ldr	r3, [r7, #32]
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a3e:	f7ff ff09 	bl	8012854 <patternSeparatorPos>
 8012a42:	4603      	mov	r3, r0
 8012a44:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 8012a46:	69b9      	ldr	r1, [r7, #24]
 8012a48:	69f8      	ldr	r0, [r7, #28]
 8012a4a:	f7ff ff1d 	bl	8012888 <cmdSeparatorPos>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dd1c      	ble.n	8012a92 <matchCommand+0x120>
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a5e:	4413      	add	r3, r2
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	2b23      	cmp	r3, #35	; 0x23
 8012a64:	d115      	bne.n	8012a92 <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00c      	beq.n	8012a86 <matchCommand+0x114>
 8012a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d208      	bcs.n	8012a86 <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 8012a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	683a      	ldr	r2, [r7, #0]
 8012a7a:	4413      	add	r3, r2
 8012a7c:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a82:	601a      	str	r2, [r3, #0]
 8012a84:	e001      	b.n	8012a8a <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 8012a86:	2300      	movs	r3, #0
 8012a88:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 8012a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a90:	e001      	b.n	8012a96 <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 8012a92:	2300      	movs	r3, #0
 8012a94:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 8012a96:	6939      	ldr	r1, [r7, #16]
 8012a98:	697a      	ldr	r2, [r7, #20]
 8012a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9c:	9300      	str	r3, [sp, #0]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	69fa      	ldr	r2, [r7, #28]
 8012aa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012aa4:	f7ff ff0c 	bl	80128c0 <matchPattern>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f000 80e9 	beq.w	8012c82 <matchCommand+0x310>
            SKIP_PATTERN(pattern_sep_pos);
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ab4:	4413      	add	r3, r2
 8012ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8012ab8:	6a3a      	ldr	r2, [r7, #32]
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	69fa      	ldr	r2, [r7, #28]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	61fb      	str	r3, [r7, #28]
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	69ba      	ldr	r2, [r7, #24]
 8012acc:	1ad3      	subs	r3, r2, r3
 8012ace:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 8012ad6:	6a3b      	ldr	r3, [r7, #32]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d103      	bne.n	8012ae4 <matchCommand+0x172>
 8012adc:	69bb      	ldr	r3, [r7, #24]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f000 8107 	beq.w	8012cf2 <matchCommand+0x380>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 8012ae4:	6a3b      	ldr	r3, [r7, #32]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d106      	bne.n	8012af8 <matchCommand+0x186>
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d003      	beq.n	8012af8 <matchCommand+0x186>
                result = FALSE;
 8012af0:	2300      	movs	r3, #0
 8012af2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8012af6:	e0ff      	b.n	8012cf8 <matchCommand+0x386>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d138      	bne.n	8012b70 <matchCommand+0x1fe>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 8012afe:	e02c      	b.n	8012b5a <matchCommand+0x1e8>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8012b00:	6a3b      	ldr	r3, [r7, #32]
 8012b02:	4619      	mov	r1, r3
 8012b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b06:	f7ff fea5 	bl	8012854 <patternSeparatorPos>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b12:	4413      	add	r3, r2
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	2b5b      	cmp	r3, #91	; 0x5b
 8012b18:	d002      	beq.n	8012b20 <matchCommand+0x1ae>
 8012b1a:	2b5d      	cmp	r3, #93	; 0x5d
 8012b1c:	d004      	beq.n	8012b28 <matchCommand+0x1b6>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 8012b1e:	e007      	b.n	8012b30 <matchCommand+0x1be>
                            brackets++;
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	3301      	adds	r3, #1
 8012b24:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 8012b26:	e003      	b.n	8012b30 <matchCommand+0x1be>
                            brackets--;
 8012b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2a:	3b01      	subs	r3, #1
 8012b2c:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 8012b2e:	bf00      	nop
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	3301      	adds	r3, #1
 8012b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b36:	4413      	add	r3, r2
 8012b38:	627b      	str	r3, [r7, #36]	; 0x24
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	6a3a      	ldr	r2, [r7, #32]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 8012b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d107      	bne.n	8012b5a <matchCommand+0x1e8>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 8012b4a:	6a3b      	ldr	r3, [r7, #32]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	dd07      	ble.n	8012b60 <matchCommand+0x1ee>
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2b5b      	cmp	r3, #91	; 0x5b
 8012b56:	d103      	bne.n	8012b60 <matchCommand+0x1ee>
                            continue;
 8012b58:	bf00      	nop
                while (pattern_len) {
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1cf      	bne.n	8012b00 <matchCommand+0x18e>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 8012b60:	6a3b      	ldr	r3, [r7, #32]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 80c7 	beq.w	8012cf6 <matchCommand+0x384>
                    result = FALSE;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 8012b6e:	e0c2      	b.n	8012cf6 <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	dd16      	ble.n	8012ba4 <matchCommand+0x232>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 8012b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d110      	bne.n	8012ba4 <matchCommand+0x232>
                    && (pattern_ptr[0] == ':'))) {
 8012b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	2b3a      	cmp	r3, #58	; 0x3a
 8012b88:	d10c      	bne.n	8012ba4 <matchCommand+0x232>
                SKIP_PATTERN(1);
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	3b01      	subs	r3, #1
 8012b94:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	61fb      	str	r3, [r7, #28]
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	61bb      	str	r3, [r7, #24]
 8012ba2:	e0a5      	b.n	8012cf0 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 8012ba4:	6a3b      	ldr	r3, [r7, #32]
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	dd1f      	ble.n	8012bea <matchCommand+0x278>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	3301      	adds	r3, #1
 8012bae:	781a      	ldrb	r2, [r3, #0]
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d118      	bne.n	8012bea <matchCommand+0x278>
                    && (pattern_ptr[0] == '[')
 8012bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b5b      	cmp	r3, #91	; 0x5b
 8012bbe:	d114      	bne.n	8012bea <matchCommand+0x278>
                    && (pattern_ptr[1] == ':')) {
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2b3a      	cmp	r3, #58	; 0x3a
 8012bc8:	d10f      	bne.n	8012bea <matchCommand+0x278>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 8012bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bcc:	3302      	adds	r3, #2
 8012bce:	627b      	str	r3, [r7, #36]	; 0x24
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	3b02      	subs	r3, #2
 8012bd4:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	61fb      	str	r3, [r7, #28]
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	3b01      	subs	r3, #1
 8012be0:	61bb      	str	r3, [r7, #24]
                brackets++;
 8012be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be4:	3301      	adds	r3, #1
 8012be6:	633b      	str	r3, [r7, #48]	; 0x30
 8012be8:	e082      	b.n	8012cf0 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 8012bea:	6a3b      	ldr	r3, [r7, #32]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	dd1f      	ble.n	8012c30 <matchCommand+0x2be>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	781a      	ldrb	r2, [r3, #0]
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d118      	bne.n	8012c30 <matchCommand+0x2be>
                    && (pattern_ptr[0] == ']')
 8012bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	2b5d      	cmp	r3, #93	; 0x5d
 8012c04:	d114      	bne.n	8012c30 <matchCommand+0x2be>
                    && (pattern_ptr[1] == ':')) {
 8012c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c08:	3301      	adds	r3, #1
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b3a      	cmp	r3, #58	; 0x3a
 8012c0e:	d10f      	bne.n	8012c30 <matchCommand+0x2be>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	3302      	adds	r3, #2
 8012c14:	627b      	str	r3, [r7, #36]	; 0x24
 8012c16:	6a3b      	ldr	r3, [r7, #32]
 8012c18:	3b02      	subs	r3, #2
 8012c1a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	3301      	adds	r3, #1
 8012c20:	61fb      	str	r3, [r7, #28]
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	3b01      	subs	r3, #1
 8012c26:	61bb      	str	r3, [r7, #24]
                brackets--;
 8012c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2a:	3b01      	subs	r3, #1
 8012c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8012c2e:	e05f      	b.n	8012cf0 <matchCommand+0x37e>
            } else if ((pattern_len > 2)
 8012c30:	6a3b      	ldr	r3, [r7, #32]
 8012c32:	2b02      	cmp	r3, #2
 8012c34:	dd21      	ble.n	8012c7a <matchCommand+0x308>
                    && (pattern_ptr[2] == cmd_ptr[0])
 8012c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c38:	3302      	adds	r3, #2
 8012c3a:	781a      	ldrb	r2, [r3, #0]
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d11a      	bne.n	8012c7a <matchCommand+0x308>
                    && (pattern_ptr[0] == ']')
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	2b5d      	cmp	r3, #93	; 0x5d
 8012c4a:	d116      	bne.n	8012c7a <matchCommand+0x308>
                    && (pattern_ptr[1] == '[')
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	3301      	adds	r3, #1
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	2b5b      	cmp	r3, #91	; 0x5b
 8012c54:	d111      	bne.n	8012c7a <matchCommand+0x308>
                    && (pattern_ptr[2] == ':')) {
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	3302      	adds	r3, #2
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	2b3a      	cmp	r3, #58	; 0x3a
 8012c5e:	d10c      	bne.n	8012c7a <matchCommand+0x308>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	3303      	adds	r3, #3
 8012c64:	627b      	str	r3, [r7, #36]	; 0x24
 8012c66:	6a3b      	ldr	r3, [r7, #32]
 8012c68:	3b03      	subs	r3, #3
 8012c6a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	61fb      	str	r3, [r7, #28]
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	3b01      	subs	r3, #1
 8012c76:	61bb      	str	r3, [r7, #24]
 8012c78:	e03a      	b.n	8012cf0 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8012c80:	e03a      	b.n	8012cf8 <matchCommand+0x386>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c86:	4413      	add	r3, r2
 8012c88:	627b      	str	r3, [r7, #36]	; 0x24
 8012c8a:	6a3a      	ldr	r2, [r7, #32]
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	1ad3      	subs	r3, r2, r3
 8012c90:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8012c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	2b5d      	cmp	r3, #93	; 0x5d
 8012c98:	d10e      	bne.n	8012cb8 <matchCommand+0x346>
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	2b3a      	cmp	r3, #58	; 0x3a
 8012ca2:	d109      	bne.n	8012cb8 <matchCommand+0x346>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8012ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca6:	3302      	adds	r3, #2
 8012ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8012caa:	6a3b      	ldr	r3, [r7, #32]
 8012cac:	3b02      	subs	r3, #2
 8012cae:	623b      	str	r3, [r7, #32]
                brackets--;
 8012cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8012cb6:	e01b      	b.n	8012cf0 <matchCommand+0x37e>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8012cb8:	6a3b      	ldr	r3, [r7, #32]
 8012cba:	2b02      	cmp	r3, #2
 8012cbc:	dd14      	ble.n	8012ce8 <matchCommand+0x376>
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b5d      	cmp	r3, #93	; 0x5d
 8012cc4:	d110      	bne.n	8012ce8 <matchCommand+0x376>
                    && (pattern_ptr[1] == '[')
 8012cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc8:	3301      	adds	r3, #1
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b5b      	cmp	r3, #91	; 0x5b
 8012cce:	d10b      	bne.n	8012ce8 <matchCommand+0x376>
                    && (pattern_ptr[2] == ':')) {
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	3302      	adds	r3, #2
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	2b3a      	cmp	r3, #58	; 0x3a
 8012cd8:	d106      	bne.n	8012ce8 <matchCommand+0x376>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8012cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cdc:	3303      	adds	r3, #3
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	3b03      	subs	r3, #3
 8012ce4:	623b      	str	r3, [r7, #32]
 8012ce6:	e003      	b.n	8012cf0 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8012cee:	e003      	b.n	8012cf8 <matchCommand+0x386>
    while (1) {
 8012cf0:	e6a2      	b.n	8012a38 <matchCommand+0xc6>
                break;
 8012cf2:	bf00      	nop
 8012cf4:	e000      	b.n	8012cf8 <matchCommand+0x386>
                break; /* exist optional keyword, command is complete */
 8012cf6:	bf00      	nop
            }
        }
    }

    return result;
 8012cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3738      	adds	r7, #56	; 0x38
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d007      	beq.n	8012d24 <composeCompoundCommand+0x20>
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d003      	beq.n	8012d24 <composeCompoundCommand+0x20>
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d101      	bne.n	8012d28 <composeCompoundCommand+0x24>
        return FALSE;
 8012d24:	2300      	movs	r3, #0
 8012d26:	e04d      	b.n	8012dc4 <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d003      	beq.n	8012d38 <composeCompoundCommand+0x34>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d101      	bne.n	8012d3c <composeCompoundCommand+0x38>
        return TRUE;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e043      	b.n	8012dc4 <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	2b2a      	cmp	r3, #42	; 0x2a
 8012d44:	d004      	beq.n	8012d50 <composeCompoundCommand+0x4c>
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	2b3a      	cmp	r3, #58	; 0x3a
 8012d4e:	d101      	bne.n	8012d54 <composeCompoundCommand+0x50>
        return TRUE;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e037      	b.n	8012dc4 <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d5c:	d101      	bne.n	8012d62 <composeCompoundCommand+0x5e>
        return TRUE;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e030      	b.n	8012dc4 <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	60fb      	str	r3, [r7, #12]
 8012d68:	e00a      	b.n	8012d80 <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	685a      	ldr	r2, [r3, #4]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	3b01      	subs	r3, #1
 8012d72:	4413      	add	r3, r2
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	2b3a      	cmp	r3, #58	; 0x3a
 8012d78:	d006      	beq.n	8012d88 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	60fb      	str	r3, [r7, #12]
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d1f1      	bne.n	8012d6a <composeCompoundCommand+0x66>
 8012d86:	e000      	b.n	8012d8a <composeCompoundCommand+0x86>
            break;
 8012d88:	bf00      	nop
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d101      	bne.n	8012d94 <composeCompoundCommand+0x90>
        return TRUE;
 8012d90:	2301      	movs	r3, #1
 8012d92:	e017      	b.n	8012dc4 <composeCompoundCommand+0xc0>

    current->ptr -= i;
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	685a      	ldr	r2, [r3, #4]
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	425b      	negs	r3, r3
 8012d9c:	441a      	add	r2, r3
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	605a      	str	r2, [r3, #4]
    current->len += i;
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	461a      	mov	r2, r3
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	4413      	add	r3, r2
 8012dac:	461a      	mov	r2, r3
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	6858      	ldr	r0, [r3, #4]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	68fa      	ldr	r2, [r7, #12]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	f000 f8a1 	bl	8012f04 <memmove>
    return TRUE;
 8012dc2:	2301      	movs	r3, #1
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3710      	adds	r7, #16
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <BSD_strnlen>:
/*-
 * Copyright (c) 2009 David Schultz <das@FreeBSD.org>
 * All rights reserved.
 */
size_t
BSD_strnlen(const char *s, size_t maxlen) {
 8012dcc:	b480      	push	{r7}
 8012dce:	b085      	sub	sp, #20
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
    size_t len;

    for (len = 0; len < maxlen; len++, s++) {
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	60fb      	str	r3, [r7, #12]
 8012dda:	e009      	b.n	8012df0 <BSD_strnlen+0x24>
        if (!*s)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00a      	beq.n	8012dfa <BSD_strnlen+0x2e>
    for (len = 0; len < maxlen; len++, s++) {
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	3301      	adds	r3, #1
 8012de8:	60fb      	str	r3, [r7, #12]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	3301      	adds	r3, #1
 8012dee:	607b      	str	r3, [r7, #4]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d3f1      	bcc.n	8012ddc <BSD_strnlen+0x10>
 8012df8:	e000      	b.n	8012dfc <BSD_strnlen+0x30>
            break;
 8012dfa:	bf00      	nop
    }
    return (len);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3714      	adds	r7, #20
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr
	...

08012e0c <fiprintf>:
 8012e0c:	b40e      	push	{r1, r2, r3}
 8012e0e:	b503      	push	{r0, r1, lr}
 8012e10:	4601      	mov	r1, r0
 8012e12:	ab03      	add	r3, sp, #12
 8012e14:	4805      	ldr	r0, [pc, #20]	; (8012e2c <fiprintf+0x20>)
 8012e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e1a:	6800      	ldr	r0, [r0, #0]
 8012e1c:	9301      	str	r3, [sp, #4]
 8012e1e:	f000 f965 	bl	80130ec <_vfiprintf_r>
 8012e22:	b002      	add	sp, #8
 8012e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e28:	b003      	add	sp, #12
 8012e2a:	4770      	bx	lr
 8012e2c:	2000007c 	.word	0x2000007c

08012e30 <__libc_init_array>:
 8012e30:	b570      	push	{r4, r5, r6, lr}
 8012e32:	4e0d      	ldr	r6, [pc, #52]	; (8012e68 <__libc_init_array+0x38>)
 8012e34:	4c0d      	ldr	r4, [pc, #52]	; (8012e6c <__libc_init_array+0x3c>)
 8012e36:	1ba4      	subs	r4, r4, r6
 8012e38:	10a4      	asrs	r4, r4, #2
 8012e3a:	2500      	movs	r5, #0
 8012e3c:	42a5      	cmp	r5, r4
 8012e3e:	d109      	bne.n	8012e54 <__libc_init_array+0x24>
 8012e40:	4e0b      	ldr	r6, [pc, #44]	; (8012e70 <__libc_init_array+0x40>)
 8012e42:	4c0c      	ldr	r4, [pc, #48]	; (8012e74 <__libc_init_array+0x44>)
 8012e44:	f001 fe24 	bl	8014a90 <_init>
 8012e48:	1ba4      	subs	r4, r4, r6
 8012e4a:	10a4      	asrs	r4, r4, #2
 8012e4c:	2500      	movs	r5, #0
 8012e4e:	42a5      	cmp	r5, r4
 8012e50:	d105      	bne.n	8012e5e <__libc_init_array+0x2e>
 8012e52:	bd70      	pop	{r4, r5, r6, pc}
 8012e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e58:	4798      	blx	r3
 8012e5a:	3501      	adds	r5, #1
 8012e5c:	e7ee      	b.n	8012e3c <__libc_init_array+0xc>
 8012e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e62:	4798      	blx	r3
 8012e64:	3501      	adds	r5, #1
 8012e66:	e7f2      	b.n	8012e4e <__libc_init_array+0x1e>
 8012e68:	08017818 	.word	0x08017818
 8012e6c:	08017818 	.word	0x08017818
 8012e70:	08017818 	.word	0x08017818
 8012e74:	0801781c 	.word	0x0801781c

08012e78 <__locale_ctype_ptr_l>:
 8012e78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012e7c:	4770      	bx	lr
	...

08012e80 <__locale_ctype_ptr>:
 8012e80:	4b04      	ldr	r3, [pc, #16]	; (8012e94 <__locale_ctype_ptr+0x14>)
 8012e82:	4a05      	ldr	r2, [pc, #20]	; (8012e98 <__locale_ctype_ptr+0x18>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	6a1b      	ldr	r3, [r3, #32]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	bf08      	it	eq
 8012e8c:	4613      	moveq	r3, r2
 8012e8e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012e92:	4770      	bx	lr
 8012e94:	2000007c 	.word	0x2000007c
 8012e98:	200000e0 	.word	0x200000e0

08012e9c <malloc>:
 8012e9c:	4b02      	ldr	r3, [pc, #8]	; (8012ea8 <malloc+0xc>)
 8012e9e:	4601      	mov	r1, r0
 8012ea0:	6818      	ldr	r0, [r3, #0]
 8012ea2:	f000 b89f 	b.w	8012fe4 <_malloc_r>
 8012ea6:	bf00      	nop
 8012ea8:	2000007c 	.word	0x2000007c

08012eac <__ascii_mbtowc>:
 8012eac:	b082      	sub	sp, #8
 8012eae:	b901      	cbnz	r1, 8012eb2 <__ascii_mbtowc+0x6>
 8012eb0:	a901      	add	r1, sp, #4
 8012eb2:	b142      	cbz	r2, 8012ec6 <__ascii_mbtowc+0x1a>
 8012eb4:	b14b      	cbz	r3, 8012eca <__ascii_mbtowc+0x1e>
 8012eb6:	7813      	ldrb	r3, [r2, #0]
 8012eb8:	600b      	str	r3, [r1, #0]
 8012eba:	7812      	ldrb	r2, [r2, #0]
 8012ebc:	1c10      	adds	r0, r2, #0
 8012ebe:	bf18      	it	ne
 8012ec0:	2001      	movne	r0, #1
 8012ec2:	b002      	add	sp, #8
 8012ec4:	4770      	bx	lr
 8012ec6:	4610      	mov	r0, r2
 8012ec8:	e7fb      	b.n	8012ec2 <__ascii_mbtowc+0x16>
 8012eca:	f06f 0001 	mvn.w	r0, #1
 8012ece:	e7f8      	b.n	8012ec2 <__ascii_mbtowc+0x16>

08012ed0 <memcmp>:
 8012ed0:	b530      	push	{r4, r5, lr}
 8012ed2:	2400      	movs	r4, #0
 8012ed4:	42a2      	cmp	r2, r4
 8012ed6:	d101      	bne.n	8012edc <memcmp+0xc>
 8012ed8:	2000      	movs	r0, #0
 8012eda:	e007      	b.n	8012eec <memcmp+0x1c>
 8012edc:	5d03      	ldrb	r3, [r0, r4]
 8012ede:	3401      	adds	r4, #1
 8012ee0:	190d      	adds	r5, r1, r4
 8012ee2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8012ee6:	42ab      	cmp	r3, r5
 8012ee8:	d0f4      	beq.n	8012ed4 <memcmp+0x4>
 8012eea:	1b58      	subs	r0, r3, r5
 8012eec:	bd30      	pop	{r4, r5, pc}

08012eee <memcpy>:
 8012eee:	b510      	push	{r4, lr}
 8012ef0:	1e43      	subs	r3, r0, #1
 8012ef2:	440a      	add	r2, r1
 8012ef4:	4291      	cmp	r1, r2
 8012ef6:	d100      	bne.n	8012efa <memcpy+0xc>
 8012ef8:	bd10      	pop	{r4, pc}
 8012efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f02:	e7f7      	b.n	8012ef4 <memcpy+0x6>

08012f04 <memmove>:
 8012f04:	4288      	cmp	r0, r1
 8012f06:	b510      	push	{r4, lr}
 8012f08:	eb01 0302 	add.w	r3, r1, r2
 8012f0c:	d807      	bhi.n	8012f1e <memmove+0x1a>
 8012f0e:	1e42      	subs	r2, r0, #1
 8012f10:	4299      	cmp	r1, r3
 8012f12:	d00a      	beq.n	8012f2a <memmove+0x26>
 8012f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012f1c:	e7f8      	b.n	8012f10 <memmove+0xc>
 8012f1e:	4283      	cmp	r3, r0
 8012f20:	d9f5      	bls.n	8012f0e <memmove+0xa>
 8012f22:	1881      	adds	r1, r0, r2
 8012f24:	1ad2      	subs	r2, r2, r3
 8012f26:	42d3      	cmn	r3, r2
 8012f28:	d100      	bne.n	8012f2c <memmove+0x28>
 8012f2a:	bd10      	pop	{r4, pc}
 8012f2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012f34:	e7f7      	b.n	8012f26 <memmove+0x22>

08012f36 <memset>:
 8012f36:	4402      	add	r2, r0
 8012f38:	4603      	mov	r3, r0
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d100      	bne.n	8012f40 <memset+0xa>
 8012f3e:	4770      	bx	lr
 8012f40:	f803 1b01 	strb.w	r1, [r3], #1
 8012f44:	e7f9      	b.n	8012f3a <memset+0x4>
	...

08012f48 <_free_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	2900      	cmp	r1, #0
 8012f4e:	d045      	beq.n	8012fdc <_free_r+0x94>
 8012f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f54:	1f0c      	subs	r4, r1, #4
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	bfb8      	it	lt
 8012f5a:	18e4      	addlt	r4, r4, r3
 8012f5c:	f001 f874 	bl	8014048 <__malloc_lock>
 8012f60:	4a1f      	ldr	r2, [pc, #124]	; (8012fe0 <_free_r+0x98>)
 8012f62:	6813      	ldr	r3, [r2, #0]
 8012f64:	4610      	mov	r0, r2
 8012f66:	b933      	cbnz	r3, 8012f76 <_free_r+0x2e>
 8012f68:	6063      	str	r3, [r4, #4]
 8012f6a:	6014      	str	r4, [r2, #0]
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f72:	f001 b86a 	b.w	801404a <__malloc_unlock>
 8012f76:	42a3      	cmp	r3, r4
 8012f78:	d90c      	bls.n	8012f94 <_free_r+0x4c>
 8012f7a:	6821      	ldr	r1, [r4, #0]
 8012f7c:	1862      	adds	r2, r4, r1
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	bf04      	itt	eq
 8012f82:	681a      	ldreq	r2, [r3, #0]
 8012f84:	685b      	ldreq	r3, [r3, #4]
 8012f86:	6063      	str	r3, [r4, #4]
 8012f88:	bf04      	itt	eq
 8012f8a:	1852      	addeq	r2, r2, r1
 8012f8c:	6022      	streq	r2, [r4, #0]
 8012f8e:	6004      	str	r4, [r0, #0]
 8012f90:	e7ec      	b.n	8012f6c <_free_r+0x24>
 8012f92:	4613      	mov	r3, r2
 8012f94:	685a      	ldr	r2, [r3, #4]
 8012f96:	b10a      	cbz	r2, 8012f9c <_free_r+0x54>
 8012f98:	42a2      	cmp	r2, r4
 8012f9a:	d9fa      	bls.n	8012f92 <_free_r+0x4a>
 8012f9c:	6819      	ldr	r1, [r3, #0]
 8012f9e:	1858      	adds	r0, r3, r1
 8012fa0:	42a0      	cmp	r0, r4
 8012fa2:	d10b      	bne.n	8012fbc <_free_r+0x74>
 8012fa4:	6820      	ldr	r0, [r4, #0]
 8012fa6:	4401      	add	r1, r0
 8012fa8:	1858      	adds	r0, r3, r1
 8012faa:	4282      	cmp	r2, r0
 8012fac:	6019      	str	r1, [r3, #0]
 8012fae:	d1dd      	bne.n	8012f6c <_free_r+0x24>
 8012fb0:	6810      	ldr	r0, [r2, #0]
 8012fb2:	6852      	ldr	r2, [r2, #4]
 8012fb4:	605a      	str	r2, [r3, #4]
 8012fb6:	4401      	add	r1, r0
 8012fb8:	6019      	str	r1, [r3, #0]
 8012fba:	e7d7      	b.n	8012f6c <_free_r+0x24>
 8012fbc:	d902      	bls.n	8012fc4 <_free_r+0x7c>
 8012fbe:	230c      	movs	r3, #12
 8012fc0:	602b      	str	r3, [r5, #0]
 8012fc2:	e7d3      	b.n	8012f6c <_free_r+0x24>
 8012fc4:	6820      	ldr	r0, [r4, #0]
 8012fc6:	1821      	adds	r1, r4, r0
 8012fc8:	428a      	cmp	r2, r1
 8012fca:	bf04      	itt	eq
 8012fcc:	6811      	ldreq	r1, [r2, #0]
 8012fce:	6852      	ldreq	r2, [r2, #4]
 8012fd0:	6062      	str	r2, [r4, #4]
 8012fd2:	bf04      	itt	eq
 8012fd4:	1809      	addeq	r1, r1, r0
 8012fd6:	6021      	streq	r1, [r4, #0]
 8012fd8:	605c      	str	r4, [r3, #4]
 8012fda:	e7c7      	b.n	8012f6c <_free_r+0x24>
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
 8012fde:	bf00      	nop
 8012fe0:	200003ec 	.word	0x200003ec

08012fe4 <_malloc_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	1ccd      	adds	r5, r1, #3
 8012fe8:	f025 0503 	bic.w	r5, r5, #3
 8012fec:	3508      	adds	r5, #8
 8012fee:	2d0c      	cmp	r5, #12
 8012ff0:	bf38      	it	cc
 8012ff2:	250c      	movcc	r5, #12
 8012ff4:	2d00      	cmp	r5, #0
 8012ff6:	4606      	mov	r6, r0
 8012ff8:	db01      	blt.n	8012ffe <_malloc_r+0x1a>
 8012ffa:	42a9      	cmp	r1, r5
 8012ffc:	d903      	bls.n	8013006 <_malloc_r+0x22>
 8012ffe:	230c      	movs	r3, #12
 8013000:	6033      	str	r3, [r6, #0]
 8013002:	2000      	movs	r0, #0
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	f001 f81f 	bl	8014048 <__malloc_lock>
 801300a:	4a21      	ldr	r2, [pc, #132]	; (8013090 <_malloc_r+0xac>)
 801300c:	6814      	ldr	r4, [r2, #0]
 801300e:	4621      	mov	r1, r4
 8013010:	b991      	cbnz	r1, 8013038 <_malloc_r+0x54>
 8013012:	4c20      	ldr	r4, [pc, #128]	; (8013094 <_malloc_r+0xb0>)
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	b91b      	cbnz	r3, 8013020 <_malloc_r+0x3c>
 8013018:	4630      	mov	r0, r6
 801301a:	f000 fb1d 	bl	8013658 <_sbrk_r>
 801301e:	6020      	str	r0, [r4, #0]
 8013020:	4629      	mov	r1, r5
 8013022:	4630      	mov	r0, r6
 8013024:	f000 fb18 	bl	8013658 <_sbrk_r>
 8013028:	1c43      	adds	r3, r0, #1
 801302a:	d124      	bne.n	8013076 <_malloc_r+0x92>
 801302c:	230c      	movs	r3, #12
 801302e:	6033      	str	r3, [r6, #0]
 8013030:	4630      	mov	r0, r6
 8013032:	f001 f80a 	bl	801404a <__malloc_unlock>
 8013036:	e7e4      	b.n	8013002 <_malloc_r+0x1e>
 8013038:	680b      	ldr	r3, [r1, #0]
 801303a:	1b5b      	subs	r3, r3, r5
 801303c:	d418      	bmi.n	8013070 <_malloc_r+0x8c>
 801303e:	2b0b      	cmp	r3, #11
 8013040:	d90f      	bls.n	8013062 <_malloc_r+0x7e>
 8013042:	600b      	str	r3, [r1, #0]
 8013044:	50cd      	str	r5, [r1, r3]
 8013046:	18cc      	adds	r4, r1, r3
 8013048:	4630      	mov	r0, r6
 801304a:	f000 fffe 	bl	801404a <__malloc_unlock>
 801304e:	f104 000b 	add.w	r0, r4, #11
 8013052:	1d23      	adds	r3, r4, #4
 8013054:	f020 0007 	bic.w	r0, r0, #7
 8013058:	1ac3      	subs	r3, r0, r3
 801305a:	d0d3      	beq.n	8013004 <_malloc_r+0x20>
 801305c:	425a      	negs	r2, r3
 801305e:	50e2      	str	r2, [r4, r3]
 8013060:	e7d0      	b.n	8013004 <_malloc_r+0x20>
 8013062:	428c      	cmp	r4, r1
 8013064:	684b      	ldr	r3, [r1, #4]
 8013066:	bf16      	itet	ne
 8013068:	6063      	strne	r3, [r4, #4]
 801306a:	6013      	streq	r3, [r2, #0]
 801306c:	460c      	movne	r4, r1
 801306e:	e7eb      	b.n	8013048 <_malloc_r+0x64>
 8013070:	460c      	mov	r4, r1
 8013072:	6849      	ldr	r1, [r1, #4]
 8013074:	e7cc      	b.n	8013010 <_malloc_r+0x2c>
 8013076:	1cc4      	adds	r4, r0, #3
 8013078:	f024 0403 	bic.w	r4, r4, #3
 801307c:	42a0      	cmp	r0, r4
 801307e:	d005      	beq.n	801308c <_malloc_r+0xa8>
 8013080:	1a21      	subs	r1, r4, r0
 8013082:	4630      	mov	r0, r6
 8013084:	f000 fae8 	bl	8013658 <_sbrk_r>
 8013088:	3001      	adds	r0, #1
 801308a:	d0cf      	beq.n	801302c <_malloc_r+0x48>
 801308c:	6025      	str	r5, [r4, #0]
 801308e:	e7db      	b.n	8013048 <_malloc_r+0x64>
 8013090:	200003ec 	.word	0x200003ec
 8013094:	200003f0 	.word	0x200003f0

08013098 <__sfputc_r>:
 8013098:	6893      	ldr	r3, [r2, #8]
 801309a:	3b01      	subs	r3, #1
 801309c:	2b00      	cmp	r3, #0
 801309e:	b410      	push	{r4}
 80130a0:	6093      	str	r3, [r2, #8]
 80130a2:	da08      	bge.n	80130b6 <__sfputc_r+0x1e>
 80130a4:	6994      	ldr	r4, [r2, #24]
 80130a6:	42a3      	cmp	r3, r4
 80130a8:	db01      	blt.n	80130ae <__sfputc_r+0x16>
 80130aa:	290a      	cmp	r1, #10
 80130ac:	d103      	bne.n	80130b6 <__sfputc_r+0x1e>
 80130ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130b2:	f000 bce9 	b.w	8013a88 <__swbuf_r>
 80130b6:	6813      	ldr	r3, [r2, #0]
 80130b8:	1c58      	adds	r0, r3, #1
 80130ba:	6010      	str	r0, [r2, #0]
 80130bc:	7019      	strb	r1, [r3, #0]
 80130be:	4608      	mov	r0, r1
 80130c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c4:	4770      	bx	lr

080130c6 <__sfputs_r>:
 80130c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c8:	4606      	mov	r6, r0
 80130ca:	460f      	mov	r7, r1
 80130cc:	4614      	mov	r4, r2
 80130ce:	18d5      	adds	r5, r2, r3
 80130d0:	42ac      	cmp	r4, r5
 80130d2:	d101      	bne.n	80130d8 <__sfputs_r+0x12>
 80130d4:	2000      	movs	r0, #0
 80130d6:	e007      	b.n	80130e8 <__sfputs_r+0x22>
 80130d8:	463a      	mov	r2, r7
 80130da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130de:	4630      	mov	r0, r6
 80130e0:	f7ff ffda 	bl	8013098 <__sfputc_r>
 80130e4:	1c43      	adds	r3, r0, #1
 80130e6:	d1f3      	bne.n	80130d0 <__sfputs_r+0xa>
 80130e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130ec <_vfiprintf_r>:
 80130ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f0:	460c      	mov	r4, r1
 80130f2:	b09d      	sub	sp, #116	; 0x74
 80130f4:	4617      	mov	r7, r2
 80130f6:	461d      	mov	r5, r3
 80130f8:	4606      	mov	r6, r0
 80130fa:	b118      	cbz	r0, 8013104 <_vfiprintf_r+0x18>
 80130fc:	6983      	ldr	r3, [r0, #24]
 80130fe:	b90b      	cbnz	r3, 8013104 <_vfiprintf_r+0x18>
 8013100:	f000 fea2 	bl	8013e48 <__sinit>
 8013104:	4b7c      	ldr	r3, [pc, #496]	; (80132f8 <_vfiprintf_r+0x20c>)
 8013106:	429c      	cmp	r4, r3
 8013108:	d158      	bne.n	80131bc <_vfiprintf_r+0xd0>
 801310a:	6874      	ldr	r4, [r6, #4]
 801310c:	89a3      	ldrh	r3, [r4, #12]
 801310e:	0718      	lsls	r0, r3, #28
 8013110:	d55e      	bpl.n	80131d0 <_vfiprintf_r+0xe4>
 8013112:	6923      	ldr	r3, [r4, #16]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d05b      	beq.n	80131d0 <_vfiprintf_r+0xe4>
 8013118:	2300      	movs	r3, #0
 801311a:	9309      	str	r3, [sp, #36]	; 0x24
 801311c:	2320      	movs	r3, #32
 801311e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013122:	2330      	movs	r3, #48	; 0x30
 8013124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013128:	9503      	str	r5, [sp, #12]
 801312a:	f04f 0b01 	mov.w	fp, #1
 801312e:	46b8      	mov	r8, r7
 8013130:	4645      	mov	r5, r8
 8013132:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013136:	b10b      	cbz	r3, 801313c <_vfiprintf_r+0x50>
 8013138:	2b25      	cmp	r3, #37	; 0x25
 801313a:	d154      	bne.n	80131e6 <_vfiprintf_r+0xfa>
 801313c:	ebb8 0a07 	subs.w	sl, r8, r7
 8013140:	d00b      	beq.n	801315a <_vfiprintf_r+0x6e>
 8013142:	4653      	mov	r3, sl
 8013144:	463a      	mov	r2, r7
 8013146:	4621      	mov	r1, r4
 8013148:	4630      	mov	r0, r6
 801314a:	f7ff ffbc 	bl	80130c6 <__sfputs_r>
 801314e:	3001      	adds	r0, #1
 8013150:	f000 80c2 	beq.w	80132d8 <_vfiprintf_r+0x1ec>
 8013154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013156:	4453      	add	r3, sl
 8013158:	9309      	str	r3, [sp, #36]	; 0x24
 801315a:	f898 3000 	ldrb.w	r3, [r8]
 801315e:	2b00      	cmp	r3, #0
 8013160:	f000 80ba 	beq.w	80132d8 <_vfiprintf_r+0x1ec>
 8013164:	2300      	movs	r3, #0
 8013166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801316a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801316e:	9304      	str	r3, [sp, #16]
 8013170:	9307      	str	r3, [sp, #28]
 8013172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013176:	931a      	str	r3, [sp, #104]	; 0x68
 8013178:	46a8      	mov	r8, r5
 801317a:	2205      	movs	r2, #5
 801317c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013180:	485e      	ldr	r0, [pc, #376]	; (80132fc <_vfiprintf_r+0x210>)
 8013182:	f7ed f875 	bl	8000270 <memchr>
 8013186:	9b04      	ldr	r3, [sp, #16]
 8013188:	bb78      	cbnz	r0, 80131ea <_vfiprintf_r+0xfe>
 801318a:	06d9      	lsls	r1, r3, #27
 801318c:	bf44      	itt	mi
 801318e:	2220      	movmi	r2, #32
 8013190:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013194:	071a      	lsls	r2, r3, #28
 8013196:	bf44      	itt	mi
 8013198:	222b      	movmi	r2, #43	; 0x2b
 801319a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801319e:	782a      	ldrb	r2, [r5, #0]
 80131a0:	2a2a      	cmp	r2, #42	; 0x2a
 80131a2:	d02a      	beq.n	80131fa <_vfiprintf_r+0x10e>
 80131a4:	9a07      	ldr	r2, [sp, #28]
 80131a6:	46a8      	mov	r8, r5
 80131a8:	2000      	movs	r0, #0
 80131aa:	250a      	movs	r5, #10
 80131ac:	4641      	mov	r1, r8
 80131ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131b2:	3b30      	subs	r3, #48	; 0x30
 80131b4:	2b09      	cmp	r3, #9
 80131b6:	d969      	bls.n	801328c <_vfiprintf_r+0x1a0>
 80131b8:	b360      	cbz	r0, 8013214 <_vfiprintf_r+0x128>
 80131ba:	e024      	b.n	8013206 <_vfiprintf_r+0x11a>
 80131bc:	4b50      	ldr	r3, [pc, #320]	; (8013300 <_vfiprintf_r+0x214>)
 80131be:	429c      	cmp	r4, r3
 80131c0:	d101      	bne.n	80131c6 <_vfiprintf_r+0xda>
 80131c2:	68b4      	ldr	r4, [r6, #8]
 80131c4:	e7a2      	b.n	801310c <_vfiprintf_r+0x20>
 80131c6:	4b4f      	ldr	r3, [pc, #316]	; (8013304 <_vfiprintf_r+0x218>)
 80131c8:	429c      	cmp	r4, r3
 80131ca:	bf08      	it	eq
 80131cc:	68f4      	ldreq	r4, [r6, #12]
 80131ce:	e79d      	b.n	801310c <_vfiprintf_r+0x20>
 80131d0:	4621      	mov	r1, r4
 80131d2:	4630      	mov	r0, r6
 80131d4:	f000 fcca 	bl	8013b6c <__swsetup_r>
 80131d8:	2800      	cmp	r0, #0
 80131da:	d09d      	beq.n	8013118 <_vfiprintf_r+0x2c>
 80131dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131e0:	b01d      	add	sp, #116	; 0x74
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e6:	46a8      	mov	r8, r5
 80131e8:	e7a2      	b.n	8013130 <_vfiprintf_r+0x44>
 80131ea:	4a44      	ldr	r2, [pc, #272]	; (80132fc <_vfiprintf_r+0x210>)
 80131ec:	1a80      	subs	r0, r0, r2
 80131ee:	fa0b f000 	lsl.w	r0, fp, r0
 80131f2:	4318      	orrs	r0, r3
 80131f4:	9004      	str	r0, [sp, #16]
 80131f6:	4645      	mov	r5, r8
 80131f8:	e7be      	b.n	8013178 <_vfiprintf_r+0x8c>
 80131fa:	9a03      	ldr	r2, [sp, #12]
 80131fc:	1d11      	adds	r1, r2, #4
 80131fe:	6812      	ldr	r2, [r2, #0]
 8013200:	9103      	str	r1, [sp, #12]
 8013202:	2a00      	cmp	r2, #0
 8013204:	db01      	blt.n	801320a <_vfiprintf_r+0x11e>
 8013206:	9207      	str	r2, [sp, #28]
 8013208:	e004      	b.n	8013214 <_vfiprintf_r+0x128>
 801320a:	4252      	negs	r2, r2
 801320c:	f043 0302 	orr.w	r3, r3, #2
 8013210:	9207      	str	r2, [sp, #28]
 8013212:	9304      	str	r3, [sp, #16]
 8013214:	f898 3000 	ldrb.w	r3, [r8]
 8013218:	2b2e      	cmp	r3, #46	; 0x2e
 801321a:	d10e      	bne.n	801323a <_vfiprintf_r+0x14e>
 801321c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013220:	2b2a      	cmp	r3, #42	; 0x2a
 8013222:	d138      	bne.n	8013296 <_vfiprintf_r+0x1aa>
 8013224:	9b03      	ldr	r3, [sp, #12]
 8013226:	1d1a      	adds	r2, r3, #4
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	9203      	str	r2, [sp, #12]
 801322c:	2b00      	cmp	r3, #0
 801322e:	bfb8      	it	lt
 8013230:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013234:	f108 0802 	add.w	r8, r8, #2
 8013238:	9305      	str	r3, [sp, #20]
 801323a:	4d33      	ldr	r5, [pc, #204]	; (8013308 <_vfiprintf_r+0x21c>)
 801323c:	f898 1000 	ldrb.w	r1, [r8]
 8013240:	2203      	movs	r2, #3
 8013242:	4628      	mov	r0, r5
 8013244:	f7ed f814 	bl	8000270 <memchr>
 8013248:	b140      	cbz	r0, 801325c <_vfiprintf_r+0x170>
 801324a:	2340      	movs	r3, #64	; 0x40
 801324c:	1b40      	subs	r0, r0, r5
 801324e:	fa03 f000 	lsl.w	r0, r3, r0
 8013252:	9b04      	ldr	r3, [sp, #16]
 8013254:	4303      	orrs	r3, r0
 8013256:	f108 0801 	add.w	r8, r8, #1
 801325a:	9304      	str	r3, [sp, #16]
 801325c:	f898 1000 	ldrb.w	r1, [r8]
 8013260:	482a      	ldr	r0, [pc, #168]	; (801330c <_vfiprintf_r+0x220>)
 8013262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013266:	2206      	movs	r2, #6
 8013268:	f108 0701 	add.w	r7, r8, #1
 801326c:	f7ed f800 	bl	8000270 <memchr>
 8013270:	2800      	cmp	r0, #0
 8013272:	d037      	beq.n	80132e4 <_vfiprintf_r+0x1f8>
 8013274:	4b26      	ldr	r3, [pc, #152]	; (8013310 <_vfiprintf_r+0x224>)
 8013276:	bb1b      	cbnz	r3, 80132c0 <_vfiprintf_r+0x1d4>
 8013278:	9b03      	ldr	r3, [sp, #12]
 801327a:	3307      	adds	r3, #7
 801327c:	f023 0307 	bic.w	r3, r3, #7
 8013280:	3308      	adds	r3, #8
 8013282:	9303      	str	r3, [sp, #12]
 8013284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013286:	444b      	add	r3, r9
 8013288:	9309      	str	r3, [sp, #36]	; 0x24
 801328a:	e750      	b.n	801312e <_vfiprintf_r+0x42>
 801328c:	fb05 3202 	mla	r2, r5, r2, r3
 8013290:	2001      	movs	r0, #1
 8013292:	4688      	mov	r8, r1
 8013294:	e78a      	b.n	80131ac <_vfiprintf_r+0xc0>
 8013296:	2300      	movs	r3, #0
 8013298:	f108 0801 	add.w	r8, r8, #1
 801329c:	9305      	str	r3, [sp, #20]
 801329e:	4619      	mov	r1, r3
 80132a0:	250a      	movs	r5, #10
 80132a2:	4640      	mov	r0, r8
 80132a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132a8:	3a30      	subs	r2, #48	; 0x30
 80132aa:	2a09      	cmp	r2, #9
 80132ac:	d903      	bls.n	80132b6 <_vfiprintf_r+0x1ca>
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d0c3      	beq.n	801323a <_vfiprintf_r+0x14e>
 80132b2:	9105      	str	r1, [sp, #20]
 80132b4:	e7c1      	b.n	801323a <_vfiprintf_r+0x14e>
 80132b6:	fb05 2101 	mla	r1, r5, r1, r2
 80132ba:	2301      	movs	r3, #1
 80132bc:	4680      	mov	r8, r0
 80132be:	e7f0      	b.n	80132a2 <_vfiprintf_r+0x1b6>
 80132c0:	ab03      	add	r3, sp, #12
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	4622      	mov	r2, r4
 80132c6:	4b13      	ldr	r3, [pc, #76]	; (8013314 <_vfiprintf_r+0x228>)
 80132c8:	a904      	add	r1, sp, #16
 80132ca:	4630      	mov	r0, r6
 80132cc:	f3af 8000 	nop.w
 80132d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80132d4:	4681      	mov	r9, r0
 80132d6:	d1d5      	bne.n	8013284 <_vfiprintf_r+0x198>
 80132d8:	89a3      	ldrh	r3, [r4, #12]
 80132da:	065b      	lsls	r3, r3, #25
 80132dc:	f53f af7e 	bmi.w	80131dc <_vfiprintf_r+0xf0>
 80132e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132e2:	e77d      	b.n	80131e0 <_vfiprintf_r+0xf4>
 80132e4:	ab03      	add	r3, sp, #12
 80132e6:	9300      	str	r3, [sp, #0]
 80132e8:	4622      	mov	r2, r4
 80132ea:	4b0a      	ldr	r3, [pc, #40]	; (8013314 <_vfiprintf_r+0x228>)
 80132ec:	a904      	add	r1, sp, #16
 80132ee:	4630      	mov	r0, r6
 80132f0:	f000 f888 	bl	8013404 <_printf_i>
 80132f4:	e7ec      	b.n	80132d0 <_vfiprintf_r+0x1e4>
 80132f6:	bf00      	nop
 80132f8:	080177b4 	.word	0x080177b4
 80132fc:	0801765e 	.word	0x0801765e
 8013300:	080177d4 	.word	0x080177d4
 8013304:	08017794 	.word	0x08017794
 8013308:	08017664 	.word	0x08017664
 801330c:	08017668 	.word	0x08017668
 8013310:	00000000 	.word	0x00000000
 8013314:	080130c7 	.word	0x080130c7

08013318 <_printf_common>:
 8013318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801331c:	4691      	mov	r9, r2
 801331e:	461f      	mov	r7, r3
 8013320:	688a      	ldr	r2, [r1, #8]
 8013322:	690b      	ldr	r3, [r1, #16]
 8013324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013328:	4293      	cmp	r3, r2
 801332a:	bfb8      	it	lt
 801332c:	4613      	movlt	r3, r2
 801332e:	f8c9 3000 	str.w	r3, [r9]
 8013332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013336:	4606      	mov	r6, r0
 8013338:	460c      	mov	r4, r1
 801333a:	b112      	cbz	r2, 8013342 <_printf_common+0x2a>
 801333c:	3301      	adds	r3, #1
 801333e:	f8c9 3000 	str.w	r3, [r9]
 8013342:	6823      	ldr	r3, [r4, #0]
 8013344:	0699      	lsls	r1, r3, #26
 8013346:	bf42      	ittt	mi
 8013348:	f8d9 3000 	ldrmi.w	r3, [r9]
 801334c:	3302      	addmi	r3, #2
 801334e:	f8c9 3000 	strmi.w	r3, [r9]
 8013352:	6825      	ldr	r5, [r4, #0]
 8013354:	f015 0506 	ands.w	r5, r5, #6
 8013358:	d107      	bne.n	801336a <_printf_common+0x52>
 801335a:	f104 0a19 	add.w	sl, r4, #25
 801335e:	68e3      	ldr	r3, [r4, #12]
 8013360:	f8d9 2000 	ldr.w	r2, [r9]
 8013364:	1a9b      	subs	r3, r3, r2
 8013366:	42ab      	cmp	r3, r5
 8013368:	dc28      	bgt.n	80133bc <_printf_common+0xa4>
 801336a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801336e:	6822      	ldr	r2, [r4, #0]
 8013370:	3300      	adds	r3, #0
 8013372:	bf18      	it	ne
 8013374:	2301      	movne	r3, #1
 8013376:	0692      	lsls	r2, r2, #26
 8013378:	d42d      	bmi.n	80133d6 <_printf_common+0xbe>
 801337a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801337e:	4639      	mov	r1, r7
 8013380:	4630      	mov	r0, r6
 8013382:	47c0      	blx	r8
 8013384:	3001      	adds	r0, #1
 8013386:	d020      	beq.n	80133ca <_printf_common+0xb2>
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	68e5      	ldr	r5, [r4, #12]
 801338c:	f8d9 2000 	ldr.w	r2, [r9]
 8013390:	f003 0306 	and.w	r3, r3, #6
 8013394:	2b04      	cmp	r3, #4
 8013396:	bf08      	it	eq
 8013398:	1aad      	subeq	r5, r5, r2
 801339a:	68a3      	ldr	r3, [r4, #8]
 801339c:	6922      	ldr	r2, [r4, #16]
 801339e:	bf0c      	ite	eq
 80133a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80133a4:	2500      	movne	r5, #0
 80133a6:	4293      	cmp	r3, r2
 80133a8:	bfc4      	itt	gt
 80133aa:	1a9b      	subgt	r3, r3, r2
 80133ac:	18ed      	addgt	r5, r5, r3
 80133ae:	f04f 0900 	mov.w	r9, #0
 80133b2:	341a      	adds	r4, #26
 80133b4:	454d      	cmp	r5, r9
 80133b6:	d11a      	bne.n	80133ee <_printf_common+0xd6>
 80133b8:	2000      	movs	r0, #0
 80133ba:	e008      	b.n	80133ce <_printf_common+0xb6>
 80133bc:	2301      	movs	r3, #1
 80133be:	4652      	mov	r2, sl
 80133c0:	4639      	mov	r1, r7
 80133c2:	4630      	mov	r0, r6
 80133c4:	47c0      	blx	r8
 80133c6:	3001      	adds	r0, #1
 80133c8:	d103      	bne.n	80133d2 <_printf_common+0xba>
 80133ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133d2:	3501      	adds	r5, #1
 80133d4:	e7c3      	b.n	801335e <_printf_common+0x46>
 80133d6:	18e1      	adds	r1, r4, r3
 80133d8:	1c5a      	adds	r2, r3, #1
 80133da:	2030      	movs	r0, #48	; 0x30
 80133dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80133e0:	4422      	add	r2, r4
 80133e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80133e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80133ea:	3302      	adds	r3, #2
 80133ec:	e7c5      	b.n	801337a <_printf_common+0x62>
 80133ee:	2301      	movs	r3, #1
 80133f0:	4622      	mov	r2, r4
 80133f2:	4639      	mov	r1, r7
 80133f4:	4630      	mov	r0, r6
 80133f6:	47c0      	blx	r8
 80133f8:	3001      	adds	r0, #1
 80133fa:	d0e6      	beq.n	80133ca <_printf_common+0xb2>
 80133fc:	f109 0901 	add.w	r9, r9, #1
 8013400:	e7d8      	b.n	80133b4 <_printf_common+0x9c>
	...

08013404 <_printf_i>:
 8013404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013408:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801340c:	460c      	mov	r4, r1
 801340e:	7e09      	ldrb	r1, [r1, #24]
 8013410:	b085      	sub	sp, #20
 8013412:	296e      	cmp	r1, #110	; 0x6e
 8013414:	4617      	mov	r7, r2
 8013416:	4606      	mov	r6, r0
 8013418:	4698      	mov	r8, r3
 801341a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801341c:	f000 80b3 	beq.w	8013586 <_printf_i+0x182>
 8013420:	d822      	bhi.n	8013468 <_printf_i+0x64>
 8013422:	2963      	cmp	r1, #99	; 0x63
 8013424:	d036      	beq.n	8013494 <_printf_i+0x90>
 8013426:	d80a      	bhi.n	801343e <_printf_i+0x3a>
 8013428:	2900      	cmp	r1, #0
 801342a:	f000 80b9 	beq.w	80135a0 <_printf_i+0x19c>
 801342e:	2958      	cmp	r1, #88	; 0x58
 8013430:	f000 8083 	beq.w	801353a <_printf_i+0x136>
 8013434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013438:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801343c:	e032      	b.n	80134a4 <_printf_i+0xa0>
 801343e:	2964      	cmp	r1, #100	; 0x64
 8013440:	d001      	beq.n	8013446 <_printf_i+0x42>
 8013442:	2969      	cmp	r1, #105	; 0x69
 8013444:	d1f6      	bne.n	8013434 <_printf_i+0x30>
 8013446:	6820      	ldr	r0, [r4, #0]
 8013448:	6813      	ldr	r3, [r2, #0]
 801344a:	0605      	lsls	r5, r0, #24
 801344c:	f103 0104 	add.w	r1, r3, #4
 8013450:	d52a      	bpl.n	80134a8 <_printf_i+0xa4>
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6011      	str	r1, [r2, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	da03      	bge.n	8013462 <_printf_i+0x5e>
 801345a:	222d      	movs	r2, #45	; 0x2d
 801345c:	425b      	negs	r3, r3
 801345e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013462:	486f      	ldr	r0, [pc, #444]	; (8013620 <_printf_i+0x21c>)
 8013464:	220a      	movs	r2, #10
 8013466:	e039      	b.n	80134dc <_printf_i+0xd8>
 8013468:	2973      	cmp	r1, #115	; 0x73
 801346a:	f000 809d 	beq.w	80135a8 <_printf_i+0x1a4>
 801346e:	d808      	bhi.n	8013482 <_printf_i+0x7e>
 8013470:	296f      	cmp	r1, #111	; 0x6f
 8013472:	d020      	beq.n	80134b6 <_printf_i+0xb2>
 8013474:	2970      	cmp	r1, #112	; 0x70
 8013476:	d1dd      	bne.n	8013434 <_printf_i+0x30>
 8013478:	6823      	ldr	r3, [r4, #0]
 801347a:	f043 0320 	orr.w	r3, r3, #32
 801347e:	6023      	str	r3, [r4, #0]
 8013480:	e003      	b.n	801348a <_printf_i+0x86>
 8013482:	2975      	cmp	r1, #117	; 0x75
 8013484:	d017      	beq.n	80134b6 <_printf_i+0xb2>
 8013486:	2978      	cmp	r1, #120	; 0x78
 8013488:	d1d4      	bne.n	8013434 <_printf_i+0x30>
 801348a:	2378      	movs	r3, #120	; 0x78
 801348c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013490:	4864      	ldr	r0, [pc, #400]	; (8013624 <_printf_i+0x220>)
 8013492:	e055      	b.n	8013540 <_printf_i+0x13c>
 8013494:	6813      	ldr	r3, [r2, #0]
 8013496:	1d19      	adds	r1, r3, #4
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	6011      	str	r1, [r2, #0]
 801349c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134a4:	2301      	movs	r3, #1
 80134a6:	e08c      	b.n	80135c2 <_printf_i+0x1be>
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	6011      	str	r1, [r2, #0]
 80134ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80134b0:	bf18      	it	ne
 80134b2:	b21b      	sxthne	r3, r3
 80134b4:	e7cf      	b.n	8013456 <_printf_i+0x52>
 80134b6:	6813      	ldr	r3, [r2, #0]
 80134b8:	6825      	ldr	r5, [r4, #0]
 80134ba:	1d18      	adds	r0, r3, #4
 80134bc:	6010      	str	r0, [r2, #0]
 80134be:	0628      	lsls	r0, r5, #24
 80134c0:	d501      	bpl.n	80134c6 <_printf_i+0xc2>
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	e002      	b.n	80134cc <_printf_i+0xc8>
 80134c6:	0668      	lsls	r0, r5, #25
 80134c8:	d5fb      	bpl.n	80134c2 <_printf_i+0xbe>
 80134ca:	881b      	ldrh	r3, [r3, #0]
 80134cc:	4854      	ldr	r0, [pc, #336]	; (8013620 <_printf_i+0x21c>)
 80134ce:	296f      	cmp	r1, #111	; 0x6f
 80134d0:	bf14      	ite	ne
 80134d2:	220a      	movne	r2, #10
 80134d4:	2208      	moveq	r2, #8
 80134d6:	2100      	movs	r1, #0
 80134d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80134dc:	6865      	ldr	r5, [r4, #4]
 80134de:	60a5      	str	r5, [r4, #8]
 80134e0:	2d00      	cmp	r5, #0
 80134e2:	f2c0 8095 	blt.w	8013610 <_printf_i+0x20c>
 80134e6:	6821      	ldr	r1, [r4, #0]
 80134e8:	f021 0104 	bic.w	r1, r1, #4
 80134ec:	6021      	str	r1, [r4, #0]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d13d      	bne.n	801356e <_printf_i+0x16a>
 80134f2:	2d00      	cmp	r5, #0
 80134f4:	f040 808e 	bne.w	8013614 <_printf_i+0x210>
 80134f8:	4665      	mov	r5, ip
 80134fa:	2a08      	cmp	r2, #8
 80134fc:	d10b      	bne.n	8013516 <_printf_i+0x112>
 80134fe:	6823      	ldr	r3, [r4, #0]
 8013500:	07db      	lsls	r3, r3, #31
 8013502:	d508      	bpl.n	8013516 <_printf_i+0x112>
 8013504:	6923      	ldr	r3, [r4, #16]
 8013506:	6862      	ldr	r2, [r4, #4]
 8013508:	429a      	cmp	r2, r3
 801350a:	bfde      	ittt	le
 801350c:	2330      	movle	r3, #48	; 0x30
 801350e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013512:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013516:	ebac 0305 	sub.w	r3, ip, r5
 801351a:	6123      	str	r3, [r4, #16]
 801351c:	f8cd 8000 	str.w	r8, [sp]
 8013520:	463b      	mov	r3, r7
 8013522:	aa03      	add	r2, sp, #12
 8013524:	4621      	mov	r1, r4
 8013526:	4630      	mov	r0, r6
 8013528:	f7ff fef6 	bl	8013318 <_printf_common>
 801352c:	3001      	adds	r0, #1
 801352e:	d14d      	bne.n	80135cc <_printf_i+0x1c8>
 8013530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013534:	b005      	add	sp, #20
 8013536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801353a:	4839      	ldr	r0, [pc, #228]	; (8013620 <_printf_i+0x21c>)
 801353c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013540:	6813      	ldr	r3, [r2, #0]
 8013542:	6821      	ldr	r1, [r4, #0]
 8013544:	1d1d      	adds	r5, r3, #4
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	6015      	str	r5, [r2, #0]
 801354a:	060a      	lsls	r2, r1, #24
 801354c:	d50b      	bpl.n	8013566 <_printf_i+0x162>
 801354e:	07ca      	lsls	r2, r1, #31
 8013550:	bf44      	itt	mi
 8013552:	f041 0120 	orrmi.w	r1, r1, #32
 8013556:	6021      	strmi	r1, [r4, #0]
 8013558:	b91b      	cbnz	r3, 8013562 <_printf_i+0x15e>
 801355a:	6822      	ldr	r2, [r4, #0]
 801355c:	f022 0220 	bic.w	r2, r2, #32
 8013560:	6022      	str	r2, [r4, #0]
 8013562:	2210      	movs	r2, #16
 8013564:	e7b7      	b.n	80134d6 <_printf_i+0xd2>
 8013566:	064d      	lsls	r5, r1, #25
 8013568:	bf48      	it	mi
 801356a:	b29b      	uxthmi	r3, r3
 801356c:	e7ef      	b.n	801354e <_printf_i+0x14a>
 801356e:	4665      	mov	r5, ip
 8013570:	fbb3 f1f2 	udiv	r1, r3, r2
 8013574:	fb02 3311 	mls	r3, r2, r1, r3
 8013578:	5cc3      	ldrb	r3, [r0, r3]
 801357a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801357e:	460b      	mov	r3, r1
 8013580:	2900      	cmp	r1, #0
 8013582:	d1f5      	bne.n	8013570 <_printf_i+0x16c>
 8013584:	e7b9      	b.n	80134fa <_printf_i+0xf6>
 8013586:	6813      	ldr	r3, [r2, #0]
 8013588:	6825      	ldr	r5, [r4, #0]
 801358a:	6961      	ldr	r1, [r4, #20]
 801358c:	1d18      	adds	r0, r3, #4
 801358e:	6010      	str	r0, [r2, #0]
 8013590:	0628      	lsls	r0, r5, #24
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	d501      	bpl.n	801359a <_printf_i+0x196>
 8013596:	6019      	str	r1, [r3, #0]
 8013598:	e002      	b.n	80135a0 <_printf_i+0x19c>
 801359a:	066a      	lsls	r2, r5, #25
 801359c:	d5fb      	bpl.n	8013596 <_printf_i+0x192>
 801359e:	8019      	strh	r1, [r3, #0]
 80135a0:	2300      	movs	r3, #0
 80135a2:	6123      	str	r3, [r4, #16]
 80135a4:	4665      	mov	r5, ip
 80135a6:	e7b9      	b.n	801351c <_printf_i+0x118>
 80135a8:	6813      	ldr	r3, [r2, #0]
 80135aa:	1d19      	adds	r1, r3, #4
 80135ac:	6011      	str	r1, [r2, #0]
 80135ae:	681d      	ldr	r5, [r3, #0]
 80135b0:	6862      	ldr	r2, [r4, #4]
 80135b2:	2100      	movs	r1, #0
 80135b4:	4628      	mov	r0, r5
 80135b6:	f7ec fe5b 	bl	8000270 <memchr>
 80135ba:	b108      	cbz	r0, 80135c0 <_printf_i+0x1bc>
 80135bc:	1b40      	subs	r0, r0, r5
 80135be:	6060      	str	r0, [r4, #4]
 80135c0:	6863      	ldr	r3, [r4, #4]
 80135c2:	6123      	str	r3, [r4, #16]
 80135c4:	2300      	movs	r3, #0
 80135c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135ca:	e7a7      	b.n	801351c <_printf_i+0x118>
 80135cc:	6923      	ldr	r3, [r4, #16]
 80135ce:	462a      	mov	r2, r5
 80135d0:	4639      	mov	r1, r7
 80135d2:	4630      	mov	r0, r6
 80135d4:	47c0      	blx	r8
 80135d6:	3001      	adds	r0, #1
 80135d8:	d0aa      	beq.n	8013530 <_printf_i+0x12c>
 80135da:	6823      	ldr	r3, [r4, #0]
 80135dc:	079b      	lsls	r3, r3, #30
 80135de:	d413      	bmi.n	8013608 <_printf_i+0x204>
 80135e0:	68e0      	ldr	r0, [r4, #12]
 80135e2:	9b03      	ldr	r3, [sp, #12]
 80135e4:	4298      	cmp	r0, r3
 80135e6:	bfb8      	it	lt
 80135e8:	4618      	movlt	r0, r3
 80135ea:	e7a3      	b.n	8013534 <_printf_i+0x130>
 80135ec:	2301      	movs	r3, #1
 80135ee:	464a      	mov	r2, r9
 80135f0:	4639      	mov	r1, r7
 80135f2:	4630      	mov	r0, r6
 80135f4:	47c0      	blx	r8
 80135f6:	3001      	adds	r0, #1
 80135f8:	d09a      	beq.n	8013530 <_printf_i+0x12c>
 80135fa:	3501      	adds	r5, #1
 80135fc:	68e3      	ldr	r3, [r4, #12]
 80135fe:	9a03      	ldr	r2, [sp, #12]
 8013600:	1a9b      	subs	r3, r3, r2
 8013602:	42ab      	cmp	r3, r5
 8013604:	dcf2      	bgt.n	80135ec <_printf_i+0x1e8>
 8013606:	e7eb      	b.n	80135e0 <_printf_i+0x1dc>
 8013608:	2500      	movs	r5, #0
 801360a:	f104 0919 	add.w	r9, r4, #25
 801360e:	e7f5      	b.n	80135fc <_printf_i+0x1f8>
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1ac      	bne.n	801356e <_printf_i+0x16a>
 8013614:	7803      	ldrb	r3, [r0, #0]
 8013616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801361a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801361e:	e76c      	b.n	80134fa <_printf_i+0xf6>
 8013620:	0801766f 	.word	0x0801766f
 8013624:	08017680 	.word	0x08017680

08013628 <iprintf>:
 8013628:	b40f      	push	{r0, r1, r2, r3}
 801362a:	4b0a      	ldr	r3, [pc, #40]	; (8013654 <iprintf+0x2c>)
 801362c:	b513      	push	{r0, r1, r4, lr}
 801362e:	681c      	ldr	r4, [r3, #0]
 8013630:	b124      	cbz	r4, 801363c <iprintf+0x14>
 8013632:	69a3      	ldr	r3, [r4, #24]
 8013634:	b913      	cbnz	r3, 801363c <iprintf+0x14>
 8013636:	4620      	mov	r0, r4
 8013638:	f000 fc06 	bl	8013e48 <__sinit>
 801363c:	ab05      	add	r3, sp, #20
 801363e:	9a04      	ldr	r2, [sp, #16]
 8013640:	68a1      	ldr	r1, [r4, #8]
 8013642:	9301      	str	r3, [sp, #4]
 8013644:	4620      	mov	r0, r4
 8013646:	f7ff fd51 	bl	80130ec <_vfiprintf_r>
 801364a:	b002      	add	sp, #8
 801364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013650:	b004      	add	sp, #16
 8013652:	4770      	bx	lr
 8013654:	2000007c 	.word	0x2000007c

08013658 <_sbrk_r>:
 8013658:	b538      	push	{r3, r4, r5, lr}
 801365a:	4c06      	ldr	r4, [pc, #24]	; (8013674 <_sbrk_r+0x1c>)
 801365c:	2300      	movs	r3, #0
 801365e:	4605      	mov	r5, r0
 8013660:	4608      	mov	r0, r1
 8013662:	6023      	str	r3, [r4, #0]
 8013664:	f7ee fef6 	bl	8002454 <_sbrk>
 8013668:	1c43      	adds	r3, r0, #1
 801366a:	d102      	bne.n	8013672 <_sbrk_r+0x1a>
 801366c:	6823      	ldr	r3, [r4, #0]
 801366e:	b103      	cbz	r3, 8013672 <_sbrk_r+0x1a>
 8013670:	602b      	str	r3, [r5, #0]
 8013672:	bd38      	pop	{r3, r4, r5, pc}
 8013674:	200076c8 	.word	0x200076c8

08013678 <siprintf>:
 8013678:	b40e      	push	{r1, r2, r3}
 801367a:	b500      	push	{lr}
 801367c:	b09c      	sub	sp, #112	; 0x70
 801367e:	ab1d      	add	r3, sp, #116	; 0x74
 8013680:	9002      	str	r0, [sp, #8]
 8013682:	9006      	str	r0, [sp, #24]
 8013684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013688:	4809      	ldr	r0, [pc, #36]	; (80136b0 <siprintf+0x38>)
 801368a:	9107      	str	r1, [sp, #28]
 801368c:	9104      	str	r1, [sp, #16]
 801368e:	4909      	ldr	r1, [pc, #36]	; (80136b4 <siprintf+0x3c>)
 8013690:	f853 2b04 	ldr.w	r2, [r3], #4
 8013694:	9105      	str	r1, [sp, #20]
 8013696:	6800      	ldr	r0, [r0, #0]
 8013698:	9301      	str	r3, [sp, #4]
 801369a:	a902      	add	r1, sp, #8
 801369c:	f000 fd56 	bl	801414c <_svfiprintf_r>
 80136a0:	9b02      	ldr	r3, [sp, #8]
 80136a2:	2200      	movs	r2, #0
 80136a4:	701a      	strb	r2, [r3, #0]
 80136a6:	b01c      	add	sp, #112	; 0x70
 80136a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80136ac:	b003      	add	sp, #12
 80136ae:	4770      	bx	lr
 80136b0:	2000007c 	.word	0x2000007c
 80136b4:	ffff0208 	.word	0xffff0208

080136b8 <siscanf>:
 80136b8:	b40e      	push	{r1, r2, r3}
 80136ba:	b530      	push	{r4, r5, lr}
 80136bc:	b09c      	sub	sp, #112	; 0x70
 80136be:	ac1f      	add	r4, sp, #124	; 0x7c
 80136c0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80136c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80136c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80136cc:	9002      	str	r0, [sp, #8]
 80136ce:	9006      	str	r0, [sp, #24]
 80136d0:	f7ec fdc0 	bl	8000254 <strlen>
 80136d4:	4b0b      	ldr	r3, [pc, #44]	; (8013704 <siscanf+0x4c>)
 80136d6:	9003      	str	r0, [sp, #12]
 80136d8:	9007      	str	r0, [sp, #28]
 80136da:	930b      	str	r3, [sp, #44]	; 0x2c
 80136dc:	480a      	ldr	r0, [pc, #40]	; (8013708 <siscanf+0x50>)
 80136de:	9401      	str	r4, [sp, #4]
 80136e0:	2300      	movs	r3, #0
 80136e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80136e4:	9314      	str	r3, [sp, #80]	; 0x50
 80136e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80136ee:	462a      	mov	r2, r5
 80136f0:	4623      	mov	r3, r4
 80136f2:	a902      	add	r1, sp, #8
 80136f4:	6800      	ldr	r0, [r0, #0]
 80136f6:	f000 fe7b 	bl	80143f0 <__ssvfiscanf_r>
 80136fa:	b01c      	add	sp, #112	; 0x70
 80136fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013700:	b003      	add	sp, #12
 8013702:	4770      	bx	lr
 8013704:	0801372f 	.word	0x0801372f
 8013708:	2000007c 	.word	0x2000007c

0801370c <__sread>:
 801370c:	b510      	push	{r4, lr}
 801370e:	460c      	mov	r4, r1
 8013710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013714:	f001 f914 	bl	8014940 <_read_r>
 8013718:	2800      	cmp	r0, #0
 801371a:	bfab      	itete	ge
 801371c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801371e:	89a3      	ldrhlt	r3, [r4, #12]
 8013720:	181b      	addge	r3, r3, r0
 8013722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013726:	bfac      	ite	ge
 8013728:	6563      	strge	r3, [r4, #84]	; 0x54
 801372a:	81a3      	strhlt	r3, [r4, #12]
 801372c:	bd10      	pop	{r4, pc}

0801372e <__seofread>:
 801372e:	2000      	movs	r0, #0
 8013730:	4770      	bx	lr

08013732 <__swrite>:
 8013732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013736:	461f      	mov	r7, r3
 8013738:	898b      	ldrh	r3, [r1, #12]
 801373a:	05db      	lsls	r3, r3, #23
 801373c:	4605      	mov	r5, r0
 801373e:	460c      	mov	r4, r1
 8013740:	4616      	mov	r6, r2
 8013742:	d505      	bpl.n	8013750 <__swrite+0x1e>
 8013744:	2302      	movs	r3, #2
 8013746:	2200      	movs	r2, #0
 8013748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801374c:	f000 fc06 	bl	8013f5c <_lseek_r>
 8013750:	89a3      	ldrh	r3, [r4, #12]
 8013752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801375a:	81a3      	strh	r3, [r4, #12]
 801375c:	4632      	mov	r2, r6
 801375e:	463b      	mov	r3, r7
 8013760:	4628      	mov	r0, r5
 8013762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013766:	f000 b9ef 	b.w	8013b48 <_write_r>

0801376a <__sseek>:
 801376a:	b510      	push	{r4, lr}
 801376c:	460c      	mov	r4, r1
 801376e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013772:	f000 fbf3 	bl	8013f5c <_lseek_r>
 8013776:	1c43      	adds	r3, r0, #1
 8013778:	89a3      	ldrh	r3, [r4, #12]
 801377a:	bf15      	itete	ne
 801377c:	6560      	strne	r0, [r4, #84]	; 0x54
 801377e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013786:	81a3      	strheq	r3, [r4, #12]
 8013788:	bf18      	it	ne
 801378a:	81a3      	strhne	r3, [r4, #12]
 801378c:	bd10      	pop	{r4, pc}

0801378e <__sclose>:
 801378e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013792:	f000 ba59 	b.w	8013c48 <_close_r>

08013796 <strcat>:
 8013796:	b510      	push	{r4, lr}
 8013798:	4603      	mov	r3, r0
 801379a:	781a      	ldrb	r2, [r3, #0]
 801379c:	1c5c      	adds	r4, r3, #1
 801379e:	b93a      	cbnz	r2, 80137b0 <strcat+0x1a>
 80137a0:	3b01      	subs	r3, #1
 80137a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137aa:	2a00      	cmp	r2, #0
 80137ac:	d1f9      	bne.n	80137a2 <strcat+0xc>
 80137ae:	bd10      	pop	{r4, pc}
 80137b0:	4623      	mov	r3, r4
 80137b2:	e7f2      	b.n	801379a <strcat+0x4>

080137b4 <strncasecmp>:
 80137b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b8:	4606      	mov	r6, r0
 80137ba:	460f      	mov	r7, r1
 80137bc:	eb00 0802 	add.w	r8, r0, r2
 80137c0:	45b0      	cmp	r8, r6
 80137c2:	d019      	beq.n	80137f8 <strncasecmp+0x44>
 80137c4:	f816 4b01 	ldrb.w	r4, [r6], #1
 80137c8:	f7ff fb5a 	bl	8012e80 <__locale_ctype_ptr>
 80137cc:	4420      	add	r0, r4
 80137ce:	f817 5b01 	ldrb.w	r5, [r7], #1
 80137d2:	7843      	ldrb	r3, [r0, #1]
 80137d4:	f003 0303 	and.w	r3, r3, #3
 80137d8:	2b01      	cmp	r3, #1
 80137da:	bf08      	it	eq
 80137dc:	3420      	addeq	r4, #32
 80137de:	f7ff fb4f 	bl	8012e80 <__locale_ctype_ptr>
 80137e2:	4428      	add	r0, r5
 80137e4:	7842      	ldrb	r2, [r0, #1]
 80137e6:	f002 0203 	and.w	r2, r2, #3
 80137ea:	2a01      	cmp	r2, #1
 80137ec:	bf08      	it	eq
 80137ee:	3520      	addeq	r5, #32
 80137f0:	1b60      	subs	r0, r4, r5
 80137f2:	d102      	bne.n	80137fa <strncasecmp+0x46>
 80137f4:	2d00      	cmp	r5, #0
 80137f6:	d1e3      	bne.n	80137c0 <strncasecmp+0xc>
 80137f8:	2000      	movs	r0, #0
 80137fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137fe <_strtol_l.isra.0>:
 80137fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013802:	4680      	mov	r8, r0
 8013804:	4689      	mov	r9, r1
 8013806:	4692      	mov	sl, r2
 8013808:	461e      	mov	r6, r3
 801380a:	460f      	mov	r7, r1
 801380c:	463d      	mov	r5, r7
 801380e:	9808      	ldr	r0, [sp, #32]
 8013810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013814:	f7ff fb30 	bl	8012e78 <__locale_ctype_ptr_l>
 8013818:	4420      	add	r0, r4
 801381a:	7843      	ldrb	r3, [r0, #1]
 801381c:	f013 0308 	ands.w	r3, r3, #8
 8013820:	d132      	bne.n	8013888 <_strtol_l.isra.0+0x8a>
 8013822:	2c2d      	cmp	r4, #45	; 0x2d
 8013824:	d132      	bne.n	801388c <_strtol_l.isra.0+0x8e>
 8013826:	787c      	ldrb	r4, [r7, #1]
 8013828:	1cbd      	adds	r5, r7, #2
 801382a:	2201      	movs	r2, #1
 801382c:	2e00      	cmp	r6, #0
 801382e:	d05d      	beq.n	80138ec <_strtol_l.isra.0+0xee>
 8013830:	2e10      	cmp	r6, #16
 8013832:	d109      	bne.n	8013848 <_strtol_l.isra.0+0x4a>
 8013834:	2c30      	cmp	r4, #48	; 0x30
 8013836:	d107      	bne.n	8013848 <_strtol_l.isra.0+0x4a>
 8013838:	782b      	ldrb	r3, [r5, #0]
 801383a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801383e:	2b58      	cmp	r3, #88	; 0x58
 8013840:	d14f      	bne.n	80138e2 <_strtol_l.isra.0+0xe4>
 8013842:	786c      	ldrb	r4, [r5, #1]
 8013844:	2610      	movs	r6, #16
 8013846:	3502      	adds	r5, #2
 8013848:	2a00      	cmp	r2, #0
 801384a:	bf14      	ite	ne
 801384c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013850:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013854:	2700      	movs	r7, #0
 8013856:	fbb1 fcf6 	udiv	ip, r1, r6
 801385a:	4638      	mov	r0, r7
 801385c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013860:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013864:	2b09      	cmp	r3, #9
 8013866:	d817      	bhi.n	8013898 <_strtol_l.isra.0+0x9a>
 8013868:	461c      	mov	r4, r3
 801386a:	42a6      	cmp	r6, r4
 801386c:	dd23      	ble.n	80138b6 <_strtol_l.isra.0+0xb8>
 801386e:	1c7b      	adds	r3, r7, #1
 8013870:	d007      	beq.n	8013882 <_strtol_l.isra.0+0x84>
 8013872:	4584      	cmp	ip, r0
 8013874:	d31c      	bcc.n	80138b0 <_strtol_l.isra.0+0xb2>
 8013876:	d101      	bne.n	801387c <_strtol_l.isra.0+0x7e>
 8013878:	45a6      	cmp	lr, r4
 801387a:	db19      	blt.n	80138b0 <_strtol_l.isra.0+0xb2>
 801387c:	fb00 4006 	mla	r0, r0, r6, r4
 8013880:	2701      	movs	r7, #1
 8013882:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013886:	e7eb      	b.n	8013860 <_strtol_l.isra.0+0x62>
 8013888:	462f      	mov	r7, r5
 801388a:	e7bf      	b.n	801380c <_strtol_l.isra.0+0xe>
 801388c:	2c2b      	cmp	r4, #43	; 0x2b
 801388e:	bf04      	itt	eq
 8013890:	1cbd      	addeq	r5, r7, #2
 8013892:	787c      	ldrbeq	r4, [r7, #1]
 8013894:	461a      	mov	r2, r3
 8013896:	e7c9      	b.n	801382c <_strtol_l.isra.0+0x2e>
 8013898:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801389c:	2b19      	cmp	r3, #25
 801389e:	d801      	bhi.n	80138a4 <_strtol_l.isra.0+0xa6>
 80138a0:	3c37      	subs	r4, #55	; 0x37
 80138a2:	e7e2      	b.n	801386a <_strtol_l.isra.0+0x6c>
 80138a4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80138a8:	2b19      	cmp	r3, #25
 80138aa:	d804      	bhi.n	80138b6 <_strtol_l.isra.0+0xb8>
 80138ac:	3c57      	subs	r4, #87	; 0x57
 80138ae:	e7dc      	b.n	801386a <_strtol_l.isra.0+0x6c>
 80138b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80138b4:	e7e5      	b.n	8013882 <_strtol_l.isra.0+0x84>
 80138b6:	1c7b      	adds	r3, r7, #1
 80138b8:	d108      	bne.n	80138cc <_strtol_l.isra.0+0xce>
 80138ba:	2322      	movs	r3, #34	; 0x22
 80138bc:	f8c8 3000 	str.w	r3, [r8]
 80138c0:	4608      	mov	r0, r1
 80138c2:	f1ba 0f00 	cmp.w	sl, #0
 80138c6:	d107      	bne.n	80138d8 <_strtol_l.isra.0+0xda>
 80138c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138cc:	b102      	cbz	r2, 80138d0 <_strtol_l.isra.0+0xd2>
 80138ce:	4240      	negs	r0, r0
 80138d0:	f1ba 0f00 	cmp.w	sl, #0
 80138d4:	d0f8      	beq.n	80138c8 <_strtol_l.isra.0+0xca>
 80138d6:	b10f      	cbz	r7, 80138dc <_strtol_l.isra.0+0xde>
 80138d8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80138dc:	f8ca 9000 	str.w	r9, [sl]
 80138e0:	e7f2      	b.n	80138c8 <_strtol_l.isra.0+0xca>
 80138e2:	2430      	movs	r4, #48	; 0x30
 80138e4:	2e00      	cmp	r6, #0
 80138e6:	d1af      	bne.n	8013848 <_strtol_l.isra.0+0x4a>
 80138e8:	2608      	movs	r6, #8
 80138ea:	e7ad      	b.n	8013848 <_strtol_l.isra.0+0x4a>
 80138ec:	2c30      	cmp	r4, #48	; 0x30
 80138ee:	d0a3      	beq.n	8013838 <_strtol_l.isra.0+0x3a>
 80138f0:	260a      	movs	r6, #10
 80138f2:	e7a9      	b.n	8013848 <_strtol_l.isra.0+0x4a>

080138f4 <_strtol_r>:
 80138f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138f6:	4c06      	ldr	r4, [pc, #24]	; (8013910 <_strtol_r+0x1c>)
 80138f8:	4d06      	ldr	r5, [pc, #24]	; (8013914 <_strtol_r+0x20>)
 80138fa:	6824      	ldr	r4, [r4, #0]
 80138fc:	6a24      	ldr	r4, [r4, #32]
 80138fe:	2c00      	cmp	r4, #0
 8013900:	bf08      	it	eq
 8013902:	462c      	moveq	r4, r5
 8013904:	9400      	str	r4, [sp, #0]
 8013906:	f7ff ff7a 	bl	80137fe <_strtol_l.isra.0>
 801390a:	b003      	add	sp, #12
 801390c:	bd30      	pop	{r4, r5, pc}
 801390e:	bf00      	nop
 8013910:	2000007c 	.word	0x2000007c
 8013914:	200000e0 	.word	0x200000e0

08013918 <strtol>:
 8013918:	4b08      	ldr	r3, [pc, #32]	; (801393c <strtol+0x24>)
 801391a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801391c:	681c      	ldr	r4, [r3, #0]
 801391e:	4d08      	ldr	r5, [pc, #32]	; (8013940 <strtol+0x28>)
 8013920:	6a23      	ldr	r3, [r4, #32]
 8013922:	2b00      	cmp	r3, #0
 8013924:	bf08      	it	eq
 8013926:	462b      	moveq	r3, r5
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	4613      	mov	r3, r2
 801392c:	460a      	mov	r2, r1
 801392e:	4601      	mov	r1, r0
 8013930:	4620      	mov	r0, r4
 8013932:	f7ff ff64 	bl	80137fe <_strtol_l.isra.0>
 8013936:	b003      	add	sp, #12
 8013938:	bd30      	pop	{r4, r5, pc}
 801393a:	bf00      	nop
 801393c:	2000007c 	.word	0x2000007c
 8013940:	200000e0 	.word	0x200000e0

08013944 <_strtoul_l.isra.0>:
 8013944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013948:	4680      	mov	r8, r0
 801394a:	4689      	mov	r9, r1
 801394c:	4692      	mov	sl, r2
 801394e:	461e      	mov	r6, r3
 8013950:	460f      	mov	r7, r1
 8013952:	463d      	mov	r5, r7
 8013954:	9808      	ldr	r0, [sp, #32]
 8013956:	f815 4b01 	ldrb.w	r4, [r5], #1
 801395a:	f7ff fa8d 	bl	8012e78 <__locale_ctype_ptr_l>
 801395e:	4420      	add	r0, r4
 8013960:	7843      	ldrb	r3, [r0, #1]
 8013962:	f013 0308 	ands.w	r3, r3, #8
 8013966:	d130      	bne.n	80139ca <_strtoul_l.isra.0+0x86>
 8013968:	2c2d      	cmp	r4, #45	; 0x2d
 801396a:	d130      	bne.n	80139ce <_strtoul_l.isra.0+0x8a>
 801396c:	787c      	ldrb	r4, [r7, #1]
 801396e:	1cbd      	adds	r5, r7, #2
 8013970:	2101      	movs	r1, #1
 8013972:	2e00      	cmp	r6, #0
 8013974:	d05c      	beq.n	8013a30 <_strtoul_l.isra.0+0xec>
 8013976:	2e10      	cmp	r6, #16
 8013978:	d109      	bne.n	801398e <_strtoul_l.isra.0+0x4a>
 801397a:	2c30      	cmp	r4, #48	; 0x30
 801397c:	d107      	bne.n	801398e <_strtoul_l.isra.0+0x4a>
 801397e:	782b      	ldrb	r3, [r5, #0]
 8013980:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013984:	2b58      	cmp	r3, #88	; 0x58
 8013986:	d14e      	bne.n	8013a26 <_strtoul_l.isra.0+0xe2>
 8013988:	786c      	ldrb	r4, [r5, #1]
 801398a:	2610      	movs	r6, #16
 801398c:	3502      	adds	r5, #2
 801398e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013992:	2300      	movs	r3, #0
 8013994:	fbb2 f2f6 	udiv	r2, r2, r6
 8013998:	fb06 fc02 	mul.w	ip, r6, r2
 801399c:	ea6f 0c0c 	mvn.w	ip, ip
 80139a0:	4618      	mov	r0, r3
 80139a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80139a6:	2f09      	cmp	r7, #9
 80139a8:	d817      	bhi.n	80139da <_strtoul_l.isra.0+0x96>
 80139aa:	463c      	mov	r4, r7
 80139ac:	42a6      	cmp	r6, r4
 80139ae:	dd23      	ble.n	80139f8 <_strtoul_l.isra.0+0xb4>
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	db1e      	blt.n	80139f2 <_strtoul_l.isra.0+0xae>
 80139b4:	4282      	cmp	r2, r0
 80139b6:	d31c      	bcc.n	80139f2 <_strtoul_l.isra.0+0xae>
 80139b8:	d101      	bne.n	80139be <_strtoul_l.isra.0+0x7a>
 80139ba:	45a4      	cmp	ip, r4
 80139bc:	db19      	blt.n	80139f2 <_strtoul_l.isra.0+0xae>
 80139be:	fb00 4006 	mla	r0, r0, r6, r4
 80139c2:	2301      	movs	r3, #1
 80139c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139c8:	e7eb      	b.n	80139a2 <_strtoul_l.isra.0+0x5e>
 80139ca:	462f      	mov	r7, r5
 80139cc:	e7c1      	b.n	8013952 <_strtoul_l.isra.0+0xe>
 80139ce:	2c2b      	cmp	r4, #43	; 0x2b
 80139d0:	bf04      	itt	eq
 80139d2:	1cbd      	addeq	r5, r7, #2
 80139d4:	787c      	ldrbeq	r4, [r7, #1]
 80139d6:	4619      	mov	r1, r3
 80139d8:	e7cb      	b.n	8013972 <_strtoul_l.isra.0+0x2e>
 80139da:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80139de:	2f19      	cmp	r7, #25
 80139e0:	d801      	bhi.n	80139e6 <_strtoul_l.isra.0+0xa2>
 80139e2:	3c37      	subs	r4, #55	; 0x37
 80139e4:	e7e2      	b.n	80139ac <_strtoul_l.isra.0+0x68>
 80139e6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80139ea:	2f19      	cmp	r7, #25
 80139ec:	d804      	bhi.n	80139f8 <_strtoul_l.isra.0+0xb4>
 80139ee:	3c57      	subs	r4, #87	; 0x57
 80139f0:	e7dc      	b.n	80139ac <_strtoul_l.isra.0+0x68>
 80139f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139f6:	e7e5      	b.n	80139c4 <_strtoul_l.isra.0+0x80>
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	da09      	bge.n	8013a10 <_strtoul_l.isra.0+0xcc>
 80139fc:	2322      	movs	r3, #34	; 0x22
 80139fe:	f8c8 3000 	str.w	r3, [r8]
 8013a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a06:	f1ba 0f00 	cmp.w	sl, #0
 8013a0a:	d107      	bne.n	8013a1c <_strtoul_l.isra.0+0xd8>
 8013a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a10:	b101      	cbz	r1, 8013a14 <_strtoul_l.isra.0+0xd0>
 8013a12:	4240      	negs	r0, r0
 8013a14:	f1ba 0f00 	cmp.w	sl, #0
 8013a18:	d0f8      	beq.n	8013a0c <_strtoul_l.isra.0+0xc8>
 8013a1a:	b10b      	cbz	r3, 8013a20 <_strtoul_l.isra.0+0xdc>
 8013a1c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8013a20:	f8ca 9000 	str.w	r9, [sl]
 8013a24:	e7f2      	b.n	8013a0c <_strtoul_l.isra.0+0xc8>
 8013a26:	2430      	movs	r4, #48	; 0x30
 8013a28:	2e00      	cmp	r6, #0
 8013a2a:	d1b0      	bne.n	801398e <_strtoul_l.isra.0+0x4a>
 8013a2c:	2608      	movs	r6, #8
 8013a2e:	e7ae      	b.n	801398e <_strtoul_l.isra.0+0x4a>
 8013a30:	2c30      	cmp	r4, #48	; 0x30
 8013a32:	d0a4      	beq.n	801397e <_strtoul_l.isra.0+0x3a>
 8013a34:	260a      	movs	r6, #10
 8013a36:	e7aa      	b.n	801398e <_strtoul_l.isra.0+0x4a>

08013a38 <_strtoul_r>:
 8013a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a3a:	4c06      	ldr	r4, [pc, #24]	; (8013a54 <_strtoul_r+0x1c>)
 8013a3c:	4d06      	ldr	r5, [pc, #24]	; (8013a58 <_strtoul_r+0x20>)
 8013a3e:	6824      	ldr	r4, [r4, #0]
 8013a40:	6a24      	ldr	r4, [r4, #32]
 8013a42:	2c00      	cmp	r4, #0
 8013a44:	bf08      	it	eq
 8013a46:	462c      	moveq	r4, r5
 8013a48:	9400      	str	r4, [sp, #0]
 8013a4a:	f7ff ff7b 	bl	8013944 <_strtoul_l.isra.0>
 8013a4e:	b003      	add	sp, #12
 8013a50:	bd30      	pop	{r4, r5, pc}
 8013a52:	bf00      	nop
 8013a54:	2000007c 	.word	0x2000007c
 8013a58:	200000e0 	.word	0x200000e0

08013a5c <strtoul>:
 8013a5c:	4b08      	ldr	r3, [pc, #32]	; (8013a80 <strtoul+0x24>)
 8013a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a60:	681c      	ldr	r4, [r3, #0]
 8013a62:	4d08      	ldr	r5, [pc, #32]	; (8013a84 <strtoul+0x28>)
 8013a64:	6a23      	ldr	r3, [r4, #32]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	bf08      	it	eq
 8013a6a:	462b      	moveq	r3, r5
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	4613      	mov	r3, r2
 8013a70:	460a      	mov	r2, r1
 8013a72:	4601      	mov	r1, r0
 8013a74:	4620      	mov	r0, r4
 8013a76:	f7ff ff65 	bl	8013944 <_strtoul_l.isra.0>
 8013a7a:	b003      	add	sp, #12
 8013a7c:	bd30      	pop	{r4, r5, pc}
 8013a7e:	bf00      	nop
 8013a80:	2000007c 	.word	0x2000007c
 8013a84:	200000e0 	.word	0x200000e0

08013a88 <__swbuf_r>:
 8013a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a8a:	460e      	mov	r6, r1
 8013a8c:	4614      	mov	r4, r2
 8013a8e:	4605      	mov	r5, r0
 8013a90:	b118      	cbz	r0, 8013a9a <__swbuf_r+0x12>
 8013a92:	6983      	ldr	r3, [r0, #24]
 8013a94:	b90b      	cbnz	r3, 8013a9a <__swbuf_r+0x12>
 8013a96:	f000 f9d7 	bl	8013e48 <__sinit>
 8013a9a:	4b21      	ldr	r3, [pc, #132]	; (8013b20 <__swbuf_r+0x98>)
 8013a9c:	429c      	cmp	r4, r3
 8013a9e:	d12a      	bne.n	8013af6 <__swbuf_r+0x6e>
 8013aa0:	686c      	ldr	r4, [r5, #4]
 8013aa2:	69a3      	ldr	r3, [r4, #24]
 8013aa4:	60a3      	str	r3, [r4, #8]
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	071a      	lsls	r2, r3, #28
 8013aaa:	d52e      	bpl.n	8013b0a <__swbuf_r+0x82>
 8013aac:	6923      	ldr	r3, [r4, #16]
 8013aae:	b363      	cbz	r3, 8013b0a <__swbuf_r+0x82>
 8013ab0:	6923      	ldr	r3, [r4, #16]
 8013ab2:	6820      	ldr	r0, [r4, #0]
 8013ab4:	1ac0      	subs	r0, r0, r3
 8013ab6:	6963      	ldr	r3, [r4, #20]
 8013ab8:	b2f6      	uxtb	r6, r6
 8013aba:	4283      	cmp	r3, r0
 8013abc:	4637      	mov	r7, r6
 8013abe:	dc04      	bgt.n	8013aca <__swbuf_r+0x42>
 8013ac0:	4621      	mov	r1, r4
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	f000 f956 	bl	8013d74 <_fflush_r>
 8013ac8:	bb28      	cbnz	r0, 8013b16 <__swbuf_r+0x8e>
 8013aca:	68a3      	ldr	r3, [r4, #8]
 8013acc:	3b01      	subs	r3, #1
 8013ace:	60a3      	str	r3, [r4, #8]
 8013ad0:	6823      	ldr	r3, [r4, #0]
 8013ad2:	1c5a      	adds	r2, r3, #1
 8013ad4:	6022      	str	r2, [r4, #0]
 8013ad6:	701e      	strb	r6, [r3, #0]
 8013ad8:	6963      	ldr	r3, [r4, #20]
 8013ada:	3001      	adds	r0, #1
 8013adc:	4283      	cmp	r3, r0
 8013ade:	d004      	beq.n	8013aea <__swbuf_r+0x62>
 8013ae0:	89a3      	ldrh	r3, [r4, #12]
 8013ae2:	07db      	lsls	r3, r3, #31
 8013ae4:	d519      	bpl.n	8013b1a <__swbuf_r+0x92>
 8013ae6:	2e0a      	cmp	r6, #10
 8013ae8:	d117      	bne.n	8013b1a <__swbuf_r+0x92>
 8013aea:	4621      	mov	r1, r4
 8013aec:	4628      	mov	r0, r5
 8013aee:	f000 f941 	bl	8013d74 <_fflush_r>
 8013af2:	b190      	cbz	r0, 8013b1a <__swbuf_r+0x92>
 8013af4:	e00f      	b.n	8013b16 <__swbuf_r+0x8e>
 8013af6:	4b0b      	ldr	r3, [pc, #44]	; (8013b24 <__swbuf_r+0x9c>)
 8013af8:	429c      	cmp	r4, r3
 8013afa:	d101      	bne.n	8013b00 <__swbuf_r+0x78>
 8013afc:	68ac      	ldr	r4, [r5, #8]
 8013afe:	e7d0      	b.n	8013aa2 <__swbuf_r+0x1a>
 8013b00:	4b09      	ldr	r3, [pc, #36]	; (8013b28 <__swbuf_r+0xa0>)
 8013b02:	429c      	cmp	r4, r3
 8013b04:	bf08      	it	eq
 8013b06:	68ec      	ldreq	r4, [r5, #12]
 8013b08:	e7cb      	b.n	8013aa2 <__swbuf_r+0x1a>
 8013b0a:	4621      	mov	r1, r4
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	f000 f82d 	bl	8013b6c <__swsetup_r>
 8013b12:	2800      	cmp	r0, #0
 8013b14:	d0cc      	beq.n	8013ab0 <__swbuf_r+0x28>
 8013b16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013b1a:	4638      	mov	r0, r7
 8013b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	080177b4 	.word	0x080177b4
 8013b24:	080177d4 	.word	0x080177d4
 8013b28:	08017794 	.word	0x08017794

08013b2c <__ascii_wctomb>:
 8013b2c:	b149      	cbz	r1, 8013b42 <__ascii_wctomb+0x16>
 8013b2e:	2aff      	cmp	r2, #255	; 0xff
 8013b30:	bf85      	ittet	hi
 8013b32:	238a      	movhi	r3, #138	; 0x8a
 8013b34:	6003      	strhi	r3, [r0, #0]
 8013b36:	700a      	strbls	r2, [r1, #0]
 8013b38:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013b3c:	bf98      	it	ls
 8013b3e:	2001      	movls	r0, #1
 8013b40:	4770      	bx	lr
 8013b42:	4608      	mov	r0, r1
 8013b44:	4770      	bx	lr
	...

08013b48 <_write_r>:
 8013b48:	b538      	push	{r3, r4, r5, lr}
 8013b4a:	4c07      	ldr	r4, [pc, #28]	; (8013b68 <_write_r+0x20>)
 8013b4c:	4605      	mov	r5, r0
 8013b4e:	4608      	mov	r0, r1
 8013b50:	4611      	mov	r1, r2
 8013b52:	2200      	movs	r2, #0
 8013b54:	6022      	str	r2, [r4, #0]
 8013b56:	461a      	mov	r2, r3
 8013b58:	f7ee fc2b 	bl	80023b2 <_write>
 8013b5c:	1c43      	adds	r3, r0, #1
 8013b5e:	d102      	bne.n	8013b66 <_write_r+0x1e>
 8013b60:	6823      	ldr	r3, [r4, #0]
 8013b62:	b103      	cbz	r3, 8013b66 <_write_r+0x1e>
 8013b64:	602b      	str	r3, [r5, #0]
 8013b66:	bd38      	pop	{r3, r4, r5, pc}
 8013b68:	200076c8 	.word	0x200076c8

08013b6c <__swsetup_r>:
 8013b6c:	4b32      	ldr	r3, [pc, #200]	; (8013c38 <__swsetup_r+0xcc>)
 8013b6e:	b570      	push	{r4, r5, r6, lr}
 8013b70:	681d      	ldr	r5, [r3, #0]
 8013b72:	4606      	mov	r6, r0
 8013b74:	460c      	mov	r4, r1
 8013b76:	b125      	cbz	r5, 8013b82 <__swsetup_r+0x16>
 8013b78:	69ab      	ldr	r3, [r5, #24]
 8013b7a:	b913      	cbnz	r3, 8013b82 <__swsetup_r+0x16>
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	f000 f963 	bl	8013e48 <__sinit>
 8013b82:	4b2e      	ldr	r3, [pc, #184]	; (8013c3c <__swsetup_r+0xd0>)
 8013b84:	429c      	cmp	r4, r3
 8013b86:	d10f      	bne.n	8013ba8 <__swsetup_r+0x3c>
 8013b88:	686c      	ldr	r4, [r5, #4]
 8013b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	0715      	lsls	r5, r2, #28
 8013b92:	d42c      	bmi.n	8013bee <__swsetup_r+0x82>
 8013b94:	06d0      	lsls	r0, r2, #27
 8013b96:	d411      	bmi.n	8013bbc <__swsetup_r+0x50>
 8013b98:	2209      	movs	r2, #9
 8013b9a:	6032      	str	r2, [r6, #0]
 8013b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ba0:	81a3      	strh	r3, [r4, #12]
 8013ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ba6:	e03e      	b.n	8013c26 <__swsetup_r+0xba>
 8013ba8:	4b25      	ldr	r3, [pc, #148]	; (8013c40 <__swsetup_r+0xd4>)
 8013baa:	429c      	cmp	r4, r3
 8013bac:	d101      	bne.n	8013bb2 <__swsetup_r+0x46>
 8013bae:	68ac      	ldr	r4, [r5, #8]
 8013bb0:	e7eb      	b.n	8013b8a <__swsetup_r+0x1e>
 8013bb2:	4b24      	ldr	r3, [pc, #144]	; (8013c44 <__swsetup_r+0xd8>)
 8013bb4:	429c      	cmp	r4, r3
 8013bb6:	bf08      	it	eq
 8013bb8:	68ec      	ldreq	r4, [r5, #12]
 8013bba:	e7e6      	b.n	8013b8a <__swsetup_r+0x1e>
 8013bbc:	0751      	lsls	r1, r2, #29
 8013bbe:	d512      	bpl.n	8013be6 <__swsetup_r+0x7a>
 8013bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bc2:	b141      	cbz	r1, 8013bd6 <__swsetup_r+0x6a>
 8013bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013bc8:	4299      	cmp	r1, r3
 8013bca:	d002      	beq.n	8013bd2 <__swsetup_r+0x66>
 8013bcc:	4630      	mov	r0, r6
 8013bce:	f7ff f9bb 	bl	8012f48 <_free_r>
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	6363      	str	r3, [r4, #52]	; 0x34
 8013bd6:	89a3      	ldrh	r3, [r4, #12]
 8013bd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013bdc:	81a3      	strh	r3, [r4, #12]
 8013bde:	2300      	movs	r3, #0
 8013be0:	6063      	str	r3, [r4, #4]
 8013be2:	6923      	ldr	r3, [r4, #16]
 8013be4:	6023      	str	r3, [r4, #0]
 8013be6:	89a3      	ldrh	r3, [r4, #12]
 8013be8:	f043 0308 	orr.w	r3, r3, #8
 8013bec:	81a3      	strh	r3, [r4, #12]
 8013bee:	6923      	ldr	r3, [r4, #16]
 8013bf0:	b94b      	cbnz	r3, 8013c06 <__swsetup_r+0x9a>
 8013bf2:	89a3      	ldrh	r3, [r4, #12]
 8013bf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013bfc:	d003      	beq.n	8013c06 <__swsetup_r+0x9a>
 8013bfe:	4621      	mov	r1, r4
 8013c00:	4630      	mov	r0, r6
 8013c02:	f000 f9e1 	bl	8013fc8 <__smakebuf_r>
 8013c06:	89a2      	ldrh	r2, [r4, #12]
 8013c08:	f012 0301 	ands.w	r3, r2, #1
 8013c0c:	d00c      	beq.n	8013c28 <__swsetup_r+0xbc>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	60a3      	str	r3, [r4, #8]
 8013c12:	6963      	ldr	r3, [r4, #20]
 8013c14:	425b      	negs	r3, r3
 8013c16:	61a3      	str	r3, [r4, #24]
 8013c18:	6923      	ldr	r3, [r4, #16]
 8013c1a:	b953      	cbnz	r3, 8013c32 <__swsetup_r+0xc6>
 8013c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013c24:	d1ba      	bne.n	8013b9c <__swsetup_r+0x30>
 8013c26:	bd70      	pop	{r4, r5, r6, pc}
 8013c28:	0792      	lsls	r2, r2, #30
 8013c2a:	bf58      	it	pl
 8013c2c:	6963      	ldrpl	r3, [r4, #20]
 8013c2e:	60a3      	str	r3, [r4, #8]
 8013c30:	e7f2      	b.n	8013c18 <__swsetup_r+0xac>
 8013c32:	2000      	movs	r0, #0
 8013c34:	e7f7      	b.n	8013c26 <__swsetup_r+0xba>
 8013c36:	bf00      	nop
 8013c38:	2000007c 	.word	0x2000007c
 8013c3c:	080177b4 	.word	0x080177b4
 8013c40:	080177d4 	.word	0x080177d4
 8013c44:	08017794 	.word	0x08017794

08013c48 <_close_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4c06      	ldr	r4, [pc, #24]	; (8013c64 <_close_r+0x1c>)
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	4605      	mov	r5, r0
 8013c50:	4608      	mov	r0, r1
 8013c52:	6023      	str	r3, [r4, #0]
 8013c54:	f7ee fbc9 	bl	80023ea <_close>
 8013c58:	1c43      	adds	r3, r0, #1
 8013c5a:	d102      	bne.n	8013c62 <_close_r+0x1a>
 8013c5c:	6823      	ldr	r3, [r4, #0]
 8013c5e:	b103      	cbz	r3, 8013c62 <_close_r+0x1a>
 8013c60:	602b      	str	r3, [r5, #0]
 8013c62:	bd38      	pop	{r3, r4, r5, pc}
 8013c64:	200076c8 	.word	0x200076c8

08013c68 <__sflush_r>:
 8013c68:	898a      	ldrh	r2, [r1, #12]
 8013c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6e:	4605      	mov	r5, r0
 8013c70:	0710      	lsls	r0, r2, #28
 8013c72:	460c      	mov	r4, r1
 8013c74:	d458      	bmi.n	8013d28 <__sflush_r+0xc0>
 8013c76:	684b      	ldr	r3, [r1, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	dc05      	bgt.n	8013c88 <__sflush_r+0x20>
 8013c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	dc02      	bgt.n	8013c88 <__sflush_r+0x20>
 8013c82:	2000      	movs	r0, #0
 8013c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c8a:	2e00      	cmp	r6, #0
 8013c8c:	d0f9      	beq.n	8013c82 <__sflush_r+0x1a>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c94:	682f      	ldr	r7, [r5, #0]
 8013c96:	6a21      	ldr	r1, [r4, #32]
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	d032      	beq.n	8013d02 <__sflush_r+0x9a>
 8013c9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c9e:	89a3      	ldrh	r3, [r4, #12]
 8013ca0:	075a      	lsls	r2, r3, #29
 8013ca2:	d505      	bpl.n	8013cb0 <__sflush_r+0x48>
 8013ca4:	6863      	ldr	r3, [r4, #4]
 8013ca6:	1ac0      	subs	r0, r0, r3
 8013ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013caa:	b10b      	cbz	r3, 8013cb0 <__sflush_r+0x48>
 8013cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cae:	1ac0      	subs	r0, r0, r3
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cb6:	6a21      	ldr	r1, [r4, #32]
 8013cb8:	4628      	mov	r0, r5
 8013cba:	47b0      	blx	r6
 8013cbc:	1c43      	adds	r3, r0, #1
 8013cbe:	89a3      	ldrh	r3, [r4, #12]
 8013cc0:	d106      	bne.n	8013cd0 <__sflush_r+0x68>
 8013cc2:	6829      	ldr	r1, [r5, #0]
 8013cc4:	291d      	cmp	r1, #29
 8013cc6:	d848      	bhi.n	8013d5a <__sflush_r+0xf2>
 8013cc8:	4a29      	ldr	r2, [pc, #164]	; (8013d70 <__sflush_r+0x108>)
 8013cca:	40ca      	lsrs	r2, r1
 8013ccc:	07d6      	lsls	r6, r2, #31
 8013cce:	d544      	bpl.n	8013d5a <__sflush_r+0xf2>
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	6062      	str	r2, [r4, #4]
 8013cd4:	04d9      	lsls	r1, r3, #19
 8013cd6:	6922      	ldr	r2, [r4, #16]
 8013cd8:	6022      	str	r2, [r4, #0]
 8013cda:	d504      	bpl.n	8013ce6 <__sflush_r+0x7e>
 8013cdc:	1c42      	adds	r2, r0, #1
 8013cde:	d101      	bne.n	8013ce4 <__sflush_r+0x7c>
 8013ce0:	682b      	ldr	r3, [r5, #0]
 8013ce2:	b903      	cbnz	r3, 8013ce6 <__sflush_r+0x7e>
 8013ce4:	6560      	str	r0, [r4, #84]	; 0x54
 8013ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ce8:	602f      	str	r7, [r5, #0]
 8013cea:	2900      	cmp	r1, #0
 8013cec:	d0c9      	beq.n	8013c82 <__sflush_r+0x1a>
 8013cee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cf2:	4299      	cmp	r1, r3
 8013cf4:	d002      	beq.n	8013cfc <__sflush_r+0x94>
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f7ff f926 	bl	8012f48 <_free_r>
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	6360      	str	r0, [r4, #52]	; 0x34
 8013d00:	e7c0      	b.n	8013c84 <__sflush_r+0x1c>
 8013d02:	2301      	movs	r3, #1
 8013d04:	4628      	mov	r0, r5
 8013d06:	47b0      	blx	r6
 8013d08:	1c41      	adds	r1, r0, #1
 8013d0a:	d1c8      	bne.n	8013c9e <__sflush_r+0x36>
 8013d0c:	682b      	ldr	r3, [r5, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d0c5      	beq.n	8013c9e <__sflush_r+0x36>
 8013d12:	2b1d      	cmp	r3, #29
 8013d14:	d001      	beq.n	8013d1a <__sflush_r+0xb2>
 8013d16:	2b16      	cmp	r3, #22
 8013d18:	d101      	bne.n	8013d1e <__sflush_r+0xb6>
 8013d1a:	602f      	str	r7, [r5, #0]
 8013d1c:	e7b1      	b.n	8013c82 <__sflush_r+0x1a>
 8013d1e:	89a3      	ldrh	r3, [r4, #12]
 8013d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d24:	81a3      	strh	r3, [r4, #12]
 8013d26:	e7ad      	b.n	8013c84 <__sflush_r+0x1c>
 8013d28:	690f      	ldr	r7, [r1, #16]
 8013d2a:	2f00      	cmp	r7, #0
 8013d2c:	d0a9      	beq.n	8013c82 <__sflush_r+0x1a>
 8013d2e:	0793      	lsls	r3, r2, #30
 8013d30:	680e      	ldr	r6, [r1, #0]
 8013d32:	bf08      	it	eq
 8013d34:	694b      	ldreq	r3, [r1, #20]
 8013d36:	600f      	str	r7, [r1, #0]
 8013d38:	bf18      	it	ne
 8013d3a:	2300      	movne	r3, #0
 8013d3c:	eba6 0807 	sub.w	r8, r6, r7
 8013d40:	608b      	str	r3, [r1, #8]
 8013d42:	f1b8 0f00 	cmp.w	r8, #0
 8013d46:	dd9c      	ble.n	8013c82 <__sflush_r+0x1a>
 8013d48:	4643      	mov	r3, r8
 8013d4a:	463a      	mov	r2, r7
 8013d4c:	6a21      	ldr	r1, [r4, #32]
 8013d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d50:	4628      	mov	r0, r5
 8013d52:	47b0      	blx	r6
 8013d54:	2800      	cmp	r0, #0
 8013d56:	dc06      	bgt.n	8013d66 <__sflush_r+0xfe>
 8013d58:	89a3      	ldrh	r3, [r4, #12]
 8013d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d5e:	81a3      	strh	r3, [r4, #12]
 8013d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d64:	e78e      	b.n	8013c84 <__sflush_r+0x1c>
 8013d66:	4407      	add	r7, r0
 8013d68:	eba8 0800 	sub.w	r8, r8, r0
 8013d6c:	e7e9      	b.n	8013d42 <__sflush_r+0xda>
 8013d6e:	bf00      	nop
 8013d70:	20400001 	.word	0x20400001

08013d74 <_fflush_r>:
 8013d74:	b538      	push	{r3, r4, r5, lr}
 8013d76:	690b      	ldr	r3, [r1, #16]
 8013d78:	4605      	mov	r5, r0
 8013d7a:	460c      	mov	r4, r1
 8013d7c:	b1db      	cbz	r3, 8013db6 <_fflush_r+0x42>
 8013d7e:	b118      	cbz	r0, 8013d88 <_fflush_r+0x14>
 8013d80:	6983      	ldr	r3, [r0, #24]
 8013d82:	b90b      	cbnz	r3, 8013d88 <_fflush_r+0x14>
 8013d84:	f000 f860 	bl	8013e48 <__sinit>
 8013d88:	4b0c      	ldr	r3, [pc, #48]	; (8013dbc <_fflush_r+0x48>)
 8013d8a:	429c      	cmp	r4, r3
 8013d8c:	d109      	bne.n	8013da2 <_fflush_r+0x2e>
 8013d8e:	686c      	ldr	r4, [r5, #4]
 8013d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d94:	b17b      	cbz	r3, 8013db6 <_fflush_r+0x42>
 8013d96:	4621      	mov	r1, r4
 8013d98:	4628      	mov	r0, r5
 8013d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d9e:	f7ff bf63 	b.w	8013c68 <__sflush_r>
 8013da2:	4b07      	ldr	r3, [pc, #28]	; (8013dc0 <_fflush_r+0x4c>)
 8013da4:	429c      	cmp	r4, r3
 8013da6:	d101      	bne.n	8013dac <_fflush_r+0x38>
 8013da8:	68ac      	ldr	r4, [r5, #8]
 8013daa:	e7f1      	b.n	8013d90 <_fflush_r+0x1c>
 8013dac:	4b05      	ldr	r3, [pc, #20]	; (8013dc4 <_fflush_r+0x50>)
 8013dae:	429c      	cmp	r4, r3
 8013db0:	bf08      	it	eq
 8013db2:	68ec      	ldreq	r4, [r5, #12]
 8013db4:	e7ec      	b.n	8013d90 <_fflush_r+0x1c>
 8013db6:	2000      	movs	r0, #0
 8013db8:	bd38      	pop	{r3, r4, r5, pc}
 8013dba:	bf00      	nop
 8013dbc:	080177b4 	.word	0x080177b4
 8013dc0:	080177d4 	.word	0x080177d4
 8013dc4:	08017794 	.word	0x08017794

08013dc8 <std>:
 8013dc8:	2300      	movs	r3, #0
 8013dca:	b510      	push	{r4, lr}
 8013dcc:	4604      	mov	r4, r0
 8013dce:	e9c0 3300 	strd	r3, r3, [r0]
 8013dd2:	6083      	str	r3, [r0, #8]
 8013dd4:	8181      	strh	r1, [r0, #12]
 8013dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8013dd8:	81c2      	strh	r2, [r0, #14]
 8013dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013dde:	6183      	str	r3, [r0, #24]
 8013de0:	4619      	mov	r1, r3
 8013de2:	2208      	movs	r2, #8
 8013de4:	305c      	adds	r0, #92	; 0x5c
 8013de6:	f7ff f8a6 	bl	8012f36 <memset>
 8013dea:	4b05      	ldr	r3, [pc, #20]	; (8013e00 <std+0x38>)
 8013dec:	6263      	str	r3, [r4, #36]	; 0x24
 8013dee:	4b05      	ldr	r3, [pc, #20]	; (8013e04 <std+0x3c>)
 8013df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8013df2:	4b05      	ldr	r3, [pc, #20]	; (8013e08 <std+0x40>)
 8013df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013df6:	4b05      	ldr	r3, [pc, #20]	; (8013e0c <std+0x44>)
 8013df8:	6224      	str	r4, [r4, #32]
 8013dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8013dfc:	bd10      	pop	{r4, pc}
 8013dfe:	bf00      	nop
 8013e00:	0801370d 	.word	0x0801370d
 8013e04:	08013733 	.word	0x08013733
 8013e08:	0801376b 	.word	0x0801376b
 8013e0c:	0801378f 	.word	0x0801378f

08013e10 <_cleanup_r>:
 8013e10:	4901      	ldr	r1, [pc, #4]	; (8013e18 <_cleanup_r+0x8>)
 8013e12:	f000 b885 	b.w	8013f20 <_fwalk_reent>
 8013e16:	bf00      	nop
 8013e18:	08013d75 	.word	0x08013d75

08013e1c <__sfmoreglue>:
 8013e1c:	b570      	push	{r4, r5, r6, lr}
 8013e1e:	1e4a      	subs	r2, r1, #1
 8013e20:	2568      	movs	r5, #104	; 0x68
 8013e22:	4355      	muls	r5, r2
 8013e24:	460e      	mov	r6, r1
 8013e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e2a:	f7ff f8db 	bl	8012fe4 <_malloc_r>
 8013e2e:	4604      	mov	r4, r0
 8013e30:	b140      	cbz	r0, 8013e44 <__sfmoreglue+0x28>
 8013e32:	2100      	movs	r1, #0
 8013e34:	e9c0 1600 	strd	r1, r6, [r0]
 8013e38:	300c      	adds	r0, #12
 8013e3a:	60a0      	str	r0, [r4, #8]
 8013e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e40:	f7ff f879 	bl	8012f36 <memset>
 8013e44:	4620      	mov	r0, r4
 8013e46:	bd70      	pop	{r4, r5, r6, pc}

08013e48 <__sinit>:
 8013e48:	6983      	ldr	r3, [r0, #24]
 8013e4a:	b510      	push	{r4, lr}
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	bb33      	cbnz	r3, 8013e9e <__sinit+0x56>
 8013e50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013e54:	6503      	str	r3, [r0, #80]	; 0x50
 8013e56:	4b12      	ldr	r3, [pc, #72]	; (8013ea0 <__sinit+0x58>)
 8013e58:	4a12      	ldr	r2, [pc, #72]	; (8013ea4 <__sinit+0x5c>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	6282      	str	r2, [r0, #40]	; 0x28
 8013e5e:	4298      	cmp	r0, r3
 8013e60:	bf04      	itt	eq
 8013e62:	2301      	moveq	r3, #1
 8013e64:	6183      	streq	r3, [r0, #24]
 8013e66:	f000 f81f 	bl	8013ea8 <__sfp>
 8013e6a:	6060      	str	r0, [r4, #4]
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	f000 f81b 	bl	8013ea8 <__sfp>
 8013e72:	60a0      	str	r0, [r4, #8]
 8013e74:	4620      	mov	r0, r4
 8013e76:	f000 f817 	bl	8013ea8 <__sfp>
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	60e0      	str	r0, [r4, #12]
 8013e7e:	2104      	movs	r1, #4
 8013e80:	6860      	ldr	r0, [r4, #4]
 8013e82:	f7ff ffa1 	bl	8013dc8 <std>
 8013e86:	2201      	movs	r2, #1
 8013e88:	2109      	movs	r1, #9
 8013e8a:	68a0      	ldr	r0, [r4, #8]
 8013e8c:	f7ff ff9c 	bl	8013dc8 <std>
 8013e90:	2202      	movs	r2, #2
 8013e92:	2112      	movs	r1, #18
 8013e94:	68e0      	ldr	r0, [r4, #12]
 8013e96:	f7ff ff97 	bl	8013dc8 <std>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	61a3      	str	r3, [r4, #24]
 8013e9e:	bd10      	pop	{r4, pc}
 8013ea0:	08017650 	.word	0x08017650
 8013ea4:	08013e11 	.word	0x08013e11

08013ea8 <__sfp>:
 8013ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eaa:	4b1b      	ldr	r3, [pc, #108]	; (8013f18 <__sfp+0x70>)
 8013eac:	681e      	ldr	r6, [r3, #0]
 8013eae:	69b3      	ldr	r3, [r6, #24]
 8013eb0:	4607      	mov	r7, r0
 8013eb2:	b913      	cbnz	r3, 8013eba <__sfp+0x12>
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f7ff ffc7 	bl	8013e48 <__sinit>
 8013eba:	3648      	adds	r6, #72	; 0x48
 8013ebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ec0:	3b01      	subs	r3, #1
 8013ec2:	d503      	bpl.n	8013ecc <__sfp+0x24>
 8013ec4:	6833      	ldr	r3, [r6, #0]
 8013ec6:	b133      	cbz	r3, 8013ed6 <__sfp+0x2e>
 8013ec8:	6836      	ldr	r6, [r6, #0]
 8013eca:	e7f7      	b.n	8013ebc <__sfp+0x14>
 8013ecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ed0:	b16d      	cbz	r5, 8013eee <__sfp+0x46>
 8013ed2:	3468      	adds	r4, #104	; 0x68
 8013ed4:	e7f4      	b.n	8013ec0 <__sfp+0x18>
 8013ed6:	2104      	movs	r1, #4
 8013ed8:	4638      	mov	r0, r7
 8013eda:	f7ff ff9f 	bl	8013e1c <__sfmoreglue>
 8013ede:	6030      	str	r0, [r6, #0]
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	d1f1      	bne.n	8013ec8 <__sfp+0x20>
 8013ee4:	230c      	movs	r3, #12
 8013ee6:	603b      	str	r3, [r7, #0]
 8013ee8:	4604      	mov	r4, r0
 8013eea:	4620      	mov	r0, r4
 8013eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eee:	4b0b      	ldr	r3, [pc, #44]	; (8013f1c <__sfp+0x74>)
 8013ef0:	6665      	str	r5, [r4, #100]	; 0x64
 8013ef2:	e9c4 5500 	strd	r5, r5, [r4]
 8013ef6:	60a5      	str	r5, [r4, #8]
 8013ef8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013efc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013f00:	2208      	movs	r2, #8
 8013f02:	4629      	mov	r1, r5
 8013f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f08:	f7ff f815 	bl	8012f36 <memset>
 8013f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f14:	e7e9      	b.n	8013eea <__sfp+0x42>
 8013f16:	bf00      	nop
 8013f18:	08017650 	.word	0x08017650
 8013f1c:	ffff0001 	.word	0xffff0001

08013f20 <_fwalk_reent>:
 8013f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f24:	4680      	mov	r8, r0
 8013f26:	4689      	mov	r9, r1
 8013f28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f2c:	2600      	movs	r6, #0
 8013f2e:	b914      	cbnz	r4, 8013f36 <_fwalk_reent+0x16>
 8013f30:	4630      	mov	r0, r6
 8013f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013f3a:	3f01      	subs	r7, #1
 8013f3c:	d501      	bpl.n	8013f42 <_fwalk_reent+0x22>
 8013f3e:	6824      	ldr	r4, [r4, #0]
 8013f40:	e7f5      	b.n	8013f2e <_fwalk_reent+0xe>
 8013f42:	89ab      	ldrh	r3, [r5, #12]
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d907      	bls.n	8013f58 <_fwalk_reent+0x38>
 8013f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	d003      	beq.n	8013f58 <_fwalk_reent+0x38>
 8013f50:	4629      	mov	r1, r5
 8013f52:	4640      	mov	r0, r8
 8013f54:	47c8      	blx	r9
 8013f56:	4306      	orrs	r6, r0
 8013f58:	3568      	adds	r5, #104	; 0x68
 8013f5a:	e7ee      	b.n	8013f3a <_fwalk_reent+0x1a>

08013f5c <_lseek_r>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	4c07      	ldr	r4, [pc, #28]	; (8013f7c <_lseek_r+0x20>)
 8013f60:	4605      	mov	r5, r0
 8013f62:	4608      	mov	r0, r1
 8013f64:	4611      	mov	r1, r2
 8013f66:	2200      	movs	r2, #0
 8013f68:	6022      	str	r2, [r4, #0]
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	f7ee fa64 	bl	8002438 <_lseek>
 8013f70:	1c43      	adds	r3, r0, #1
 8013f72:	d102      	bne.n	8013f7a <_lseek_r+0x1e>
 8013f74:	6823      	ldr	r3, [r4, #0]
 8013f76:	b103      	cbz	r3, 8013f7a <_lseek_r+0x1e>
 8013f78:	602b      	str	r3, [r5, #0]
 8013f7a:	bd38      	pop	{r3, r4, r5, pc}
 8013f7c:	200076c8 	.word	0x200076c8

08013f80 <__swhatbuf_r>:
 8013f80:	b570      	push	{r4, r5, r6, lr}
 8013f82:	460e      	mov	r6, r1
 8013f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f88:	2900      	cmp	r1, #0
 8013f8a:	b096      	sub	sp, #88	; 0x58
 8013f8c:	4614      	mov	r4, r2
 8013f8e:	461d      	mov	r5, r3
 8013f90:	da07      	bge.n	8013fa2 <__swhatbuf_r+0x22>
 8013f92:	2300      	movs	r3, #0
 8013f94:	602b      	str	r3, [r5, #0]
 8013f96:	89b3      	ldrh	r3, [r6, #12]
 8013f98:	061a      	lsls	r2, r3, #24
 8013f9a:	d410      	bmi.n	8013fbe <__swhatbuf_r+0x3e>
 8013f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fa0:	e00e      	b.n	8013fc0 <__swhatbuf_r+0x40>
 8013fa2:	466a      	mov	r2, sp
 8013fa4:	f000 fd4a 	bl	8014a3c <_fstat_r>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	dbf2      	blt.n	8013f92 <__swhatbuf_r+0x12>
 8013fac:	9a01      	ldr	r2, [sp, #4]
 8013fae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013fb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013fb6:	425a      	negs	r2, r3
 8013fb8:	415a      	adcs	r2, r3
 8013fba:	602a      	str	r2, [r5, #0]
 8013fbc:	e7ee      	b.n	8013f9c <__swhatbuf_r+0x1c>
 8013fbe:	2340      	movs	r3, #64	; 0x40
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	6023      	str	r3, [r4, #0]
 8013fc4:	b016      	add	sp, #88	; 0x58
 8013fc6:	bd70      	pop	{r4, r5, r6, pc}

08013fc8 <__smakebuf_r>:
 8013fc8:	898b      	ldrh	r3, [r1, #12]
 8013fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fcc:	079d      	lsls	r5, r3, #30
 8013fce:	4606      	mov	r6, r0
 8013fd0:	460c      	mov	r4, r1
 8013fd2:	d507      	bpl.n	8013fe4 <__smakebuf_r+0x1c>
 8013fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	6123      	str	r3, [r4, #16]
 8013fdc:	2301      	movs	r3, #1
 8013fde:	6163      	str	r3, [r4, #20]
 8013fe0:	b002      	add	sp, #8
 8013fe2:	bd70      	pop	{r4, r5, r6, pc}
 8013fe4:	ab01      	add	r3, sp, #4
 8013fe6:	466a      	mov	r2, sp
 8013fe8:	f7ff ffca 	bl	8013f80 <__swhatbuf_r>
 8013fec:	9900      	ldr	r1, [sp, #0]
 8013fee:	4605      	mov	r5, r0
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f7fe fff7 	bl	8012fe4 <_malloc_r>
 8013ff6:	b948      	cbnz	r0, 801400c <__smakebuf_r+0x44>
 8013ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ffc:	059a      	lsls	r2, r3, #22
 8013ffe:	d4ef      	bmi.n	8013fe0 <__smakebuf_r+0x18>
 8014000:	f023 0303 	bic.w	r3, r3, #3
 8014004:	f043 0302 	orr.w	r3, r3, #2
 8014008:	81a3      	strh	r3, [r4, #12]
 801400a:	e7e3      	b.n	8013fd4 <__smakebuf_r+0xc>
 801400c:	4b0d      	ldr	r3, [pc, #52]	; (8014044 <__smakebuf_r+0x7c>)
 801400e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014010:	89a3      	ldrh	r3, [r4, #12]
 8014012:	6020      	str	r0, [r4, #0]
 8014014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014018:	81a3      	strh	r3, [r4, #12]
 801401a:	9b00      	ldr	r3, [sp, #0]
 801401c:	6163      	str	r3, [r4, #20]
 801401e:	9b01      	ldr	r3, [sp, #4]
 8014020:	6120      	str	r0, [r4, #16]
 8014022:	b15b      	cbz	r3, 801403c <__smakebuf_r+0x74>
 8014024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014028:	4630      	mov	r0, r6
 801402a:	f000 fd19 	bl	8014a60 <_isatty_r>
 801402e:	b128      	cbz	r0, 801403c <__smakebuf_r+0x74>
 8014030:	89a3      	ldrh	r3, [r4, #12]
 8014032:	f023 0303 	bic.w	r3, r3, #3
 8014036:	f043 0301 	orr.w	r3, r3, #1
 801403a:	81a3      	strh	r3, [r4, #12]
 801403c:	89a3      	ldrh	r3, [r4, #12]
 801403e:	431d      	orrs	r5, r3
 8014040:	81a5      	strh	r5, [r4, #12]
 8014042:	e7cd      	b.n	8013fe0 <__smakebuf_r+0x18>
 8014044:	08013e11 	.word	0x08013e11

08014048 <__malloc_lock>:
 8014048:	4770      	bx	lr

0801404a <__malloc_unlock>:
 801404a:	4770      	bx	lr

0801404c <_realloc_r>:
 801404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404e:	4607      	mov	r7, r0
 8014050:	4614      	mov	r4, r2
 8014052:	460e      	mov	r6, r1
 8014054:	b921      	cbnz	r1, 8014060 <_realloc_r+0x14>
 8014056:	4611      	mov	r1, r2
 8014058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801405c:	f7fe bfc2 	b.w	8012fe4 <_malloc_r>
 8014060:	b922      	cbnz	r2, 801406c <_realloc_r+0x20>
 8014062:	f7fe ff71 	bl	8012f48 <_free_r>
 8014066:	4625      	mov	r5, r4
 8014068:	4628      	mov	r0, r5
 801406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801406c:	f000 fd08 	bl	8014a80 <_malloc_usable_size_r>
 8014070:	42a0      	cmp	r0, r4
 8014072:	d20f      	bcs.n	8014094 <_realloc_r+0x48>
 8014074:	4621      	mov	r1, r4
 8014076:	4638      	mov	r0, r7
 8014078:	f7fe ffb4 	bl	8012fe4 <_malloc_r>
 801407c:	4605      	mov	r5, r0
 801407e:	2800      	cmp	r0, #0
 8014080:	d0f2      	beq.n	8014068 <_realloc_r+0x1c>
 8014082:	4631      	mov	r1, r6
 8014084:	4622      	mov	r2, r4
 8014086:	f7fe ff32 	bl	8012eee <memcpy>
 801408a:	4631      	mov	r1, r6
 801408c:	4638      	mov	r0, r7
 801408e:	f7fe ff5b 	bl	8012f48 <_free_r>
 8014092:	e7e9      	b.n	8014068 <_realloc_r+0x1c>
 8014094:	4635      	mov	r5, r6
 8014096:	e7e7      	b.n	8014068 <_realloc_r+0x1c>

08014098 <__ssputs_r>:
 8014098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801409c:	688e      	ldr	r6, [r1, #8]
 801409e:	429e      	cmp	r6, r3
 80140a0:	4682      	mov	sl, r0
 80140a2:	460c      	mov	r4, r1
 80140a4:	4690      	mov	r8, r2
 80140a6:	4699      	mov	r9, r3
 80140a8:	d837      	bhi.n	801411a <__ssputs_r+0x82>
 80140aa:	898a      	ldrh	r2, [r1, #12]
 80140ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80140b0:	d031      	beq.n	8014116 <__ssputs_r+0x7e>
 80140b2:	6825      	ldr	r5, [r4, #0]
 80140b4:	6909      	ldr	r1, [r1, #16]
 80140b6:	1a6f      	subs	r7, r5, r1
 80140b8:	6965      	ldr	r5, [r4, #20]
 80140ba:	2302      	movs	r3, #2
 80140bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80140c4:	f109 0301 	add.w	r3, r9, #1
 80140c8:	443b      	add	r3, r7
 80140ca:	429d      	cmp	r5, r3
 80140cc:	bf38      	it	cc
 80140ce:	461d      	movcc	r5, r3
 80140d0:	0553      	lsls	r3, r2, #21
 80140d2:	d530      	bpl.n	8014136 <__ssputs_r+0x9e>
 80140d4:	4629      	mov	r1, r5
 80140d6:	f7fe ff85 	bl	8012fe4 <_malloc_r>
 80140da:	4606      	mov	r6, r0
 80140dc:	b950      	cbnz	r0, 80140f4 <__ssputs_r+0x5c>
 80140de:	230c      	movs	r3, #12
 80140e0:	f8ca 3000 	str.w	r3, [sl]
 80140e4:	89a3      	ldrh	r3, [r4, #12]
 80140e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140ea:	81a3      	strh	r3, [r4, #12]
 80140ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f4:	463a      	mov	r2, r7
 80140f6:	6921      	ldr	r1, [r4, #16]
 80140f8:	f7fe fef9 	bl	8012eee <memcpy>
 80140fc:	89a3      	ldrh	r3, [r4, #12]
 80140fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014106:	81a3      	strh	r3, [r4, #12]
 8014108:	6126      	str	r6, [r4, #16]
 801410a:	6165      	str	r5, [r4, #20]
 801410c:	443e      	add	r6, r7
 801410e:	1bed      	subs	r5, r5, r7
 8014110:	6026      	str	r6, [r4, #0]
 8014112:	60a5      	str	r5, [r4, #8]
 8014114:	464e      	mov	r6, r9
 8014116:	454e      	cmp	r6, r9
 8014118:	d900      	bls.n	801411c <__ssputs_r+0x84>
 801411a:	464e      	mov	r6, r9
 801411c:	4632      	mov	r2, r6
 801411e:	4641      	mov	r1, r8
 8014120:	6820      	ldr	r0, [r4, #0]
 8014122:	f7fe feef 	bl	8012f04 <memmove>
 8014126:	68a3      	ldr	r3, [r4, #8]
 8014128:	1b9b      	subs	r3, r3, r6
 801412a:	60a3      	str	r3, [r4, #8]
 801412c:	6823      	ldr	r3, [r4, #0]
 801412e:	441e      	add	r6, r3
 8014130:	6026      	str	r6, [r4, #0]
 8014132:	2000      	movs	r0, #0
 8014134:	e7dc      	b.n	80140f0 <__ssputs_r+0x58>
 8014136:	462a      	mov	r2, r5
 8014138:	f7ff ff88 	bl	801404c <_realloc_r>
 801413c:	4606      	mov	r6, r0
 801413e:	2800      	cmp	r0, #0
 8014140:	d1e2      	bne.n	8014108 <__ssputs_r+0x70>
 8014142:	6921      	ldr	r1, [r4, #16]
 8014144:	4650      	mov	r0, sl
 8014146:	f7fe feff 	bl	8012f48 <_free_r>
 801414a:	e7c8      	b.n	80140de <__ssputs_r+0x46>

0801414c <_svfiprintf_r>:
 801414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014150:	461d      	mov	r5, r3
 8014152:	898b      	ldrh	r3, [r1, #12]
 8014154:	061f      	lsls	r7, r3, #24
 8014156:	b09d      	sub	sp, #116	; 0x74
 8014158:	4680      	mov	r8, r0
 801415a:	460c      	mov	r4, r1
 801415c:	4616      	mov	r6, r2
 801415e:	d50f      	bpl.n	8014180 <_svfiprintf_r+0x34>
 8014160:	690b      	ldr	r3, [r1, #16]
 8014162:	b96b      	cbnz	r3, 8014180 <_svfiprintf_r+0x34>
 8014164:	2140      	movs	r1, #64	; 0x40
 8014166:	f7fe ff3d 	bl	8012fe4 <_malloc_r>
 801416a:	6020      	str	r0, [r4, #0]
 801416c:	6120      	str	r0, [r4, #16]
 801416e:	b928      	cbnz	r0, 801417c <_svfiprintf_r+0x30>
 8014170:	230c      	movs	r3, #12
 8014172:	f8c8 3000 	str.w	r3, [r8]
 8014176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801417a:	e0c8      	b.n	801430e <_svfiprintf_r+0x1c2>
 801417c:	2340      	movs	r3, #64	; 0x40
 801417e:	6163      	str	r3, [r4, #20]
 8014180:	2300      	movs	r3, #0
 8014182:	9309      	str	r3, [sp, #36]	; 0x24
 8014184:	2320      	movs	r3, #32
 8014186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801418a:	2330      	movs	r3, #48	; 0x30
 801418c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014190:	9503      	str	r5, [sp, #12]
 8014192:	f04f 0b01 	mov.w	fp, #1
 8014196:	4637      	mov	r7, r6
 8014198:	463d      	mov	r5, r7
 801419a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801419e:	b10b      	cbz	r3, 80141a4 <_svfiprintf_r+0x58>
 80141a0:	2b25      	cmp	r3, #37	; 0x25
 80141a2:	d13e      	bne.n	8014222 <_svfiprintf_r+0xd6>
 80141a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80141a8:	d00b      	beq.n	80141c2 <_svfiprintf_r+0x76>
 80141aa:	4653      	mov	r3, sl
 80141ac:	4632      	mov	r2, r6
 80141ae:	4621      	mov	r1, r4
 80141b0:	4640      	mov	r0, r8
 80141b2:	f7ff ff71 	bl	8014098 <__ssputs_r>
 80141b6:	3001      	adds	r0, #1
 80141b8:	f000 80a4 	beq.w	8014304 <_svfiprintf_r+0x1b8>
 80141bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141be:	4453      	add	r3, sl
 80141c0:	9309      	str	r3, [sp, #36]	; 0x24
 80141c2:	783b      	ldrb	r3, [r7, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	f000 809d 	beq.w	8014304 <_svfiprintf_r+0x1b8>
 80141ca:	2300      	movs	r3, #0
 80141cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141d4:	9304      	str	r3, [sp, #16]
 80141d6:	9307      	str	r3, [sp, #28]
 80141d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141dc:	931a      	str	r3, [sp, #104]	; 0x68
 80141de:	462f      	mov	r7, r5
 80141e0:	2205      	movs	r2, #5
 80141e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80141e6:	4850      	ldr	r0, [pc, #320]	; (8014328 <_svfiprintf_r+0x1dc>)
 80141e8:	f7ec f842 	bl	8000270 <memchr>
 80141ec:	9b04      	ldr	r3, [sp, #16]
 80141ee:	b9d0      	cbnz	r0, 8014226 <_svfiprintf_r+0xda>
 80141f0:	06d9      	lsls	r1, r3, #27
 80141f2:	bf44      	itt	mi
 80141f4:	2220      	movmi	r2, #32
 80141f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80141fa:	071a      	lsls	r2, r3, #28
 80141fc:	bf44      	itt	mi
 80141fe:	222b      	movmi	r2, #43	; 0x2b
 8014200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014204:	782a      	ldrb	r2, [r5, #0]
 8014206:	2a2a      	cmp	r2, #42	; 0x2a
 8014208:	d015      	beq.n	8014236 <_svfiprintf_r+0xea>
 801420a:	9a07      	ldr	r2, [sp, #28]
 801420c:	462f      	mov	r7, r5
 801420e:	2000      	movs	r0, #0
 8014210:	250a      	movs	r5, #10
 8014212:	4639      	mov	r1, r7
 8014214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014218:	3b30      	subs	r3, #48	; 0x30
 801421a:	2b09      	cmp	r3, #9
 801421c:	d94d      	bls.n	80142ba <_svfiprintf_r+0x16e>
 801421e:	b1b8      	cbz	r0, 8014250 <_svfiprintf_r+0x104>
 8014220:	e00f      	b.n	8014242 <_svfiprintf_r+0xf6>
 8014222:	462f      	mov	r7, r5
 8014224:	e7b8      	b.n	8014198 <_svfiprintf_r+0x4c>
 8014226:	4a40      	ldr	r2, [pc, #256]	; (8014328 <_svfiprintf_r+0x1dc>)
 8014228:	1a80      	subs	r0, r0, r2
 801422a:	fa0b f000 	lsl.w	r0, fp, r0
 801422e:	4318      	orrs	r0, r3
 8014230:	9004      	str	r0, [sp, #16]
 8014232:	463d      	mov	r5, r7
 8014234:	e7d3      	b.n	80141de <_svfiprintf_r+0x92>
 8014236:	9a03      	ldr	r2, [sp, #12]
 8014238:	1d11      	adds	r1, r2, #4
 801423a:	6812      	ldr	r2, [r2, #0]
 801423c:	9103      	str	r1, [sp, #12]
 801423e:	2a00      	cmp	r2, #0
 8014240:	db01      	blt.n	8014246 <_svfiprintf_r+0xfa>
 8014242:	9207      	str	r2, [sp, #28]
 8014244:	e004      	b.n	8014250 <_svfiprintf_r+0x104>
 8014246:	4252      	negs	r2, r2
 8014248:	f043 0302 	orr.w	r3, r3, #2
 801424c:	9207      	str	r2, [sp, #28]
 801424e:	9304      	str	r3, [sp, #16]
 8014250:	783b      	ldrb	r3, [r7, #0]
 8014252:	2b2e      	cmp	r3, #46	; 0x2e
 8014254:	d10c      	bne.n	8014270 <_svfiprintf_r+0x124>
 8014256:	787b      	ldrb	r3, [r7, #1]
 8014258:	2b2a      	cmp	r3, #42	; 0x2a
 801425a:	d133      	bne.n	80142c4 <_svfiprintf_r+0x178>
 801425c:	9b03      	ldr	r3, [sp, #12]
 801425e:	1d1a      	adds	r2, r3, #4
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	9203      	str	r2, [sp, #12]
 8014264:	2b00      	cmp	r3, #0
 8014266:	bfb8      	it	lt
 8014268:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801426c:	3702      	adds	r7, #2
 801426e:	9305      	str	r3, [sp, #20]
 8014270:	4d2e      	ldr	r5, [pc, #184]	; (801432c <_svfiprintf_r+0x1e0>)
 8014272:	7839      	ldrb	r1, [r7, #0]
 8014274:	2203      	movs	r2, #3
 8014276:	4628      	mov	r0, r5
 8014278:	f7eb fffa 	bl	8000270 <memchr>
 801427c:	b138      	cbz	r0, 801428e <_svfiprintf_r+0x142>
 801427e:	2340      	movs	r3, #64	; 0x40
 8014280:	1b40      	subs	r0, r0, r5
 8014282:	fa03 f000 	lsl.w	r0, r3, r0
 8014286:	9b04      	ldr	r3, [sp, #16]
 8014288:	4303      	orrs	r3, r0
 801428a:	3701      	adds	r7, #1
 801428c:	9304      	str	r3, [sp, #16]
 801428e:	7839      	ldrb	r1, [r7, #0]
 8014290:	4827      	ldr	r0, [pc, #156]	; (8014330 <_svfiprintf_r+0x1e4>)
 8014292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014296:	2206      	movs	r2, #6
 8014298:	1c7e      	adds	r6, r7, #1
 801429a:	f7eb ffe9 	bl	8000270 <memchr>
 801429e:	2800      	cmp	r0, #0
 80142a0:	d038      	beq.n	8014314 <_svfiprintf_r+0x1c8>
 80142a2:	4b24      	ldr	r3, [pc, #144]	; (8014334 <_svfiprintf_r+0x1e8>)
 80142a4:	bb13      	cbnz	r3, 80142ec <_svfiprintf_r+0x1a0>
 80142a6:	9b03      	ldr	r3, [sp, #12]
 80142a8:	3307      	adds	r3, #7
 80142aa:	f023 0307 	bic.w	r3, r3, #7
 80142ae:	3308      	adds	r3, #8
 80142b0:	9303      	str	r3, [sp, #12]
 80142b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142b4:	444b      	add	r3, r9
 80142b6:	9309      	str	r3, [sp, #36]	; 0x24
 80142b8:	e76d      	b.n	8014196 <_svfiprintf_r+0x4a>
 80142ba:	fb05 3202 	mla	r2, r5, r2, r3
 80142be:	2001      	movs	r0, #1
 80142c0:	460f      	mov	r7, r1
 80142c2:	e7a6      	b.n	8014212 <_svfiprintf_r+0xc6>
 80142c4:	2300      	movs	r3, #0
 80142c6:	3701      	adds	r7, #1
 80142c8:	9305      	str	r3, [sp, #20]
 80142ca:	4619      	mov	r1, r3
 80142cc:	250a      	movs	r5, #10
 80142ce:	4638      	mov	r0, r7
 80142d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142d4:	3a30      	subs	r2, #48	; 0x30
 80142d6:	2a09      	cmp	r2, #9
 80142d8:	d903      	bls.n	80142e2 <_svfiprintf_r+0x196>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d0c8      	beq.n	8014270 <_svfiprintf_r+0x124>
 80142de:	9105      	str	r1, [sp, #20]
 80142e0:	e7c6      	b.n	8014270 <_svfiprintf_r+0x124>
 80142e2:	fb05 2101 	mla	r1, r5, r1, r2
 80142e6:	2301      	movs	r3, #1
 80142e8:	4607      	mov	r7, r0
 80142ea:	e7f0      	b.n	80142ce <_svfiprintf_r+0x182>
 80142ec:	ab03      	add	r3, sp, #12
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	4622      	mov	r2, r4
 80142f2:	4b11      	ldr	r3, [pc, #68]	; (8014338 <_svfiprintf_r+0x1ec>)
 80142f4:	a904      	add	r1, sp, #16
 80142f6:	4640      	mov	r0, r8
 80142f8:	f3af 8000 	nop.w
 80142fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014300:	4681      	mov	r9, r0
 8014302:	d1d6      	bne.n	80142b2 <_svfiprintf_r+0x166>
 8014304:	89a3      	ldrh	r3, [r4, #12]
 8014306:	065b      	lsls	r3, r3, #25
 8014308:	f53f af35 	bmi.w	8014176 <_svfiprintf_r+0x2a>
 801430c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801430e:	b01d      	add	sp, #116	; 0x74
 8014310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014314:	ab03      	add	r3, sp, #12
 8014316:	9300      	str	r3, [sp, #0]
 8014318:	4622      	mov	r2, r4
 801431a:	4b07      	ldr	r3, [pc, #28]	; (8014338 <_svfiprintf_r+0x1ec>)
 801431c:	a904      	add	r1, sp, #16
 801431e:	4640      	mov	r0, r8
 8014320:	f7ff f870 	bl	8013404 <_printf_i>
 8014324:	e7ea      	b.n	80142fc <_svfiprintf_r+0x1b0>
 8014326:	bf00      	nop
 8014328:	0801765e 	.word	0x0801765e
 801432c:	08017664 	.word	0x08017664
 8014330:	08017668 	.word	0x08017668
 8014334:	00000000 	.word	0x00000000
 8014338:	08014099 	.word	0x08014099

0801433c <_sungetc_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	1c4b      	adds	r3, r1, #1
 8014340:	4614      	mov	r4, r2
 8014342:	d103      	bne.n	801434c <_sungetc_r+0x10>
 8014344:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014348:	4628      	mov	r0, r5
 801434a:	bd38      	pop	{r3, r4, r5, pc}
 801434c:	8993      	ldrh	r3, [r2, #12]
 801434e:	f023 0320 	bic.w	r3, r3, #32
 8014352:	8193      	strh	r3, [r2, #12]
 8014354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014356:	6852      	ldr	r2, [r2, #4]
 8014358:	b2cd      	uxtb	r5, r1
 801435a:	b18b      	cbz	r3, 8014380 <_sungetc_r+0x44>
 801435c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801435e:	4293      	cmp	r3, r2
 8014360:	dd08      	ble.n	8014374 <_sungetc_r+0x38>
 8014362:	6823      	ldr	r3, [r4, #0]
 8014364:	1e5a      	subs	r2, r3, #1
 8014366:	6022      	str	r2, [r4, #0]
 8014368:	f803 5c01 	strb.w	r5, [r3, #-1]
 801436c:	6863      	ldr	r3, [r4, #4]
 801436e:	3301      	adds	r3, #1
 8014370:	6063      	str	r3, [r4, #4]
 8014372:	e7e9      	b.n	8014348 <_sungetc_r+0xc>
 8014374:	4621      	mov	r1, r4
 8014376:	f000 fb27 	bl	80149c8 <__submore>
 801437a:	2800      	cmp	r0, #0
 801437c:	d0f1      	beq.n	8014362 <_sungetc_r+0x26>
 801437e:	e7e1      	b.n	8014344 <_sungetc_r+0x8>
 8014380:	6921      	ldr	r1, [r4, #16]
 8014382:	6823      	ldr	r3, [r4, #0]
 8014384:	b151      	cbz	r1, 801439c <_sungetc_r+0x60>
 8014386:	4299      	cmp	r1, r3
 8014388:	d208      	bcs.n	801439c <_sungetc_r+0x60>
 801438a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801438e:	42a9      	cmp	r1, r5
 8014390:	d104      	bne.n	801439c <_sungetc_r+0x60>
 8014392:	3b01      	subs	r3, #1
 8014394:	3201      	adds	r2, #1
 8014396:	6023      	str	r3, [r4, #0]
 8014398:	6062      	str	r2, [r4, #4]
 801439a:	e7d5      	b.n	8014348 <_sungetc_r+0xc>
 801439c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80143a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143a4:	6363      	str	r3, [r4, #52]	; 0x34
 80143a6:	2303      	movs	r3, #3
 80143a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80143aa:	4623      	mov	r3, r4
 80143ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	2301      	movs	r3, #1
 80143b4:	e7dc      	b.n	8014370 <_sungetc_r+0x34>

080143b6 <__ssrefill_r>:
 80143b6:	b510      	push	{r4, lr}
 80143b8:	460c      	mov	r4, r1
 80143ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80143bc:	b169      	cbz	r1, 80143da <__ssrefill_r+0x24>
 80143be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143c2:	4299      	cmp	r1, r3
 80143c4:	d001      	beq.n	80143ca <__ssrefill_r+0x14>
 80143c6:	f7fe fdbf 	bl	8012f48 <_free_r>
 80143ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143cc:	6063      	str	r3, [r4, #4]
 80143ce:	2000      	movs	r0, #0
 80143d0:	6360      	str	r0, [r4, #52]	; 0x34
 80143d2:	b113      	cbz	r3, 80143da <__ssrefill_r+0x24>
 80143d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80143d6:	6023      	str	r3, [r4, #0]
 80143d8:	bd10      	pop	{r4, pc}
 80143da:	6923      	ldr	r3, [r4, #16]
 80143dc:	6023      	str	r3, [r4, #0]
 80143de:	2300      	movs	r3, #0
 80143e0:	6063      	str	r3, [r4, #4]
 80143e2:	89a3      	ldrh	r3, [r4, #12]
 80143e4:	f043 0320 	orr.w	r3, r3, #32
 80143e8:	81a3      	strh	r3, [r4, #12]
 80143ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143ee:	e7f3      	b.n	80143d8 <__ssrefill_r+0x22>

080143f0 <__ssvfiscanf_r>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80143f8:	460c      	mov	r4, r1
 80143fa:	2100      	movs	r1, #0
 80143fc:	9144      	str	r1, [sp, #272]	; 0x110
 80143fe:	9145      	str	r1, [sp, #276]	; 0x114
 8014400:	499f      	ldr	r1, [pc, #636]	; (8014680 <__ssvfiscanf_r+0x290>)
 8014402:	91a0      	str	r1, [sp, #640]	; 0x280
 8014404:	f10d 0804 	add.w	r8, sp, #4
 8014408:	499e      	ldr	r1, [pc, #632]	; (8014684 <__ssvfiscanf_r+0x294>)
 801440a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8014688 <__ssvfiscanf_r+0x298>
 801440e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014412:	4606      	mov	r6, r0
 8014414:	4692      	mov	sl, r2
 8014416:	91a1      	str	r1, [sp, #644]	; 0x284
 8014418:	9300      	str	r3, [sp, #0]
 801441a:	270a      	movs	r7, #10
 801441c:	f89a 3000 	ldrb.w	r3, [sl]
 8014420:	2b00      	cmp	r3, #0
 8014422:	f000 812a 	beq.w	801467a <__ssvfiscanf_r+0x28a>
 8014426:	4655      	mov	r5, sl
 8014428:	f7fe fd2a 	bl	8012e80 <__locale_ctype_ptr>
 801442c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014430:	4458      	add	r0, fp
 8014432:	7843      	ldrb	r3, [r0, #1]
 8014434:	f013 0308 	ands.w	r3, r3, #8
 8014438:	d01c      	beq.n	8014474 <__ssvfiscanf_r+0x84>
 801443a:	6863      	ldr	r3, [r4, #4]
 801443c:	2b00      	cmp	r3, #0
 801443e:	dd12      	ble.n	8014466 <__ssvfiscanf_r+0x76>
 8014440:	f7fe fd1e 	bl	8012e80 <__locale_ctype_ptr>
 8014444:	6823      	ldr	r3, [r4, #0]
 8014446:	781a      	ldrb	r2, [r3, #0]
 8014448:	4410      	add	r0, r2
 801444a:	7842      	ldrb	r2, [r0, #1]
 801444c:	0712      	lsls	r2, r2, #28
 801444e:	d401      	bmi.n	8014454 <__ssvfiscanf_r+0x64>
 8014450:	46aa      	mov	sl, r5
 8014452:	e7e3      	b.n	801441c <__ssvfiscanf_r+0x2c>
 8014454:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014456:	3201      	adds	r2, #1
 8014458:	9245      	str	r2, [sp, #276]	; 0x114
 801445a:	6862      	ldr	r2, [r4, #4]
 801445c:	3301      	adds	r3, #1
 801445e:	3a01      	subs	r2, #1
 8014460:	6062      	str	r2, [r4, #4]
 8014462:	6023      	str	r3, [r4, #0]
 8014464:	e7e9      	b.n	801443a <__ssvfiscanf_r+0x4a>
 8014466:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014468:	4621      	mov	r1, r4
 801446a:	4630      	mov	r0, r6
 801446c:	4798      	blx	r3
 801446e:	2800      	cmp	r0, #0
 8014470:	d0e6      	beq.n	8014440 <__ssvfiscanf_r+0x50>
 8014472:	e7ed      	b.n	8014450 <__ssvfiscanf_r+0x60>
 8014474:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8014478:	f040 8082 	bne.w	8014580 <__ssvfiscanf_r+0x190>
 801447c:	9343      	str	r3, [sp, #268]	; 0x10c
 801447e:	9341      	str	r3, [sp, #260]	; 0x104
 8014480:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014484:	2b2a      	cmp	r3, #42	; 0x2a
 8014486:	d103      	bne.n	8014490 <__ssvfiscanf_r+0xa0>
 8014488:	2310      	movs	r3, #16
 801448a:	9341      	str	r3, [sp, #260]	; 0x104
 801448c:	f10a 0502 	add.w	r5, sl, #2
 8014490:	46aa      	mov	sl, r5
 8014492:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014496:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801449a:	2a09      	cmp	r2, #9
 801449c:	d922      	bls.n	80144e4 <__ssvfiscanf_r+0xf4>
 801449e:	2203      	movs	r2, #3
 80144a0:	4879      	ldr	r0, [pc, #484]	; (8014688 <__ssvfiscanf_r+0x298>)
 80144a2:	f7eb fee5 	bl	8000270 <memchr>
 80144a6:	b138      	cbz	r0, 80144b8 <__ssvfiscanf_r+0xc8>
 80144a8:	eba0 0309 	sub.w	r3, r0, r9
 80144ac:	2001      	movs	r0, #1
 80144ae:	4098      	lsls	r0, r3
 80144b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80144b2:	4318      	orrs	r0, r3
 80144b4:	9041      	str	r0, [sp, #260]	; 0x104
 80144b6:	46aa      	mov	sl, r5
 80144b8:	f89a 3000 	ldrb.w	r3, [sl]
 80144bc:	2b67      	cmp	r3, #103	; 0x67
 80144be:	f10a 0501 	add.w	r5, sl, #1
 80144c2:	d82b      	bhi.n	801451c <__ssvfiscanf_r+0x12c>
 80144c4:	2b65      	cmp	r3, #101	; 0x65
 80144c6:	f080 809f 	bcs.w	8014608 <__ssvfiscanf_r+0x218>
 80144ca:	2b47      	cmp	r3, #71	; 0x47
 80144cc:	d810      	bhi.n	80144f0 <__ssvfiscanf_r+0x100>
 80144ce:	2b45      	cmp	r3, #69	; 0x45
 80144d0:	f080 809a 	bcs.w	8014608 <__ssvfiscanf_r+0x218>
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d06c      	beq.n	80145b2 <__ssvfiscanf_r+0x1c2>
 80144d8:	2b25      	cmp	r3, #37	; 0x25
 80144da:	d051      	beq.n	8014580 <__ssvfiscanf_r+0x190>
 80144dc:	2303      	movs	r3, #3
 80144de:	9347      	str	r3, [sp, #284]	; 0x11c
 80144e0:	9742      	str	r7, [sp, #264]	; 0x108
 80144e2:	e027      	b.n	8014534 <__ssvfiscanf_r+0x144>
 80144e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80144e6:	fb07 1303 	mla	r3, r7, r3, r1
 80144ea:	3b30      	subs	r3, #48	; 0x30
 80144ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80144ee:	e7cf      	b.n	8014490 <__ssvfiscanf_r+0xa0>
 80144f0:	2b5b      	cmp	r3, #91	; 0x5b
 80144f2:	d06a      	beq.n	80145ca <__ssvfiscanf_r+0x1da>
 80144f4:	d80c      	bhi.n	8014510 <__ssvfiscanf_r+0x120>
 80144f6:	2b58      	cmp	r3, #88	; 0x58
 80144f8:	d1f0      	bne.n	80144dc <__ssvfiscanf_r+0xec>
 80144fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80144fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014500:	9241      	str	r2, [sp, #260]	; 0x104
 8014502:	2210      	movs	r2, #16
 8014504:	9242      	str	r2, [sp, #264]	; 0x108
 8014506:	2b6e      	cmp	r3, #110	; 0x6e
 8014508:	bf8c      	ite	hi
 801450a:	2304      	movhi	r3, #4
 801450c:	2303      	movls	r3, #3
 801450e:	e010      	b.n	8014532 <__ssvfiscanf_r+0x142>
 8014510:	2b63      	cmp	r3, #99	; 0x63
 8014512:	d065      	beq.n	80145e0 <__ssvfiscanf_r+0x1f0>
 8014514:	2b64      	cmp	r3, #100	; 0x64
 8014516:	d1e1      	bne.n	80144dc <__ssvfiscanf_r+0xec>
 8014518:	9742      	str	r7, [sp, #264]	; 0x108
 801451a:	e7f4      	b.n	8014506 <__ssvfiscanf_r+0x116>
 801451c:	2b70      	cmp	r3, #112	; 0x70
 801451e:	d04b      	beq.n	80145b8 <__ssvfiscanf_r+0x1c8>
 8014520:	d826      	bhi.n	8014570 <__ssvfiscanf_r+0x180>
 8014522:	2b6e      	cmp	r3, #110	; 0x6e
 8014524:	d062      	beq.n	80145ec <__ssvfiscanf_r+0x1fc>
 8014526:	d84c      	bhi.n	80145c2 <__ssvfiscanf_r+0x1d2>
 8014528:	2b69      	cmp	r3, #105	; 0x69
 801452a:	d1d7      	bne.n	80144dc <__ssvfiscanf_r+0xec>
 801452c:	2300      	movs	r3, #0
 801452e:	9342      	str	r3, [sp, #264]	; 0x108
 8014530:	2303      	movs	r3, #3
 8014532:	9347      	str	r3, [sp, #284]	; 0x11c
 8014534:	6863      	ldr	r3, [r4, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	dd68      	ble.n	801460c <__ssvfiscanf_r+0x21c>
 801453a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801453c:	0659      	lsls	r1, r3, #25
 801453e:	d407      	bmi.n	8014550 <__ssvfiscanf_r+0x160>
 8014540:	f7fe fc9e 	bl	8012e80 <__locale_ctype_ptr>
 8014544:	6823      	ldr	r3, [r4, #0]
 8014546:	781a      	ldrb	r2, [r3, #0]
 8014548:	4410      	add	r0, r2
 801454a:	7842      	ldrb	r2, [r0, #1]
 801454c:	0712      	lsls	r2, r2, #28
 801454e:	d464      	bmi.n	801461a <__ssvfiscanf_r+0x22a>
 8014550:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014552:	2b02      	cmp	r3, #2
 8014554:	dc73      	bgt.n	801463e <__ssvfiscanf_r+0x24e>
 8014556:	466b      	mov	r3, sp
 8014558:	4622      	mov	r2, r4
 801455a:	a941      	add	r1, sp, #260	; 0x104
 801455c:	4630      	mov	r0, r6
 801455e:	f000 f897 	bl	8014690 <_scanf_chars>
 8014562:	2801      	cmp	r0, #1
 8014564:	f000 8089 	beq.w	801467a <__ssvfiscanf_r+0x28a>
 8014568:	2802      	cmp	r0, #2
 801456a:	f47f af71 	bne.w	8014450 <__ssvfiscanf_r+0x60>
 801456e:	e01d      	b.n	80145ac <__ssvfiscanf_r+0x1bc>
 8014570:	2b75      	cmp	r3, #117	; 0x75
 8014572:	d0d1      	beq.n	8014518 <__ssvfiscanf_r+0x128>
 8014574:	2b78      	cmp	r3, #120	; 0x78
 8014576:	d0c0      	beq.n	80144fa <__ssvfiscanf_r+0x10a>
 8014578:	2b73      	cmp	r3, #115	; 0x73
 801457a:	d1af      	bne.n	80144dc <__ssvfiscanf_r+0xec>
 801457c:	2302      	movs	r3, #2
 801457e:	e7d8      	b.n	8014532 <__ssvfiscanf_r+0x142>
 8014580:	6863      	ldr	r3, [r4, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	dd0c      	ble.n	80145a0 <__ssvfiscanf_r+0x1b0>
 8014586:	6823      	ldr	r3, [r4, #0]
 8014588:	781a      	ldrb	r2, [r3, #0]
 801458a:	455a      	cmp	r2, fp
 801458c:	d175      	bne.n	801467a <__ssvfiscanf_r+0x28a>
 801458e:	3301      	adds	r3, #1
 8014590:	6862      	ldr	r2, [r4, #4]
 8014592:	6023      	str	r3, [r4, #0]
 8014594:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014596:	3a01      	subs	r2, #1
 8014598:	3301      	adds	r3, #1
 801459a:	6062      	str	r2, [r4, #4]
 801459c:	9345      	str	r3, [sp, #276]	; 0x114
 801459e:	e757      	b.n	8014450 <__ssvfiscanf_r+0x60>
 80145a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80145a2:	4621      	mov	r1, r4
 80145a4:	4630      	mov	r0, r6
 80145a6:	4798      	blx	r3
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d0ec      	beq.n	8014586 <__ssvfiscanf_r+0x196>
 80145ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d159      	bne.n	8014666 <__ssvfiscanf_r+0x276>
 80145b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145b6:	e05c      	b.n	8014672 <__ssvfiscanf_r+0x282>
 80145b8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80145ba:	f042 0220 	orr.w	r2, r2, #32
 80145be:	9241      	str	r2, [sp, #260]	; 0x104
 80145c0:	e79b      	b.n	80144fa <__ssvfiscanf_r+0x10a>
 80145c2:	2308      	movs	r3, #8
 80145c4:	9342      	str	r3, [sp, #264]	; 0x108
 80145c6:	2304      	movs	r3, #4
 80145c8:	e7b3      	b.n	8014532 <__ssvfiscanf_r+0x142>
 80145ca:	4629      	mov	r1, r5
 80145cc:	4640      	mov	r0, r8
 80145ce:	f000 f9c9 	bl	8014964 <__sccl>
 80145d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80145d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145d8:	9341      	str	r3, [sp, #260]	; 0x104
 80145da:	4605      	mov	r5, r0
 80145dc:	2301      	movs	r3, #1
 80145de:	e7a8      	b.n	8014532 <__ssvfiscanf_r+0x142>
 80145e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80145e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145e6:	9341      	str	r3, [sp, #260]	; 0x104
 80145e8:	2300      	movs	r3, #0
 80145ea:	e7a2      	b.n	8014532 <__ssvfiscanf_r+0x142>
 80145ec:	9841      	ldr	r0, [sp, #260]	; 0x104
 80145ee:	06c3      	lsls	r3, r0, #27
 80145f0:	f53f af2e 	bmi.w	8014450 <__ssvfiscanf_r+0x60>
 80145f4:	9b00      	ldr	r3, [sp, #0]
 80145f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80145f8:	1d19      	adds	r1, r3, #4
 80145fa:	9100      	str	r1, [sp, #0]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	07c0      	lsls	r0, r0, #31
 8014600:	bf4c      	ite	mi
 8014602:	801a      	strhmi	r2, [r3, #0]
 8014604:	601a      	strpl	r2, [r3, #0]
 8014606:	e723      	b.n	8014450 <__ssvfiscanf_r+0x60>
 8014608:	2305      	movs	r3, #5
 801460a:	e792      	b.n	8014532 <__ssvfiscanf_r+0x142>
 801460c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801460e:	4621      	mov	r1, r4
 8014610:	4630      	mov	r0, r6
 8014612:	4798      	blx	r3
 8014614:	2800      	cmp	r0, #0
 8014616:	d090      	beq.n	801453a <__ssvfiscanf_r+0x14a>
 8014618:	e7c8      	b.n	80145ac <__ssvfiscanf_r+0x1bc>
 801461a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801461c:	3201      	adds	r2, #1
 801461e:	9245      	str	r2, [sp, #276]	; 0x114
 8014620:	6862      	ldr	r2, [r4, #4]
 8014622:	3a01      	subs	r2, #1
 8014624:	2a00      	cmp	r2, #0
 8014626:	6062      	str	r2, [r4, #4]
 8014628:	dd02      	ble.n	8014630 <__ssvfiscanf_r+0x240>
 801462a:	3301      	adds	r3, #1
 801462c:	6023      	str	r3, [r4, #0]
 801462e:	e787      	b.n	8014540 <__ssvfiscanf_r+0x150>
 8014630:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014632:	4621      	mov	r1, r4
 8014634:	4630      	mov	r0, r6
 8014636:	4798      	blx	r3
 8014638:	2800      	cmp	r0, #0
 801463a:	d081      	beq.n	8014540 <__ssvfiscanf_r+0x150>
 801463c:	e7b6      	b.n	80145ac <__ssvfiscanf_r+0x1bc>
 801463e:	2b04      	cmp	r3, #4
 8014640:	dc06      	bgt.n	8014650 <__ssvfiscanf_r+0x260>
 8014642:	466b      	mov	r3, sp
 8014644:	4622      	mov	r2, r4
 8014646:	a941      	add	r1, sp, #260	; 0x104
 8014648:	4630      	mov	r0, r6
 801464a:	f000 f885 	bl	8014758 <_scanf_i>
 801464e:	e788      	b.n	8014562 <__ssvfiscanf_r+0x172>
 8014650:	4b0e      	ldr	r3, [pc, #56]	; (801468c <__ssvfiscanf_r+0x29c>)
 8014652:	2b00      	cmp	r3, #0
 8014654:	f43f aefc 	beq.w	8014450 <__ssvfiscanf_r+0x60>
 8014658:	466b      	mov	r3, sp
 801465a:	4622      	mov	r2, r4
 801465c:	a941      	add	r1, sp, #260	; 0x104
 801465e:	4630      	mov	r0, r6
 8014660:	f3af 8000 	nop.w
 8014664:	e77d      	b.n	8014562 <__ssvfiscanf_r+0x172>
 8014666:	89a3      	ldrh	r3, [r4, #12]
 8014668:	f013 0f40 	tst.w	r3, #64	; 0x40
 801466c:	bf18      	it	ne
 801466e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8014672:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801467a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801467c:	e7f9      	b.n	8014672 <__ssvfiscanf_r+0x282>
 801467e:	bf00      	nop
 8014680:	0801433d 	.word	0x0801433d
 8014684:	080143b7 	.word	0x080143b7
 8014688:	08017664 	.word	0x08017664
 801468c:	00000000 	.word	0x00000000

08014690 <_scanf_chars>:
 8014690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014694:	4615      	mov	r5, r2
 8014696:	688a      	ldr	r2, [r1, #8]
 8014698:	4680      	mov	r8, r0
 801469a:	460c      	mov	r4, r1
 801469c:	b932      	cbnz	r2, 80146ac <_scanf_chars+0x1c>
 801469e:	698a      	ldr	r2, [r1, #24]
 80146a0:	2a00      	cmp	r2, #0
 80146a2:	bf14      	ite	ne
 80146a4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80146a8:	2201      	moveq	r2, #1
 80146aa:	608a      	str	r2, [r1, #8]
 80146ac:	6822      	ldr	r2, [r4, #0]
 80146ae:	06d1      	lsls	r1, r2, #27
 80146b0:	bf5f      	itttt	pl
 80146b2:	681a      	ldrpl	r2, [r3, #0]
 80146b4:	1d11      	addpl	r1, r2, #4
 80146b6:	6019      	strpl	r1, [r3, #0]
 80146b8:	6817      	ldrpl	r7, [r2, #0]
 80146ba:	2600      	movs	r6, #0
 80146bc:	69a3      	ldr	r3, [r4, #24]
 80146be:	b1db      	cbz	r3, 80146f8 <_scanf_chars+0x68>
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d107      	bne.n	80146d4 <_scanf_chars+0x44>
 80146c4:	682b      	ldr	r3, [r5, #0]
 80146c6:	6962      	ldr	r2, [r4, #20]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	5cd3      	ldrb	r3, [r2, r3]
 80146cc:	b9a3      	cbnz	r3, 80146f8 <_scanf_chars+0x68>
 80146ce:	2e00      	cmp	r6, #0
 80146d0:	d132      	bne.n	8014738 <_scanf_chars+0xa8>
 80146d2:	e006      	b.n	80146e2 <_scanf_chars+0x52>
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d007      	beq.n	80146e8 <_scanf_chars+0x58>
 80146d8:	2e00      	cmp	r6, #0
 80146da:	d12d      	bne.n	8014738 <_scanf_chars+0xa8>
 80146dc:	69a3      	ldr	r3, [r4, #24]
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d12a      	bne.n	8014738 <_scanf_chars+0xa8>
 80146e2:	2001      	movs	r0, #1
 80146e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e8:	f7fe fbca 	bl	8012e80 <__locale_ctype_ptr>
 80146ec:	682b      	ldr	r3, [r5, #0]
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	4418      	add	r0, r3
 80146f2:	7843      	ldrb	r3, [r0, #1]
 80146f4:	071b      	lsls	r3, r3, #28
 80146f6:	d4ef      	bmi.n	80146d8 <_scanf_chars+0x48>
 80146f8:	6823      	ldr	r3, [r4, #0]
 80146fa:	06da      	lsls	r2, r3, #27
 80146fc:	bf5e      	ittt	pl
 80146fe:	682b      	ldrpl	r3, [r5, #0]
 8014700:	781b      	ldrbpl	r3, [r3, #0]
 8014702:	703b      	strbpl	r3, [r7, #0]
 8014704:	682a      	ldr	r2, [r5, #0]
 8014706:	686b      	ldr	r3, [r5, #4]
 8014708:	f102 0201 	add.w	r2, r2, #1
 801470c:	602a      	str	r2, [r5, #0]
 801470e:	68a2      	ldr	r2, [r4, #8]
 8014710:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014714:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014718:	606b      	str	r3, [r5, #4]
 801471a:	f106 0601 	add.w	r6, r6, #1
 801471e:	bf58      	it	pl
 8014720:	3701      	addpl	r7, #1
 8014722:	60a2      	str	r2, [r4, #8]
 8014724:	b142      	cbz	r2, 8014738 <_scanf_chars+0xa8>
 8014726:	2b00      	cmp	r3, #0
 8014728:	dcc8      	bgt.n	80146bc <_scanf_chars+0x2c>
 801472a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801472e:	4629      	mov	r1, r5
 8014730:	4640      	mov	r0, r8
 8014732:	4798      	blx	r3
 8014734:	2800      	cmp	r0, #0
 8014736:	d0c1      	beq.n	80146bc <_scanf_chars+0x2c>
 8014738:	6823      	ldr	r3, [r4, #0]
 801473a:	f013 0310 	ands.w	r3, r3, #16
 801473e:	d105      	bne.n	801474c <_scanf_chars+0xbc>
 8014740:	68e2      	ldr	r2, [r4, #12]
 8014742:	3201      	adds	r2, #1
 8014744:	60e2      	str	r2, [r4, #12]
 8014746:	69a2      	ldr	r2, [r4, #24]
 8014748:	b102      	cbz	r2, 801474c <_scanf_chars+0xbc>
 801474a:	703b      	strb	r3, [r7, #0]
 801474c:	6923      	ldr	r3, [r4, #16]
 801474e:	441e      	add	r6, r3
 8014750:	6126      	str	r6, [r4, #16]
 8014752:	2000      	movs	r0, #0
 8014754:	e7c6      	b.n	80146e4 <_scanf_chars+0x54>
	...

08014758 <_scanf_i>:
 8014758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801475c:	469a      	mov	sl, r3
 801475e:	4b74      	ldr	r3, [pc, #464]	; (8014930 <_scanf_i+0x1d8>)
 8014760:	460c      	mov	r4, r1
 8014762:	4683      	mov	fp, r0
 8014764:	4616      	mov	r6, r2
 8014766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801476a:	b087      	sub	sp, #28
 801476c:	ab03      	add	r3, sp, #12
 801476e:	68a7      	ldr	r7, [r4, #8]
 8014770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014774:	4b6f      	ldr	r3, [pc, #444]	; (8014934 <_scanf_i+0x1dc>)
 8014776:	69a1      	ldr	r1, [r4, #24]
 8014778:	4a6f      	ldr	r2, [pc, #444]	; (8014938 <_scanf_i+0x1e0>)
 801477a:	2903      	cmp	r1, #3
 801477c:	bf08      	it	eq
 801477e:	461a      	moveq	r2, r3
 8014780:	1e7b      	subs	r3, r7, #1
 8014782:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8014786:	bf84      	itt	hi
 8014788:	f240 135d 	movwhi	r3, #349	; 0x15d
 801478c:	60a3      	strhi	r3, [r4, #8]
 801478e:	6823      	ldr	r3, [r4, #0]
 8014790:	9200      	str	r2, [sp, #0]
 8014792:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014796:	bf88      	it	hi
 8014798:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801479c:	f104 091c 	add.w	r9, r4, #28
 80147a0:	6023      	str	r3, [r4, #0]
 80147a2:	bf8c      	ite	hi
 80147a4:	197f      	addhi	r7, r7, r5
 80147a6:	2700      	movls	r7, #0
 80147a8:	464b      	mov	r3, r9
 80147aa:	f04f 0800 	mov.w	r8, #0
 80147ae:	9301      	str	r3, [sp, #4]
 80147b0:	6831      	ldr	r1, [r6, #0]
 80147b2:	ab03      	add	r3, sp, #12
 80147b4:	2202      	movs	r2, #2
 80147b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80147ba:	7809      	ldrb	r1, [r1, #0]
 80147bc:	f7eb fd58 	bl	8000270 <memchr>
 80147c0:	9b01      	ldr	r3, [sp, #4]
 80147c2:	b330      	cbz	r0, 8014812 <_scanf_i+0xba>
 80147c4:	f1b8 0f01 	cmp.w	r8, #1
 80147c8:	d15a      	bne.n	8014880 <_scanf_i+0x128>
 80147ca:	6862      	ldr	r2, [r4, #4]
 80147cc:	b92a      	cbnz	r2, 80147da <_scanf_i+0x82>
 80147ce:	6822      	ldr	r2, [r4, #0]
 80147d0:	2108      	movs	r1, #8
 80147d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80147d6:	6061      	str	r1, [r4, #4]
 80147d8:	6022      	str	r2, [r4, #0]
 80147da:	6822      	ldr	r2, [r4, #0]
 80147dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80147e0:	6022      	str	r2, [r4, #0]
 80147e2:	68a2      	ldr	r2, [r4, #8]
 80147e4:	1e51      	subs	r1, r2, #1
 80147e6:	60a1      	str	r1, [r4, #8]
 80147e8:	b19a      	cbz	r2, 8014812 <_scanf_i+0xba>
 80147ea:	6832      	ldr	r2, [r6, #0]
 80147ec:	1c51      	adds	r1, r2, #1
 80147ee:	6031      	str	r1, [r6, #0]
 80147f0:	7812      	ldrb	r2, [r2, #0]
 80147f2:	701a      	strb	r2, [r3, #0]
 80147f4:	1c5d      	adds	r5, r3, #1
 80147f6:	6873      	ldr	r3, [r6, #4]
 80147f8:	3b01      	subs	r3, #1
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	6073      	str	r3, [r6, #4]
 80147fe:	dc07      	bgt.n	8014810 <_scanf_i+0xb8>
 8014800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014804:	4631      	mov	r1, r6
 8014806:	4658      	mov	r0, fp
 8014808:	4798      	blx	r3
 801480a:	2800      	cmp	r0, #0
 801480c:	f040 8086 	bne.w	801491c <_scanf_i+0x1c4>
 8014810:	462b      	mov	r3, r5
 8014812:	f108 0801 	add.w	r8, r8, #1
 8014816:	f1b8 0f03 	cmp.w	r8, #3
 801481a:	d1c8      	bne.n	80147ae <_scanf_i+0x56>
 801481c:	6862      	ldr	r2, [r4, #4]
 801481e:	b90a      	cbnz	r2, 8014824 <_scanf_i+0xcc>
 8014820:	220a      	movs	r2, #10
 8014822:	6062      	str	r2, [r4, #4]
 8014824:	6862      	ldr	r2, [r4, #4]
 8014826:	4945      	ldr	r1, [pc, #276]	; (801493c <_scanf_i+0x1e4>)
 8014828:	6960      	ldr	r0, [r4, #20]
 801482a:	9301      	str	r3, [sp, #4]
 801482c:	1a89      	subs	r1, r1, r2
 801482e:	f000 f899 	bl	8014964 <__sccl>
 8014832:	9b01      	ldr	r3, [sp, #4]
 8014834:	f04f 0800 	mov.w	r8, #0
 8014838:	461d      	mov	r5, r3
 801483a:	68a3      	ldr	r3, [r4, #8]
 801483c:	6822      	ldr	r2, [r4, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d03a      	beq.n	80148b8 <_scanf_i+0x160>
 8014842:	6831      	ldr	r1, [r6, #0]
 8014844:	6960      	ldr	r0, [r4, #20]
 8014846:	f891 c000 	ldrb.w	ip, [r1]
 801484a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801484e:	2800      	cmp	r0, #0
 8014850:	d032      	beq.n	80148b8 <_scanf_i+0x160>
 8014852:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014856:	d121      	bne.n	801489c <_scanf_i+0x144>
 8014858:	0510      	lsls	r0, r2, #20
 801485a:	d51f      	bpl.n	801489c <_scanf_i+0x144>
 801485c:	f108 0801 	add.w	r8, r8, #1
 8014860:	b117      	cbz	r7, 8014868 <_scanf_i+0x110>
 8014862:	3301      	adds	r3, #1
 8014864:	3f01      	subs	r7, #1
 8014866:	60a3      	str	r3, [r4, #8]
 8014868:	6873      	ldr	r3, [r6, #4]
 801486a:	3b01      	subs	r3, #1
 801486c:	2b00      	cmp	r3, #0
 801486e:	6073      	str	r3, [r6, #4]
 8014870:	dd1b      	ble.n	80148aa <_scanf_i+0x152>
 8014872:	6833      	ldr	r3, [r6, #0]
 8014874:	3301      	adds	r3, #1
 8014876:	6033      	str	r3, [r6, #0]
 8014878:	68a3      	ldr	r3, [r4, #8]
 801487a:	3b01      	subs	r3, #1
 801487c:	60a3      	str	r3, [r4, #8]
 801487e:	e7dc      	b.n	801483a <_scanf_i+0xe2>
 8014880:	f1b8 0f02 	cmp.w	r8, #2
 8014884:	d1ad      	bne.n	80147e2 <_scanf_i+0x8a>
 8014886:	6822      	ldr	r2, [r4, #0]
 8014888:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801488c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014890:	d1bf      	bne.n	8014812 <_scanf_i+0xba>
 8014892:	2110      	movs	r1, #16
 8014894:	6061      	str	r1, [r4, #4]
 8014896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801489a:	e7a1      	b.n	80147e0 <_scanf_i+0x88>
 801489c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80148a0:	6022      	str	r2, [r4, #0]
 80148a2:	780b      	ldrb	r3, [r1, #0]
 80148a4:	702b      	strb	r3, [r5, #0]
 80148a6:	3501      	adds	r5, #1
 80148a8:	e7de      	b.n	8014868 <_scanf_i+0x110>
 80148aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80148ae:	4631      	mov	r1, r6
 80148b0:	4658      	mov	r0, fp
 80148b2:	4798      	blx	r3
 80148b4:	2800      	cmp	r0, #0
 80148b6:	d0df      	beq.n	8014878 <_scanf_i+0x120>
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	05d9      	lsls	r1, r3, #23
 80148bc:	d50c      	bpl.n	80148d8 <_scanf_i+0x180>
 80148be:	454d      	cmp	r5, r9
 80148c0:	d908      	bls.n	80148d4 <_scanf_i+0x17c>
 80148c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80148c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148ca:	4632      	mov	r2, r6
 80148cc:	4658      	mov	r0, fp
 80148ce:	4798      	blx	r3
 80148d0:	1e6f      	subs	r7, r5, #1
 80148d2:	463d      	mov	r5, r7
 80148d4:	454d      	cmp	r5, r9
 80148d6:	d029      	beq.n	801492c <_scanf_i+0x1d4>
 80148d8:	6822      	ldr	r2, [r4, #0]
 80148da:	f012 0210 	ands.w	r2, r2, #16
 80148de:	d113      	bne.n	8014908 <_scanf_i+0x1b0>
 80148e0:	702a      	strb	r2, [r5, #0]
 80148e2:	6863      	ldr	r3, [r4, #4]
 80148e4:	9e00      	ldr	r6, [sp, #0]
 80148e6:	4649      	mov	r1, r9
 80148e8:	4658      	mov	r0, fp
 80148ea:	47b0      	blx	r6
 80148ec:	f8da 3000 	ldr.w	r3, [sl]
 80148f0:	6821      	ldr	r1, [r4, #0]
 80148f2:	1d1a      	adds	r2, r3, #4
 80148f4:	f8ca 2000 	str.w	r2, [sl]
 80148f8:	f011 0f20 	tst.w	r1, #32
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	d010      	beq.n	8014922 <_scanf_i+0x1ca>
 8014900:	6018      	str	r0, [r3, #0]
 8014902:	68e3      	ldr	r3, [r4, #12]
 8014904:	3301      	adds	r3, #1
 8014906:	60e3      	str	r3, [r4, #12]
 8014908:	eba5 0509 	sub.w	r5, r5, r9
 801490c:	44a8      	add	r8, r5
 801490e:	6925      	ldr	r5, [r4, #16]
 8014910:	4445      	add	r5, r8
 8014912:	6125      	str	r5, [r4, #16]
 8014914:	2000      	movs	r0, #0
 8014916:	b007      	add	sp, #28
 8014918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801491c:	f04f 0800 	mov.w	r8, #0
 8014920:	e7ca      	b.n	80148b8 <_scanf_i+0x160>
 8014922:	07ca      	lsls	r2, r1, #31
 8014924:	bf4c      	ite	mi
 8014926:	8018      	strhmi	r0, [r3, #0]
 8014928:	6018      	strpl	r0, [r3, #0]
 801492a:	e7ea      	b.n	8014902 <_scanf_i+0x1aa>
 801492c:	2001      	movs	r0, #1
 801492e:	e7f2      	b.n	8014916 <_scanf_i+0x1be>
 8014930:	0801712c 	.word	0x0801712c
 8014934:	080138f5 	.word	0x080138f5
 8014938:	08013a39 	.word	0x08013a39
 801493c:	08017804 	.word	0x08017804

08014940 <_read_r>:
 8014940:	b538      	push	{r3, r4, r5, lr}
 8014942:	4c07      	ldr	r4, [pc, #28]	; (8014960 <_read_r+0x20>)
 8014944:	4605      	mov	r5, r0
 8014946:	4608      	mov	r0, r1
 8014948:	4611      	mov	r1, r2
 801494a:	2200      	movs	r2, #0
 801494c:	6022      	str	r2, [r4, #0]
 801494e:	461a      	mov	r2, r3
 8014950:	f7ed fd12 	bl	8002378 <_read>
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	d102      	bne.n	801495e <_read_r+0x1e>
 8014958:	6823      	ldr	r3, [r4, #0]
 801495a:	b103      	cbz	r3, 801495e <_read_r+0x1e>
 801495c:	602b      	str	r3, [r5, #0]
 801495e:	bd38      	pop	{r3, r4, r5, pc}
 8014960:	200076c8 	.word	0x200076c8

08014964 <__sccl>:
 8014964:	b570      	push	{r4, r5, r6, lr}
 8014966:	780b      	ldrb	r3, [r1, #0]
 8014968:	2b5e      	cmp	r3, #94	; 0x5e
 801496a:	bf13      	iteet	ne
 801496c:	1c4a      	addne	r2, r1, #1
 801496e:	1c8a      	addeq	r2, r1, #2
 8014970:	784b      	ldrbeq	r3, [r1, #1]
 8014972:	2100      	movne	r1, #0
 8014974:	bf08      	it	eq
 8014976:	2101      	moveq	r1, #1
 8014978:	1e44      	subs	r4, r0, #1
 801497a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801497e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8014982:	42ac      	cmp	r4, r5
 8014984:	d1fb      	bne.n	801497e <__sccl+0x1a>
 8014986:	b913      	cbnz	r3, 801498e <__sccl+0x2a>
 8014988:	3a01      	subs	r2, #1
 801498a:	4610      	mov	r0, r2
 801498c:	bd70      	pop	{r4, r5, r6, pc}
 801498e:	f081 0401 	eor.w	r4, r1, #1
 8014992:	54c4      	strb	r4, [r0, r3]
 8014994:	1c51      	adds	r1, r2, #1
 8014996:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801499a:	2d2d      	cmp	r5, #45	; 0x2d
 801499c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80149a0:	460a      	mov	r2, r1
 80149a2:	d006      	beq.n	80149b2 <__sccl+0x4e>
 80149a4:	2d5d      	cmp	r5, #93	; 0x5d
 80149a6:	d0f0      	beq.n	801498a <__sccl+0x26>
 80149a8:	b90d      	cbnz	r5, 80149ae <__sccl+0x4a>
 80149aa:	4632      	mov	r2, r6
 80149ac:	e7ed      	b.n	801498a <__sccl+0x26>
 80149ae:	462b      	mov	r3, r5
 80149b0:	e7ef      	b.n	8014992 <__sccl+0x2e>
 80149b2:	780e      	ldrb	r6, [r1, #0]
 80149b4:	2e5d      	cmp	r6, #93	; 0x5d
 80149b6:	d0fa      	beq.n	80149ae <__sccl+0x4a>
 80149b8:	42b3      	cmp	r3, r6
 80149ba:	dcf8      	bgt.n	80149ae <__sccl+0x4a>
 80149bc:	3301      	adds	r3, #1
 80149be:	429e      	cmp	r6, r3
 80149c0:	54c4      	strb	r4, [r0, r3]
 80149c2:	dcfb      	bgt.n	80149bc <__sccl+0x58>
 80149c4:	3102      	adds	r1, #2
 80149c6:	e7e6      	b.n	8014996 <__sccl+0x32>

080149c8 <__submore>:
 80149c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149cc:	460c      	mov	r4, r1
 80149ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80149d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149d4:	4299      	cmp	r1, r3
 80149d6:	d11d      	bne.n	8014a14 <__submore+0x4c>
 80149d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80149dc:	f7fe fb02 	bl	8012fe4 <_malloc_r>
 80149e0:	b918      	cbnz	r0, 80149ea <__submore+0x22>
 80149e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80149f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80149f4:	6360      	str	r0, [r4, #52]	; 0x34
 80149f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80149fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80149fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014a02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014a06:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014a0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014a0e:	6020      	str	r0, [r4, #0]
 8014a10:	2000      	movs	r0, #0
 8014a12:	e7e8      	b.n	80149e6 <__submore+0x1e>
 8014a14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014a16:	0077      	lsls	r7, r6, #1
 8014a18:	463a      	mov	r2, r7
 8014a1a:	f7ff fb17 	bl	801404c <_realloc_r>
 8014a1e:	4605      	mov	r5, r0
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d0de      	beq.n	80149e2 <__submore+0x1a>
 8014a24:	eb00 0806 	add.w	r8, r0, r6
 8014a28:	4601      	mov	r1, r0
 8014a2a:	4632      	mov	r2, r6
 8014a2c:	4640      	mov	r0, r8
 8014a2e:	f7fe fa5e 	bl	8012eee <memcpy>
 8014a32:	f8c4 8000 	str.w	r8, [r4]
 8014a36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014a3a:	e7e9      	b.n	8014a10 <__submore+0x48>

08014a3c <_fstat_r>:
 8014a3c:	b538      	push	{r3, r4, r5, lr}
 8014a3e:	4c07      	ldr	r4, [pc, #28]	; (8014a5c <_fstat_r+0x20>)
 8014a40:	2300      	movs	r3, #0
 8014a42:	4605      	mov	r5, r0
 8014a44:	4608      	mov	r0, r1
 8014a46:	4611      	mov	r1, r2
 8014a48:	6023      	str	r3, [r4, #0]
 8014a4a:	f7ed fcda 	bl	8002402 <_fstat>
 8014a4e:	1c43      	adds	r3, r0, #1
 8014a50:	d102      	bne.n	8014a58 <_fstat_r+0x1c>
 8014a52:	6823      	ldr	r3, [r4, #0]
 8014a54:	b103      	cbz	r3, 8014a58 <_fstat_r+0x1c>
 8014a56:	602b      	str	r3, [r5, #0]
 8014a58:	bd38      	pop	{r3, r4, r5, pc}
 8014a5a:	bf00      	nop
 8014a5c:	200076c8 	.word	0x200076c8

08014a60 <_isatty_r>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4c06      	ldr	r4, [pc, #24]	; (8014a7c <_isatty_r+0x1c>)
 8014a64:	2300      	movs	r3, #0
 8014a66:	4605      	mov	r5, r0
 8014a68:	4608      	mov	r0, r1
 8014a6a:	6023      	str	r3, [r4, #0]
 8014a6c:	f7ed fcd9 	bl	8002422 <_isatty>
 8014a70:	1c43      	adds	r3, r0, #1
 8014a72:	d102      	bne.n	8014a7a <_isatty_r+0x1a>
 8014a74:	6823      	ldr	r3, [r4, #0]
 8014a76:	b103      	cbz	r3, 8014a7a <_isatty_r+0x1a>
 8014a78:	602b      	str	r3, [r5, #0]
 8014a7a:	bd38      	pop	{r3, r4, r5, pc}
 8014a7c:	200076c8 	.word	0x200076c8

08014a80 <_malloc_usable_size_r>:
 8014a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a84:	1f18      	subs	r0, r3, #4
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	bfbc      	itt	lt
 8014a8a:	580b      	ldrlt	r3, [r1, r0]
 8014a8c:	18c0      	addlt	r0, r0, r3
 8014a8e:	4770      	bx	lr

08014a90 <_init>:
 8014a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a92:	bf00      	nop
 8014a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a96:	bc08      	pop	{r3}
 8014a98:	469e      	mov	lr, r3
 8014a9a:	4770      	bx	lr

08014a9c <_fini>:
 8014a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a9e:	bf00      	nop
 8014aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aa2:	bc08      	pop	{r3}
 8014aa4:	469e      	mov	lr, r3
 8014aa6:	4770      	bx	lr
