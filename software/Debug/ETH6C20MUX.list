
ETH6C20MUX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd9c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f98  0800df9c  0800df9c  0001df9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff34  0800ff34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff34  0800ff34  0001ff34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff3c  0800ff3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff3c  0800ff3c  0001ff3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff40  0800ff40  0001ff40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ff44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ac4  20000074  0800ffb8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006b38  0800ffb8  00026b38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c2c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000528c  00000000  00000000  00049cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  0004ef60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  00050120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031061  00000000  00000000  00051178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bbdb  00000000  00000000  000821d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbbba  00000000  00000000  0009ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019996e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  001999ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800df84 	.word	0x0800df84

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800df84 	.word	0x0800df84

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <echo_init>:
void echo_send(struct tcp_pcb *tpcb, struct echo_state *es);
void echo_close(struct tcp_pcb *tpcb, struct echo_state *es);

void
echo_init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  echo_pcb = tcp_new();
 80005e6:	f006 f873 	bl	80066d0 <tcp_new>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <echo_init+0x5c>)
 80005ee:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <echo_init+0x5c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01c      	beq.n	8000632 <echo_init+0x52>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 5025);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <echo_init+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f241 32a1 	movw	r2, #5025	; 0x13a1
 8000600:	490f      	ldr	r1, [pc, #60]	; (8000640 <echo_init+0x60>)
 8000602:	4618      	mov	r0, r3
 8000604:	f005 f8e8 	bl	80057d8 <tcp_bind>
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10e      	bne.n	8000632 <echo_init+0x52>
    {
      echo_pcb = tcp_listen(echo_pcb);
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <echo_init+0x5c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	21ff      	movs	r1, #255	; 0xff
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f97e 	bl	800591c <tcp_listen_with_backlog>
 8000620:	4602      	mov	r2, r0
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <echo_init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <echo_init+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4906      	ldr	r1, [pc, #24]	; (8000644 <echo_init+0x64>)
 800062c:	4618      	mov	r0, r3
 800062e:	f006 f8cd 	bl	80067cc <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000090 	.word	0x20000090
 8000640:	0800fe88 	.word	0x0800fe88
 8000644:	08000649 	.word	0x08000649

08000648 <echo_accept>:


err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	4613      	mov	r3, r2
 8000654:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000656:	2101      	movs	r1, #1
 8000658:	68b8      	ldr	r0, [r7, #8]
 800065a:	f005 feae 	bl	80063ba <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 800065e:	200c      	movs	r0, #12
 8000660:	f003 fbfe 	bl	8003e60 <mem_malloc>
 8000664:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01f      	beq.n	80006ac <echo_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	2200      	movs	r2, #0
 800067c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8000684:	6939      	ldr	r1, [r7, #16]
 8000686:	68b8      	ldr	r0, [r7, #8]
 8000688:	f006 f82a 	bl	80066e0 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <echo_accept+0x74>)
 800068e:	68b8      	ldr	r0, [r7, #8]
 8000690:	f006 f838 	bl	8006704 <tcp_recv>
    tcp_err(newpcb, echo_error);
 8000694:	490a      	ldr	r1, [pc, #40]	; (80006c0 <echo_accept+0x78>)
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f006 f876 	bl	8006788 <tcp_err>
    tcp_poll(newpcb, echo_poll, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	4909      	ldr	r1, [pc, #36]	; (80006c4 <echo_accept+0x7c>)
 80006a0:	68b8      	ldr	r0, [r7, #8]
 80006a2:	f006 f8ab 	bl	80067fc <tcp_poll>
    ret_err = ERR_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]
 80006aa:	e001      	b.n	80006b0 <echo_accept+0x68>
  }
  else
  {
    ret_err = ERR_MEM;
 80006ac:	23ff      	movs	r3, #255	; 0xff
 80006ae:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80006b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	080006c9 	.word	0x080006c9
 80006c0:	08000805 	.word	0x08000805
 80006c4:	08000829 	.word	0x08000829

080006c8 <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	70fb      	strb	r3, [r7, #3]
  struct echo_state *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d105      	bne.n	80006e8 <echo_recv+0x20>
 80006dc:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <echo_recv+0x12c>)
 80006de:	226a      	movs	r2, #106	; 0x6a
 80006e0:	4945      	ldr	r1, [pc, #276]	; (80007f8 <echo_recv+0x130>)
 80006e2:	4846      	ldr	r0, [pc, #280]	; (80007fc <echo_recv+0x134>)
 80006e4:	f00c fd6a 	bl	800d1bc <iprintf>
  es = (struct echo_state *)arg;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	61bb      	str	r3, [r7, #24]
  if (p == NULL)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d116      	bne.n	8000720 <echo_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2203      	movs	r2, #3
 80006f6:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <echo_recv+0x42>
    {
       /* we're done sending, close it */
       echo_close(tpcb, es);
 8000700:	69b9      	ldr	r1, [r7, #24]
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f000 f93b 	bl	800097e <echo_close>
 8000708:	e007      	b.n	800071a <echo_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      tcp_sent(tpcb, echo_sent);
 800070a:	493d      	ldr	r1, [pc, #244]	; (8000800 <echo_recv+0x138>)
 800070c:	68b8      	ldr	r0, [r7, #8]
 800070e:	f006 f81b 	bl	8006748 <tcp_sent>
      echo_send(tpcb, es);
 8000712:	69b9      	ldr	r1, [r7, #24]
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f000 f8df 	bl	80008d8 <echo_send>
    }
    ret_err = ERR_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	77fb      	strb	r3, [r7, #31]
 800071e:	e063      	b.n	80007e8 <echo_recv+0x120>
  }
  else if(err != ERR_OK)
 8000720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00b      	beq.n	8000740 <echo_recv+0x78>
  {
    /* cleanup, for unkown reason */
    if (p != NULL)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d005      	beq.n	800073a <echo_recv+0x72>
    {
      es->p = NULL;
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f004 fa6f 	bl	8004c18 <pbuf_free>
    }
    ret_err = err;
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	77fb      	strb	r3, [r7, #31]
 800073e:	e053      	b.n	80007e8 <echo_recv+0x120>
  }
  else if(es->state == ES_ACCEPTED)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d110      	bne.n	800076a <echo_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	609a      	str	r2, [r3, #8]
    /* install send completion notifier */
    tcp_sent(tpcb, echo_sent);
 8000754:	492a      	ldr	r1, [pc, #168]	; (8000800 <echo_recv+0x138>)
 8000756:	68b8      	ldr	r0, [r7, #8]
 8000758:	f005 fff6 	bl	8006748 <tcp_sent>
    echo_send(tpcb, es);
 800075c:	69b9      	ldr	r1, [r7, #24]
 800075e:	68b8      	ldr	r0, [r7, #8]
 8000760:	f000 f8ba 	bl	80008d8 <echo_send>
    ret_err = ERR_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	77fb      	strb	r3, [r7, #31]
 8000768:	e03e      	b.n	80007e8 <echo_recv+0x120>
  }
  else if (es->state == ES_RECEIVED)
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d119      	bne.n	80007a6 <echo_recv+0xde>
  {
    /* read some more data */
    if(es->p == NULL)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10b      	bne.n	8000792 <echo_recv+0xca>
    {
      es->p = p;
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	609a      	str	r2, [r3, #8]
      tcp_sent(tpcb, echo_sent);
 8000780:	491f      	ldr	r1, [pc, #124]	; (8000800 <echo_recv+0x138>)
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f005 ffe0 	bl	8006748 <tcp_sent>
      echo_send(tpcb, es);
 8000788:	69b9      	ldr	r1, [r7, #24]
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f000 f8a4 	bl	80008d8 <echo_send>
 8000790:	e006      	b.n	80007a0 <echo_recv+0xd8>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f004 fb60 	bl	8004e60 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	77fb      	strb	r3, [r7, #31]
 80007a4:	e020      	b.n	80007e8 <echo_recv+0x120>
  }
  else if(es->state == ES_CLOSING)
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d10e      	bne.n	80007cc <echo_recv+0x104>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	4619      	mov	r1, r3
 80007b4:	68b8      	ldr	r0, [r7, #8]
 80007b6:	f005 f9a9 	bl	8005b0c <tcp_recved>
    es->p = NULL;
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f004 fa29 	bl	8004c18 <pbuf_free>
    ret_err = ERR_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	77fb      	strb	r3, [r7, #31]
 80007ca:	e00d      	b.n	80007e8 <echo_recv+0x120>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	891b      	ldrh	r3, [r3, #8]
 80007d0:	4619      	mov	r1, r3
 80007d2:	68b8      	ldr	r0, [r7, #8]
 80007d4:	f005 f99a 	bl	8005b0c <tcp_recved>
    es->p = NULL;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f004 fa1a 	bl	8004c18 <pbuf_free>
    ret_err = ERR_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80007e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0800df9c 	.word	0x0800df9c
 80007f8:	0800dfb0 	.word	0x0800dfb0
 80007fc:	0800dfbc 	.word	0x0800dfbc
 8000800:	08000889 	.word	0x08000889

08000804 <echo_error>:

void
echo_error(void *arg, err_t err)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
  struct echo_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct echo_state *)arg;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <echo_error+0x1c>
  {
    mem_free(es);
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f003 f9e2 	bl	8003be4 <mem_free>
  }
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <echo_poll>:

err_t
echo_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct echo_state *es;

  es = (struct echo_state *)arg;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d017      	beq.n	800086c <echo_poll+0x44>
  {
    if (es->p != NULL)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d008      	beq.n	8000856 <echo_poll+0x2e>
    {
      /* there is a remaining pbuf (chain)  */
      tcp_sent(tpcb, echo_sent);
 8000844:	490f      	ldr	r1, [pc, #60]	; (8000884 <echo_poll+0x5c>)
 8000846:	6838      	ldr	r0, [r7, #0]
 8000848:	f005 ff7e 	bl	8006748 <tcp_sent>
      echo_send(tpcb, es);
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6838      	ldr	r0, [r7, #0]
 8000850:	f000 f842 	bl	80008d8 <echo_send>
 8000854:	e007      	b.n	8000866 <echo_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d103      	bne.n	8000866 <echo_poll+0x3e>
      {
        echo_close(tpcb, es);
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f000 f88c 	bl	800097e <echo_close>
      }
    }
    ret_err = ERR_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e004      	b.n	8000876 <echo_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f004 ffa7 	bl	80057c0 <tcp_abort>
    ret_err = ERR_ABRT;
 8000872:	23f3      	movs	r3, #243	; 0xf3
 8000874:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08000889 	.word	0x08000889

08000888 <echo_sent>:

err_t
echo_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	4613      	mov	r3, r2
 8000894:	80fb      	strh	r3, [r7, #6]
  struct echo_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct echo_state *)arg;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2200      	movs	r2, #0
 800089e:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d008      	beq.n	80008ba <echo_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, echo_sent);
 80008a8:	490a      	ldr	r1, [pc, #40]	; (80008d4 <echo_sent+0x4c>)
 80008aa:	68b8      	ldr	r0, [r7, #8]
 80008ac:	f005 ff4c 	bl	8006748 <tcp_sent>
    echo_send(tpcb, es);
 80008b0:	6979      	ldr	r1, [r7, #20]
 80008b2:	68b8      	ldr	r0, [r7, #8]
 80008b4:	f000 f810 	bl	80008d8 <echo_send>
 80008b8:	e007      	b.n	80008ca <echo_sent+0x42>
  }
  else
  {
    /* no more pbufs to send */
    if(es->state == ES_CLOSING)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d103      	bne.n	80008ca <echo_sent+0x42>
    {
      echo_close(tpcb, es);
 80008c2:	6979      	ldr	r1, [r7, #20]
 80008c4:	68b8      	ldr	r0, [r7, #8]
 80008c6:	f000 f85a 	bl	800097e <echo_close>
    }
  }
  return ERR_OK;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08000889 	.word	0x08000889

080008d8 <echo_send>:

void
echo_send(struct tcp_pcb *tpcb, struct echo_state *es)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 80008e6:	e036      	b.n	8000956 <echo_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
  ptr = es->p;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	613b      	str	r3, [r7, #16]

  /* enqueue data for transmission */
  wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	6859      	ldr	r1, [r3, #4]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	895a      	ldrh	r2, [r3, #10]
 80008f6:	2301      	movs	r3, #1
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f008 fd33 	bl	8009364 <tcp_write>
 80008fe:	4603      	mov	r3, r0
 8000900:	75fb      	strb	r3, [r7, #23]
  if (wr_err == ERR_OK)
 8000902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d11d      	bne.n	8000946 <echo_send+0x6e>
  {
     u16_t plen;
      u8_t freed;

     plen = ptr->len;
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	895b      	ldrh	r3, [r3, #10]
 800090e:	81fb      	strh	r3, [r7, #14]
     /* continue with next pbuf in chain (if any) */
     es->p = ptr->next;
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	609a      	str	r2, [r3, #8]
     if(es->p != NULL)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <echo_send+0x52>
     {
       /* new reference! */
       pbuf_ref(es->p);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	4618      	mov	r0, r3
 8000926:	f004 fa23 	bl	8004d70 <pbuf_ref>
     }
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800092a:	6938      	ldr	r0, [r7, #16]
 800092c:	f004 f974 	bl	8004c18 <pbuf_free>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000934:	7b7b      	ldrb	r3, [r7, #13]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f7      	beq.n	800092a <echo_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	4619      	mov	r1, r3
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f005 f8e4 	bl	8005b0c <tcp_recved>
 8000944:	e007      	b.n	8000956 <echo_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800094a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800094e:	d102      	bne.n	8000956 <echo_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10b      	bne.n	8000976 <echo_send+0x9e>
         (es->p != NULL) &&
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000962:	2b00      	cmp	r3, #0
 8000964:	d007      	beq.n	8000976 <echo_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	895a      	ldrh	r2, [r3, #10]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8000972:	429a      	cmp	r2, r3
 8000974:	d9b8      	bls.n	80008e8 <echo_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <echo_close>:

void
echo_close(struct tcp_pcb *tpcb, struct echo_state *es)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
  tcp_arg(tpcb, NULL);
 8000988:	2100      	movs	r1, #0
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f005 fea8 	bl	80066e0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000990:	2100      	movs	r1, #0
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f005 fed8 	bl	8006748 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000998:	2100      	movs	r1, #0
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f005 feb2 	bl	8006704 <tcp_recv>
  tcp_err(tpcb, NULL);
 80009a0:	2100      	movs	r1, #0
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f005 fef0 	bl	8006788 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f005 ff25 	bl	80067fc <tcp_poll>

  if (es != NULL)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <echo_close+0x40>
  {
    mem_free(es);
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f003 f913 	bl	8003be4 <mem_free>
  }
  tcp_close(tpcb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f004 fe34 	bl	800562c <tcp_close>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f000 fc1d 	bl	800120e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f810 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f000 f934 	bl	8000c44 <MX_GPIO_Init>
  MX_SPI5_Init();
 80009dc:	f000 f8f4 	bl	8000bc8 <MX_SPI5_Init>
  MX_LWIP_Init();
 80009e0:	f002 fbd2 	bl	8003188 <MX_LWIP_Init>
  MX_SPI3_Init();
 80009e4:	f000 f874 	bl	8000ad0 <MX_SPI3_Init>
  MX_SPI4_Init();
 80009e8:	f000 f8b0 	bl	8000b4c <MX_SPI4_Init>
  echo_init();
 80009ec:	f7ff fdf8 	bl	80005e0 <echo_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80009f0:	f002 fcf6 	bl	80033e0 <MX_LWIP_Process>
 80009f4:	e7fc      	b.n	80009f0 <main+0x24>
	...

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2234      	movs	r2, #52	; 0x34
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00c fbd0 	bl	800d1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <SystemClock_Config+0xd0>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SystemClock_Config+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a24      	ldr	r2, [pc, #144]	; (8000acc <SystemClock_Config+0xd4>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SystemClock_Config+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a64:	23d8      	movs	r3, #216	; 0xd8
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 feb7 	bl	80027e8 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a80:	f000 f9c6 	bl	8000e10 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a84:	f001 fe60 	bl	8002748 <HAL_PWREx_EnableOverDrive>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a8e:	f000 f9bf 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2107      	movs	r1, #7
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 f90b 	bl	8002ccc <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000abc:	f000 f9a8 	bl	8000e10 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <MX_SPI3_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000aea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b1e:	2207      	movs	r2, #7
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_SPI3_Init+0x74>)
 8000b30:	f002 fa98 	bl	8003064 <HAL_SPI_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 f969 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000284 	.word	0x20000284
 8000b48:	40003c00 	.word	0x40003c00

08000b4c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <MX_SPI4_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b6a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b82:	2218      	movs	r2, #24
 8000b84:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000b9a:	2207      	movs	r2, #7
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_SPI4_Init+0x74>)
 8000bac:	f002 fa5a 	bl	8003064 <HAL_SPI_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 f92b 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200002e8 	.word	0x200002e8
 8000bc4:	40013400 	.word	0x40013400

08000bc8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <MX_SPI5_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000be2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000be6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000bfe:	2218      	movs	r2, #24
 8000c00:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_SPI5_Init+0x74>)
 8000c28:	f002 fa1c 	bl	8003064 <HAL_SPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f8ed 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000220 	.word	0x20000220
 8000c40:	40015000 	.word	0x40015000

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a67      	ldr	r2, [pc, #412]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4b62      	ldr	r3, [pc, #392]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a61      	ldr	r2, [pc, #388]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b5f      	ldr	r3, [pc, #380]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0320 	and.w	r3, r3, #32
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a5b      	ldr	r2, [pc, #364]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a4f      	ldr	r2, [pc, #316]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <MX_GPIO_Init+0x1b8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY1_nRST_GPIO_Port, RELAY1_nRST_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	483e      	ldr	r0, [pc, #248]	; (8000e00 <MX_GPIO_Init+0x1bc>)
 8000d08:	f001 fd04 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_FLASH1_CS_Pin|MCU_FLASH2_CS_Pin|RELAY1_nCS4_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d12:	483c      	ldr	r0, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x1c0>)
 8000d14:	f001 fcfe 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RELAY1_nCS3_Pin|RELAY1_nCS2_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	483a      	ldr	r0, [pc, #232]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d1e:	f001 fcf9 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY1_nCS1_Pin|RELAY1_nCS0_Pin|RELAY2_nRST_Pin|RELAY2_nCS0_Pin 
 8000d22:	2200      	movs	r2, #0
 8000d24:	f64f 5180 	movw	r1, #64896	; 0xfd80
 8000d28:	4838      	ldr	r0, [pc, #224]	; (8000e0c <MX_GPIO_Init+0x1c8>)
 8000d2a:	f001 fcf3 	bl	8002714 <HAL_GPIO_WritePin>
                          |RELAY2_nCS1_Pin|RELAY2_nCS2_Pin|RELAY2_nCS3_Pin|RELAY2_nCS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : RELAY1_nRST_Pin */
  GPIO_InitStruct.Pin = RELAY1_nRST_Pin;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RELAY1_nRST_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	482e      	ldr	r0, [pc, #184]	; (8000e00 <MX_GPIO_Init+0x1bc>)
 8000d46:	f001 fb3b 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FLASH1_CS_Pin MCU_FLASH2_CS_Pin RELAY1_nCS4_Pin */
  GPIO_InitStruct.Pin = MCU_FLASH1_CS_Pin|MCU_FLASH2_CS_Pin|RELAY1_nCS4_Pin;
 8000d4a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4828      	ldr	r0, [pc, #160]	; (8000e04 <MX_GPIO_Init+0x1c0>)
 8000d64:	f001 fb2c 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_nCS3_Pin RELAY1_nCS2_Pin */
  GPIO_InitStruct.Pin = RELAY1_nCS3_Pin|RELAY1_nCS2_Pin;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4822      	ldr	r0, [pc, #136]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d80:	f001 fb1e 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_nCS1_Pin RELAY1_nCS0_Pin RELAY2_nRST_Pin RELAY2_nCS0_Pin 
                           RELAY2_nCS1_Pin RELAY2_nCS3_Pin RELAY2_nCS4_Pin */
  GPIO_InitStruct.Pin = RELAY1_nCS1_Pin|RELAY1_nCS0_Pin|RELAY2_nRST_Pin|RELAY2_nCS0_Pin 
 8000d84:	f64d 5380 	movw	r3, #56704	; 0xdd80
 8000d88:	61fb      	str	r3, [r7, #28]
                          |RELAY2_nCS1_Pin|RELAY2_nCS3_Pin|RELAY2_nCS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481b      	ldr	r0, [pc, #108]	; (8000e0c <MX_GPIO_Init+0x1c8>)
 8000d9e:	f001 fb0f 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY2_nCS2_Pin */
  GPIO_InitStruct.Pin = RELAY2_nCS2_Pin;
 8000da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RELAY2_nCS2_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x1c8>)
 8000dbc:	f001 fb00 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODULE_DETECT1_Pin MODULE_DETECT0_Pin */
  GPIO_InitStruct.Pin = MODULE_DETECT1_Pin|MODULE_DETECT0_Pin;
 8000dc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480a      	ldr	r0, [pc, #40]	; (8000e00 <MX_GPIO_Init+0x1bc>)
 8000dd6:	f001 faf3 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_DEFAULT_Pin */
  GPIO_InitStruct.Pin = MCU_DEFAULT_Pin;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_DEFAULT_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0x1bc>)
 8000df0:	f001 fae6 	bl	80023c0 <HAL_GPIO_Init>

}
 8000df4:	bf00      	nop
 8000df6:	3730      	adds	r7, #48	; 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40021400 	.word	0x40021400
 8000e08:	40021800 	.word	0x40021800
 8000e0c:	40021000 	.word	0x40021000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <HAL_SPI_MspInit+0x138>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d129      	bne.n	8000ede <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000eba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <HAL_SPI_MspInit+0x140>)
 8000ed8:	f001 fa72 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000edc:	e05b      	b.n	8000f96 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a32      	ldr	r2, [pc, #200]	; (8000fac <HAL_SPI_MspInit+0x144>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d128      	bne.n	8000f3a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <HAL_SPI_MspInit+0x148>)
 8000f34:	f001 fa44 	bl	80023c0 <HAL_GPIO_Init>
}
 8000f38:	e02d      	b.n	8000f96 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI5)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_SPI_MspInit+0x14c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d128      	bne.n	8000f96 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f62:	f043 0320 	orr.w	r3, r3, #32
 8000f66:	6313      	str	r3, [r2, #48]	; 0x30
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_SPI_MspInit+0x13c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f74:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f86:	2305      	movs	r3, #5
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_SPI_MspInit+0x150>)
 8000f92:	f001 fa15 	bl	80023c0 <HAL_GPIO_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3738      	adds	r7, #56	; 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40003c00 	.word	0x40003c00
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40013400 	.word	0x40013400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40015000 	.word	0x40015000
 8000fb8:	40021400 	.word	0x40021400

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f93a 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
	}

return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x12>
	}
	return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
	return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x50>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x16>
		heap_end = &end;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_sbrk+0x50>)
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <_sbrk+0x54>)
 8001108:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <_sbrk+0x50>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <_sbrk+0x50>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	466a      	mov	r2, sp
 800111a:	4293      	cmp	r3, r2
 800111c:	d905      	bls.n	800112a <_sbrk+0x36>
	{
		errno = ENOMEM;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <_sbrk+0x58>)
 8001120:	220c      	movs	r2, #12
 8001122:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001128:	e006      	b.n	8001138 <_sbrk+0x44>
	}

	heap_end += incr;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <_sbrk+0x50>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <_sbrk+0x50>)
 8001134:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000094 	.word	0x20000094
 8001148:	20006b38 	.word	0x20006b38
 800114c:	20006b34 	.word	0x20006b34

08001150 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <SystemInit+0x5c>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <SystemInit+0x5c>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <SystemInit+0x60>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <SystemInit+0x60>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <SystemInit+0x60>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <SystemInit+0x60>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <SystemInit+0x60>)
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <SystemInit+0x64>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <SystemInit+0x60>)
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <SystemInit+0x68>)
 8001186:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <SystemInit+0x60>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <SystemInit+0x60>)
 800118e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001192:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <SystemInit+0x60>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SystemInit+0x5c>)
 800119c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a0:	609a      	str	r2, [r3, #8]
#endif
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	fef6ffff 	.word	0xfef6ffff
 80011b8:	24003010 	.word	0x24003010

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011c2:	e003      	b.n	80011cc <LoopCopyDataInit>

080011c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ca:	3104      	adds	r1, #4

080011cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011d4:	d3f6      	bcc.n	80011c4 <CopyDataInit>
  ldr  r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011d8:	e002      	b.n	80011e0 <LoopFillZerobss>

080011da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011dc:	f842 3b04 	str.w	r3, [r2], #4

080011e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011e4:	d3f9      	bcc.n	80011da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffb3 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f00b ffa1 	bl	800d130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fbed 	bl	80009cc <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80011f8:	0800ff44 	.word	0x0800ff44
  ldr  r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001200:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001204:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001208:	20006b38 	.word	0x20006b38

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>

0800120e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f000 f92c 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f805 	bl	8001228 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800121e:	f7ff fdff 	bl	8000e20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f939 	bl	80014be <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	f000 f90f 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008
 80012ac:	2000034c 	.word	0x2000034c

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000034c 	.word	0x2000034c

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff ffee 	bl	80012b0 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_Delay+0x40>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffde 	bl	80012b0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	4313      	orrs	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	05fa0000 	.word	0x05fa0000

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff47 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff5c 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffb0 	bl	800142c <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80014e8:	4ba9      	ldr	r3, [pc, #676]	; (8001790 <HAL_ETH_Init+0x2b8>)
 80014ea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e183      	b.n	8001806 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 ff70 	bl	80033f8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001518:	4b9e      	ldr	r3, [pc, #632]	; (8001794 <HAL_ETH_Init+0x2bc>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	4a9d      	ldr	r2, [pc, #628]	; (8001794 <HAL_ETH_Init+0x2bc>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001522:	6453      	str	r3, [r2, #68]	; 0x44
 8001524:	4b9b      	ldr	r3, [pc, #620]	; (8001794 <HAL_ETH_Init+0x2bc>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <HAL_ETH_Init+0x2c0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a98      	ldr	r2, [pc, #608]	; (8001798 <HAL_ETH_Init+0x2c0>)
 8001536:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800153a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_ETH_Init+0x2c0>)
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4994      	ldr	r1, [pc, #592]	; (8001798 <HAL_ETH_Init+0x2c0>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0201 	orr.w	r2, r2, #1
 800155c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001560:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001562:	f7ff fea5 	bl	80012b0 <HAL_GetTick>
 8001566:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001568:	e011      	b.n	800158e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800156a:	f7ff fea1 	bl	80012b0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001578:	d909      	bls.n	800158e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e13b      	b.n	8001806 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e4      	bne.n	800156a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f023 031c 	bic.w	r3, r3, #28
 80015ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015b0:	f001 fd4c 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80015b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4a78      	ldr	r2, [pc, #480]	; (800179c <HAL_ETH_Init+0x2c4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d908      	bls.n	80015d0 <HAL_ETH_Init+0xf8>
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4a77      	ldr	r2, [pc, #476]	; (80017a0 <HAL_ETH_Init+0x2c8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d804      	bhi.n	80015d0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e027      	b.n	8001620 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4a73      	ldr	r2, [pc, #460]	; (80017a0 <HAL_ETH_Init+0x2c8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d908      	bls.n	80015ea <HAL_ETH_Init+0x112>
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	4a72      	ldr	r2, [pc, #456]	; (80017a4 <HAL_ETH_Init+0x2cc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d804      	bhi.n	80015ea <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f043 030c 	orr.w	r3, r3, #12
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	e01a      	b.n	8001620 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4a6d      	ldr	r2, [pc, #436]	; (80017a4 <HAL_ETH_Init+0x2cc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d903      	bls.n	80015fa <HAL_ETH_Init+0x122>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4a6c      	ldr	r2, [pc, #432]	; (80017a8 <HAL_ETH_Init+0x2d0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d911      	bls.n	800161e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4a6a      	ldr	r2, [pc, #424]	; (80017a8 <HAL_ETH_Init+0x2d0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d908      	bls.n	8001614 <HAL_ETH_Init+0x13c>
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_ETH_Init+0x2d4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d804      	bhi.n	8001614 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	e005      	b.n	8001620 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	e000      	b.n	8001620 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800161e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001628:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fb9a 	bl	8001d68 <HAL_ETH_WritePHYRegister>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800163e:	6939      	ldr	r1, [r7, #16]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fc27 	bl	8001e94 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0d9      	b.n	8001806 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001652:	20ff      	movs	r0, #255	; 0xff
 8001654:	f7ff fe38 	bl	80012c8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a7 	beq.w	80017b0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001662:	f7ff fe25 	bl	80012b0 <HAL_GetTick>
 8001666:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	461a      	mov	r2, r3
 800166e:	2101      	movs	r1, #1
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fb11 	bl	8001c98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001676:	f7ff fe1b 	bl	80012b0 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d90f      	bls.n	80016a8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800168c:	6939      	ldr	r1, [r7, #16]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fc00 	bl	8001e94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e0ae      	b.n	8001806 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0da      	beq.n	8001668 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80016b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fb55 	bl	8001d68 <HAL_ETH_WritePHYRegister>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016c8:	6939      	ldr	r1, [r7, #16]
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fbe2 	bl	8001e94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016d8:	2301      	movs	r3, #1
 80016da:	e094      	b.n	8001806 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fde8 	bl	80012b0 <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	461a      	mov	r2, r3
 80016e8:	2101      	movs	r1, #1
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fad4 	bl	8001c98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016f0:	f7ff fdde 	bl	80012b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d90f      	bls.n	8001722 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001706:	6939      	ldr	r1, [r7, #16]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fbc3 	bl	8001e94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e071      	b.n	8001806 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0da      	beq.n	80016e2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	461a      	mov	r2, r3
 8001732:	211f      	movs	r1, #31
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 faaf 	bl	8001c98 <HAL_ETH_ReadPHYRegister>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fba4 	bl	8001e94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001754:	2301      	movs	r3, #1
 8001756:	e056      	b.n	8001806 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	e002      	b.n	8001772 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	e037      	b.n	80017f4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e032      	b.n	80017f4 <HAL_ETH_Init+0x31c>
 800178e:	bf00      	nop
 8001790:	03938700 	.word	0x03938700
 8001794:	40023800 	.word	0x40023800
 8001798:	40013800 	.word	0x40013800
 800179c:	01312cff 	.word	0x01312cff
 80017a0:	02160ebf 	.word	0x02160ebf
 80017a4:	039386ff 	.word	0x039386ff
 80017a8:	05f5e0ff 	.word	0x05f5e0ff
 80017ac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 facd 	bl	8001d68 <HAL_ETH_WritePHYRegister>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017d8:	6939      	ldr	r1, [r7, #16]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fb5a 	bl	8001e94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e00c      	b.n	8001806 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80017ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80017f0:	f7ff fd6a 	bl	80012c8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fb4c 	bl	8001e94 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop

08001810 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ETH_DMATxDescListInit+0x20>
 800182c:	2302      	movs	r3, #2
 800182e:	e052      	b.n	80018d6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2202      	movs	r2, #2
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e030      	b.n	80018ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800185c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	461a      	mov	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	d208      	bcs.n	80018a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4413      	add	r3, r2
 800189a:	461a      	mov	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e002      	b.n	80018a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ca      	bcc.n	800184c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f241 0310 	movw	r3, #4112	; 0x1010
 80018c0:	440b      	add	r3, r1
 80018c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ETH_DMARxDescListInit+0x20>
 80018fe:	2302      	movs	r3, #2
 8001900:	e056      	b.n	80019b0 <HAL_ETH_DMARxDescListInit+0xce>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e034      	b.n	8001988 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	015b      	lsls	r3, r3, #5
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4413      	add	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800192e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001936:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	461a      	mov	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	429a      	cmp	r2, r3
 8001968:	d208      	bcs.n	800197c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	4413      	add	r3, r2
 8001974:	461a      	mov	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	e002      	b.n	8001982 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3c6      	bcc.n	800191e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	f241 030c 	movw	r3, #4108	; 0x100c
 800199a:	440b      	add	r3, r1
 800199c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_ETH_TransmitFrame+0x24>
 80019dc:	2302      	movs	r3, #2
 80019de:	e0cd      	b.n	8001b7c <HAL_ETH_TransmitFrame+0x1c0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0b8      	b.n	8001b7c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da09      	bge.n	8001a28 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2212      	movs	r2, #18
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0a9      	b.n	8001b7c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d915      	bls.n	8001a5e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a42:	fba3 1302 	umull	r1, r3, r3, r2
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e001      	b.n	8001a62 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d11c      	bne.n	8001aa2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a76:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a82:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a92:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa0:	e04b      	b.n	8001b3a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	e044      	b.n	8001b32 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001acc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ad6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d116      	bne.n	8001b10 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001af0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <HAL_ETH_TransmitFrame+0x1d0>)
 8001af6:	fb02 f203 	mul.w	r2, r2, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b02:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b0e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b1e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3b6      	bcc.n	8001aa8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b42:	4413      	add	r3, r2
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b56:	4413      	add	r3, r2
 8001b58:	2204      	movs	r2, #4
 8001b5a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b64:	4413      	add	r3, r2
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	ac02b00b 	.word	0xac02b00b
 8001b8c:	fffffa0c 	.word	0xfffffa0c

08001b90 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ETH_GetReceivedFrame+0x1a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e070      	b.n	8001c8c <HAL_ETH_GetReceivedFrame+0xfc>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db5a      	blt.n	8001c7a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d030      	beq.n	8001c34 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d103      	bne.n	8001bec <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c00:	3b04      	subs	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e02b      	b.n	8001c8c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d010      	beq.n	8001c64 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
 8001c62:	e00a      	b.n	8001c7a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b82      	cmp	r3, #130	; 0x82
 8001cb8:	d101      	bne.n	8001cbe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e050      	b.n	8001d60 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2282      	movs	r2, #130	; 0x82
 8001cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 031c 	and.w	r3, r3, #28
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8a1b      	ldrh	r3, [r3, #16]
 8001cda:	02db      	lsls	r3, r3, #11
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	019b      	lsls	r3, r3, #6
 8001ce8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f023 0302 	bic.w	r3, r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0a:	f7ff fad1 	bl	80012b0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d10:	e015      	b.n	8001d3e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d12:	f7ff facd 	bl	80012b0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d20:	d309      	bcc.n	8001d36 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e014      	b.n	8001d60 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e4      	bne.n	8001d12 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	460b      	mov	r3, r1
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b42      	cmp	r3, #66	; 0x42
 8001d88:	d101      	bne.n	8001d8e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e04e      	b.n	8001e2c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2242      	movs	r2, #66	; 0x42
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 031c 	and.w	r3, r3, #28
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8a1b      	ldrh	r3, [r3, #16]
 8001daa:	02db      	lsls	r3, r3, #11
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	019b      	lsls	r3, r3, #6
 8001db8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff fa64 	bl	80012b0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dea:	e015      	b.n	8001e18 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001dec:	f7ff fa60 	bl	80012b0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfa:	d309      	bcc.n	8001e10 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e00d      	b.n	8001e2c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e4      	bne.n	8001dec <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_ETH_Start+0x16>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e01f      	b.n	8001e8a <HAL_ETH_Start+0x56>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa1c 	bl	8002298 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fa36 	bl	80022d2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa80 	bl	800236c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa4d 	bl	800230c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa62 	bl	800233c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0b0      	sub	sp, #192	; 0xc0
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ede:	663b      	str	r3, [r7, #96]	; 0x60
 8001ee0:	e001      	b.n	8001ee6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f00:	2340      	movs	r3, #64	; 0x40
 8001f02:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f6c:	4bab      	ldr	r3, [pc, #684]	; (800221c <ETH_MACDMAConfig+0x388>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f78:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f7c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f80:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f86:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f8a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f8e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f94:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f98:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f9c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fa0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fa4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fa8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001faa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff f97d 	bl	80012c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fdc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001fe0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001fe6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001fec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001ff2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ff8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ffc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002004:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002006:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff f958 	bl	80012c8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002020:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800202a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002034:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002040:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002044:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002048:	4013      	ands	r3, r2
 800204a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800204e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002052:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002058:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800205a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800205e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002064:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800206a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800206c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002070:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002072:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002084:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff f919 	bl	80012c8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff f904 	bl	80012c8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80020d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80020ee:	2304      	movs	r3, #4
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800210e:	2300      	movs	r3, #0
 8002110:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002112:	2300      	movs	r3, #0
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f241 0318 	movw	r3, #4120	; 0x1018
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002126:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <ETH_MACDMAConfig+0x38c>)
 800212c:	4013      	ands	r3, r2
 800212e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002132:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002134:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002136:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002138:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800213a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800213c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800213e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002140:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002142:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002144:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002146:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002148:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800214a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800214e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002152:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f241 0318 	movw	r3, #4120	; 0x1018
 8002166:	4413      	add	r3, r2
 8002168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f241 0318 	movw	r3, #4120	; 0x1018
 8002176:	4413      	add	r3, r2
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800217e:	2001      	movs	r0, #1
 8002180:	f7ff f8a2 	bl	80012c8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f241 0318 	movw	r3, #4120	; 0x1018
 800218c:	4413      	add	r3, r2
 800218e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002192:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002198:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800219c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80021a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80021ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff f87b 	bl	80012c8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6811      	ldr	r1, [r2, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <ETH_MACDMAConfig+0x390>)
 80021fa:	431a      	orrs	r2, r3
 80021fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002200:	440b      	add	r3, r1
 8002202:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	461a      	mov	r2, r3
 800220a:	2100      	movs	r1, #0
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f80b 	bl	8002228 <ETH_MACAddressConfig>
}
 8002212:	bf00      	nop
 8002214:	37c0      	adds	r7, #192	; 0xc0
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	ff20810f 	.word	0xff20810f
 8002220:	f8de3f23 	.word	0xf8de3f23
 8002224:	00010040 	.word	0x00010040

08002228 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3305      	adds	r3, #5
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	3204      	adds	r2, #4
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <ETH_MACAddressConfig+0x68>)
 800224a:	4413      	add	r3, r2
 800224c:	461a      	mov	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3303      	adds	r3, #3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	061a      	lsls	r2, r3, #24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3302      	adds	r3, #2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3301      	adds	r3, #1
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	4313      	orrs	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <ETH_MACAddressConfig+0x6c>)
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40028040 	.word	0x40028040
 8002294:	40028044 	.word	0x40028044

08002298 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0208 	orr.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff f803 	bl	80012c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0204 	orr.w	r2, r2, #4
 80022ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f7fe ffe6 	bl	80012c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	f241 0318 	movw	r3, #4120	; 0x1018
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6811      	ldr	r1, [r2, #0]
 8002324:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002328:	f241 0318 	movw	r3, #4120	; 0x1018
 800232c:	440b      	add	r3, r1
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	f241 0318 	movw	r3, #4120	; 0x1018
 800234c:	4413      	add	r3, r2
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6811      	ldr	r1, [r2, #0]
 8002354:	f043 0202 	orr.w	r2, r3, #2
 8002358:	f241 0318 	movw	r3, #4120	; 0x1018
 800235c:	440b      	add	r3, r1
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002380:	4413      	add	r3, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6811      	ldr	r1, [r2, #0]
 8002388:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800238c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002390:	440b      	add	r3, r1
 8002392:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f241 0318 	movw	r3, #4120	; 0x1018
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7fe ff90 	bl	80012c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6819      	ldr	r1, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80023b2:	440b      	add	r3, r1
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e175      	b.n	80026cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8164 	bne.w	80026c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x4e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b12      	cmp	r3, #18
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	69b9      	ldr	r1, [r7, #24]
 8002452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0203 	and.w	r2, r3, #3
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d00b      	beq.n	80024aa <HAL_GPIO_Init+0xea>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80be 	beq.w	80026c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_GPIO_Init+0x320>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_GPIO_Init+0x320>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_GPIO_Init+0x320>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002562:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_GPIO_Init+0x328>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d037      	beq.n	80025fe <HAL_GPIO_Init+0x23e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_GPIO_Init+0x32c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d031      	beq.n	80025fa <HAL_GPIO_Init+0x23a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_GPIO_Init+0x330>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x236>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_GPIO_Init+0x334>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x232>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a53      	ldr	r2, [pc, #332]	; (80026f8 <HAL_GPIO_Init+0x338>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x22e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x33c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x22a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x340>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_GPIO_Init+0x344>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4f      	ldr	r2, [pc, #316]	; (8002708 <HAL_GPIO_Init+0x348>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_GPIO_Init+0x34c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x21a>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e012      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025da:	230a      	movs	r3, #10
 80025dc:	e010      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025de:	2308      	movs	r3, #8
 80025e0:	e00e      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fe:	2300      	movs	r3, #0
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002610:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002642:	4a33      	ldr	r2, [pc, #204]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_GPIO_Init+0x350>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266c:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x350>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_GPIO_Init+0x350>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_GPIO_Init+0x350>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f67f ae86 	bls.w	80023e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3724      	adds	r7, #36	; 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002776:	f7fe fd9b 	bl	80012b0 <HAL_GetTick>
 800277a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800277c:	e009      	b.n	8002792 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800277e:	f7fe fd97 	bl	80012b0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278c:	d901      	bls.n	8002792 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e022      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d1ee      	bne.n	800277e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7fe fd80 	bl	80012b0 <HAL_GetTick>
 80027b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027b2:	e009      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b4:	f7fe fd7c 	bl	80012b0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c2:	d901      	bls.n	80027c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e007      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027d4:	d1ee      	bne.n	80027b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e25e      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b96      	ldr	r3, [pc, #600]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00c      	beq.n	8002832 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002818:	4b93      	ldr	r3, [pc, #588]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d112      	bne.n	800284a <HAL_RCC_OscConfig+0x62>
 8002824:	4b90      	ldr	r3, [pc, #576]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b8d      	ldr	r3, [pc, #564]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06c      	beq.n	8002918 <HAL_RCC_OscConfig+0x130>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d168      	bne.n	8002918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e238      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x7a>
 8002854:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a83      	ldr	r2, [pc, #524]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x9c>
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7b      	ldr	r2, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e01d      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0xc0>
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a72      	ldr	r2, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fcf2 	bl	80012b0 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe fcee 	bl	80012b0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1ec      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe8>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fcde 	bl	80012b0 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe fcda 	bl	80012b0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1d8      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x110>
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d069      	beq.n	80029fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x190>
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1ac      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	493d      	ldr	r1, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	e040      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fc90 	bl	80012b0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fc8c 	bl	80012b0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e18a      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4929      	ldr	r1, [pc, #164]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
 80029c6:	e018      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc6c 	bl	80012b0 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe fc68 	bl	80012b0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e166      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d038      	beq.n	8002a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fc49 	bl	80012b0 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fc45 	bl	80012b0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e143      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x23a>
 8002a40:	e01a      	b.n	8002a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fc2f 	bl	80012b0 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe fc2b 	bl	80012b0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d903      	bls.n	8002a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e129      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
 8002a68:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	4b95      	ldr	r3, [pc, #596]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a4 	beq.w	8002bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b8f      	ldr	r3, [pc, #572]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b8c      	ldr	r3, [pc, #560]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a8b      	ldr	r2, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b86      	ldr	r3, [pc, #536]	; (8002cc8 <HAL_RCC_OscConfig+0x4e0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aba:	4b83      	ldr	r3, [pc, #524]	; (8002cc8 <HAL_RCC_OscConfig+0x4e0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a82      	ldr	r2, [pc, #520]	; (8002cc8 <HAL_RCC_OscConfig+0x4e0>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fbf3 	bl	80012b0 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe fbef 	bl	80012b0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0ed      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <HAL_RCC_OscConfig+0x4e0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x31a>
 8002af4:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a72      	ldr	r2, [pc, #456]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e02d      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x33c>
 8002b0a:	4b6e      	ldr	r3, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a6d      	ldr	r2, [pc, #436]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	4b6b      	ldr	r3, [pc, #428]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a6a      	ldr	r2, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	e01c      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x35e>
 8002b2c:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a64      	ldr	r2, [pc, #400]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a61      	ldr	r2, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5e      	ldr	r2, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a5b      	ldr	r2, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fba3 	bl	80012b0 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fb9f 	bl	80012b0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e09b      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCC_OscConfig+0x386>
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fb8d 	bl	80012b0 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fb89 	bl	80012b0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e085      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a3f      	ldr	r2, [pc, #252]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d071      	beq.n	8002cba <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d069      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d14b      	bne.n	8002c82 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a35      	ldr	r2, [pc, #212]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fb5b 	bl	80012b0 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fb57 	bl	80012b0 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e055      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c10:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	071b      	lsls	r3, r3, #28
 8002c48:	491e      	ldr	r1, [pc, #120]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fb29 	bl	80012b0 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe fb25 	bl	80012b0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e023      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x47a>
 8002c80:	e01b      	b.n	8002cba <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fb0f 	bl	80012b0 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe fb0b 	bl	80012b0 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e009      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_OscConfig+0x4dc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4ae>
 8002cb4:	e001      	b.n	8002cba <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0ce      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b69      	ldr	r3, [pc, #420]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	4964      	ldr	r1, [pc, #400]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b6      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	494c      	ldr	r1, [pc, #304]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d040      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e07d      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e071      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e069      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4935      	ldr	r1, [pc, #212]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fa76 	bl	80012b0 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7fe fa72 	bl	80012b0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e051      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d210      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4921      	ldr	r1, [pc, #132]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e030      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4915      	ldr	r1, [pc, #84]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490d      	ldr	r1, [pc, #52]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5e:	f000 f81d 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	5cd3      	ldrb	r3, [r2, r3]
 8002e72:	fa21 f303 	lsr.w	r3, r1, r3
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_RCC_ClockConfig+0x1cc>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fe f9d4 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	0800fd88 	.word	0x0800fd88
 8002e98:	20000000 	.word	0x20000000

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d007      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x32>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x38>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 80b4 	bne.w	8003030 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002eca:	60bb      	str	r3, [r7, #8]
       break;
 8002ecc:	e0b3      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ed0:	60bb      	str	r3, [r7, #8]
      break;
 8002ed2:	e0b0      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ede:	4b58      	ldr	r3, [pc, #352]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04a      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	ea03 0501 	and.w	r5, r3, r1
 8002f00:	ea04 0602 	and.w	r6, r4, r2
 8002f04:	4629      	mov	r1, r5
 8002f06:	4632      	mov	r2, r6
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	0154      	lsls	r4, r2, #5
 8002f12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f16:	014b      	lsls	r3, r1, #5
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	1b49      	subs	r1, r1, r5
 8002f1e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	0194      	lsls	r4, r2, #6
 8002f2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f30:	018b      	lsls	r3, r1, #6
 8002f32:	1a5b      	subs	r3, r3, r1
 8002f34:	eb64 0402 	sbc.w	r4, r4, r2
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	00e2      	lsls	r2, r4, #3
 8002f42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f46:	00d9      	lsls	r1, r3, #3
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	195b      	adds	r3, r3, r5
 8002f4e:	eb44 0406 	adc.w	r4, r4, r6
 8002f52:	f04f 0100 	mov.w	r1, #0
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	0262      	lsls	r2, r4, #9
 8002f5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f60:	0259      	lsls	r1, r3, #9
 8002f62:	460b      	mov	r3, r1
 8002f64:	4614      	mov	r4, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	4621      	mov	r1, r4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	461a      	mov	r2, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	f7fd f9b4 	bl	80002e0 <__aeabi_uldivmod>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e049      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	f04f 0400 	mov.w	r4, #0
 8002f8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	ea03 0501 	and.w	r5, r3, r1
 8002f96:	ea04 0602 	and.w	r6, r4, r2
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	0154      	lsls	r4, r2, #5
 8002fa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fac:	014b      	lsls	r3, r1, #5
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	1b49      	subs	r1, r1, r5
 8002fb4:	eb62 0206 	sbc.w	r2, r2, r6
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	f04f 0400 	mov.w	r4, #0
 8002fc0:	0194      	lsls	r4, r2, #6
 8002fc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fc6:	018b      	lsls	r3, r1, #6
 8002fc8:	1a5b      	subs	r3, r3, r1
 8002fca:	eb64 0402 	sbc.w	r4, r4, r2
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fdc:	00d9      	lsls	r1, r3, #3
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	195b      	adds	r3, r3, r5
 8002fe4:	eb44 0406 	adc.w	r4, r4, r6
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	02a2      	lsls	r2, r4, #10
 8002ff2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ff6:	0299      	lsls	r1, r3, #10
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	4621      	mov	r1, r4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f04f 0400 	mov.w	r4, #0
 8003006:	461a      	mov	r2, r3
 8003008:	4623      	mov	r3, r4
 800300a:	f7fd f969 	bl	80002e0 <__aeabi_uldivmod>
 800300e:	4603      	mov	r3, r0
 8003010:	460c      	mov	r4, r1
 8003012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003032:	60bb      	str	r3, [r7, #8]
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	68bb      	ldr	r3, [r7, #8]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e084      	b.n	8003180 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd fee9 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b6:	d902      	bls.n	80030be <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e002      	b.n	80030c4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030cc:	d007      	beq.n	80030de <HAL_SPI_Init+0x7a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ee:	d903      	bls.n	80030f8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
 80030f6:	e002      	b.n	80030fe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	ea42 0103 	orr.w	r1, r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	f003 0204 	and.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	ea42 0103 	orr.w	r1, r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800318e:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <MX_LWIP_Init+0x234>)
 8003190:	22c0      	movs	r2, #192	; 0xc0
 8003192:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8003194:	4b89      	ldr	r3, [pc, #548]	; (80033bc <MX_LWIP_Init+0x234>)
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <MX_LWIP_Init+0x234>)
 800319c:	2202      	movs	r2, #2
 800319e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 80031a0:	4b86      	ldr	r3, [pc, #536]	; (80033bc <MX_LWIP_Init+0x234>)
 80031a2:	2202      	movs	r2, #2
 80031a4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80031a6:	4b86      	ldr	r3, [pc, #536]	; (80033c0 <MX_LWIP_Init+0x238>)
 80031a8:	22ff      	movs	r2, #255	; 0xff
 80031aa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80031ac:	4b84      	ldr	r3, [pc, #528]	; (80033c0 <MX_LWIP_Init+0x238>)
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80031b2:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <MX_LWIP_Init+0x238>)
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80031b8:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <MX_LWIP_Init+0x238>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80031be:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80031c0:	22c0      	movs	r2, #192	; 0xc0
 80031c2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80031c4:	4b7f      	ldr	r3, [pc, #508]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 80031ca:	4b7e      	ldr	r3, [pc, #504]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80031d0:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80031d6:	f000 fc19 	bl	8003a0c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80031da:	4b78      	ldr	r3, [pc, #480]	; (80033bc <MX_LWIP_Init+0x234>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	061a      	lsls	r2, r3, #24
 80031e0:	4b76      	ldr	r3, [pc, #472]	; (80033bc <MX_LWIP_Init+0x234>)
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	4b74      	ldr	r3, [pc, #464]	; (80033bc <MX_LWIP_Init+0x234>)
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	4313      	orrs	r3, r2
 80031f0:	4a72      	ldr	r2, [pc, #456]	; (80033bc <MX_LWIP_Init+0x234>)
 80031f2:	78d2      	ldrb	r2, [r2, #3]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	061a      	lsls	r2, r3, #24
 80031f8:	4b70      	ldr	r3, [pc, #448]	; (80033bc <MX_LWIP_Init+0x234>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	0619      	lsls	r1, r3, #24
 80031fe:	4b6f      	ldr	r3, [pc, #444]	; (80033bc <MX_LWIP_Init+0x234>)
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	4319      	orrs	r1, r3
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <MX_LWIP_Init+0x234>)
 8003208:	789b      	ldrb	r3, [r3, #2]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	430b      	orrs	r3, r1
 800320e:	496b      	ldr	r1, [pc, #428]	; (80033bc <MX_LWIP_Init+0x234>)
 8003210:	78c9      	ldrb	r1, [r1, #3]
 8003212:	430b      	orrs	r3, r1
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800321a:	431a      	orrs	r2, r3
 800321c:	4b67      	ldr	r3, [pc, #412]	; (80033bc <MX_LWIP_Init+0x234>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	0619      	lsls	r1, r3, #24
 8003222:	4b66      	ldr	r3, [pc, #408]	; (80033bc <MX_LWIP_Init+0x234>)
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	4319      	orrs	r1, r3
 800322a:	4b64      	ldr	r3, [pc, #400]	; (80033bc <MX_LWIP_Init+0x234>)
 800322c:	789b      	ldrb	r3, [r3, #2]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	430b      	orrs	r3, r1
 8003232:	4962      	ldr	r1, [pc, #392]	; (80033bc <MX_LWIP_Init+0x234>)
 8003234:	78c9      	ldrb	r1, [r1, #3]
 8003236:	430b      	orrs	r3, r1
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800323e:	431a      	orrs	r2, r3
 8003240:	4b5e      	ldr	r3, [pc, #376]	; (80033bc <MX_LWIP_Init+0x234>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	0619      	lsls	r1, r3, #24
 8003246:	4b5d      	ldr	r3, [pc, #372]	; (80033bc <MX_LWIP_Init+0x234>)
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	4319      	orrs	r1, r3
 800324e:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <MX_LWIP_Init+0x234>)
 8003250:	789b      	ldrb	r3, [r3, #2]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	430b      	orrs	r3, r1
 8003256:	4959      	ldr	r1, [pc, #356]	; (80033bc <MX_LWIP_Init+0x234>)
 8003258:	78c9      	ldrb	r1, [r1, #3]
 800325a:	430b      	orrs	r3, r1
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	4313      	orrs	r3, r2
 8003260:	4a59      	ldr	r2, [pc, #356]	; (80033c8 <MX_LWIP_Init+0x240>)
 8003262:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003264:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <MX_LWIP_Init+0x238>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	061a      	lsls	r2, r3, #24
 800326a:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <MX_LWIP_Init+0x238>)
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	431a      	orrs	r2, r3
 8003272:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <MX_LWIP_Init+0x238>)
 8003274:	789b      	ldrb	r3, [r3, #2]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	4313      	orrs	r3, r2
 800327a:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <MX_LWIP_Init+0x238>)
 800327c:	78d2      	ldrb	r2, [r2, #3]
 800327e:	4313      	orrs	r3, r2
 8003280:	061a      	lsls	r2, r3, #24
 8003282:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <MX_LWIP_Init+0x238>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	0619      	lsls	r1, r3, #24
 8003288:	4b4d      	ldr	r3, [pc, #308]	; (80033c0 <MX_LWIP_Init+0x238>)
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	4319      	orrs	r1, r3
 8003290:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <MX_LWIP_Init+0x238>)
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	430b      	orrs	r3, r1
 8003298:	4949      	ldr	r1, [pc, #292]	; (80033c0 <MX_LWIP_Init+0x238>)
 800329a:	78c9      	ldrb	r1, [r1, #3]
 800329c:	430b      	orrs	r3, r1
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032a4:	431a      	orrs	r2, r3
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	0619      	lsls	r1, r3, #24
 80032ac:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	4319      	orrs	r1, r3
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	430b      	orrs	r3, r1
 80032bc:	4940      	ldr	r1, [pc, #256]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032be:	78c9      	ldrb	r1, [r1, #3]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80032c8:	431a      	orrs	r2, r3
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	0619      	lsls	r1, r3, #24
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	4319      	orrs	r1, r3
 80032d8:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032da:	789b      	ldrb	r3, [r3, #2]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	430b      	orrs	r3, r1
 80032e0:	4937      	ldr	r1, [pc, #220]	; (80033c0 <MX_LWIP_Init+0x238>)
 80032e2:	78c9      	ldrb	r1, [r1, #3]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	0e1b      	lsrs	r3, r3, #24
 80032e8:	4313      	orrs	r3, r2
 80032ea:	4a38      	ldr	r2, [pc, #224]	; (80033cc <MX_LWIP_Init+0x244>)
 80032ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	061a      	lsls	r2, r3, #24
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <MX_LWIP_Init+0x23c>)
 80032fe:	789b      	ldrb	r3, [r3, #2]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	4313      	orrs	r3, r2
 8003304:	4a2f      	ldr	r2, [pc, #188]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003306:	78d2      	ldrb	r2, [r2, #3]
 8003308:	4313      	orrs	r3, r2
 800330a:	061a      	lsls	r2, r3, #24
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <MX_LWIP_Init+0x23c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	0619      	lsls	r1, r3, #24
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	4319      	orrs	r1, r3
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <MX_LWIP_Init+0x23c>)
 800331c:	789b      	ldrb	r3, [r3, #2]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	430b      	orrs	r3, r1
 8003322:	4928      	ldr	r1, [pc, #160]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003324:	78c9      	ldrb	r1, [r1, #3]
 8003326:	430b      	orrs	r3, r1
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800332e:	431a      	orrs	r2, r3
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	0619      	lsls	r1, r3, #24
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	4319      	orrs	r1, r3
 800333e:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003340:	789b      	ldrb	r3, [r3, #2]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	430b      	orrs	r3, r1
 8003346:	491f      	ldr	r1, [pc, #124]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003348:	78c9      	ldrb	r1, [r1, #3]
 800334a:	430b      	orrs	r3, r1
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003352:	431a      	orrs	r2, r3
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	0619      	lsls	r1, r3, #24
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <MX_LWIP_Init+0x23c>)
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	4319      	orrs	r1, r3
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <MX_LWIP_Init+0x23c>)
 8003364:	789b      	ldrb	r3, [r3, #2]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	430b      	orrs	r3, r1
 800336a:	4916      	ldr	r1, [pc, #88]	; (80033c4 <MX_LWIP_Init+0x23c>)
 800336c:	78c9      	ldrb	r1, [r1, #3]
 800336e:	430b      	orrs	r3, r1
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	4313      	orrs	r3, r2
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <MX_LWIP_Init+0x248>)
 8003376:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <MX_LWIP_Init+0x24c>)
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <MX_LWIP_Init+0x250>)
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <MX_LWIP_Init+0x248>)
 8003386:	4a11      	ldr	r2, [pc, #68]	; (80033cc <MX_LWIP_Init+0x244>)
 8003388:	490f      	ldr	r1, [pc, #60]	; (80033c8 <MX_LWIP_Init+0x240>)
 800338a:	4814      	ldr	r0, [pc, #80]	; (80033dc <MX_LWIP_Init+0x254>)
 800338c:	f000 ff44 	bl	8004218 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003390:	4812      	ldr	r0, [pc, #72]	; (80033dc <MX_LWIP_Init+0x254>)
 8003392:	f001 f829 	bl	80043e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <MX_LWIP_Init+0x254>)
 8003398:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80033a8:	480c      	ldr	r0, [pc, #48]	; (80033dc <MX_LWIP_Init+0x254>)
 80033aa:	f001 f82d 	bl	8004408 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80033ae:	e002      	b.n	80033b6 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 80033b0:	480a      	ldr	r0, [pc, #40]	; (80033dc <MX_LWIP_Init+0x254>)
 80033b2:	f001 f86d 	bl	8004490 <netif_set_down>
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000038c 	.word	0x2000038c
 80033c0:	20000388 	.word	0x20000388
 80033c4:	20000350 	.word	0x20000350
 80033c8:	20000384 	.word	0x20000384
 80033cc:	20000390 	.word	0x20000390
 80033d0:	20000394 	.word	0x20000394
 80033d4:	0800cf79 	.word	0x0800cf79
 80033d8:	08003955 	.word	0x08003955
 80033dc:	20000354 	.word	0x20000354

080033e0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <MX_LWIP_Process+0x14>)
 80033e6:	f000 fa95 	bl	8003914 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 80033ea:	f007 fa4b 	bl	800a884 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000354 	.word	0x20000354

080033f8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08e      	sub	sp, #56	; 0x38
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a3f      	ldr	r2, [pc, #252]	; (8003514 <HAL_ETH_MspInit+0x11c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d178      	bne.n	800350c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_ETH_MspInit+0x120>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a3e      	ldr	r2, [pc, #248]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a38      	ldr	r2, [pc, #224]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_ETH_MspInit+0x120>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a32      	ldr	r2, [pc, #200]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a2c      	ldr	r2, [pc, #176]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_ETH_MspInit+0x120>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a26      	ldr	r2, [pc, #152]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a20      	ldr	r2, [pc, #128]	; (8003518 <HAL_ETH_MspInit+0x120>)
 8003498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_ETH_MspInit+0x120>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80034aa:	2332      	movs	r3, #50	; 0x32
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034ba:	230b      	movs	r3, #11
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	4815      	ldr	r0, [pc, #84]	; (800351c <HAL_ETH_MspInit+0x124>)
 80034c6:	f7fe ff7b 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80034ca:	2386      	movs	r3, #134	; 0x86
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d6:	2303      	movs	r3, #3
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034da:	230b      	movs	r3, #11
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e2:	4619      	mov	r1, r3
 80034e4:	480e      	ldr	r0, [pc, #56]	; (8003520 <HAL_ETH_MspInit+0x128>)
 80034e6:	f7fe ff6b 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80034ea:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034fc:	230b      	movs	r3, #11
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	4807      	ldr	r0, [pc, #28]	; (8003524 <HAL_ETH_MspInit+0x12c>)
 8003508:	f7fe ff5a 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800350c:	bf00      	nop
 800350e:	3738      	adds	r7, #56	; 0x38
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40028000 	.word	0x40028000
 8003518:	40023800 	.word	0x40023800
 800351c:	40020800 	.word	0x40020800
 8003520:	40020000 	.word	0x40020000
 8003524:	40021800 	.word	0x40021800

08003528 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003534:	4b49      	ldr	r3, [pc, #292]	; (800365c <low_level_init+0x134>)
 8003536:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <low_level_init+0x138>)
 8003538:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800353a:	4b48      	ldr	r3, [pc, #288]	; (800365c <low_level_init+0x134>)
 800353c:	2201      	movs	r2, #1
 800353e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <low_level_init+0x134>)
 8003542:	2200      	movs	r2, #0
 8003544:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003546:	2300      	movs	r3, #0
 8003548:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800354e:	23e1      	movs	r3, #225	; 0xe1
 8003550:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003552:	2300      	movs	r3, #0
 8003554:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003556:	2300      	movs	r3, #0
 8003558:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800355a:	2300      	movs	r3, #0
 800355c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800355e:	4a3f      	ldr	r2, [pc, #252]	; (800365c <low_level_init+0x134>)
 8003560:	f107 0308 	add.w	r3, r7, #8
 8003564:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <low_level_init+0x134>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800356c:	4b3b      	ldr	r3, [pc, #236]	; (800365c <low_level_init+0x134>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003572:	4b3a      	ldr	r3, [pc, #232]	; (800365c <low_level_init+0x134>)
 8003574:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003578:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800357a:	4838      	ldr	r0, [pc, #224]	; (800365c <low_level_init+0x134>)
 800357c:	f7fd ffac 	bl	80014d8 <HAL_ETH_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	b2da      	uxtb	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800359c:	2304      	movs	r3, #4
 800359e:	4a31      	ldr	r2, [pc, #196]	; (8003664 <low_level_init+0x13c>)
 80035a0:	4931      	ldr	r1, [pc, #196]	; (8003668 <low_level_init+0x140>)
 80035a2:	482e      	ldr	r0, [pc, #184]	; (800365c <low_level_init+0x134>)
 80035a4:	f7fe f934 	bl	8001810 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80035a8:	2304      	movs	r3, #4
 80035aa:	4a30      	ldr	r2, [pc, #192]	; (800366c <low_level_init+0x144>)
 80035ac:	4930      	ldr	r1, [pc, #192]	; (8003670 <low_level_init+0x148>)
 80035ae:	482b      	ldr	r0, [pc, #172]	; (800365c <low_level_init+0x134>)
 80035b0:	f7fe f997 	bl	80018e2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2206      	movs	r2, #6
 80035b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <low_level_init+0x134>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <low_level_init+0x134>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	785a      	ldrb	r2, [r3, #1]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <low_level_init+0x134>)
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	789a      	ldrb	r2, [r3, #2]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80035e0:	4b1e      	ldr	r3, [pc, #120]	; (800365c <low_level_init+0x134>)
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	78da      	ldrb	r2, [r3, #3]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <low_level_init+0x134>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	791a      	ldrb	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <low_level_init+0x134>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	795a      	ldrb	r2, [r3, #5]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800360a:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003612:	f043 030a 	orr.w	r3, r3, #10
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800361e:	480f      	ldr	r0, [pc, #60]	; (800365c <low_level_init+0x134>)
 8003620:	f7fe fc08 	bl	8001e34 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	461a      	mov	r2, r3
 800362a:	211d      	movs	r1, #29
 800362c:	480b      	ldr	r0, [pc, #44]	; (800365c <low_level_init+0x134>)
 800362e:	f7fe fb33 	bl	8001c98 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f043 030b 	orr.w	r3, r3, #11
 8003638:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	461a      	mov	r2, r3
 800363e:	211d      	movs	r1, #29
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <low_level_init+0x134>)
 8003642:	f7fe fb91 	bl	8001d68 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003646:	f107 0310 	add.w	r3, r7, #16
 800364a:	461a      	mov	r2, r3
 800364c:	211d      	movs	r1, #29
 800364e:	4803      	ldr	r0, [pc, #12]	; (800365c <low_level_init+0x134>)
 8003650:	f7fe fb22 	bl	8001c98 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8003654:	bf00      	nop
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20001c68 	.word	0x20001c68
 8003660:	40028000 	.word	0x40028000
 8003664:	20001cb0 	.word	0x20001cb0
 8003668:	20000398 	.word	0x20000398
 800366c:	20000418 	.word	0x20000418
 8003670:	20001be8 	.word	0x20001be8

08003674 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800367e:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <low_level_output+0x138>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003696:	4b45      	ldr	r3, [pc, #276]	; (80037ac <low_level_output+0x138>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	e05a      	b.n	800375c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da03      	bge.n	80036b6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80036ae:	23f8      	movs	r3, #248	; 0xf8
 80036b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80036b4:	e05c      	b.n	8003770 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	895b      	ldrh	r3, [r3, #10]
 80036ba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80036c0:	e02f      	b.n	8003722 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	18d0      	adds	r0, r2, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	18d1      	adds	r1, r2, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	f009 fd5c 	bl	800d196 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da03      	bge.n	80036f4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80036ec:	23f8      	movs	r3, #248	; 0xf8
 80036ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80036f2:	e03d      	b.n	8003770 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003704:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003710:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800371c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800372c:	4293      	cmp	r3, r2
 800372e:	d8c8      	bhi.n	80036c2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	18d0      	adds	r0, r2, r3
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4413      	add	r3, r2
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4619      	mov	r1, r3
 8003742:	f009 fd28 	bl	800d196 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1a1      	bne.n	80036a6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003762:	6979      	ldr	r1, [r7, #20]
 8003764:	4811      	ldr	r0, [pc, #68]	; (80037ac <low_level_output+0x138>)
 8003766:	f7fe f929 	bl	80019bc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <low_level_output+0x138>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f241 0314 	movw	r3, #4116	; 0x1014
 8003778:	4413      	add	r3, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <low_level_output+0x138>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	f241 0314 	movw	r3, #4116	; 0x1014
 800378c:	4413      	add	r3, r2
 800378e:	2220      	movs	r2, #32
 8003790:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <low_level_output+0x138>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	f241 0304 	movw	r3, #4100	; 0x1004
 800379a:	4413      	add	r3, r2
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80037a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20001c68 	.word	0x20001c68

080037b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80037d4:	484e      	ldr	r0, [pc, #312]	; (8003910 <low_level_input+0x160>)
 80037d6:	f7fe f9db 	bl	8001b90 <HAL_ETH_GetReceivedFrame>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <low_level_input+0x34>
    return NULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e091      	b.n	8003908 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <low_level_input+0x160>)
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80037ea:	4b49      	ldr	r3, [pc, #292]	; (8003910 <low_level_input+0x160>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80037f0:	89fb      	ldrh	r3, [r7, #14]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80037f6:	89fb      	ldrh	r3, [r7, #14]
 80037f8:	2203      	movs	r2, #3
 80037fa:	4619      	mov	r1, r3
 80037fc:	2004      	movs	r0, #4
 80037fe:	f000 fe99 	bl	8004534 <pbuf_alloc>
 8003802:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04b      	beq.n	80038a2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800380a:	4b41      	ldr	r3, [pc, #260]	; (8003910 <low_level_input+0x160>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
 8003818:	e040      	b.n	800389c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	895b      	ldrh	r3, [r3, #10]
 800381e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003824:	e021      	b.n	800386a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	18d0      	adds	r0, r2, r3
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	18d1      	adds	r1, r2, r3
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	461a      	mov	r2, r3
 800383e:	f009 fcaa 	bl	800d196 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4413      	add	r3, r2
 8003854:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003858:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003864:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003874:	4293      	cmp	r3, r2
 8003876:	d8d6      	bhi.n	8003826 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	18d0      	adds	r0, r2, r3
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4619      	mov	r1, r3
 800388a:	f009 fc84 	bl	800d196 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4413      	add	r3, r2
 8003894:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1bb      	bne.n	800381a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80038a2:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <low_level_input+0x160>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	e00b      	b.n	80038c6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3301      	adds	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <low_level_input+0x160>)
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3ee      	bcc.n	80038ae <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <low_level_input+0x160>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <low_level_input+0x160>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f241 0314 	movw	r3, #4116	; 0x1014
 80038de:	4413      	add	r3, r2
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <low_level_input+0x160>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80038f2:	4413      	add	r3, r2
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <low_level_input+0x160>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f241 0308 	movw	r3, #4104	; 0x1008
 8003900:	4413      	add	r3, r2
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003908:	4618      	mov	r0, r3
 800390a:	3730      	adds	r7, #48	; 0x30
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20001c68 	.word	0x20001c68

08003914 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff47 	bl	80037b0 <low_level_input>
 8003922:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	4798      	blx	r3
 8003934:	4603      	mov	r3, r0
 8003936:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8003938:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f001 f969 	bl	8004c18 <pbuf_free>
    p = NULL;    
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e000      	b.n	800394e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800394c:	bf00      	nop
  }
}
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <ethernetif_init+0x1c>
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <ethernetif_init+0x48>)
 8003964:	f240 2206 	movw	r2, #518	; 0x206
 8003968:	490d      	ldr	r1, [pc, #52]	; (80039a0 <ethernetif_init+0x4c>)
 800396a:	480e      	ldr	r0, [pc, #56]	; (80039a4 <ethernetif_init+0x50>)
 800396c:	f009 fc26 	bl	800d1bc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2273      	movs	r2, #115	; 0x73
 8003974:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2274      	movs	r2, #116	; 0x74
 800397c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <ethernetif_init+0x54>)
 8003984:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <ethernetif_init+0x58>)
 800398a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fdcb 	bl	8003528 <low_level_init>

  return ERR_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	0800dfe4 	.word	0x0800dfe4
 80039a0:	0800e000 	.word	0x0800e000
 80039a4:	0800e010 	.word	0x0800e010
 80039a8:	0800b4ad 	.word	0x0800b4ad
 80039ac:	08003675 	.word	0x08003675

080039b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80039b4:	f7fd fc7c 	bl	80012b0 <HAL_GetTick>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	bd80      	pop	{r7, pc}

080039be <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	ba5b      	rev16	r3, r3
 80039cc:	b29b      	uxth	r3, r3
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	061a      	lsls	r2, r3, #24
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	4313      	orrs	r3, r2
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003a16:	f000 f8a7 	bl	8003b68 <mem_init>
  memp_init();
 8003a1a:	f000 fb3b 	bl	8004094 <memp_init>
  pbuf_init();
  netif_init();
 8003a1e:	f000 fbf3 	bl	8004208 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003a22:	f006 ff81 	bl	800a928 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003a26:	f001 fc43 	bl	80052b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003a2a:	f006 fe5f 	bl	800a6ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003a40:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <plug_holes+0x10c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d206      	bcs.n	8003a58 <plug_holes+0x20>
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <plug_holes+0x110>)
 8003a4c:	f240 125d 	movw	r2, #349	; 0x15d
 8003a50:	493e      	ldr	r1, [pc, #248]	; (8003b4c <plug_holes+0x114>)
 8003a52:	483f      	ldr	r0, [pc, #252]	; (8003b50 <plug_holes+0x118>)
 8003a54:	f009 fbb2 	bl	800d1bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003a58:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <plug_holes+0x11c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d306      	bcc.n	8003a70 <plug_holes+0x38>
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <plug_holes+0x110>)
 8003a64:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003a68:	493b      	ldr	r1, [pc, #236]	; (8003b58 <plug_holes+0x120>)
 8003a6a:	4839      	ldr	r0, [pc, #228]	; (8003b50 <plug_holes+0x118>)
 8003a6c:	f009 fba6 	bl	800d1bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	791b      	ldrb	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <plug_holes+0x4e>
 8003a78:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <plug_holes+0x110>)
 8003a7a:	f240 125f 	movw	r2, #351	; 0x15f
 8003a7e:	4937      	ldr	r1, [pc, #220]	; (8003b5c <plug_holes+0x124>)
 8003a80:	4833      	ldr	r0, [pc, #204]	; (8003b50 <plug_holes+0x118>)
 8003a82:	f009 fb9b 	bl	800d1bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a8e:	d906      	bls.n	8003a9e <plug_holes+0x66>
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <plug_holes+0x110>)
 8003a92:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003a96:	4932      	ldr	r1, [pc, #200]	; (8003b60 <plug_holes+0x128>)
 8003a98:	482d      	ldr	r0, [pc, #180]	; (8003b50 <plug_holes+0x118>)
 8003a9a:	f009 fb8f 	bl	800d1bc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <plug_holes+0x10c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d01f      	beq.n	8003af2 <plug_holes+0xba>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	791b      	ldrb	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11b      	bne.n	8003af2 <plug_holes+0xba>
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <plug_holes+0x11c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d016      	beq.n	8003af2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <plug_holes+0x12c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d102      	bne.n	8003ad4 <plug_holes+0x9c>
      lfree = mem;
 8003ace:	4a25      	ldr	r2, [pc, #148]	; (8003b64 <plug_holes+0x12c>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <plug_holes+0x10c>)
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	1a99      	subs	r1, r3, r2
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <plug_holes+0x10c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	8812      	ldrh	r2, [r2, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	b28a      	uxth	r2, r1
 8003af0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <plug_holes+0x10c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	8852      	ldrh	r2, [r2, #2]
 8003afa:	4413      	add	r3, r2
 8003afc:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d01a      	beq.n	8003b3c <plug_holes+0x104>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	791b      	ldrb	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <plug_holes+0x12c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d102      	bne.n	8003b1e <plug_holes+0xe6>
      lfree = pmem;
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <plug_holes+0x12c>)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4a06      	ldr	r2, [pc, #24]	; (8003b44 <plug_holes+0x10c>)
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	1a99      	subs	r1, r3, r2
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <plug_holes+0x10c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	4413      	add	r3, r2
 8003b38:	b28a      	uxth	r2, r1
 8003b3a:	805a      	strh	r2, [r3, #2]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000098 	.word	0x20000098
 8003b48:	0800e038 	.word	0x0800e038
 8003b4c:	0800e068 	.word	0x0800e068
 8003b50:	0800e080 	.word	0x0800e080
 8003b54:	2000009c 	.word	0x2000009c
 8003b58:	0800e0a8 	.word	0x0800e0a8
 8003b5c:	0800e0c4 	.word	0x0800e0c4
 8003b60:	0800e0e0 	.word	0x0800e0e0
 8003b64:	200000a0 	.word	0x200000a0

08003b68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <mem_init+0x6c>)
 8003b70:	3303      	adds	r3, #3
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <mem_init+0x70>)
 8003b7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <mem_init+0x70>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003b88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <mem_init+0x70>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003b9e:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <mem_init+0x74>)
 8003ba0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <mem_init+0x74>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <mem_init+0x74>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003bb2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <mem_init+0x74>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003bbc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <mem_init+0x70>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a07      	ldr	r2, [pc, #28]	; (8003be0 <mem_init+0x78>)
 8003bc4:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20003498 	.word	0x20003498
 8003bd8:	20000098 	.word	0x20000098
 8003bdc:	2000009c 	.word	0x2000009c
 8003be0:	200000a0 	.word	0x200000a0

08003be4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d043      	beq.n	8003c7a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <mem_free+0x26>
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <mem_free+0xa4>)
 8003bfe:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003c02:	4922      	ldr	r1, [pc, #136]	; (8003c8c <mem_free+0xa8>)
 8003c04:	4822      	ldr	r0, [pc, #136]	; (8003c90 <mem_free+0xac>)
 8003c06:	f009 fad9 	bl	800d1bc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003c0a:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <mem_free+0xb0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d304      	bcc.n	8003c1e <mem_free+0x3a>
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <mem_free+0xb4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d306      	bcc.n	8003c2c <mem_free+0x48>
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <mem_free+0xa4>)
 8003c20:	f240 12af 	movw	r2, #431	; 0x1af
 8003c24:	491d      	ldr	r1, [pc, #116]	; (8003c9c <mem_free+0xb8>)
 8003c26:	481a      	ldr	r0, [pc, #104]	; (8003c90 <mem_free+0xac>)
 8003c28:	f009 fac8 	bl	800d1bc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <mem_free+0xb0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d323      	bcc.n	8003c7e <mem_free+0x9a>
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <mem_free+0xb4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d21e      	bcs.n	8003c7e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b08      	subs	r3, #8
 8003c44:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	791b      	ldrb	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <mem_free+0x78>
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <mem_free+0xa4>)
 8003c50:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003c54:	4912      	ldr	r1, [pc, #72]	; (8003ca0 <mem_free+0xbc>)
 8003c56:	480e      	ldr	r0, [pc, #56]	; (8003c90 <mem_free+0xac>)
 8003c58:	f009 fab0 	bl	800d1bc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <mem_free+0xc0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d202      	bcs.n	8003c72 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <mem_free+0xc0>)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fee0 	bl	8003a38 <plug_holes>
 8003c78:	e002      	b.n	8003c80 <mem_free+0x9c>
    return;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <mem_free+0x9c>
    return;
 8003c7e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	0800e038 	.word	0x0800e038
 8003c8c:	0800e10c 	.word	0x0800e10c
 8003c90:	0800e080 	.word	0x0800e080
 8003c94:	20000098 	.word	0x20000098
 8003c98:	2000009c 	.word	0x2000009c
 8003c9c:	0800e130 	.word	0x0800e130
 8003ca0:	0800e148 	.word	0x0800e148
 8003ca4:	200000a0 	.word	0x200000a0

08003ca8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	3303      	adds	r3, #3
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	2b0b      	cmp	r3, #11
 8003cc4:	d801      	bhi.n	8003cca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cd0:	d901      	bls.n	8003cd6 <mem_trim+0x2e>
    return NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e0b1      	b.n	8003e3a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <mem_trim+0x19c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d304      	bcc.n	8003cea <mem_trim+0x42>
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <mem_trim+0x1a0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d306      	bcc.n	8003cf8 <mem_trim+0x50>
 8003cea:	4b58      	ldr	r3, [pc, #352]	; (8003e4c <mem_trim+0x1a4>)
 8003cec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cf0:	4957      	ldr	r1, [pc, #348]	; (8003e50 <mem_trim+0x1a8>)
 8003cf2:	4858      	ldr	r0, [pc, #352]	; (8003e54 <mem_trim+0x1ac>)
 8003cf4:	f009 fa62 	bl	800d1bc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003cf8:	4b52      	ldr	r3, [pc, #328]	; (8003e44 <mem_trim+0x19c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d304      	bcc.n	8003d0c <mem_trim+0x64>
 8003d02:	4b51      	ldr	r3, [pc, #324]	; (8003e48 <mem_trim+0x1a0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d301      	bcc.n	8003d10 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	e094      	b.n	8003e3a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b08      	subs	r3, #8
 8003d14:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4a4a      	ldr	r2, [pc, #296]	; (8003e44 <mem_trim+0x19c>)
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	8a7b      	ldrh	r3, [r7, #18]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b08      	subs	r3, #8
 8003d2c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	8a3b      	ldrh	r3, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d906      	bls.n	8003d44 <mem_trim+0x9c>
 8003d36:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <mem_trim+0x1a4>)
 8003d38:	f240 2206 	movw	r2, #518	; 0x206
 8003d3c:	4946      	ldr	r1, [pc, #280]	; (8003e58 <mem_trim+0x1b0>)
 8003d3e:	4845      	ldr	r0, [pc, #276]	; (8003e54 <mem_trim+0x1ac>)
 8003d40:	f009 fa3c 	bl	800d1bc <iprintf>
  if (newsize > size) {
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	8a3b      	ldrh	r3, [r7, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d901      	bls.n	8003d50 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e074      	b.n	8003e3a <mem_trim+0x192>
  }
  if (newsize == size) {
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	8a3b      	ldrh	r3, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d101      	bne.n	8003d5c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	e06e      	b.n	8003e3a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <mem_trim+0x19c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	8812      	ldrh	r2, [r2, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d131      	bne.n	8003dd4 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003d76:	8a7a      	ldrh	r2, [r7, #18]
 8003d78:	887b      	ldrh	r3, [r7, #2]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3308      	adds	r3, #8
 8003d80:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <mem_trim+0x1b4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d105      	bne.n	8003d98 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <mem_trim+0x19c>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	897b      	ldrh	r3, [r7, #10]
 8003d92:	4413      	add	r3, r2
 8003d94:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <mem_trim+0x1b4>)
 8003d96:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003d98:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <mem_trim+0x19c>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	897b      	ldrh	r3, [r7, #10]
 8003d9e:	4413      	add	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	893a      	ldrh	r2, [r7, #8]
 8003dac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8a7a      	ldrh	r2, [r7, #18]
 8003db2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	897a      	ldrh	r2, [r7, #10]
 8003db8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003dc2:	d039      	beq.n	8003e38 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <mem_trim+0x19c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	8812      	ldrh	r2, [r2, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	897a      	ldrh	r2, [r7, #10]
 8003dd0:	805a      	strh	r2, [r3, #2]
 8003dd2:	e031      	b.n	8003e38 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	f103 0214 	add.w	r2, r3, #20
 8003dda:	8a3b      	ldrh	r3, [r7, #16]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d82b      	bhi.n	8003e38 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003de0:	8a7a      	ldrh	r2, [r7, #18]
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	4413      	add	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3308      	adds	r3, #8
 8003dea:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <mem_trim+0x19c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	897b      	ldrh	r3, [r7, #10]
 8003df2:	4413      	add	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <mem_trim+0x1b4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d202      	bcs.n	8003e06 <mem_trim+0x15e>
      lfree = mem2;
 8003e00:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <mem_trim+0x1b4>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8a7a      	ldrh	r2, [r7, #18]
 8003e18:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	897a      	ldrh	r2, [r7, #10]
 8003e1e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e28:	d006      	beq.n	8003e38 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <mem_trim+0x19c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	897a      	ldrh	r2, [r7, #10]
 8003e36:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000098 	.word	0x20000098
 8003e48:	2000009c 	.word	0x2000009c
 8003e4c:	0800e038 	.word	0x0800e038
 8003e50:	0800e15c 	.word	0x0800e15c
 8003e54:	0800e080 	.word	0x0800e080
 8003e58:	0800e174 	.word	0x0800e174
 8003e5c:	200000a0 	.word	0x200000a0

08003e60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <mem_malloc+0x14>
    return NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e0c8      	b.n	8004006 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	3303      	adds	r3, #3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	2b0b      	cmp	r3, #11
 8003e84:	d801      	bhi.n	8003e8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003e86:	230c      	movs	r3, #12
 8003e88:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e90:	d901      	bls.n	8003e96 <mem_malloc+0x36>
    return NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e0b7      	b.n	8004006 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003e96:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <mem_malloc+0x1b0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b5d      	ldr	r3, [pc, #372]	; (8004014 <mem_malloc+0x1b4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	83fb      	strh	r3, [r7, #30]
 8003ea4:	e0a7      	b.n	8003ff6 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <mem_malloc+0x1b4>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	8bfb      	ldrh	r3, [r7, #30]
 8003eac:	4413      	add	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	791b      	ldrb	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 8098 	bne.w	8003fea <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	8bfb      	ldrh	r3, [r7, #30]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f1a3 0208 	sub.w	r2, r3, #8
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f0c0 808d 	bcc.w	8003fea <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	8bfb      	ldrh	r3, [r7, #30]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f1a3 0208 	sub.w	r2, r3, #8
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d327      	bcc.n	8003f36 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8003ee6:	8bfa      	ldrh	r2, [r7, #30]
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	4413      	add	r3, r2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3308      	adds	r3, #8
 8003ef0:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003ef2:	4b48      	ldr	r3, [pc, #288]	; (8004014 <mem_malloc+0x1b4>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	4413      	add	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8bfa      	ldrh	r2, [r7, #30]
 8003f0e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	8a7a      	ldrh	r2, [r7, #18]
 8003f14:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f24:	d00a      	beq.n	8003f3c <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <mem_malloc+0x1b4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	8812      	ldrh	r2, [r2, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	8a7a      	ldrh	r2, [r7, #18]
 8003f32:	805a      	strh	r2, [r3, #2]
 8003f34:	e002      	b.n	8003f3c <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003f3c:	4b34      	ldr	r3, [pc, #208]	; (8004010 <mem_malloc+0x1b0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d127      	bne.n	8003f96 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8003f46:	4b32      	ldr	r3, [pc, #200]	; (8004010 <mem_malloc+0x1b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003f4c:	e005      	b.n	8003f5a <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <mem_malloc+0x1b4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	4413      	add	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <mem_malloc+0x10c>
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <mem_malloc+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1f0      	bne.n	8003f4e <mem_malloc+0xee>
          }
          lfree = cur;
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <mem_malloc+0x1b0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003f72:	4b27      	ldr	r3, [pc, #156]	; (8004010 <mem_malloc+0x1b0>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b28      	ldr	r3, [pc, #160]	; (8004018 <mem_malloc+0x1b8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d00b      	beq.n	8003f96 <mem_malloc+0x136>
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <mem_malloc+0x1b0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <mem_malloc+0x136>
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <mem_malloc+0x1bc>)
 8003f8a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003f8e:	4924      	ldr	r1, [pc, #144]	; (8004020 <mem_malloc+0x1c0>)
 8003f90:	4824      	ldr	r0, [pc, #144]	; (8004024 <mem_malloc+0x1c4>)
 8003f92:	f009 f913 	bl	800d1bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <mem_malloc+0x1b8>)
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d906      	bls.n	8003fb4 <mem_malloc+0x154>
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <mem_malloc+0x1bc>)
 8003fa8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8003fac:	491e      	ldr	r1, [pc, #120]	; (8004028 <mem_malloc+0x1c8>)
 8003fae:	481d      	ldr	r0, [pc, #116]	; (8004024 <mem_malloc+0x1c4>)
 8003fb0:	f009 f904 	bl	800d1bc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <mem_malloc+0x16c>
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <mem_malloc+0x1bc>)
 8003fc0:	f240 22d6 	movw	r2, #726	; 0x2d6
 8003fc4:	4919      	ldr	r1, [pc, #100]	; (800402c <mem_malloc+0x1cc>)
 8003fc6:	4817      	ldr	r0, [pc, #92]	; (8004024 <mem_malloc+0x1c4>)
 8003fc8:	f009 f8f8 	bl	800d1bc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <mem_malloc+0x184>
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <mem_malloc+0x1bc>)
 8003fd8:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8003fdc:	4914      	ldr	r1, [pc, #80]	; (8004030 <mem_malloc+0x1d0>)
 8003fde:	4811      	ldr	r0, [pc, #68]	; (8004024 <mem_malloc+0x1c4>)
 8003fe0:	f009 f8ec 	bl	800d1bc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	e00d      	b.n	8004006 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <mem_malloc+0x1b4>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	8bfb      	ldrh	r3, [r7, #30]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003ff6:	8bfa      	ldrh	r2, [r7, #30]
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003ffe:	429a      	cmp	r2, r3
 8004000:	f4ff af51 	bcc.w	8003ea6 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200000a0 	.word	0x200000a0
 8004014:	20000098 	.word	0x20000098
 8004018:	2000009c 	.word	0x2000009c
 800401c:	0800e038 	.word	0x0800e038
 8004020:	0800e194 	.word	0x0800e194
 8004024:	0800e080 	.word	0x0800e080
 8004028:	0800e1b0 	.word	0x0800e1b0
 800402c:	0800e1e0 	.word	0x0800e1e0
 8004030:	0800e210 	.word	0x0800e210

08004034 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	3303      	adds	r3, #3
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e011      	b.n	800407a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4413      	add	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	885b      	ldrh	r3, [r3, #2]
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4293      	cmp	r3, r2
 8004084:	dbe7      	blt.n	8004056 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800409a:	2300      	movs	r3, #0
 800409c:	80fb      	strh	r3, [r7, #6]
 800409e:	e009      	b.n	80040b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <memp_init+0x30>)
 80040a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ffc3 	bl	8004034 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	3301      	adds	r3, #1
 80040b2:	80fb      	strh	r3, [r7, #6]
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	2b0a      	cmp	r3, #10
 80040b8:	d9f2      	bls.n	80040a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	0800fe1c 	.word	0x0800fe1c

080040c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d012      	beq.n	8004104 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d006      	beq.n	8004100 <do_memp_malloc_pool+0x38>
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <do_memp_malloc_pool+0x48>)
 80040f4:	f240 1249 	movw	r2, #329	; 0x149
 80040f8:	4906      	ldr	r1, [pc, #24]	; (8004114 <do_memp_malloc_pool+0x4c>)
 80040fa:	4807      	ldr	r0, [pc, #28]	; (8004118 <do_memp_malloc_pool+0x50>)
 80040fc:	f009 f85e 	bl	800d1bc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	e000      	b.n	8004106 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	0800e234 	.word	0x0800e234
 8004114:	0800e264 	.word	0x0800e264
 8004118:	0800e288 	.word	0x0800e288

0800411c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b0a      	cmp	r3, #10
 800412a:	d908      	bls.n	800413e <memp_malloc+0x22>
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <memp_malloc+0x3c>)
 800412e:	f240 1287 	movw	r2, #391	; 0x187
 8004132:	490a      	ldr	r1, [pc, #40]	; (800415c <memp_malloc+0x40>)
 8004134:	480a      	ldr	r0, [pc, #40]	; (8004160 <memp_malloc+0x44>)
 8004136:	f009 f841 	bl	800d1bc <iprintf>
 800413a:	2300      	movs	r3, #0
 800413c:	e008      	b.n	8004150 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <memp_malloc+0x48>)
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff ffbe 	bl	80040c8 <do_memp_malloc_pool>
 800414c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	0800e234 	.word	0x0800e234
 800415c:	0800e2c4 	.word	0x0800e2c4
 8004160:	0800e288 	.word	0x0800e288
 8004164:	0800fe1c 	.word	0x0800fe1c

08004168 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d006      	beq.n	800418a <do_memp_free_pool+0x22>
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <do_memp_free_pool+0x40>)
 800417e:	f240 129d 	movw	r2, #413	; 0x19d
 8004182:	490a      	ldr	r1, [pc, #40]	; (80041ac <do_memp_free_pool+0x44>)
 8004184:	480a      	ldr	r0, [pc, #40]	; (80041b0 <do_memp_free_pool+0x48>)
 8004186:	f009 f819 	bl	800d1bc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	0800e234 	.word	0x0800e234
 80041ac:	0800e2e4 	.word	0x0800e2e4
 80041b0:	0800e288 	.word	0x0800e288

080041b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	6039      	str	r1, [r7, #0]
 80041be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d907      	bls.n	80041d6 <memp_free+0x22>
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <memp_free+0x44>)
 80041c8:	f240 12db 	movw	r2, #475	; 0x1db
 80041cc:	490b      	ldr	r1, [pc, #44]	; (80041fc <memp_free+0x48>)
 80041ce:	480c      	ldr	r0, [pc, #48]	; (8004200 <memp_free+0x4c>)
 80041d0:	f008 fff4 	bl	800d1bc <iprintf>
 80041d4:	e00c      	b.n	80041f0 <memp_free+0x3c>

  if (mem == NULL) {
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <memp_free+0x50>)
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ffbe 	bl	8004168 <do_memp_free_pool>
 80041ec:	e000      	b.n	80041f0 <memp_free+0x3c>
    return;
 80041ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	0800e234 	.word	0x0800e234
 80041fc:	0800e304 	.word	0x0800e304
 8004200:	0800e288 	.word	0x0800e288
 8004204:	0800fe1c 	.word	0x0800fe1c

08004208 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <netif_add+0x20>
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <netif_add+0x94>)
 800422e:	22fb      	movs	r2, #251	; 0xfb
 8004230:	491f      	ldr	r1, [pc, #124]	; (80042b0 <netif_add+0x98>)
 8004232:	4820      	ldr	r0, [pc, #128]	; (80042b4 <netif_add+0x9c>)
 8004234:	f008 ffc2 	bl	800d1bc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2203      	movs	r2, #3
 8004256:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <netif_add+0xa0>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	b2d1      	uxtb	r1, r2
 8004268:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <netif_add+0xa0>)
 800426a:	7011      	strb	r1, [r2, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f81e 	bl	80042c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	4798      	blx	r3
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <netif_add+0x7c>
    return NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	e007      	b.n	80042a4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <netif_add+0xa4>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <netif_add+0xa4>)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	0800e320 	.word	0x0800e320
 80042b0:	0800e354 	.word	0x0800e354
 80042b4:	0800e36c 	.word	0x0800e36c
 80042b8:	200000d0 	.word	0x200000d0
 80042bc:	20006b08 	.word	0x20006b08

080042c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <netif_set_addr+0x1c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10c      	bne.n	80042f6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f81a 	bl	8004318 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f86a 	bl	80043c0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f852 	bl	8004398 <netif_set_gw>
 80042f4:	e00b      	b.n	800430e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f861 	bl	80043c0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80042fe:	6839      	ldr	r1, [r7, #0]
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f849 	bl	8004398 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f805 	bl	8004318 <netif_set_ipaddr>
  }
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <netif_set_ipaddr+0x18>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e002      	b.n	8004336 <netif_set_ipaddr+0x1e>
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <netif_set_ipaddr+0x7c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d024      	beq.n	800438c <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	f107 020c 	add.w	r2, r7, #12
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f002 fb95 	bl	8006a7c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	f107 020c 	add.w	r2, r7, #12
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f006 fc0d 	bl	800ab7c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	f107 020c 	add.w	r2, r7, #12
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f000 ff6f 	bl	8005250 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <netif_set_ipaddr+0x66>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	e000      	b.n	8004380 <netif_set_ipaddr+0x68>
 800437e:	2300      	movs	r3, #0
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004384:	2101      	movs	r1, #1
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f861 	bl	800444e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	0800fe88 	.word	0x0800fe88

08004398 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <netif_set_gw+0x16>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	e000      	b.n	80043b0 <netif_set_gw+0x18>
 80043ae:	2300      	movs	r3, #0
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <netif_set_netmask+0x16>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	e000      	b.n	80043d8 <netif_set_netmask+0x18>
 80043d6:	2300      	movs	r3, #0
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <netif_set_default+0x1c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20006b0c 	.word	0x20006b0c

08004408 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800443e:	2103      	movs	r1, #3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f804 	bl	800444e <netif_issue_reports>
    }
  }
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f007 fb48 	bl	800bb18 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d012      	beq.n	80044cc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f006 fe9c 	bl	800b204 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <pbuf_free_ooseq+0x40>)
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <pbuf_free_ooseq+0x44>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	e00f      	b.n	8004508 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 ff34 	bl	8006362 <tcp_segs_free>
      pcb->ooseq = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8004500:	e005      	b.n	800450e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ec      	bne.n	80044e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20006b10 	.word	0x20006b10
 8004518:	20006b18 	.word	0x20006b18

0800451c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <pbuf_pool_is_empty+0x14>)
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20006b10 	.word	0x20006b10

08004534 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
 800453e:	460b      	mov	r3, r1
 8004540:	80bb      	strh	r3, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d81c      	bhi.n	8004586 <pbuf_alloc+0x52>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <pbuf_alloc+0x20>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004569 	.word	0x08004569
 8004558:	0800456f 	.word	0x0800456f
 800455c:	08004575 	.word	0x08004575
 8004560:	0800457b 	.word	0x0800457b
 8004564:	08004581 	.word	0x08004581
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004568:	2336      	movs	r3, #54	; 0x36
 800456a:	82fb      	strh	r3, [r7, #22]
    break;
 800456c:	e014      	b.n	8004598 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800456e:	2322      	movs	r3, #34	; 0x22
 8004570:	82fb      	strh	r3, [r7, #22]
    break;
 8004572:	e011      	b.n	8004598 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004574:	230e      	movs	r3, #14
 8004576:	82fb      	strh	r3, [r7, #22]
    break;
 8004578:	e00e      	b.n	8004598 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800457a:	2300      	movs	r3, #0
 800457c:	82fb      	strh	r3, [r7, #22]
    break;
 800457e:	e00b      	b.n	8004598 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	82fb      	strh	r3, [r7, #22]
    break;
 8004584:	e008      	b.n	8004598 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004586:	4ba5      	ldr	r3, [pc, #660]	; (800481c <pbuf_alloc+0x2e8>)
 8004588:	f44f 728b 	mov.w	r2, #278	; 0x116
 800458c:	49a4      	ldr	r1, [pc, #656]	; (8004820 <pbuf_alloc+0x2ec>)
 800458e:	48a5      	ldr	r0, [pc, #660]	; (8004824 <pbuf_alloc+0x2f0>)
 8004590:	f008 fe14 	bl	800d1bc <iprintf>
    return NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	e15d      	b.n	8004854 <pbuf_alloc+0x320>
  }

  switch (type) {
 8004598:	79bb      	ldrb	r3, [r7, #6]
 800459a:	2b03      	cmp	r3, #3
 800459c:	f200 8134 	bhi.w	8004808 <pbuf_alloc+0x2d4>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <pbuf_alloc+0x74>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	08004749 	.word	0x08004749
 80045ac:	080047d5 	.word	0x080047d5
 80045b0:	080047d5 	.word	0x080047d5
 80045b4:	080045b9 	.word	0x080045b9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80045b8:	200a      	movs	r0, #10
 80045ba:	f7ff fdaf 	bl	800411c <memp_malloc>
 80045be:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80045c6:	f7ff ffa9 	bl	800451c <pbuf_pool_is_empty>
      return NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e142      	b.n	8004854 <pbuf_alloc+0x320>
    }
    p->type = type;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	79ba      	ldrb	r2, [r7, #6]
 80045d2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80045da:	8afb      	ldrh	r3, [r7, #22]
 80045dc:	3310      	adds	r3, #16
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	3303      	adds	r3, #3
 80045e4:	f023 0303 	bic.w	r3, r3, #3
 80045e8:	461a      	mov	r2, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <pbuf_alloc+0xd4>
 80045fa:	4b88      	ldr	r3, [pc, #544]	; (800481c <pbuf_alloc+0x2e8>)
 80045fc:	f240 1229 	movw	r2, #297	; 0x129
 8004600:	4989      	ldr	r1, [pc, #548]	; (8004828 <pbuf_alloc+0x2f4>)
 8004602:	4888      	ldr	r0, [pc, #544]	; (8004824 <pbuf_alloc+0x2f0>)
 8004604:	f008 fdda 	bl	800d1bc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	88ba      	ldrh	r2, [r7, #4]
 800460c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800460e:	8afb      	ldrh	r3, [r7, #22]
 8004610:	3303      	adds	r3, #3
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800461a:	88bb      	ldrh	r3, [r7, #4]
 800461c:	4293      	cmp	r3, r2
 800461e:	bf28      	it	cs
 8004620:	4613      	movcs	r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	8952      	ldrh	r2, [r2, #10]
 8004630:	441a      	add	r2, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004638:	429a      	cmp	r2, r3
 800463a:	d906      	bls.n	800464a <pbuf_alloc+0x116>
 800463c:	4b77      	ldr	r3, [pc, #476]	; (800481c <pbuf_alloc+0x2e8>)
 800463e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8004642:	497a      	ldr	r1, [pc, #488]	; (800482c <pbuf_alloc+0x2f8>)
 8004644:	4877      	ldr	r0, [pc, #476]	; (8004824 <pbuf_alloc+0x2f0>)
 8004646:	f008 fdb9 	bl	800d1bc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800464a:	8afb      	ldrh	r3, [r7, #22]
 800464c:	3303      	adds	r3, #3
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004656:	d106      	bne.n	8004666 <pbuf_alloc+0x132>
 8004658:	4b70      	ldr	r3, [pc, #448]	; (800481c <pbuf_alloc+0x2e8>)
 800465a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800465e:	4974      	ldr	r1, [pc, #464]	; (8004830 <pbuf_alloc+0x2fc>)
 8004660:	4870      	ldr	r0, [pc, #448]	; (8004824 <pbuf_alloc+0x2f0>)
 8004662:	f008 fdab 	bl	800d1bc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2201      	movs	r2, #1
 800466a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004670:	88bb      	ldrh	r3, [r7, #4]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	8952      	ldrh	r2, [r2, #10]
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800467a:	e061      	b.n	8004740 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800467c:	200a      	movs	r0, #10
 800467e:	f7ff fd4d 	bl	800411c <memp_malloc>
 8004682:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800468a:	f7ff ff47 	bl	800451c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800468e:	69f8      	ldr	r0, [r7, #28]
 8004690:	f000 fac2 	bl	8004c18 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	e0dd      	b.n	8004854 <pbuf_alloc+0x320>
      }
      q->type = type;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	79ba      	ldrb	r2, [r7, #6]
 800469c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046b6:	4293      	cmp	r3, r2
 80046b8:	dd06      	ble.n	80046c8 <pbuf_alloc+0x194>
 80046ba:	4b58      	ldr	r3, [pc, #352]	; (800481c <pbuf_alloc+0x2e8>)
 80046bc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80046c0:	495c      	ldr	r1, [pc, #368]	; (8004834 <pbuf_alloc+0x300>)
 80046c2:	4858      	ldr	r0, [pc, #352]	; (8004824 <pbuf_alloc+0x2f0>)
 80046c4:	f008 fd7a 	bl	800d1bc <iprintf>
      q->tot_len = (u16_t)rem_len;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80046d8:	bf28      	it	cs
 80046da:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f103 0210 	add.w	r2, r3, #16
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d006      	beq.n	8004708 <pbuf_alloc+0x1d4>
 80046fa:	4b48      	ldr	r3, [pc, #288]	; (800481c <pbuf_alloc+0x2e8>)
 80046fc:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8004700:	494d      	ldr	r1, [pc, #308]	; (8004838 <pbuf_alloc+0x304>)
 8004702:	4848      	ldr	r0, [pc, #288]	; (8004824 <pbuf_alloc+0x2f0>)
 8004704:	f008 fd5a 	bl	800d1bc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	8952      	ldrh	r2, [r2, #10]
 8004710:	441a      	add	r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004718:	429a      	cmp	r2, r3
 800471a:	d906      	bls.n	800472a <pbuf_alloc+0x1f6>
 800471c:	4b3f      	ldr	r3, [pc, #252]	; (800481c <pbuf_alloc+0x2e8>)
 800471e:	f240 1255 	movw	r2, #341	; 0x155
 8004722:	4942      	ldr	r1, [pc, #264]	; (800482c <pbuf_alloc+0x2f8>)
 8004724:	483f      	ldr	r0, [pc, #252]	; (8004824 <pbuf_alloc+0x2f0>)
 8004726:	f008 fd49 	bl	800d1bc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	895b      	ldrh	r3, [r3, #10]
 8004734:	461a      	mov	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	dc9a      	bgt.n	800467c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8004746:	e07e      	b.n	8004846 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004748:	8afb      	ldrh	r3, [r7, #22]
 800474a:	3313      	adds	r3, #19
 800474c:	b29b      	uxth	r3, r3
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	b29a      	uxth	r2, r3
 8004754:	88bb      	ldrh	r3, [r7, #4]
 8004756:	3303      	adds	r3, #3
 8004758:	b29b      	uxth	r3, r3
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	b29b      	uxth	r3, r3
 8004760:	4413      	add	r3, r2
 8004762:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8004764:	897a      	ldrh	r2, [r7, #10]
 8004766:	88bb      	ldrh	r3, [r7, #4]
 8004768:	3303      	adds	r3, #3
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	429a      	cmp	r2, r3
 8004770:	d201      	bcs.n	8004776 <pbuf_alloc+0x242>
        return NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	e06e      	b.n	8004854 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fb71 	bl	8003e60 <mem_malloc>
 800477e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <pbuf_alloc+0x256>
      return NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	e064      	b.n	8004854 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800478a:	8afb      	ldrh	r3, [r7, #22]
 800478c:	3310      	adds	r3, #16
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	3303      	adds	r3, #3
 8004794:	f023 0303 	bic.w	r3, r3, #3
 8004798:	461a      	mov	r2, r3
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	88ba      	ldrh	r2, [r7, #4]
 80047a2:	811a      	strh	r2, [r3, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	891a      	ldrh	r2, [r3, #8]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	79ba      	ldrb	r2, [r7, #6]
 80047b6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03f      	beq.n	8004844 <pbuf_alloc+0x310>
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <pbuf_alloc+0x2e8>)
 80047c6:	f240 1277 	movw	r2, #375	; 0x177
 80047ca:	491c      	ldr	r1, [pc, #112]	; (800483c <pbuf_alloc+0x308>)
 80047cc:	4815      	ldr	r0, [pc, #84]	; (8004824 <pbuf_alloc+0x2f0>)
 80047ce:	f008 fcf5 	bl	800d1bc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80047d2:	e037      	b.n	8004844 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80047d4:	2009      	movs	r0, #9
 80047d6:	f7ff fca1 	bl	800411c <memp_malloc>
 80047da:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e036      	b.n	8004854 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	88ba      	ldrh	r2, [r7, #4]
 80047f0:	811a      	strh	r2, [r3, #8]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	891a      	ldrh	r2, [r3, #8]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	79ba      	ldrb	r2, [r7, #6]
 8004804:	731a      	strb	r2, [r3, #12]
    break;
 8004806:	e01e      	b.n	8004846 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004808:	4b04      	ldr	r3, [pc, #16]	; (800481c <pbuf_alloc+0x2e8>)
 800480a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800480e:	490c      	ldr	r1, [pc, #48]	; (8004840 <pbuf_alloc+0x30c>)
 8004810:	4804      	ldr	r0, [pc, #16]	; (8004824 <pbuf_alloc+0x2f0>)
 8004812:	f008 fcd3 	bl	800d1bc <iprintf>
    return NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	e01c      	b.n	8004854 <pbuf_alloc+0x320>
 800481a:	bf00      	nop
 800481c:	0800e394 	.word	0x0800e394
 8004820:	0800e3c4 	.word	0x0800e3c4
 8004824:	0800e3e0 	.word	0x0800e3e0
 8004828:	0800e408 	.word	0x0800e408
 800482c:	0800e438 	.word	0x0800e438
 8004830:	0800e46c 	.word	0x0800e46c
 8004834:	0800e4a0 	.word	0x0800e4a0
 8004838:	0800e4b4 	.word	0x0800e4b4
 800483c:	0800e4e4 	.word	0x0800e4e4
 8004840:	0800e510 	.word	0x0800e510
    break;
 8004844:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2201      	movs	r2, #1
 800484a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2200      	movs	r2, #0
 8004850:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004852:	69fb      	ldr	r3, [r7, #28]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4603      	mov	r3, r0
 8004866:	71fb      	strb	r3, [r7, #7]
 8004868:	460b      	mov	r3, r1
 800486a:	80bb      	strh	r3, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d81b      	bhi.n	80048ae <pbuf_alloced_custom+0x52>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <pbuf_alloced_custom+0x20>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	08004891 	.word	0x08004891
 8004880:	08004897 	.word	0x08004897
 8004884:	0800489d 	.word	0x0800489d
 8004888:	080048a3 	.word	0x080048a3
 800488c:	080048a9 	.word	0x080048a9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004890:	2336      	movs	r3, #54	; 0x36
 8004892:	81fb      	strh	r3, [r7, #14]
    break;
 8004894:	e014      	b.n	80048c0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004896:	2322      	movs	r3, #34	; 0x22
 8004898:	81fb      	strh	r3, [r7, #14]
    break;
 800489a:	e011      	b.n	80048c0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800489c:	230e      	movs	r3, #14
 800489e:	81fb      	strh	r3, [r7, #14]
    break;
 80048a0:	e00e      	b.n	80048c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80048a2:	2300      	movs	r3, #0
 80048a4:	81fb      	strh	r3, [r7, #14]
    break;
 80048a6:	e00b      	b.n	80048c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	81fb      	strh	r3, [r7, #14]
    break;
 80048ac:	e008      	b.n	80048c0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <pbuf_alloced_custom+0xc8>)
 80048b0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80048b4:	491c      	ldr	r1, [pc, #112]	; (8004928 <pbuf_alloced_custom+0xcc>)
 80048b6:	481d      	ldr	r0, [pc, #116]	; (800492c <pbuf_alloced_custom+0xd0>)
 80048b8:	f008 fc80 	bl	800d1bc <iprintf>
    return NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	e02d      	b.n	800491c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80048c0:	89fb      	ldrh	r3, [r7, #14]
 80048c2:	3303      	adds	r3, #3
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	88bb      	ldrh	r3, [r7, #4]
 80048ca:	441a      	add	r2, r3
 80048cc:	8bbb      	ldrh	r3, [r7, #28]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d901      	bls.n	80048d6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e022      	b.n	800491c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	3303      	adds	r3, #3
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	441a      	add	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	e002      	b.n	80048fa <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2202      	movs	r2, #2
 80048fe:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	88ba      	ldrh	r2, [r7, #4]
 8004904:	811a      	strh	r2, [r3, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	891a      	ldrh	r2, [r3, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	79ba      	ldrb	r2, [r7, #6]
 8004912:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800491a:	683b      	ldr	r3, [r7, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	0800e394 	.word	0x0800e394
 8004928:	0800e52c 	.word	0x0800e52c
 800492c:	0800e3e0 	.word	0x0800e3e0

08004930 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <pbuf_realloc+0x20>
 8004942:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <pbuf_realloc+0x140>)
 8004944:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004948:	494a      	ldr	r1, [pc, #296]	; (8004a74 <pbuf_realloc+0x144>)
 800494a:	484b      	ldr	r0, [pc, #300]	; (8004a78 <pbuf_realloc+0x148>)
 800494c:	f008 fc36 	bl	800d1bc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7b1b      	ldrb	r3, [r3, #12]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d012      	beq.n	800497e <pbuf_realloc+0x4e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7b1b      	ldrb	r3, [r3, #12]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d00e      	beq.n	800497e <pbuf_realloc+0x4e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7b1b      	ldrb	r3, [r3, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <pbuf_realloc+0x4e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	7b1b      	ldrb	r3, [r3, #12]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d006      	beq.n	800497e <pbuf_realloc+0x4e>
 8004970:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <pbuf_realloc+0x140>)
 8004972:	f240 12f7 	movw	r2, #503	; 0x1f7
 8004976:	4941      	ldr	r1, [pc, #260]	; (8004a7c <pbuf_realloc+0x14c>)
 8004978:	483f      	ldr	r0, [pc, #252]	; (8004a78 <pbuf_realloc+0x148>)
 800497a:	f008 fc1f 	bl	800d1bc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	891b      	ldrh	r3, [r3, #8]
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	429a      	cmp	r2, r3
 8004986:	d26f      	bcs.n	8004a68 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	8912      	ldrh	r2, [r2, #8]
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	827b      	strh	r3, [r7, #18]
  q = p;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800499a:	e025      	b.n	80049e8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	895b      	ldrh	r3, [r3, #10]
 80049a0:	8a7a      	ldrh	r2, [r7, #18]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049ac:	4293      	cmp	r3, r2
 80049ae:	dd06      	ble.n	80049be <pbuf_realloc+0x8e>
 80049b0:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <pbuf_realloc+0x140>)
 80049b2:	f240 220b 	movw	r2, #523	; 0x20b
 80049b6:	4932      	ldr	r1, [pc, #200]	; (8004a80 <pbuf_realloc+0x150>)
 80049b8:	482f      	ldr	r0, [pc, #188]	; (8004a78 <pbuf_realloc+0x148>)
 80049ba:	f008 fbff 	bl	800d1bc <iprintf>
    q->tot_len += (u16_t)grow;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	891a      	ldrh	r2, [r3, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <pbuf_realloc+0xb8>
 80049da:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <pbuf_realloc+0x140>)
 80049dc:	f240 220f 	movw	r2, #527	; 0x20f
 80049e0:	4928      	ldr	r1, [pc, #160]	; (8004a84 <pbuf_realloc+0x154>)
 80049e2:	4825      	ldr	r0, [pc, #148]	; (8004a78 <pbuf_realloc+0x148>)
 80049e4:	f008 fbea 	bl	800d1bc <iprintf>
  while (rem_len > q->len) {
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	895b      	ldrh	r3, [r3, #10]
 80049ec:	8a7a      	ldrh	r2, [r7, #18]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d8d4      	bhi.n	800499c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	7b1b      	ldrb	r3, [r3, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d122      	bne.n	8004a40 <pbuf_realloc+0x110>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	895b      	ldrh	r3, [r3, #10]
 80049fe:	8a7a      	ldrh	r2, [r7, #18]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d01d      	beq.n	8004a40 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	7b5b      	ldrb	r3, [r3, #13]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d117      	bne.n	8004a40 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	461a      	mov	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	8a7b      	ldrh	r3, [r7, #18]
 8004a1e:	4413      	add	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	4619      	mov	r1, r3
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f7ff f93f 	bl	8003ca8 <mem_trim>
 8004a2a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <pbuf_realloc+0x110>
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <pbuf_realloc+0x140>)
 8004a34:	f240 221d 	movw	r2, #541	; 0x21d
 8004a38:	4913      	ldr	r1, [pc, #76]	; (8004a88 <pbuf_realloc+0x158>)
 8004a3a:	480f      	ldr	r0, [pc, #60]	; (8004a78 <pbuf_realloc+0x148>)
 8004a3c:	f008 fbbe 	bl	800d1bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	8a7a      	ldrh	r2, [r7, #18]
 8004a44:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	895a      	ldrh	r2, [r3, #10]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f8dc 	bl	8004c18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e000      	b.n	8004a6a <pbuf_realloc+0x13a>
    return;
 8004a68:	bf00      	nop

}
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	0800e394 	.word	0x0800e394
 8004a74:	0800e550 	.word	0x0800e550
 8004a78:	0800e3e0 	.word	0x0800e3e0
 8004a7c:	0800e568 	.word	0x0800e568
 8004a80:	0800e584 	.word	0x0800e584
 8004a84:	0800e598 	.word	0x0800e598
 8004a88:	0800e5b0 	.word	0x0800e5b0

08004a8c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	807b      	strh	r3, [r7, #2]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <pbuf_header_impl+0x24>
 8004aa2:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <pbuf_header_impl+0x130>)
 8004aa4:	f240 223f 	movw	r2, #575	; 0x23f
 8004aa8:	4945      	ldr	r1, [pc, #276]	; (8004bc0 <pbuf_header_impl+0x134>)
 8004aaa:	4846      	ldr	r0, [pc, #280]	; (8004bc4 <pbuf_header_impl+0x138>)
 8004aac:	f008 fb86 	bl	800d1bc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <pbuf_header_impl+0x32>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <pbuf_header_impl+0x36>
    return 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e078      	b.n	8004bb4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004ac2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da10      	bge.n	8004aec <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004aca:	887b      	ldrh	r3, [r7, #2]
 8004acc:	425b      	negs	r3, r3
 8004ace:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	895b      	ldrh	r3, [r3, #10]
 8004ad4:	89fa      	ldrh	r2, [r7, #14]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d90a      	bls.n	8004af0 <pbuf_header_impl+0x64>
 8004ada:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <pbuf_header_impl+0x130>)
 8004adc:	f240 2247 	movw	r2, #583	; 0x247
 8004ae0:	4939      	ldr	r1, [pc, #228]	; (8004bc8 <pbuf_header_impl+0x13c>)
 8004ae2:	4838      	ldr	r0, [pc, #224]	; (8004bc4 <pbuf_header_impl+0x138>)
 8004ae4:	f008 fb6a 	bl	800d1bc <iprintf>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e063      	b.n	8004bb4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	7b1b      	ldrb	r3, [r3, #12]
 8004af4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004afc:	89bb      	ldrh	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <pbuf_header_impl+0x7c>
 8004b02:	89bb      	ldrh	r3, [r7, #12]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d112      	bne.n	8004b2e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b10:	425b      	negs	r3, r3
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3310      	adds	r3, #16
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d238      	bcs.n	8004b96 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e042      	b.n	8004bb4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004b2e:	89bb      	ldrh	r3, [r7, #12]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d002      	beq.n	8004b3a <pbuf_header_impl+0xae>
 8004b34:	89bb      	ldrh	r3, [r7, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d124      	bne.n	8004b84 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da0d      	bge.n	8004b5e <pbuf_header_impl+0xd2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	895b      	ldrh	r3, [r3, #10]
 8004b46:	89fa      	ldrh	r2, [r7, #14]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d808      	bhi.n	8004b5e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b54:	425b      	negs	r3, r3
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	e011      	b.n	8004b82 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004b5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dd0b      	ble.n	8004b7e <pbuf_header_impl+0xf2>
 8004b66:	787b      	ldrb	r3, [r7, #1]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b74:	425b      	negs	r3, r3
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	e001      	b.n	8004b82 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e018      	b.n	8004bb4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004b82:	e008      	b.n	8004b96 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <pbuf_header_impl+0x130>)
 8004b86:	f240 2277 	movw	r2, #631	; 0x277
 8004b8a:	4910      	ldr	r1, [pc, #64]	; (8004bcc <pbuf_header_impl+0x140>)
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <pbuf_header_impl+0x138>)
 8004b8e:	f008 fb15 	bl	800d1bc <iprintf>
    return 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00e      	b.n	8004bb4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	895a      	ldrh	r2, [r3, #10]
 8004b9a:	887b      	ldrh	r3, [r7, #2]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	891a      	ldrh	r2, [r3, #8]
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	4413      	add	r3, r2
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	0800e394 	.word	0x0800e394
 8004bc0:	0800e5cc 	.word	0x0800e5cc
 8004bc4:	0800e3e0 	.word	0x0800e3e0
 8004bc8:	0800e5d8 	.word	0x0800e5d8
 8004bcc:	0800e5f8 	.word	0x0800e5f8

08004bd0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004bdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004be0:	2200      	movs	r2, #0
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff51 	bl	8004a8c <pbuf_header_impl>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff3f 	bl	8004a8c <pbuf_header_impl>
 8004c0e:	4603      	mov	r3, r0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <pbuf_free+0x22>
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <pbuf_free+0x110>)
 8004c2e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004c32:	493e      	ldr	r1, [pc, #248]	; (8004d2c <pbuf_free+0x114>)
 8004c34:	483e      	ldr	r0, [pc, #248]	; (8004d30 <pbuf_free+0x118>)
 8004c36:	f008 fac1 	bl	800d1bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e070      	b.n	8004d20 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7b1b      	ldrb	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <pbuf_free+0x54>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7b1b      	ldrb	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d00e      	beq.n	8004c6c <pbuf_free+0x54>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7b1b      	ldrb	r3, [r3, #12]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d00a      	beq.n	8004c6c <pbuf_free+0x54>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7b1b      	ldrb	r3, [r3, #12]
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d006      	beq.n	8004c6c <pbuf_free+0x54>
 8004c5e:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <pbuf_free+0x110>)
 8004c60:	f240 22de 	movw	r2, #734	; 0x2de
 8004c64:	4933      	ldr	r1, [pc, #204]	; (8004d34 <pbuf_free+0x11c>)
 8004c66:	4832      	ldr	r0, [pc, #200]	; (8004d30 <pbuf_free+0x118>)
 8004c68:	f008 faa8 	bl	800d1bc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004c70:	e052      	b.n	8004d18 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	89db      	ldrh	r3, [r3, #14]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <pbuf_free+0x70>
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <pbuf_free+0x110>)
 8004c7c:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004c80:	492d      	ldr	r1, [pc, #180]	; (8004d38 <pbuf_free+0x120>)
 8004c82:	482b      	ldr	r0, [pc, #172]	; (8004d30 <pbuf_free+0x118>)
 8004c84:	f008 fa9a 	bl	800d1bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	89db      	ldrh	r3, [r3, #14]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	81da      	strh	r2, [r3, #14]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	89db      	ldrh	r3, [r3, #14]
 8004c98:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004c9a:	8abb      	ldrh	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d139      	bne.n	8004d14 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7b1b      	ldrb	r3, [r3, #12]
 8004caa:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7b5b      	ldrb	r3, [r3, #13]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d011      	beq.n	8004cdc <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <pbuf_free+0xba>
 8004cc4:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <pbuf_free+0x110>)
 8004cc6:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004cca:	491c      	ldr	r1, [pc, #112]	; (8004d3c <pbuf_free+0x124>)
 8004ccc:	4818      	ldr	r0, [pc, #96]	; (8004d30 <pbuf_free+0x118>)
 8004cce:	f008 fa75 	bl	800d1bc <iprintf>
        pc->custom_free_function(p);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	e015      	b.n	8004d08 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004cdc:	89fb      	ldrh	r3, [r7, #14]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d104      	bne.n	8004cec <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	200a      	movs	r0, #10
 8004ce6:	f7ff fa65 	bl	80041b4 <memp_free>
 8004cea:	e00d      	b.n	8004d08 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d002      	beq.n	8004cf8 <pbuf_free+0xe0>
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d104      	bne.n	8004d02 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	2009      	movs	r0, #9
 8004cfc:	f7ff fa5a 	bl	80041b4 <memp_free>
 8004d00:	e002      	b.n	8004d08 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fe ff6e 	bl	8003be4 <mem_free>
        }
      }
      count++;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e001      	b.n	8004d18 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1a9      	bne.n	8004c72 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	0800e394 	.word	0x0800e394
 8004d2c:	0800e5cc 	.word	0x0800e5cc
 8004d30:	0800e3e0 	.word	0x0800e3e0
 8004d34:	0800e608 	.word	0x0800e608
 8004d38:	0800e620 	.word	0x0800e620
 8004d3c:	0800e638 	.word	0x0800e638

08004d40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004d4c:	e005      	b.n	8004d5a <pbuf_clen+0x1a>
    ++len;
 8004d4e:	89fb      	ldrh	r3, [r7, #14]
 8004d50:	3301      	adds	r3, #1
 8004d52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f6      	bne.n	8004d4e <pbuf_clen+0xe>
  }
  return len;
 8004d60:	89fb      	ldrh	r3, [r7, #14]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	89db      	ldrh	r3, [r3, #14]
 8004d82:	3301      	adds	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	89db      	ldrh	r3, [r3, #14]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <pbuf_ref+0x30>
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <pbuf_ref+0x38>)
 8004d94:	f240 3239 	movw	r2, #825	; 0x339
 8004d98:	4904      	ldr	r1, [pc, #16]	; (8004dac <pbuf_ref+0x3c>)
 8004d9a:	4805      	ldr	r0, [pc, #20]	; (8004db0 <pbuf_ref+0x40>)
 8004d9c:	f008 fa0e 	bl	800d1bc <iprintf>
  }
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	0800e394 	.word	0x0800e394
 8004dac:	0800e65c 	.word	0x0800e65c
 8004db0:	0800e3e0 	.word	0x0800e3e0

08004db4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <pbuf_cat+0x16>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <pbuf_cat+0x26>
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <pbuf_cat+0x98>)
 8004dcc:	f240 324d 	movw	r2, #845	; 0x34d
 8004dd0:	491f      	ldr	r1, [pc, #124]	; (8004e50 <pbuf_cat+0x9c>)
 8004dd2:	4820      	ldr	r0, [pc, #128]	; (8004e54 <pbuf_cat+0xa0>)
 8004dd4:	f008 f9f2 	bl	800d1bc <iprintf>
 8004dd8:	e034      	b.n	8004e44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e00a      	b.n	8004df6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	891a      	ldrh	r2, [r3, #8]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	891b      	ldrh	r3, [r3, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	891a      	ldrh	r2, [r3, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	895b      	ldrh	r3, [r3, #10]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d006      	beq.n	8004e18 <pbuf_cat+0x64>
 8004e0a:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <pbuf_cat+0x98>)
 8004e0c:	f240 3255 	movw	r2, #853	; 0x355
 8004e10:	4911      	ldr	r1, [pc, #68]	; (8004e58 <pbuf_cat+0xa4>)
 8004e12:	4810      	ldr	r0, [pc, #64]	; (8004e54 <pbuf_cat+0xa0>)
 8004e14:	f008 f9d2 	bl	800d1bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <pbuf_cat+0x7a>
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <pbuf_cat+0x98>)
 8004e22:	f240 3256 	movw	r2, #854	; 0x356
 8004e26:	490d      	ldr	r1, [pc, #52]	; (8004e5c <pbuf_cat+0xa8>)
 8004e28:	480a      	ldr	r0, [pc, #40]	; (8004e54 <pbuf_cat+0xa0>)
 8004e2a:	f008 f9c7 	bl	800d1bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	891a      	ldrh	r2, [r3, #8]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	891b      	ldrh	r3, [r3, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	0800e394 	.word	0x0800e394
 8004e50:	0800e670 	.word	0x0800e670
 8004e54:	0800e3e0 	.word	0x0800e3e0
 8004e58:	0800e6a8 	.word	0x0800e6a8
 8004e5c:	0800e6d8 	.word	0x0800e6d8

08004e60 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ffa1 	bl	8004db4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004e72:	6838      	ldr	r0, [r7, #0]
 8004e74:	f7ff ff7c 	bl	8004d70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	81fb      	strh	r3, [r7, #14]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <pbuf_copy+0x2a>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <pbuf_copy+0x2a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	891a      	ldrh	r2, [r3, #8]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	891b      	ldrh	r3, [r3, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d209      	bcs.n	8004ebe <pbuf_copy+0x3e>
 8004eaa:	4b54      	ldr	r3, [pc, #336]	; (8004ffc <pbuf_copy+0x17c>)
 8004eac:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004eb0:	4953      	ldr	r1, [pc, #332]	; (8005000 <pbuf_copy+0x180>)
 8004eb2:	4854      	ldr	r0, [pc, #336]	; (8005004 <pbuf_copy+0x184>)
 8004eb4:	f008 f982 	bl	800d1bc <iprintf>
 8004eb8:	f06f 030f 	mvn.w	r3, #15
 8004ebc:	e099      	b.n	8004ff2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	895b      	ldrh	r3, [r3, #10]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	89bb      	ldrh	r3, [r7, #12]
 8004ed0:	1acb      	subs	r3, r1, r3
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	db05      	blt.n	8004ee2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	895a      	ldrh	r2, [r3, #10]
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	817b      	strh	r3, [r7, #10]
 8004ee0:	e004      	b.n	8004eec <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	895a      	ldrh	r2, [r3, #10]
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	89fb      	ldrh	r3, [r7, #14]
 8004ef2:	18d0      	adds	r0, r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	89bb      	ldrh	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	897a      	ldrh	r2, [r7, #10]
 8004efe:	4619      	mov	r1, r3
 8004f00:	f008 f949 	bl	800d196 <memcpy>
    offset_to += len;
 8004f04:	89fa      	ldrh	r2, [r7, #14]
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	4413      	add	r3, r2
 8004f0a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8004f0c:	89ba      	ldrh	r2, [r7, #12]
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	4413      	add	r3, r2
 8004f12:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	895b      	ldrh	r3, [r3, #10]
 8004f18:	89fa      	ldrh	r2, [r7, #14]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d906      	bls.n	8004f2c <pbuf_copy+0xac>
 8004f1e:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <pbuf_copy+0x17c>)
 8004f20:	f240 32cd 	movw	r2, #973	; 0x3cd
 8004f24:	4938      	ldr	r1, [pc, #224]	; (8005008 <pbuf_copy+0x188>)
 8004f26:	4837      	ldr	r0, [pc, #220]	; (8005004 <pbuf_copy+0x184>)
 8004f28:	f008 f948 	bl	800d1bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	895b      	ldrh	r3, [r3, #10]
 8004f30:	89ba      	ldrh	r2, [r7, #12]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d906      	bls.n	8004f44 <pbuf_copy+0xc4>
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <pbuf_copy+0x17c>)
 8004f38:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004f3c:	4933      	ldr	r1, [pc, #204]	; (800500c <pbuf_copy+0x18c>)
 8004f3e:	4831      	ldr	r0, [pc, #196]	; (8005004 <pbuf_copy+0x184>)
 8004f40:	f008 f93c 	bl	800d1bc <iprintf>
    if (offset_from >= p_from->len) {
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	895b      	ldrh	r3, [r3, #10]
 8004f48:	89ba      	ldrh	r2, [r7, #12]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d304      	bcc.n	8004f58 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	895b      	ldrh	r3, [r3, #10]
 8004f5c:	89fa      	ldrh	r2, [r7, #14]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d114      	bne.n	8004f8c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10c      	bne.n	8004f8c <pbuf_copy+0x10c>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d009      	beq.n	8004f8c <pbuf_copy+0x10c>
 8004f78:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <pbuf_copy+0x17c>)
 8004f7a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004f7e:	4924      	ldr	r1, [pc, #144]	; (8005010 <pbuf_copy+0x190>)
 8004f80:	4820      	ldr	r0, [pc, #128]	; (8005004 <pbuf_copy+0x184>)
 8004f82:	f008 f91b 	bl	800d1bc <iprintf>
 8004f86:	f06f 030f 	mvn.w	r3, #15
 8004f8a:	e032      	b.n	8004ff2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d013      	beq.n	8004fba <pbuf_copy+0x13a>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	895a      	ldrh	r2, [r3, #10]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	891b      	ldrh	r3, [r3, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d10d      	bne.n	8004fba <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <pbuf_copy+0x13a>
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <pbuf_copy+0x17c>)
 8004fa8:	f240 32de 	movw	r2, #990	; 0x3de
 8004fac:	4919      	ldr	r1, [pc, #100]	; (8005014 <pbuf_copy+0x194>)
 8004fae:	4815      	ldr	r0, [pc, #84]	; (8005004 <pbuf_copy+0x184>)
 8004fb0:	f008 f904 	bl	800d1bc <iprintf>
 8004fb4:	f06f 0305 	mvn.w	r3, #5
 8004fb8:	e01b      	b.n	8004ff2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <pbuf_copy+0x168>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	895a      	ldrh	r2, [r3, #10]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	891b      	ldrh	r3, [r3, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d10d      	bne.n	8004fe8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <pbuf_copy+0x168>
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <pbuf_copy+0x17c>)
 8004fd6:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004fda:	490e      	ldr	r1, [pc, #56]	; (8005014 <pbuf_copy+0x194>)
 8004fdc:	4809      	ldr	r0, [pc, #36]	; (8005004 <pbuf_copy+0x184>)
 8004fde:	f008 f8ed 	bl	800d1bc <iprintf>
 8004fe2:	f06f 0305 	mvn.w	r3, #5
 8004fe6:	e004      	b.n	8004ff2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f47f af67 	bne.w	8004ebe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	0800e394 	.word	0x0800e394
 8005000:	0800e724 	.word	0x0800e724
 8005004:	0800e3e0 	.word	0x0800e3e0
 8005008:	0800e754 	.word	0x0800e754
 800500c:	0800e76c 	.word	0x0800e76c
 8005010:	0800e788 	.word	0x0800e788
 8005014:	0800e798 	.word	0x0800e798

08005018 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	460b      	mov	r3, r1
 8005028:	80fb      	strh	r3, [r7, #6]
 800502a:	4613      	mov	r3, r2
 800502c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <pbuf_copy_partial+0x32>
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <pbuf_copy_partial+0xe4>)
 800503a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800503e:	4930      	ldr	r1, [pc, #192]	; (8005100 <pbuf_copy_partial+0xe8>)
 8005040:	4830      	ldr	r0, [pc, #192]	; (8005104 <pbuf_copy_partial+0xec>)
 8005042:	f008 f8bb 	bl	800d1bc <iprintf>
 8005046:	2300      	movs	r3, #0
 8005048:	e054      	b.n	80050f4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <pbuf_copy_partial+0x4a>
 8005050:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <pbuf_copy_partial+0xe4>)
 8005052:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005056:	492c      	ldr	r1, [pc, #176]	; (8005108 <pbuf_copy_partial+0xf0>)
 8005058:	482a      	ldr	r0, [pc, #168]	; (8005104 <pbuf_copy_partial+0xec>)
 800505a:	f008 f8af 	bl	800d1bc <iprintf>
 800505e:	2300      	movs	r3, #0
 8005060:	e048      	b.n	80050f4 <pbuf_copy_partial+0xdc>

  left = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <pbuf_copy_partial+0x5a>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <pbuf_copy_partial+0x5e>
    return 0;
 8005072:	2300      	movs	r3, #0
 8005074:	e03e      	b.n	80050f4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	e034      	b.n	80050e6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800507c:	88bb      	ldrh	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <pbuf_copy_partial+0x80>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	895b      	ldrh	r3, [r3, #10]
 8005086:	88ba      	ldrh	r2, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d305      	bcc.n	8005098 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	895b      	ldrh	r3, [r3, #10]
 8005090:	88ba      	ldrh	r2, [r7, #4]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	80bb      	strh	r3, [r7, #4]
 8005096:	e023      	b.n	80050e0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	895a      	ldrh	r2, [r3, #10]
 800509c:	88bb      	ldrh	r3, [r7, #4]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80050a2:	8b3a      	ldrh	r2, [r7, #24]
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d901      	bls.n	80050ae <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80050ae:	8b7b      	ldrh	r3, [r7, #26]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	18d0      	adds	r0, r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	88bb      	ldrh	r3, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	8b3a      	ldrh	r2, [r7, #24]
 80050be:	4619      	mov	r1, r3
 80050c0:	f008 f869 	bl	800d196 <memcpy>
      copied_total += buf_copy_len;
 80050c4:	8afa      	ldrh	r2, [r7, #22]
 80050c6:	8b3b      	ldrh	r3, [r7, #24]
 80050c8:	4413      	add	r3, r2
 80050ca:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80050cc:	8b7a      	ldrh	r2, [r7, #26]
 80050ce:	8b3b      	ldrh	r3, [r7, #24]
 80050d0:	4413      	add	r3, r2
 80050d2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	8b3b      	ldrh	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <pbuf_copy_partial+0xda>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1c4      	bne.n	800507c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80050f2:	8afb      	ldrh	r3, [r7, #22]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800e394 	.word	0x0800e394
 8005100:	0800e7c4 	.word	0x0800e7c4
 8005104:	0800e3e0 	.word	0x0800e3e0
 8005108:	0800e7e4 	.word	0x0800e7e4

0800510c <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <raw_input_match+0x24>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <raw_input_match+0x20>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d110      	bne.n	800514e <raw_input_match+0x42>
          return 1;
 800512c:	2301      	movs	r3, #1
 800512e:	e00f      	b.n	8005150 <raw_input_match+0x44>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <raw_input_match+0x3e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <raw_input_match+0x3e>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <raw_input_match+0x50>)
 8005144:	695b      	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d101      	bne.n	800514e <raw_input_match+0x42>
      return 1;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <raw_input_match+0x44>
    }
  }

  return 0;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20003480 	.word	0x20003480

08005160 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <raw_input+0xd8>)
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	4b31      	ldr	r3, [pc, #196]	; (8005238 <raw_input+0xd8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f007 f8ef 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800517e:	4603      	mov	r3, r0
 8005180:	73bb      	strb	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	7a5b      	ldrb	r3, [r3, #9]
 8005188:	81bb      	strh	r3, [r7, #12]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
  pcb = raw_pcbs;
 800518e:	4b2b      	ldr	r3, [pc, #172]	; (800523c <raw_input+0xdc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	617b      	str	r3, [r7, #20]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8005194:	e045      	b.n	8005222 <raw_input+0xc2>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	7c1b      	ldrb	r3, [r3, #16]
 800519a:	461a      	mov	r2, r3
 800519c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d139      	bne.n	8005218 <raw_input+0xb8>
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	4619      	mov	r1, r3
 80051a8:	6978      	ldr	r0, [r7, #20]
 80051aa:	f7ff ffaf 	bl	800510c <raw_input_match>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <raw_input+0xb8>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d02d      	beq.n	8005218 <raw_input+0xb8>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60bb      	str	r3, [r7, #8]
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	695c      	ldr	r4, [r3, #20]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	6998      	ldr	r0, [r3, #24]
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <raw_input+0xe0>)
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6979      	ldr	r1, [r7, #20]
 80051d0:	47a0      	blx	r4
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d012      	beq.n	8005202 <raw_input+0xa2>
          /* receive function ate the packet */
          p = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
          eaten = 1;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
          if (prev != NULL) {
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d016      	beq.n	8005218 <raw_input+0xb8>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <raw_input+0xdc>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 80051fa:	4a10      	ldr	r2, [pc, #64]	; (800523c <raw_input+0xdc>)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e00a      	b.n	8005218 <raw_input+0xb8>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d005      	beq.n	8005218 <raw_input+0xb8>
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <raw_input+0xe4>)
 800520e:	22b6      	movs	r2, #182	; 0xb6
 8005210:	490d      	ldr	r1, [pc, #52]	; (8005248 <raw_input+0xe8>)
 8005212:	480e      	ldr	r0, [pc, #56]	; (800524c <raw_input+0xec>)
 8005214:	f007 ffd2 	bl	800d1bc <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	613b      	str	r3, [r7, #16]
    pcb = pcb->next;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	617b      	str	r3, [r7, #20]
  while ((eaten == 0) && (pcb != NULL)) {
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <raw_input+0xce>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1b3      	bne.n	8005196 <raw_input+0x36>
  }
  return eaten;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd90      	pop	{r4, r7, pc}
 8005238:	20003480 	.word	0x20003480
 800523c:	200000d4 	.word	0x200000d4
 8005240:	20003490 	.word	0x20003490
 8005244:	0800e8a0 	.word	0x0800e8a0
 8005248:	0800e8d0 	.word	0x0800e8d0
 800524c:	0800e91c 	.word	0x0800e91c

08005250 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01e      	beq.n	800529e <raw_netif_ip_addr_changed+0x4e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <raw_netif_ip_addr_changed+0x4e>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <raw_netif_ip_addr_changed+0x4e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d013      	beq.n	800529e <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <raw_netif_ip_addr_changed+0x5c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e00c      	b.n	8005298 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d103      	bne.n	8005292 <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ef      	bne.n	800527e <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	200000d4 	.word	0x200000d4

080052b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80052c4:	f000 ff80 	bl	80061c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <tcp_tmr+0x28>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <tcp_tmr+0x28>)
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <tcp_tmr+0x28>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80052e0:	f000 fcb2 	bl	8005c48 <tcp_slowtmr>
  }
}
 80052e4:	bf00      	nop
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	200000d8 	.word	0x200000d8

080052ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e00a      	b.n	8005312 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d102      	bne.n	800530c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f1      	bne.n	80052fc <tcp_remove_listener+0x10>
      }
   }
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <tcp_listen_closed+0x1a>
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <tcp_listen_closed+0x5c>)
 8005334:	22c0      	movs	r2, #192	; 0xc0
 8005336:	4913      	ldr	r1, [pc, #76]	; (8005384 <tcp_listen_closed+0x60>)
 8005338:	4813      	ldr	r0, [pc, #76]	; (8005388 <tcp_listen_closed+0x64>)
 800533a:	f007 ff3f 	bl	800d1bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7d1b      	ldrb	r3, [r3, #20]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d005      	beq.n	8005352 <tcp_listen_closed+0x2e>
 8005346:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <tcp_listen_closed+0x5c>)
 8005348:	22c1      	movs	r2, #193	; 0xc1
 800534a:	4910      	ldr	r1, [pc, #64]	; (800538c <tcp_listen_closed+0x68>)
 800534c:	480e      	ldr	r0, [pc, #56]	; (8005388 <tcp_listen_closed+0x64>)
 800534e:	f007 ff35 	bl	800d1bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005352:	2301      	movs	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	e00b      	b.n	8005370 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005358:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <tcp_listen_closed+0x6c>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ffc1 	bl	80052ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d9f0      	bls.n	8005358 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	0800e9e4 	.word	0x0800e9e4
 8005384:	0800ea14 	.word	0x0800ea14
 8005388:	0800ea20 	.word	0x0800ea20
 800538c:	0800ea48 	.word	0x0800ea48
 8005390:	0800fe60 	.word	0x0800fe60

08005394 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005394:	b5b0      	push	{r4, r5, r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d075      	beq.n	8005492 <tcp_close_shutdown+0xfe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7d1b      	ldrb	r3, [r3, #20]
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d003      	beq.n	80053b6 <tcp_close_shutdown+0x22>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7d1b      	ldrb	r3, [r3, #20]
 80053b2:	2b07      	cmp	r3, #7
 80053b4:	d16d      	bne.n	8005492 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <tcp_close_shutdown+0x34>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80053c6:	d064      	beq.n	8005492 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7e9b      	ldrb	r3, [r3, #26]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <tcp_close_shutdown+0x4e>
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <tcp_close_shutdown+0x1a8>)
 80053d6:	f240 120f 	movw	r2, #271	; 0x10f
 80053da:	4959      	ldr	r1, [pc, #356]	; (8005540 <tcp_close_shutdown+0x1ac>)
 80053dc:	4859      	ldr	r0, [pc, #356]	; (8005544 <tcp_close_shutdown+0x1b0>)
 80053de:	f007 feed 	bl	800d1bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053ea:	687c      	ldr	r4, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1d1d      	adds	r5, r3, #4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8adb      	ldrh	r3, [r3, #22]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	8b12      	ldrh	r2, [r2, #24]
 80053f8:	9201      	str	r2, [sp, #4]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	462b      	mov	r3, r5
 80053fe:	4622      	mov	r2, r4
 8005400:	f004 feec 	bl	800a1dc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 fa1d 	bl	8006844 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800540a:	4b4f      	ldr	r3, [pc, #316]	; (8005548 <tcp_close_shutdown+0x1b4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d105      	bne.n	8005420 <tcp_close_shutdown+0x8c>
 8005414:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <tcp_close_shutdown+0x1b4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4a4b      	ldr	r2, [pc, #300]	; (8005548 <tcp_close_shutdown+0x1b4>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e013      	b.n	8005448 <tcp_close_shutdown+0xb4>
 8005420:	4b49      	ldr	r3, [pc, #292]	; (8005548 <tcp_close_shutdown+0x1b4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e00c      	b.n	8005442 <tcp_close_shutdown+0xae>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d104      	bne.n	800543c <tcp_close_shutdown+0xa8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	e005      	b.n	8005448 <tcp_close_shutdown+0xb4>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ef      	bne.n	8005428 <tcp_close_shutdown+0x94>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	4b3f      	ldr	r3, [pc, #252]	; (800554c <tcp_close_shutdown+0x1b8>)
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	7d1b      	ldrb	r3, [r3, #20]
 8005458:	2b04      	cmp	r3, #4
 800545a:	d10c      	bne.n	8005476 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	220a      	movs	r2, #10
 8005460:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005462:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <tcp_close_shutdown+0x1bc>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	4a39      	ldr	r2, [pc, #228]	; (8005550 <tcp_close_shutdown+0x1bc>)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	f005 f906 	bl	800a680 <tcp_timer_needed>
 8005474:	e00b      	b.n	800548e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <tcp_close_shutdown+0x1c0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d102      	bne.n	8005486 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005480:	f003 fd44 	bl	8008f0c <tcp_trigger_input_pcb_close>
 8005484:	e003      	b.n	800548e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	2002      	movs	r0, #2
 800548a:	f7fe fe93 	bl	80041b4 <memp_free>
        }
      }
      return ERR_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e050      	b.n	8005534 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	7d1b      	ldrb	r3, [r3, #20]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d02e      	beq.n	80054f8 <tcp_close_shutdown+0x164>
 800549a:	2b02      	cmp	r3, #2
 800549c:	d038      	beq.n	8005510 <tcp_close_shutdown+0x17c>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d142      	bne.n	8005528 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8adb      	ldrh	r3, [r3, #22]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d021      	beq.n	80054ee <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80054aa:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <tcp_close_shutdown+0x1c4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d105      	bne.n	80054c0 <tcp_close_shutdown+0x12c>
 80054b4:	4b28      	ldr	r3, [pc, #160]	; (8005558 <tcp_close_shutdown+0x1c4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4a27      	ldr	r2, [pc, #156]	; (8005558 <tcp_close_shutdown+0x1c4>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e013      	b.n	80054e8 <tcp_close_shutdown+0x154>
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <tcp_close_shutdown+0x1c4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	e00c      	b.n	80054e2 <tcp_close_shutdown+0x14e>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d104      	bne.n	80054dc <tcp_close_shutdown+0x148>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e005      	b.n	80054e8 <tcp_close_shutdown+0x154>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ef      	bne.n	80054c8 <tcp_close_shutdown+0x134>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	2002      	movs	r0, #2
 80054f2:	f7fe fe5f 	bl	80041b4 <memp_free>
    break;
 80054f6:	e01c      	b.n	8005532 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff13 	bl	8005324 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4816      	ldr	r0, [pc, #88]	; (800555c <tcp_close_shutdown+0x1c8>)
 8005502:	f001 f9e1 	bl	80068c8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	2003      	movs	r0, #3
 800550a:	f7fe fe53 	bl	80041b4 <memp_free>
    break;
 800550e:	e010      	b.n	8005532 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	480d      	ldr	r0, [pc, #52]	; (8005548 <tcp_close_shutdown+0x1b4>)
 8005514:	f001 f9d8 	bl	80068c8 <tcp_pcb_remove>
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <tcp_close_shutdown+0x1b8>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	2002      	movs	r0, #2
 8005522:	f7fe fe47 	bl	80041b4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005526:	e004      	b.n	8005532 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f819 	bl	8005560 <tcp_close_shutdown_fin>
 800552e:	4603      	mov	r3, r0
 8005530:	e000      	b.n	8005534 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bdb0      	pop	{r4, r5, r7, pc}
 800553c:	0800e9e4 	.word	0x0800e9e4
 8005540:	0800ea60 	.word	0x0800ea60
 8005544:	0800ea20 	.word	0x0800ea20
 8005548:	20006b18 	.word	0x20006b18
 800554c:	20006b14 	.word	0x20006b14
 8005550:	20006b28 	.word	0x20006b28
 8005554:	20006b2c 	.word	0x20006b2c
 8005558:	20006b24 	.word	0x20006b24
 800555c:	20006b20 	.word	0x20006b20

08005560 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <tcp_close_shutdown_fin+0x1c>
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <tcp_close_shutdown_fin+0xc0>)
 8005570:	f240 124d 	movw	r2, #333	; 0x14d
 8005574:	492b      	ldr	r1, [pc, #172]	; (8005624 <tcp_close_shutdown_fin+0xc4>)
 8005576:	482c      	ldr	r0, [pc, #176]	; (8005628 <tcp_close_shutdown_fin+0xc8>)
 8005578:	f007 fe20 	bl	800d1bc <iprintf>

  switch (pcb->state) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7d1b      	ldrb	r3, [r3, #20]
 8005580:	2b04      	cmp	r3, #4
 8005582:	d010      	beq.n	80055a6 <tcp_close_shutdown_fin+0x46>
 8005584:	2b07      	cmp	r3, #7
 8005586:	d01b      	beq.n	80055c0 <tcp_close_shutdown_fin+0x60>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d126      	bne.n	80055da <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f003 fd49 	bl	8009024 <tcp_send_fin>
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d11f      	bne.n	80055de <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2205      	movs	r2, #5
 80055a2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80055a4:	e01b      	b.n	80055de <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f003 fd3c 	bl	8009024 <tcp_send_fin>
 80055ac:	4603      	mov	r3, r0
 80055ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80055b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d114      	bne.n	80055e2 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2205      	movs	r2, #5
 80055bc:	751a      	strb	r2, [r3, #20]
    }
    break;
 80055be:	e010      	b.n	80055e2 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f003 fd2f 	bl	8009024 <tcp_send_fin>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2209      	movs	r2, #9
 80055d6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80055d8:	e005      	b.n	80055e6 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e01c      	b.n	8005618 <tcp_close_shutdown_fin+0xb8>
    break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <tcp_close_shutdown_fin+0x88>
    break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <tcp_close_shutdown_fin+0x88>
    break;
 80055e6:	bf00      	nop
  }

  if (err == ERR_OK) {
 80055e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f004 fb69 	bl	8009cc8 <tcp_output>
 80055f6:	e00d      	b.n	8005614 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80055f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005600:	d108      	bne.n	8005614 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7e9b      	ldrb	r3, [r3, #26]
 8005606:	f043 0308 	orr.w	r3, r3, #8
 800560a:	b2da      	uxtb	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e001      	b.n	8005618 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0800e9e4 	.word	0x0800e9e4
 8005624:	0800ea14 	.word	0x0800ea14
 8005628:	0800ea20 	.word	0x0800ea20

0800562c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7d1b      	ldrb	r3, [r3, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d006      	beq.n	800564a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7e9b      	ldrb	r3, [r3, #26]
 8005640:	f043 0310 	orr.w	r3, r3, #16
 8005644:	b2da      	uxtb	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800564a:	2101      	movs	r1, #1
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fea1 	bl	8005394 <tcp_close_shutdown>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	; 0x30
 8005660:	af02      	add	r7, sp, #8
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7d1b      	ldrb	r3, [r3, #20]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <tcp_abandon+0x20>
 800566e:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <tcp_abandon+0x148>)
 8005670:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005674:	494c      	ldr	r1, [pc, #304]	; (80057a8 <tcp_abandon+0x14c>)
 8005676:	484d      	ldr	r0, [pc, #308]	; (80057ac <tcp_abandon+0x150>)
 8005678:	f007 fda0 	bl	800d1bc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7d1b      	ldrb	r3, [r3, #20]
 8005680:	2b0a      	cmp	r3, #10
 8005682:	d108      	bne.n	8005696 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	484a      	ldr	r0, [pc, #296]	; (80057b0 <tcp_abandon+0x154>)
 8005688:	f001 f91e 	bl	80068c8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	2002      	movs	r0, #2
 8005690:	f7fe fd90 	bl	80041b4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8005694:	e081      	b.n	800579a <tcp_abandon+0x13e>
    int send_rst = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	7d1b      	ldrb	r3, [r3, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d126      	bne.n	800570e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8adb      	ldrh	r3, [r3, #22]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02e      	beq.n	8005726 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80056c8:	4b3a      	ldr	r3, [pc, #232]	; (80057b4 <tcp_abandon+0x158>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d105      	bne.n	80056de <tcp_abandon+0x82>
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <tcp_abandon+0x158>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a36      	ldr	r2, [pc, #216]	; (80057b4 <tcp_abandon+0x158>)
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e013      	b.n	8005706 <tcp_abandon+0xaa>
 80056de:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <tcp_abandon+0x158>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	e00c      	b.n	8005700 <tcp_abandon+0xa4>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <tcp_abandon+0x9e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e005      	b.n	8005706 <tcp_abandon+0xaa>
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ef      	bne.n	80056e6 <tcp_abandon+0x8a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e00b      	b.n	8005726 <tcp_abandon+0xca>
      send_rst = reset;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8adb      	ldrh	r3, [r3, #22]
 8005716:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4827      	ldr	r0, [pc, #156]	; (80057b8 <tcp_abandon+0x15c>)
 800571c:	f001 f8d4 	bl	80068c8 <tcp_pcb_remove>
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <tcp_abandon+0x160>)
 8005722:	2201      	movs	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fe15 	bl	8006362 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fe0c 	bl	8006362 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe03 	bl	8006362 <tcp_segs_free>
    if (send_rst) {
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00c      	beq.n	800577c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1d19      	adds	r1, r3, #4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8b1b      	ldrh	r3, [r3, #24]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	460b      	mov	r3, r1
 8005774:	6979      	ldr	r1, [r7, #20]
 8005776:	69b8      	ldr	r0, [r7, #24]
 8005778:	f004 fd30 	bl	800a1dc <tcp_rst>
    last_state = pcb->state;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	7d1b      	ldrb	r3, [r3, #20]
 8005780:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	2002      	movs	r0, #2
 8005786:	f7fe fd15 	bl	80041b4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <tcp_abandon+0x13e>
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f06f 010c 	mvn.w	r1, #12
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	4798      	blx	r3
}
 800579a:	bf00      	nop
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	0800e9e4 	.word	0x0800e9e4
 80057a8:	0800ea7c 	.word	0x0800ea7c
 80057ac:	0800ea20 	.word	0x0800ea20
 80057b0:	20006b28 	.word	0x20006b28
 80057b4:	20006b24 	.word	0x20006b24
 80057b8:	20006b18 	.word	0x20006b18
 80057bc:	20006b14 	.word	0x20006b14

080057c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80057c8:	2101      	movs	r1, #1
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ff46 	bl	800565c <tcp_abandon>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80057e6:	2304      	movs	r3, #4
 80057e8:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80057f0:	4b3c      	ldr	r3, [pc, #240]	; (80058e4 <tcp_bind+0x10c>)
 80057f2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <tcp_bind+0x28>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <tcp_bind+0x2e>
    return ERR_VAL;
 8005800:	f06f 0305 	mvn.w	r3, #5
 8005804:	e06a      	b.n	80058dc <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7d1b      	ldrb	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <tcp_bind+0x4a>
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <tcp_bind+0x110>)
 8005810:	f44f 7211 	mov.w	r2, #580	; 0x244
 8005814:	4935      	ldr	r1, [pc, #212]	; (80058ec <tcp_bind+0x114>)
 8005816:	4836      	ldr	r0, [pc, #216]	; (80058f0 <tcp_bind+0x118>)
 8005818:	f007 fcd0 	bl	800d1bc <iprintf>
 800581c:	f06f 0305 	mvn.w	r3, #5
 8005820:	e05c      	b.n	80058dc <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <tcp_bind+0x64>
    port = tcp_new_port();
 8005828:	f000 f9ca 	bl	8005bc0 <tcp_new_port>
 800582c:	4603      	mov	r3, r0
 800582e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d135      	bne.n	80058a2 <tcp_bind+0xca>
      return ERR_BUF;
 8005836:	f06f 0301 	mvn.w	r3, #1
 800583a:	e04f      	b.n	80058dc <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	e02b      	b.n	800589a <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005842:	4a2c      	ldr	r2, [pc, #176]	; (80058f4 <tcp_bind+0x11c>)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	e01e      	b.n	800588e <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	8adb      	ldrh	r3, [r3, #22]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	429a      	cmp	r2, r3
 8005858:	d116      	bne.n	8005888 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800585a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00c      	beq.n	8005882 <tcp_bind+0xaa>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800587e:	429a      	cmp	r2, r3
 8005880:	d102      	bne.n	8005888 <tcp_bind+0xb0>
              return ERR_USE;
 8005882:	f06f 0307 	mvn.w	r3, #7
 8005886:	e029      	b.n	80058dc <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1dd      	bne.n	8005850 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	429a      	cmp	r2, r3
 80058a0:	dbcf      	blt.n	8005842 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <tcp_bind+0xea>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <tcp_bind+0xe4>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	e000      	b.n	80058be <tcp_bind+0xe6>
 80058bc:	2300      	movs	r3, #0
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <tcp_bind+0x120>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <tcp_bind+0x120>)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	f004 fed3 	bl	800a680 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0800fe88 	.word	0x0800fe88
 80058e8:	0800e9e4 	.word	0x0800e9e4
 80058ec:	0800eab0 	.word	0x0800eab0
 80058f0:	0800ea20 	.word	0x0800ea20
 80058f4:	0800fe60 	.word	0x0800fe60
 80058f8:	20006b24 	.word	0x20006b24

080058fc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f7ff ff58 	bl	80057c0 <tcp_abort>

  return ERR_ABRT;
 8005910:	f06f 030c 	mvn.w	r3, #12
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2200      	movs	r2, #0
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f806 	bl	8005940 <tcp_listen_with_backlog_and_err>
 8005934:	4603      	mov	r3, r0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	460b      	mov	r3, r1
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	7d1b      	ldrb	r3, [r3, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d009      	beq.n	800596e <tcp_listen_with_backlog_and_err+0x2e>
 800595a:	4b3f      	ldr	r3, [pc, #252]	; (8005a58 <tcp_listen_with_backlog_and_err+0x118>)
 800595c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8005960:	493e      	ldr	r1, [pc, #248]	; (8005a5c <tcp_listen_with_backlog_and_err+0x11c>)
 8005962:	483f      	ldr	r0, [pc, #252]	; (8005a60 <tcp_listen_with_backlog_and_err+0x120>)
 8005964:	f007 fc2a 	bl	800d1bc <iprintf>
 8005968:	23f1      	movs	r3, #241	; 0xf1
 800596a:	76fb      	strb	r3, [r7, #27]
 800596c:	e069      	b.n	8005a42 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	7d1b      	ldrb	r3, [r3, #20]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d104      	bne.n	8005980 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800597a:	23f7      	movs	r3, #247	; 0xf7
 800597c:	76fb      	strb	r3, [r7, #27]
    goto done;
 800597e:	e060      	b.n	8005a42 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005980:	2003      	movs	r0, #3
 8005982:	f7fe fbcb 	bl	800411c <memp_malloc>
 8005986:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800598e:	23ff      	movs	r3, #255	; 0xff
 8005990:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005992:	e056      	b.n	8005a42 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8ada      	ldrh	r2, [r3, #22]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2201      	movs	r2, #1
 80059a8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	7d5a      	ldrb	r2, [r3, #21]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	7a1a      	ldrb	r2, [r3, #8]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	7a9a      	ldrb	r2, [r3, #10]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	7a5a      	ldrb	r2, [r3, #9]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8adb      	ldrh	r3, [r3, #22]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d021      	beq.n	8005a1e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <tcp_listen_with_backlog_and_err+0x124>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d105      	bne.n	80059f0 <tcp_listen_with_backlog_and_err+0xb0>
 80059e4:	4b1f      	ldr	r3, [pc, #124]	; (8005a64 <tcp_listen_with_backlog_and_err+0x124>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <tcp_listen_with_backlog_and_err+0x124>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e013      	b.n	8005a18 <tcp_listen_with_backlog_and_err+0xd8>
 80059f0:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <tcp_listen_with_backlog_and_err+0x124>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e00c      	b.n	8005a12 <tcp_listen_with_backlog_and_err+0xd2>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d104      	bne.n	8005a0c <tcp_listen_with_backlog_and_err+0xcc>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	e005      	b.n	8005a18 <tcp_listen_with_backlog_and_err+0xd8>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ef      	bne.n	80059f8 <tcp_listen_with_backlog_and_err+0xb8>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	2002      	movs	r0, #2
 8005a22:	f7fe fbc7 	bl	80041b4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4a0f      	ldr	r2, [pc, #60]	; (8005a68 <tcp_listen_with_backlog_and_err+0x128>)
 8005a2a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <tcp_listen_with_backlog_and_err+0x12c>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <tcp_listen_with_backlog_and_err+0x12c>)
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	f004 fe21 	bl	800a680 <tcp_timer_needed>
  res = ERR_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7efa      	ldrb	r2, [r7, #27]
 8005a4c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	0800e9e4 	.word	0x0800e9e4
 8005a5c:	0800ead8 	.word	0x0800ead8
 8005a60:	0800ea20 	.word	0x0800ea20
 8005a64:	20006b24 	.word	0x20006b24
 8005a68:	080058fd 	.word	0x080058fd
 8005a6c:	20006b20 	.word	0x20006b20

08005a70 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005a80:	4413      	add	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005a8c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005a90:	bf28      	it	cs
 8005a92:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005a96:	b292      	uxth	r2, r2
 8005a98:	4413      	add	r3, r2
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	db08      	blt.n	8005ab4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	e020      	b.n	8005af6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dd03      	ble.n	8005aca <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac8:	e014      	b.n	8005af4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d306      	bcc.n	8005aec <tcp_update_rcv_ann_wnd+0x7c>
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <tcp_update_rcv_ann_wnd+0x90>)
 8005ae0:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005ae4:	4907      	ldr	r1, [pc, #28]	; (8005b04 <tcp_update_rcv_ann_wnd+0x94>)
 8005ae6:	4808      	ldr	r0, [pc, #32]	; (8005b08 <tcp_update_rcv_ann_wnd+0x98>)
 8005ae8:	f007 fb68 	bl	800d1bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005af4:	2300      	movs	r3, #0
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	0800e9e4 	.word	0x0800e9e4
 8005b04:	0800eafc 	.word	0x0800eafc
 8005b08:	0800ea20 	.word	0x0800ea20

08005b0c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7d1b      	ldrb	r3, [r3, #20]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d106      	bne.n	8005b2e <tcp_recved+0x22>
 8005b20:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <tcp_recved+0xa4>)
 8005b22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b26:	4923      	ldr	r1, [pc, #140]	; (8005bb4 <tcp_recved+0xa8>)
 8005b28:	4823      	ldr	r0, [pc, #140]	; (8005bb8 <tcp_recved+0xac>)
 8005b2a:	f007 fb47 	bl	800d1bc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	4413      	add	r3, r2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005b44:	d904      	bls.n	8005b50 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005b4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b4e:	e017      	b.n	8005b80 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d113      	bne.n	8005b80 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7d1b      	ldrb	r3, [r3, #20]
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	d003      	beq.n	8005b68 <tcp_recved+0x5c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7d1b      	ldrb	r3, [r3, #20]
 8005b64:	2b09      	cmp	r3, #9
 8005b66:	d104      	bne.n	8005b72 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b70:	e006      	b.n	8005b80 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <tcp_recved+0xa4>)
 8005b74:	f240 322d 	movw	r2, #813	; 0x32d
 8005b78:	4910      	ldr	r1, [pc, #64]	; (8005bbc <tcp_recved+0xb0>)
 8005b7a:	480f      	ldr	r0, [pc, #60]	; (8005bb8 <tcp_recved+0xac>)
 8005b7c:	f007 fb1e 	bl	800d1bc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ff75 	bl	8005a70 <tcp_update_rcv_ann_wnd>
 8005b86:	4603      	mov	r3, r0
 8005b88:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005b90:	db09      	blt.n	8005ba6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	7e9b      	ldrb	r3, [r3, #26]
 8005b96:	f043 0302 	orr.w	r3, r3, #2
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f004 f891 	bl	8009cc8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	0800e9e4 	.word	0x0800e9e4
 8005bb4:	0800eb18 	.word	0x0800eb18
 8005bb8:	0800ea20 	.word	0x0800ea20
 8005bbc:	0800eb40 	.word	0x0800eb40

08005bc0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8005bca:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <tcp_new_port+0x80>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	b291      	uxth	r1, r2
 8005bd2:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <tcp_new_port+0x80>)
 8005bd4:	8011      	strh	r1, [r2, #0]
 8005bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d103      	bne.n	8005be6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <tcp_new_port+0x80>)
 8005be0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005be4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005be6:	2300      	movs	r3, #0
 8005be8:	71fb      	strb	r3, [r7, #7]
 8005bea:	e01e      	b.n	8005c2a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <tcp_new_port+0x84>)
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	e011      	b.n	8005c1e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	8ada      	ldrh	r2, [r3, #22]
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <tcp_new_port+0x80>)
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d108      	bne.n	8005c18 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005c06:	88bb      	ldrh	r3, [r7, #4]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	80bb      	strh	r3, [r7, #4]
 8005c0c:	88bb      	ldrh	r3, [r7, #4]
 8005c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c12:	d3da      	bcc.n	8005bca <tcp_new_port+0xa>
          return 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e00d      	b.n	8005c34 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ea      	bne.n	8005bfa <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	3301      	adds	r3, #1
 8005c28:	71fb      	strb	r3, [r7, #7]
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d9dd      	bls.n	8005bec <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <tcp_new_port+0x80>)
 8005c32:	881b      	ldrh	r3, [r3, #0]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	2000000a 	.word	0x2000000a
 8005c44:	0800fe60 	.word	0x0800fe60

08005c48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b08c      	sub	sp, #48	; 0x30
 8005c4c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8005c52:	4b96      	ldr	r3, [pc, #600]	; (8005eac <tcp_slowtmr+0x264>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3301      	adds	r3, #1
 8005c58:	4a94      	ldr	r2, [pc, #592]	; (8005eac <tcp_slowtmr+0x264>)
 8005c5a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005c5c:	4b94      	ldr	r3, [pc, #592]	; (8005eb0 <tcp_slowtmr+0x268>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	4b92      	ldr	r3, [pc, #584]	; (8005eb0 <tcp_slowtmr+0x268>)
 8005c66:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005c6c:	4b91      	ldr	r3, [pc, #580]	; (8005eb4 <tcp_slowtmr+0x26c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005c72:	e227      	b.n	80060c4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	7d1b      	ldrb	r3, [r3, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <tcp_slowtmr+0x42>
 8005c7c:	4b8e      	ldr	r3, [pc, #568]	; (8005eb8 <tcp_slowtmr+0x270>)
 8005c7e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005c82:	498e      	ldr	r1, [pc, #568]	; (8005ebc <tcp_slowtmr+0x274>)
 8005c84:	488e      	ldr	r0, [pc, #568]	; (8005ec0 <tcp_slowtmr+0x278>)
 8005c86:	f007 fa99 	bl	800d1bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	7d1b      	ldrb	r3, [r3, #20]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d106      	bne.n	8005ca0 <tcp_slowtmr+0x58>
 8005c92:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <tcp_slowtmr+0x270>)
 8005c94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005c98:	498a      	ldr	r1, [pc, #552]	; (8005ec4 <tcp_slowtmr+0x27c>)
 8005c9a:	4889      	ldr	r0, [pc, #548]	; (8005ec0 <tcp_slowtmr+0x278>)
 8005c9c:	f007 fa8e 	bl	800d1bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	7d1b      	ldrb	r3, [r3, #20]
 8005ca4:	2b0a      	cmp	r3, #10
 8005ca6:	d106      	bne.n	8005cb6 <tcp_slowtmr+0x6e>
 8005ca8:	4b83      	ldr	r3, [pc, #524]	; (8005eb8 <tcp_slowtmr+0x270>)
 8005caa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005cae:	4986      	ldr	r1, [pc, #536]	; (8005ec8 <tcp_slowtmr+0x280>)
 8005cb0:	4883      	ldr	r0, [pc, #524]	; (8005ec0 <tcp_slowtmr+0x278>)
 8005cb2:	f007 fa83 	bl	800d1bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	7f5a      	ldrb	r2, [r3, #29]
 8005cba:	4b7d      	ldr	r3, [pc, #500]	; (8005eb0 <tcp_slowtmr+0x268>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d103      	bne.n	8005cca <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8005cc8:	e1fc      	b.n	80060c4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005cca:	4b79      	ldr	r3, [pc, #484]	; (8005eb0 <tcp_slowtmr+0x268>)
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	7d1b      	ldrb	r3, [r3, #20]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d108      	bne.n	8005cf4 <tcp_slowtmr+0xac>
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d903      	bls.n	8005cf4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005cec:	7ffb      	ldrb	r3, [r7, #31]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e0a2      	b.n	8005e3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cfa:	2b0b      	cmp	r3, #11
 8005cfc:	d903      	bls.n	8005d06 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	3301      	adds	r3, #1
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e099      	b.n	8005e3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d032      	beq.n	8005d76 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a6c      	ldr	r2, [pc, #432]	; (8005ecc <tcp_slowtmr+0x284>)
 8005d1a:	5cd3      	ldrb	r3, [r2, r3]
 8005d1c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005d24:	7cfa      	ldrb	r2, [r7, #19]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d907      	bls.n	8005d3a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005d30:	3301      	adds	r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005d40:	7cfa      	ldrb	r2, [r7, #19]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d879      	bhi.n	8005e3a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d48:	f004 fbda 	bl	800a500 <tcp_zero_window_probe>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d173      	bne.n	8005e3a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005d60:	2b06      	cmp	r3, #6
 8005d62:	d86a      	bhi.n	8005e3a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005d74:	e061      	b.n	8005e3a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	db08      	blt.n	8005d92 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	b21a      	sxth	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04f      	beq.n	8005e3a <tcp_slowtmr+0x1f2>
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005da6:	429a      	cmp	r2, r3
 8005da8:	db47      	blt.n	8005e3a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	7d1b      	ldrb	r3, [r3, #20]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d018      	beq.n	8005de4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	bf28      	it	cs
 8005dbc:	230c      	movcs	r3, #12
 8005dbe:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005dc6:	10db      	asrs	r3, r3, #3
 8005dc8:	b21b      	sxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005dd2:	4413      	add	r3, r2
 8005dd4:	7dfa      	ldrb	r2, [r7, #23]
 8005dd6:	493e      	ldr	r1, [pc, #248]	; (8005ed0 <tcp_slowtmr+0x288>)
 8005dd8:	5c8a      	ldrb	r2, [r1, r2]
 8005dda:	4093      	lsls	r3, r2
 8005ddc:	b21a      	sxth	r2, r3
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	2200      	movs	r2, #0
 8005de8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005df6:	4293      	cmp	r3, r2
 8005df8:	bf28      	it	cs
 8005dfa:	4613      	movcs	r3, r2
 8005dfc:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005dfe:	8abb      	ldrh	r3, [r7, #20]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d206      	bcs.n	8005e2a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e36:	f004 fa47 	bl	800a2c8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	7d1b      	ldrb	r3, [r3, #20]
 8005e3e:	2b06      	cmp	r3, #6
 8005e40:	d10f      	bne.n	8005e62 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	7e9b      	ldrb	r3, [r3, #26]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <tcp_slowtmr+0x264>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b28      	cmp	r3, #40	; 0x28
 8005e5a:	d902      	bls.n	8005e62 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	7a1b      	ldrb	r3, [r3, #8]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d05d      	beq.n	8005f2a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d003      	beq.n	8005e7e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	d155      	bne.n	8005f2a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <tcp_slowtmr+0x264>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <tcp_slowtmr+0x28c>)
 8005e90:	440b      	add	r3, r1
 8005e92:	4911      	ldr	r1, [pc, #68]	; (8005ed8 <tcp_slowtmr+0x290>)
 8005e94:	fba1 1303 	umull	r1, r3, r1, r3
 8005e98:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d91e      	bls.n	8005edc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005e9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005ea4:	7fbb      	ldrb	r3, [r7, #30]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	77bb      	strb	r3, [r7, #30]
 8005eaa:	e03e      	b.n	8005f2a <tcp_slowtmr+0x2e2>
 8005eac:	20006b1c 	.word	0x20006b1c
 8005eb0:	200000d9 	.word	0x200000d9
 8005eb4:	20006b18 	.word	0x20006b18
 8005eb8:	0800e9e4 	.word	0x0800e9e4
 8005ebc:	0800eb94 	.word	0x0800eb94
 8005ec0:	0800ea20 	.word	0x0800ea20
 8005ec4:	0800ebc0 	.word	0x0800ebc0
 8005ec8:	0800ebec 	.word	0x0800ebec
 8005ecc:	0800fe58 	.word	0x0800fe58
 8005ed0:	0800fe48 	.word	0x0800fe48
 8005ed4:	000a4cb8 	.word	0x000a4cb8
 8005ed8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005edc:	4b97      	ldr	r3, [pc, #604]	; (800613c <tcp_slowtmr+0x4f4>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	4b92      	ldr	r3, [pc, #584]	; (8006140 <tcp_slowtmr+0x4f8>)
 8005ef6:	fb03 f300 	mul.w	r3, r3, r0
 8005efa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005efc:	4991      	ldr	r1, [pc, #580]	; (8006144 <tcp_slowtmr+0x4fc>)
 8005efe:	fba1 1303 	umull	r1, r3, r1, r3
 8005f02:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d910      	bls.n	8005f2a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8005f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0a:	f004 fabc 	bl	800a486 <tcp_keepalive>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8005f12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005f20:	3301      	adds	r3, #1
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005f32:	4b82      	ldr	r3, [pc, #520]	; (800613c <tcp_slowtmr+0x4f4>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005f42:	4619      	mov	r1, r3
 8005f44:	460b      	mov	r3, r1
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	440b      	add	r3, r1
 8005f4a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d307      	bcc.n	8005f60 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa04 	bl	8006362 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	7d1b      	ldrb	r3, [r3, #20]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d109      	bne.n	8005f7c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f68:	4b74      	ldr	r3, [pc, #464]	; (800613c <tcp_slowtmr+0x4f4>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b28      	cmp	r3, #40	; 0x28
 8005f74:	d902      	bls.n	8005f7c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	7d1b      	ldrb	r3, [r3, #20]
 8005f80:	2b09      	cmp	r3, #9
 8005f82:	d109      	bne.n	8005f98 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f84:	4b6d      	ldr	r3, [pc, #436]	; (800613c <tcp_slowtmr+0x4f4>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2bf0      	cmp	r3, #240	; 0xf0
 8005f90:	d902      	bls.n	8005f98 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	3301      	adds	r3, #1
 8005f96:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f98:	7ffb      	ldrb	r3, [r7, #31]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d05d      	beq.n	800605a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa8:	f000 fc4c 	bl	8006844 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005fb2:	4b65      	ldr	r3, [pc, #404]	; (8006148 <tcp_slowtmr+0x500>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d106      	bne.n	8005fca <tcp_slowtmr+0x382>
 8005fbc:	4b63      	ldr	r3, [pc, #396]	; (800614c <tcp_slowtmr+0x504>)
 8005fbe:	f240 4289 	movw	r2, #1161	; 0x489
 8005fc2:	4963      	ldr	r1, [pc, #396]	; (8006150 <tcp_slowtmr+0x508>)
 8005fc4:	4863      	ldr	r0, [pc, #396]	; (8006154 <tcp_slowtmr+0x50c>)
 8005fc6:	f007 f8f9 	bl	800d1bc <iprintf>
        prev->next = pcb->next;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e00f      	b.n	8005ff4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005fd4:	4b5c      	ldr	r3, [pc, #368]	; (8006148 <tcp_slowtmr+0x500>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d006      	beq.n	8005fec <tcp_slowtmr+0x3a4>
 8005fde:	4b5b      	ldr	r3, [pc, #364]	; (800614c <tcp_slowtmr+0x504>)
 8005fe0:	f240 428d 	movw	r2, #1165	; 0x48d
 8005fe4:	495c      	ldr	r1, [pc, #368]	; (8006158 <tcp_slowtmr+0x510>)
 8005fe6:	485b      	ldr	r0, [pc, #364]	; (8006154 <tcp_slowtmr+0x50c>)
 8005fe8:	f007 f8e8 	bl	800d1bc <iprintf>
        tcp_active_pcbs = pcb->next;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4a55      	ldr	r2, [pc, #340]	; (8006148 <tcp_slowtmr+0x500>)
 8005ff2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005ff4:	7fbb      	ldrb	r3, [r7, #30]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d010      	beq.n	800601c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006002:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1d1d      	adds	r5, r3, #4
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	8adb      	ldrh	r3, [r3, #22]
 800600c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600e:	8b12      	ldrh	r2, [r2, #24]
 8006010:	9201      	str	r2, [sp, #4]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462b      	mov	r3, r5
 8006016:	4622      	mov	r2, r4
 8006018:	f004 f8e0 	bl	800a1dc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	7d1b      	ldrb	r3, [r3, #20]
 8006026:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	2002      	movs	r0, #2
 8006036:	f7fe f8bd 	bl	80041b4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800603a:	4b48      	ldr	r3, [pc, #288]	; (800615c <tcp_slowtmr+0x514>)
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <tcp_slowtmr+0x408>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f06f 010c 	mvn.w	r1, #12
 800604c:	68b8      	ldr	r0, [r7, #8]
 800604e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006050:	4b42      	ldr	r3, [pc, #264]	; (800615c <tcp_slowtmr+0x514>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d035      	beq.n	80060c4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006058:	e606      	b.n	8005c68 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	7edb      	ldrb	r3, [r3, #27]
 8006068:	3301      	adds	r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	7eda      	ldrb	r2, [r3, #27]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	7f1b      	ldrb	r3, [r3, #28]
 8006078:	429a      	cmp	r2, r3
 800607a:	d323      	bcc.n	80060c4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2200      	movs	r2, #0
 8006080:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006082:	4b36      	ldr	r3, [pc, #216]	; (800615c <tcp_slowtmr+0x514>)
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <tcp_slowtmr+0x460>
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	6912      	ldr	r2, [r2, #16]
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	777b      	strb	r3, [r7, #29]
 80060a6:	e001      	b.n	80060ac <tcp_slowtmr+0x464>
 80060a8:	2300      	movs	r3, #0
 80060aa:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 80060ac:	4b2b      	ldr	r3, [pc, #172]	; (800615c <tcp_slowtmr+0x514>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d000      	beq.n	80060b6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 80060b4:	e5d8      	b.n	8005c68 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80060b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80060be:	6a38      	ldr	r0, [r7, #32]
 80060c0:	f003 fe02 	bl	8009cc8 <tcp_output>
  while (pcb != NULL) {
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f47f add4 	bne.w	8005c74 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80060d0:	4b23      	ldr	r3, [pc, #140]	; (8006160 <tcp_slowtmr+0x518>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80060d6:	e068      	b.n	80061aa <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	7d1b      	ldrb	r3, [r3, #20]
 80060dc:	2b0a      	cmp	r3, #10
 80060de:	d006      	beq.n	80060ee <tcp_slowtmr+0x4a6>
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <tcp_slowtmr+0x504>)
 80060e2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80060e6:	491f      	ldr	r1, [pc, #124]	; (8006164 <tcp_slowtmr+0x51c>)
 80060e8:	481a      	ldr	r0, [pc, #104]	; (8006154 <tcp_slowtmr+0x50c>)
 80060ea:	f007 f867 	bl	800d1bc <iprintf>
    pcb_remove = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80060f2:	4b12      	ldr	r3, [pc, #72]	; (800613c <tcp_slowtmr+0x4f4>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2bf0      	cmp	r3, #240	; 0xf0
 80060fe:	d902      	bls.n	8006106 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006100:	7ffb      	ldrb	r3, [r7, #31]
 8006102:	3301      	adds	r3, #1
 8006104:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006106:	7ffb      	ldrb	r3, [r7, #31]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d049      	beq.n	80061a0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800610c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800610e:	f000 fb99 	bl	8006844 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d029      	beq.n	800616c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <tcp_slowtmr+0x518>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611e:	429a      	cmp	r2, r3
 8006120:	d106      	bne.n	8006130 <tcp_slowtmr+0x4e8>
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <tcp_slowtmr+0x504>)
 8006124:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006128:	490f      	ldr	r1, [pc, #60]	; (8006168 <tcp_slowtmr+0x520>)
 800612a:	480a      	ldr	r0, [pc, #40]	; (8006154 <tcp_slowtmr+0x50c>)
 800612c:	f007 f846 	bl	800d1bc <iprintf>
        prev->next = pcb->next;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e028      	b.n	800618c <tcp_slowtmr+0x544>
 800613a:	bf00      	nop
 800613c:	20006b1c 	.word	0x20006b1c
 8006140:	000124f8 	.word	0x000124f8
 8006144:	10624dd3 	.word	0x10624dd3
 8006148:	20006b18 	.word	0x20006b18
 800614c:	0800e9e4 	.word	0x0800e9e4
 8006150:	0800ec1c 	.word	0x0800ec1c
 8006154:	0800ea20 	.word	0x0800ea20
 8006158:	0800ec48 	.word	0x0800ec48
 800615c:	20006b14 	.word	0x20006b14
 8006160:	20006b28 	.word	0x20006b28
 8006164:	0800ec74 	.word	0x0800ec74
 8006168:	0800eca4 	.word	0x0800eca4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <tcp_slowtmr+0x570>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	429a      	cmp	r2, r3
 8006174:	d006      	beq.n	8006184 <tcp_slowtmr+0x53c>
 8006176:	4b11      	ldr	r3, [pc, #68]	; (80061bc <tcp_slowtmr+0x574>)
 8006178:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800617c:	4910      	ldr	r1, [pc, #64]	; (80061c0 <tcp_slowtmr+0x578>)
 800617e:	4811      	ldr	r0, [pc, #68]	; (80061c4 <tcp_slowtmr+0x57c>)
 8006180:	f007 f81c 	bl	800d1bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <tcp_slowtmr+0x570>)
 800618a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006196:	69b9      	ldr	r1, [r7, #24]
 8006198:	2002      	movs	r0, #2
 800619a:	f7fe f80b 	bl	80041b4 <memp_free>
 800619e:	e004      	b.n	80061aa <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d193      	bne.n	80060d8 <tcp_slowtmr+0x490>
    }
  }
}
 80061b0:	bf00      	nop
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bdb0      	pop	{r4, r5, r7, pc}
 80061b8:	20006b28 	.word	0x20006b28
 80061bc:	0800e9e4 	.word	0x0800e9e4
 80061c0:	0800eccc 	.word	0x0800eccc
 80061c4:	0800ea20 	.word	0x0800ea20

080061c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80061ce:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <tcp_fasttmr+0xbc>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <tcp_fasttmr+0xbc>)
 80061d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80061da:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <tcp_fasttmr+0xc0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80061e0:	e048      	b.n	8006274 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7f5a      	ldrb	r2, [r3, #29]
 80061e6:	4b27      	ldr	r3, [pc, #156]	; (8006284 <tcp_fasttmr+0xbc>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d03f      	beq.n	800626e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80061ee:	4b25      	ldr	r3, [pc, #148]	; (8006284 <tcp_fasttmr+0xbc>)
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	7e9b      	ldrb	r3, [r3, #26]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7e9b      	ldrb	r3, [r3, #26]
 8006206:	f043 0302 	orr.w	r3, r3, #2
 800620a:	b2da      	uxtb	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f003 fd59 	bl	8009cc8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7e9b      	ldrb	r3, [r3, #26]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	b2da      	uxtb	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7e9b      	ldrb	r3, [r3, #26]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	7e9b      	ldrb	r3, [r3, #26]
 8006234:	f023 0308 	bic.w	r3, r3, #8
 8006238:	b2da      	uxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff f98e 	bl	8005560 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006252:	4b0e      	ldr	r3, [pc, #56]	; (800628c <tcp_fasttmr+0xc4>)
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f819 	bl	8006290 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800625e:	4b0b      	ldr	r3, [pc, #44]	; (800628c <tcp_fasttmr+0xc4>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d000      	beq.n	8006268 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006266:	e7b8      	b.n	80061da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	e002      	b.n	8006274 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1b3      	bne.n	80061e2 <tcp_fasttmr+0x1a>
    }
  }
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200000d9 	.word	0x200000d9
 8006288:	20006b18 	.word	0x20006b18
 800628c:	20006b14 	.word	0x20006b14

08006290 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629c:	7b5b      	ldrb	r3, [r3, #13]
 800629e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <tcp_process_refused_data+0x3e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6918      	ldr	r0, [r3, #16]
 80062c0:	2300      	movs	r3, #0
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	47a0      	blx	r4
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
 80062cc:	e007      	b.n	80062de <tcp_process_refused_data+0x4e>
 80062ce:	2300      	movs	r3, #0
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	2000      	movs	r0, #0
 80062d6:	f000 f89b 	bl	8006410 <tcp_recv_null>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d12a      	bne.n	800633c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d033      	beq.n	8006358 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80062f8:	d005      	beq.n	8006306 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	3301      	adds	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <tcp_process_refused_data+0x98>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6918      	ldr	r0, [r3, #16]
 800631a:	2300      	movs	r3, #0
 800631c:	2200      	movs	r2, #0
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	47a0      	blx	r4
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]
 8006326:	e001      	b.n	800632c <tcp_process_refused_data+0x9c>
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800632c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006330:	f113 0f0d 	cmn.w	r3, #13
 8006334:	d110      	bne.n	8006358 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006336:	f06f 030c 	mvn.w	r3, #12
 800633a:	e00e      	b.n	800635a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800633c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006340:	f113 0f0d 	cmn.w	r3, #13
 8006344:	d102      	bne.n	800634c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006346:	f06f 030c 	mvn.w	r3, #12
 800634a:	e006      	b.n	800635a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8006352:	f06f 0304 	mvn.w	r3, #4
 8006356:	e000      	b.n	800635a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bd90      	pop	{r4, r7, pc}

08006362 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800636a:	e007      	b.n	800637c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f809 	bl	800638a <tcp_seg_free>
    seg = next;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f4      	bne.n	800636c <tcp_segs_free+0xa>
  }
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00c      	beq.n	80063b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fc37 	bl	8004c18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	2004      	movs	r0, #4
 80063ae:	f7fd ff01 	bl	80041b4 <memp_free>
  }
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	755a      	strb	r2, [r3, #21]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80063e0:	2004      	movs	r0, #4
 80063e2:	f7fd fe9b 	bl	800411c <memp_malloc>
 80063e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <tcp_seg_copy+0x1a>
    return NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e00a      	b.n	8006408 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80063f2:	2210      	movs	r2, #16
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f006 fecd 	bl	800d196 <memcpy>
  pbuf_ref(cseg->p);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fcb5 	bl	8004d70 <pbuf_ref>
  return cseg;
 8006406:	68fb      	ldr	r3, [r7, #12]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	891b      	ldrh	r3, [r3, #8]
 8006428:	4619      	mov	r1, r3
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f7ff fb6e 	bl	8005b0c <tcp_recved>
    pbuf_free(p);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fe fbf1 	bl	8004c18 <pbuf_free>
 8006436:	e008      	b.n	800644a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006440:	68b8      	ldr	r0, [r7, #8]
 8006442:	f7ff f8f3 	bl	800562c <tcp_close>
 8006446:	4603      	mov	r3, r0
 8006448:	e000      	b.n	800644c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800645e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006462:	2b00      	cmp	r3, #0
 8006464:	db01      	blt.n	800646a <tcp_kill_prio+0x16>
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	e000      	b.n	800646c <tcp_kill_prio+0x18>
 800646a:	237f      	movs	r3, #127	; 0x7f
 800646c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006476:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <tcp_kill_prio+0x7c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e01a      	b.n	80064b4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	7d5b      	ldrb	r3, [r3, #21]
 8006482:	7afa      	ldrb	r2, [r7, #11]
 8006484:	429a      	cmp	r2, r3
 8006486:	d312      	bcc.n	80064ae <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <tcp_kill_prio+0x80>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	429a      	cmp	r2, r3
 8006496:	d80a      	bhi.n	80064ae <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006498:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <tcp_kill_prio+0x80>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	7d5b      	ldrb	r3, [r3, #21]
 80064ac:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e1      	bne.n	800647e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80064c0:	6938      	ldr	r0, [r7, #16]
 80064c2:	f7ff f97d 	bl	80057c0 <tcp_abort>
  }
}
 80064c6:	bf00      	nop
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20006b18 	.word	0x20006b18
 80064d4:	20006b1c 	.word	0x20006b1c

080064d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d009      	beq.n	80064fc <tcp_kill_state+0x24>
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	d006      	beq.n	80064fc <tcp_kill_state+0x24>
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <tcp_kill_state+0x80>)
 80064f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80064f4:	4919      	ldr	r1, [pc, #100]	; (800655c <tcp_kill_state+0x84>)
 80064f6:	481a      	ldr	r0, [pc, #104]	; (8006560 <tcp_kill_state+0x88>)
 80064f8:	f006 fe60 	bl	800d1bc <iprintf>

  inactivity = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <tcp_kill_state+0x8c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e017      	b.n	800653c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	7d1b      	ldrb	r3, [r3, #20]
 8006510:	79fa      	ldrb	r2, [r7, #7]
 8006512:	429a      	cmp	r2, r3
 8006514:	d10f      	bne.n	8006536 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <tcp_kill_state+0x90>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	429a      	cmp	r2, r3
 8006524:	d807      	bhi.n	8006536 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <tcp_kill_state+0x90>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e4      	bne.n	800650c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006548:	2100      	movs	r1, #0
 800654a:	6938      	ldr	r0, [r7, #16]
 800654c:	f7ff f886 	bl	800565c <tcp_abandon>
  }
}
 8006550:	bf00      	nop
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	0800e9e4 	.word	0x0800e9e4
 800655c:	0800ecf4 	.word	0x0800ecf4
 8006560:	0800ea20 	.word	0x0800ea20
 8006564:	20006b18 	.word	0x20006b18
 8006568:	20006b1c 	.word	0x20006b1c

0800656c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <tcp_kill_timewait+0x58>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e012      	b.n	80065a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <tcp_kill_timewait+0x5c>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d807      	bhi.n	80065a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006592:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <tcp_kill_timewait+0x5c>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e9      	bne.n	8006582 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80065b4:	68b8      	ldr	r0, [r7, #8]
 80065b6:	f7ff f903 	bl	80057c0 <tcp_abort>
  }
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20006b28 	.word	0x20006b28
 80065c8:	20006b1c 	.word	0x20006b1c

080065cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80065d6:	2002      	movs	r0, #2
 80065d8:	f7fd fda0 	bl	800411c <memp_malloc>
 80065dc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d124      	bne.n	800662e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80065e4:	f7ff ffc2 	bl	800656c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80065e8:	2002      	movs	r0, #2
 80065ea:	f7fd fd97 	bl	800411c <memp_malloc>
 80065ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11b      	bne.n	800662e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80065f6:	2009      	movs	r0, #9
 80065f8:	f7ff ff6e 	bl	80064d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80065fc:	2002      	movs	r0, #2
 80065fe:	f7fd fd8d 	bl	800411c <memp_malloc>
 8006602:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d111      	bne.n	800662e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800660a:	2008      	movs	r0, #8
 800660c:	f7ff ff64 	bl	80064d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006610:	2002      	movs	r0, #2
 8006612:	f7fd fd83 	bl	800411c <memp_malloc>
 8006616:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d107      	bne.n	800662e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff ff17 	bl	8006454 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006626:	2002      	movs	r0, #2
 8006628:	f7fd fd78 	bl	800411c <memp_malloc>
 800662c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03f      	beq.n	80066b4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006634:	2298      	movs	r2, #152	; 0x98
 8006636:	2100      	movs	r1, #0
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f006 fdb7 	bl	800d1ac <memset>
    pcb->prio = prio;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	79fa      	ldrb	r2, [r7, #7]
 8006642:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800664a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f44f 7206 	mov.w	r2, #536	; 0x218
 800666a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2206      	movs	r2, #6
 8006670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2206      	movs	r2, #6
 8006678:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006680:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800668a:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <tcp_alloc+0xf4>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <tcp_alloc+0xf8>)
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80066a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <tcp_alloc+0xfc>)
 80066a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a07      	ldr	r2, [pc, #28]	; (80066cc <tcp_alloc+0x100>)
 80066b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20006b1c 	.word	0x20006b1c
 80066c4:	200000d9 	.word	0x200000d9
 80066c8:	08006411 	.word	0x08006411
 80066cc:	006ddd00 	.word	0x006ddd00

080066d0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80066d4:	2040      	movs	r0, #64	; 0x40
 80066d6:	f7ff ff79 	bl	80065cc <tcp_alloc>
 80066da:	4603      	mov	r3, r0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}

080066e0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	611a      	str	r2, [r3, #16]
  }
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7d1b      	ldrb	r3, [r3, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d106      	bne.n	800672a <tcp_recv+0x26>
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <tcp_recv+0x38>)
 800671e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8006722:	4907      	ldr	r1, [pc, #28]	; (8006740 <tcp_recv+0x3c>)
 8006724:	4807      	ldr	r0, [pc, #28]	; (8006744 <tcp_recv+0x40>)
 8006726:	f006 fd49 	bl	800d1bc <iprintf>
    pcb->recv = recv;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	0800e9e4 	.word	0x0800e9e4
 8006740:	0800ed04 	.word	0x0800ed04
 8006744:	0800ea20 	.word	0x0800ea20

08006748 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	7d1b      	ldrb	r3, [r3, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d106      	bne.n	800676e <tcp_sent+0x26>
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <tcp_sent+0x34>)
 8006762:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8006766:	4906      	ldr	r1, [pc, #24]	; (8006780 <tcp_sent+0x38>)
 8006768:	4806      	ldr	r0, [pc, #24]	; (8006784 <tcp_sent+0x3c>)
 800676a:	f006 fd27 	bl	800d1bc <iprintf>
    pcb->sent = sent;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	0800e9e4 	.word	0x0800e9e4
 8006780:	0800ed2c 	.word	0x0800ed2c
 8006784:	0800ea20 	.word	0x0800ea20

08006788 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00e      	beq.n	80067b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	7d1b      	ldrb	r3, [r3, #20]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d106      	bne.n	80067ae <tcp_err+0x26>
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <tcp_err+0x38>)
 80067a2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80067a6:	4907      	ldr	r1, [pc, #28]	; (80067c4 <tcp_err+0x3c>)
 80067a8:	4807      	ldr	r0, [pc, #28]	; (80067c8 <tcp_err+0x40>)
 80067aa:	f006 fd07 	bl	800d1bc <iprintf>
    pcb->errf = err;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	0800e9e4 	.word	0x0800e9e4
 80067c4:	0800ed54 	.word	0x0800ed54
 80067c8:	0800ea20 	.word	0x0800ea20

080067cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <tcp_accept+0x22>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7d1b      	ldrb	r3, [r3, #20]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d104      	bne.n	80067ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	619a      	str	r2, [r3, #24]
  }
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	7d1b      	ldrb	r3, [r3, #20]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d106      	bne.n	8006820 <tcp_poll+0x24>
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <tcp_poll+0x3c>)
 8006814:	f240 7203 	movw	r2, #1795	; 0x703
 8006818:	4908      	ldr	r1, [pc, #32]	; (800683c <tcp_poll+0x40>)
 800681a:	4809      	ldr	r0, [pc, #36]	; (8006840 <tcp_poll+0x44>)
 800681c:	f006 fcce 	bl	800d1bc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	79fa      	ldrb	r2, [r7, #7]
 800682c:	771a      	strb	r2, [r3, #28]
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	0800e9e4 	.word	0x0800e9e4
 800683c:	0800ed7c 	.word	0x0800ed7c
 8006840:	0800ea20 	.word	0x0800ea20

08006844 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7d1b      	ldrb	r3, [r3, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d034      	beq.n	80068be <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006858:	2b0a      	cmp	r3, #10
 800685a:	d030      	beq.n	80068be <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006860:	2b01      	cmp	r3, #1
 8006862:	d02c      	beq.n	80068be <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe f9d1 	bl	8004c18 <pbuf_free>
      pcb->refused_data = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fd6e 	bl	8006362 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006892:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fd62 	bl	8006362 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fd5d 	bl	8006362 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	669a      	str	r2, [r3, #104]	; 0x68
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d105      	bne.n	80068e8 <tcp_pcb_remove+0x20>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e013      	b.n	8006910 <tcp_pcb_remove+0x48>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	e00c      	b.n	800690a <tcp_pcb_remove+0x42>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d104      	bne.n	8006904 <tcp_pcb_remove+0x3c>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	e005      	b.n	8006910 <tcp_pcb_remove+0x48>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1ef      	bne.n	80068f0 <tcp_pcb_remove+0x28>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006916:	6838      	ldr	r0, [r7, #0]
 8006918:	f7ff ff94 	bl	8006844 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	7d1b      	ldrb	r3, [r3, #20]
 8006920:	2b0a      	cmp	r3, #10
 8006922:	d013      	beq.n	800694c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8006928:	2b01      	cmp	r3, #1
 800692a:	d00f      	beq.n	800694c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	7e9b      	ldrb	r3, [r3, #26]
 8006930:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	7e9b      	ldrb	r3, [r3, #26]
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	b2da      	uxtb	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006946:	6838      	ldr	r0, [r7, #0]
 8006948:	f003 f9be 	bl	8009cc8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	7d1b      	ldrb	r3, [r3, #20]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d020      	beq.n	8006996 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006958:	2b00      	cmp	r3, #0
 800695a:	d006      	beq.n	800696a <tcp_pcb_remove+0xa2>
 800695c:	4b13      	ldr	r3, [pc, #76]	; (80069ac <tcp_pcb_remove+0xe4>)
 800695e:	f240 7253 	movw	r2, #1875	; 0x753
 8006962:	4913      	ldr	r1, [pc, #76]	; (80069b0 <tcp_pcb_remove+0xe8>)
 8006964:	4813      	ldr	r0, [pc, #76]	; (80069b4 <tcp_pcb_remove+0xec>)
 8006966:	f006 fc29 	bl	800d1bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <tcp_pcb_remove+0xb8>
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <tcp_pcb_remove+0xe4>)
 8006974:	f240 7254 	movw	r2, #1876	; 0x754
 8006978:	490f      	ldr	r1, [pc, #60]	; (80069b8 <tcp_pcb_remove+0xf0>)
 800697a:	480e      	ldr	r0, [pc, #56]	; (80069b4 <tcp_pcb_remove+0xec>)
 800697c:	f006 fc1e 	bl	800d1bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	2b00      	cmp	r3, #0
 8006986:	d006      	beq.n	8006996 <tcp_pcb_remove+0xce>
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <tcp_pcb_remove+0xe4>)
 800698a:	f240 7256 	movw	r2, #1878	; 0x756
 800698e:	490b      	ldr	r1, [pc, #44]	; (80069bc <tcp_pcb_remove+0xf4>)
 8006990:	4808      	ldr	r0, [pc, #32]	; (80069b4 <tcp_pcb_remove+0xec>)
 8006992:	f006 fc13 	bl	800d1bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2200      	movs	r2, #0
 800699a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	0800e9e4 	.word	0x0800e9e4
 80069b0:	0800ed9c 	.word	0x0800ed9c
 80069b4:	0800ea20 	.word	0x0800ea20
 80069b8:	0800edb4 	.word	0x0800edb4
 80069bc:	0800edd0 	.word	0x0800edd0

080069c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <tcp_next_iss+0x28>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <tcp_next_iss+0x2c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <tcp_next_iss+0x28>)
 80069d4:	6013      	str	r3, [r2, #0]
  return iss;
 80069d6:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <tcp_next_iss+0x28>)
 80069d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	20006b1c 	.word	0x20006b1c

080069f0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	6039      	str	r1, [r7, #0]
 80069fa:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80069fc:	6838      	ldr	r0, [r7, #0]
 80069fe:	f005 fa29 	bl	800be54 <ip4_route>
 8006a02:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	e010      	b.n	8006a30 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006a12:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006a14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006a1c:	897b      	ldrh	r3, [r7, #10]
 8006a1e:	3b28      	subs	r3, #40	; 0x28
 8006a20:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006a22:	893a      	ldrh	r2, [r7, #8]
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	bf28      	it	cs
 8006a2a:	4613      	movcs	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a46:	e011      	b.n	8006a6c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d108      	bne.n	8006a66 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7fe feb0 	bl	80057c0 <tcp_abort>
      pcb = next;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e002      	b.n	8006a6c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1ea      	bne.n	8006a48 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d02c      	beq.n	8006ae6 <tcp_netif_ip_addr_changed+0x6a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d028      	beq.n	8006ae6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a94:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <tcp_netif_ip_addr_changed+0x74>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ffcc 	bl	8006a38 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006aa0:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <tcp_netif_ip_addr_changed+0x78>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff ffc6 	bl	8006a38 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d019      	beq.n	8006ae6 <tcp_netif_ip_addr_changed+0x6a>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d015      	beq.n	8006ae6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006aba:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <tcp_netif_ip_addr_changed+0x7c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e00e      	b.n	8006ae0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d103      	bne.n	8006adc <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1ed      	bne.n	8006ac2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20006b18 	.word	0x20006b18
 8006af4:	20006b24 	.word	0x20006b24
 8006af8:	20006b20 	.word	0x20006b20

08006afc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b08b      	sub	sp, #44	; 0x2c
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4a82      	ldr	r2, [pc, #520]	; (8006d14 <tcp_input+0x218>)
 8006b0c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	895b      	ldrh	r3, [r3, #10]
 8006b12:	2b13      	cmp	r3, #19
 8006b14:	f240 838a 	bls.w	800722c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b18:	4b7f      	ldr	r3, [pc, #508]	; (8006d18 <tcp_input+0x21c>)
 8006b1a:	695a      	ldr	r2, [r3, #20]
 8006b1c:	4b7e      	ldr	r3, [pc, #504]	; (8006d18 <tcp_input+0x21c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f005 fc1a 	bl	800c35c <ip4_addr_isbroadcast_u32>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 8380 	bne.w	8007230 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006b30:	4b79      	ldr	r3, [pc, #484]	; (8006d18 <tcp_input+0x21c>)
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b38:	2be0      	cmp	r3, #224	; 0xe0
 8006b3a:	f000 8379 	beq.w	8007230 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006b3e:	4b75      	ldr	r3, [pc, #468]	; (8006d14 <tcp_input+0x218>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	899b      	ldrh	r3, [r3, #12]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fc ff39 	bl	80039be <lwip_htons>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	0b1b      	lsrs	r3, r3, #12
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b58:	7cbb      	ldrb	r3, [r7, #18]
 8006b5a:	2b13      	cmp	r3, #19
 8006b5c:	f240 8368 	bls.w	8007230 <tcp_input+0x734>
 8006b60:	7cbb      	ldrb	r3, [r7, #18]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	891b      	ldrh	r3, [r3, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	f200 8361 	bhi.w	8007230 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006b6e:	7cbb      	ldrb	r3, [r7, #18]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b14      	subs	r3, #20
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	4b69      	ldr	r3, [pc, #420]	; (8006d1c <tcp_input+0x220>)
 8006b78:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006b7a:	4b69      	ldr	r3, [pc, #420]	; (8006d20 <tcp_input+0x224>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	895a      	ldrh	r2, [r3, #10]
 8006b84:	7cbb      	ldrb	r3, [r7, #18]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d30d      	bcc.n	8006ba8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006b8c:	4b63      	ldr	r3, [pc, #396]	; (8006d1c <tcp_input+0x220>)
 8006b8e:	881a      	ldrh	r2, [r3, #0]
 8006b90:	4b64      	ldr	r3, [pc, #400]	; (8006d24 <tcp_input+0x228>)
 8006b92:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006b94:	7cbb      	ldrb	r3, [r7, #18]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	425b      	negs	r3, r3
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	b21b      	sxth	r3, r3
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fe f815 	bl	8004bd0 <pbuf_header>
 8006ba6:	e055      	b.n	8006c54 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d105      	bne.n	8006bbc <tcp_input+0xc0>
 8006bb0:	4b5d      	ldr	r3, [pc, #372]	; (8006d28 <tcp_input+0x22c>)
 8006bb2:	22b2      	movs	r2, #178	; 0xb2
 8006bb4:	495d      	ldr	r1, [pc, #372]	; (8006d2c <tcp_input+0x230>)
 8006bb6:	485e      	ldr	r0, [pc, #376]	; (8006d30 <tcp_input+0x234>)
 8006bb8:	f006 fb00 	bl	800d1bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8006bbc:	f06f 0113 	mvn.w	r1, #19
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7fe f805 	bl	8004bd0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	895a      	ldrh	r2, [r3, #10]
 8006bca:	4b56      	ldr	r3, [pc, #344]	; (8006d24 <tcp_input+0x228>)
 8006bcc:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006bce:	4b53      	ldr	r3, [pc, #332]	; (8006d1c <tcp_input+0x220>)
 8006bd0:	881a      	ldrh	r2, [r3, #0]
 8006bd2:	4b54      	ldr	r3, [pc, #336]	; (8006d24 <tcp_input+0x228>)
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006bda:	4b52      	ldr	r3, [pc, #328]	; (8006d24 <tcp_input+0x228>)
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	425b      	negs	r3, r3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	b21b      	sxth	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fd fff2 	bl	8004bd0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	895b      	ldrh	r3, [r3, #10]
 8006bf2:	8a3a      	ldrh	r2, [r7, #16]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	f200 831d 	bhi.w	8007234 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4a47      	ldr	r2, [pc, #284]	; (8006d20 <tcp_input+0x224>)
 8006c02:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	8a3b      	ldrh	r3, [r7, #16]
 8006c0a:	425b      	negs	r3, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b21b      	sxth	r3, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fd ffdc 	bl	8004bd0 <pbuf_header>
    p->tot_len -= opt2len;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	891a      	ldrh	r2, [r3, #8]
 8006c1c:	8a3b      	ldrh	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	895b      	ldrh	r3, [r3, #10]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <tcp_input+0x13e>
 8006c2e:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <tcp_input+0x22c>)
 8006c30:	22cf      	movs	r2, #207	; 0xcf
 8006c32:	4940      	ldr	r1, [pc, #256]	; (8006d34 <tcp_input+0x238>)
 8006c34:	483e      	ldr	r0, [pc, #248]	; (8006d30 <tcp_input+0x234>)
 8006c36:	f006 fac1 	bl	800d1bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	891a      	ldrh	r2, [r3, #8]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	891b      	ldrh	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d005      	beq.n	8006c54 <tcp_input+0x158>
 8006c48:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <tcp_input+0x22c>)
 8006c4a:	22d0      	movs	r2, #208	; 0xd0
 8006c4c:	493a      	ldr	r1, [pc, #232]	; (8006d38 <tcp_input+0x23c>)
 8006c4e:	4838      	ldr	r0, [pc, #224]	; (8006d30 <tcp_input+0x234>)
 8006c50:	f006 fab4 	bl	800d1bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c54:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <tcp_input+0x218>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	4b2d      	ldr	r3, [pc, #180]	; (8006d14 <tcp_input+0x218>)
 8006c5e:	681c      	ldr	r4, [r3, #0]
 8006c60:	4610      	mov	r0, r2
 8006c62:	f7fc feac 	bl	80039be <lwip_htons>
 8006c66:	4603      	mov	r3, r0
 8006c68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c6a:	4b2a      	ldr	r3, [pc, #168]	; (8006d14 <tcp_input+0x218>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	885b      	ldrh	r3, [r3, #2]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <tcp_input+0x218>)
 8006c74:	681c      	ldr	r4, [r3, #0]
 8006c76:	4610      	mov	r0, r2
 8006c78:	f7fc fea1 	bl	80039be <lwip_htons>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c80:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <tcp_input+0x218>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <tcp_input+0x218>)
 8006c88:	681c      	ldr	r4, [r3, #0]
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fc fea5 	bl	80039da <lwip_htonl>
 8006c90:	4603      	mov	r3, r0
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <tcp_input+0x240>)
 8006c98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006c9a:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <tcp_input+0x218>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <tcp_input+0x218>)
 8006ca2:	681c      	ldr	r4, [r3, #0]
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	f7fc fe98 	bl	80039da <lwip_htonl>
 8006caa:	4603      	mov	r3, r0
 8006cac:	60a3      	str	r3, [r4, #8]
 8006cae:	68a3      	ldr	r3, [r4, #8]
 8006cb0:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <tcp_input+0x244>)
 8006cb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <tcp_input+0x218>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	89db      	ldrh	r3, [r3, #14]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <tcp_input+0x218>)
 8006cbe:	681c      	ldr	r4, [r3, #0]
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fc fe7c 	bl	80039be <lwip_htons>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <tcp_input+0x218>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	899b      	ldrh	r3, [r3, #12]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fc fe73 	bl	80039be <lwip_htons>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <tcp_input+0x248>)
 8006ce4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	891a      	ldrh	r2, [r3, #8]
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <tcp_input+0x248>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bf14      	ite	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	2300      	moveq	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	4413      	add	r3, r2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <tcp_input+0x24c>)
 8006d04:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <tcp_input+0x250>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	e082      	b.n	8006e18 <tcp_input+0x31c>
 8006d12:	bf00      	nop
 8006d14:	200000ec 	.word	0x200000ec
 8006d18:	20003480 	.word	0x20003480
 8006d1c:	200000f0 	.word	0x200000f0
 8006d20:	200000f4 	.word	0x200000f4
 8006d24:	200000f2 	.word	0x200000f2
 8006d28:	0800ede8 	.word	0x0800ede8
 8006d2c:	0800ee1c 	.word	0x0800ee1c
 8006d30:	0800ee2c 	.word	0x0800ee2c
 8006d34:	0800ee54 	.word	0x0800ee54
 8006d38:	0800ee60 	.word	0x0800ee60
 8006d3c:	200000fc 	.word	0x200000fc
 8006d40:	20000100 	.word	0x20000100
 8006d44:	20000108 	.word	0x20000108
 8006d48:	20000106 	.word	0x20000106
 8006d4c:	20006b18 	.word	0x20006b18
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	7d1b      	ldrb	r3, [r3, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <tcp_input+0x268>
 8006d58:	4b8f      	ldr	r3, [pc, #572]	; (8006f98 <tcp_input+0x49c>)
 8006d5a:	22e2      	movs	r2, #226	; 0xe2
 8006d5c:	498f      	ldr	r1, [pc, #572]	; (8006f9c <tcp_input+0x4a0>)
 8006d5e:	4890      	ldr	r0, [pc, #576]	; (8006fa0 <tcp_input+0x4a4>)
 8006d60:	f006 fa2c 	bl	800d1bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	7d1b      	ldrb	r3, [r3, #20]
 8006d68:	2b0a      	cmp	r3, #10
 8006d6a:	d105      	bne.n	8006d78 <tcp_input+0x27c>
 8006d6c:	4b8a      	ldr	r3, [pc, #552]	; (8006f98 <tcp_input+0x49c>)
 8006d6e:	22e3      	movs	r2, #227	; 0xe3
 8006d70:	498c      	ldr	r1, [pc, #560]	; (8006fa4 <tcp_input+0x4a8>)
 8006d72:	488b      	ldr	r0, [pc, #556]	; (8006fa0 <tcp_input+0x4a4>)
 8006d74:	f006 fa22 	bl	800d1bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	7d1b      	ldrb	r3, [r3, #20]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d105      	bne.n	8006d8c <tcp_input+0x290>
 8006d80:	4b85      	ldr	r3, [pc, #532]	; (8006f98 <tcp_input+0x49c>)
 8006d82:	22e4      	movs	r2, #228	; 0xe4
 8006d84:	4988      	ldr	r1, [pc, #544]	; (8006fa8 <tcp_input+0x4ac>)
 8006d86:	4886      	ldr	r0, [pc, #536]	; (8006fa0 <tcp_input+0x4a4>)
 8006d88:	f006 fa18 	bl	800d1bc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	8b1a      	ldrh	r2, [r3, #24]
 8006d90:	4b86      	ldr	r3, [pc, #536]	; (8006fac <tcp_input+0x4b0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d138      	bne.n	8006e0e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	8ada      	ldrh	r2, [r3, #22]
 8006da0:	4b82      	ldr	r3, [pc, #520]	; (8006fac <tcp_input+0x4b0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	885b      	ldrh	r3, [r3, #2]
 8006da6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d130      	bne.n	8006e0e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	4b7f      	ldr	r3, [pc, #508]	; (8006fb0 <tcp_input+0x4b4>)
 8006db2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d12a      	bne.n	8006e0e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b7c      	ldr	r3, [pc, #496]	; (8006fb0 <tcp_input+0x4b4>)
 8006dbe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d124      	bne.n	8006e0e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d105      	bne.n	8006dda <tcp_input+0x2de>
 8006dce:	4b72      	ldr	r3, [pc, #456]	; (8006f98 <tcp_input+0x49c>)
 8006dd0:	22ec      	movs	r2, #236	; 0xec
 8006dd2:	4978      	ldr	r1, [pc, #480]	; (8006fb4 <tcp_input+0x4b8>)
 8006dd4:	4872      	ldr	r0, [pc, #456]	; (8006fa0 <tcp_input+0x4a4>)
 8006dd6:	f006 f9f1 	bl	800d1bc <iprintf>
      if (prev != NULL) {
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006de8:	4b73      	ldr	r3, [pc, #460]	; (8006fb8 <tcp_input+0x4bc>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006df0:	4a71      	ldr	r2, [pc, #452]	; (8006fb8 <tcp_input+0x4bc>)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d10f      	bne.n	8006e20 <tcp_input+0x324>
 8006e00:	4b65      	ldr	r3, [pc, #404]	; (8006f98 <tcp_input+0x49c>)
 8006e02:	22f4      	movs	r2, #244	; 0xf4
 8006e04:	496d      	ldr	r1, [pc, #436]	; (8006fbc <tcp_input+0x4c0>)
 8006e06:	4866      	ldr	r0, [pc, #408]	; (8006fa0 <tcp_input+0x4a4>)
 8006e08:	f006 f9d8 	bl	800d1bc <iprintf>
      break;
 8006e0c:	e008      	b.n	8006e20 <tcp_input+0x324>
    }
    prev = pcb;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d198      	bne.n	8006d50 <tcp_input+0x254>
 8006e1e:	e000      	b.n	8006e22 <tcp_input+0x326>
      break;
 8006e20:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d173      	bne.n	8006f10 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e28:	4b65      	ldr	r3, [pc, #404]	; (8006fc0 <tcp_input+0x4c4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e02f      	b.n	8006e90 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	2b0a      	cmp	r3, #10
 8006e36:	d005      	beq.n	8006e44 <tcp_input+0x348>
 8006e38:	4b57      	ldr	r3, [pc, #348]	; (8006f98 <tcp_input+0x49c>)
 8006e3a:	22fe      	movs	r2, #254	; 0xfe
 8006e3c:	4961      	ldr	r1, [pc, #388]	; (8006fc4 <tcp_input+0x4c8>)
 8006e3e:	4858      	ldr	r0, [pc, #352]	; (8006fa0 <tcp_input+0x4a4>)
 8006e40:	f006 f9bc 	bl	800d1bc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	8b1a      	ldrh	r2, [r3, #24]
 8006e48:	4b58      	ldr	r3, [pc, #352]	; (8006fac <tcp_input+0x4b0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d11a      	bne.n	8006e8a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	8ada      	ldrh	r2, [r3, #22]
 8006e58:	4b54      	ldr	r3, [pc, #336]	; (8006fac <tcp_input+0x4b0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d112      	bne.n	8006e8a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <tcp_input+0x4b4>)
 8006e6a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d10c      	bne.n	8006e8a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4b4e      	ldr	r3, [pc, #312]	; (8006fb0 <tcp_input+0x4b4>)
 8006e76:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d106      	bne.n	8006e8a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006e7c:	69f8      	ldr	r0, [r7, #28]
 8006e7e:	f000 fb15 	bl	80074ac <tcp_timewait_input>
        pbuf_free(p);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fd fec8 	bl	8004c18 <pbuf_free>
        return;
 8006e88:	e1da      	b.n	8007240 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1cc      	bne.n	8006e30 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006e9a:	4b4b      	ldr	r3, [pc, #300]	; (8006fc8 <tcp_input+0x4cc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	e019      	b.n	8006ed6 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	8ada      	ldrh	r2, [r3, #22]
 8006ea6:	4b41      	ldr	r3, [pc, #260]	; (8006fac <tcp_input+0x4b0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	885b      	ldrh	r3, [r3, #2]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d10c      	bne.n	8006ecc <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <tcp_input+0x4b4>)
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d00f      	beq.n	8006ede <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <tcp_input+0x3e4>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e2      	bne.n	8006ea2 <tcp_input+0x3a6>
 8006edc:	e000      	b.n	8006ee0 <tcp_input+0x3e4>
            break;
 8006ede:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d014      	beq.n	8006f10 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006ef4:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <tcp_input+0x4cc>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006efc:	4a32      	ldr	r2, [pc, #200]	; (8006fc8 <tcp_input+0x4cc>)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006f02:	6978      	ldr	r0, [r7, #20]
 8006f04:	f000 f9f0 	bl	80072e8 <tcp_listen_input>
      pbuf_free(p);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fd fe85 	bl	8004c18 <pbuf_free>
      return;
 8006f0e:	e197      	b.n	8007240 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8164 	beq.w	80071e0 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006f18:	4b2c      	ldr	r3, [pc, #176]	; (8006fcc <tcp_input+0x4d0>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	891a      	ldrh	r2, [r3, #8]
 8006f22:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <tcp_input+0x4d0>)
 8006f24:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006f26:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <tcp_input+0x4d0>)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <tcp_input+0x4b0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a26      	ldr	r2, [pc, #152]	; (8006fcc <tcp_input+0x4d0>)
 8006f32:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006f34:	4b26      	ldr	r3, [pc, #152]	; (8006fd0 <tcp_input+0x4d4>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006f3a:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <tcp_input+0x4d8>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <tcp_input+0x4dc>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006f46:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <tcp_input+0x4e0>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7b5b      	ldrb	r3, [r3, #13]
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d03d      	beq.n	8006fe4 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006f68:	69f8      	ldr	r0, [r7, #28]
 8006f6a:	f7ff f991 	bl	8006290 <tcp_process_refused_data>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f113 0f0d 	cmn.w	r3, #13
 8006f74:	d007      	beq.n	8006f86 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d032      	beq.n	8006fe4 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006f7e:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <tcp_input+0x4e4>)
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d02e      	beq.n	8006fe4 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 8108 	bne.w	80071a0 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006f90:	69f8      	ldr	r0, [r7, #28]
 8006f92:	f002 fe3d 	bl	8009c10 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006f96:	e103      	b.n	80071a0 <tcp_input+0x6a4>
 8006f98:	0800ede8 	.word	0x0800ede8
 8006f9c:	0800ee80 	.word	0x0800ee80
 8006fa0:	0800ee2c 	.word	0x0800ee2c
 8006fa4:	0800eea8 	.word	0x0800eea8
 8006fa8:	0800eed4 	.word	0x0800eed4
 8006fac:	200000ec 	.word	0x200000ec
 8006fb0:	20003480 	.word	0x20003480
 8006fb4:	0800eefc 	.word	0x0800eefc
 8006fb8:	20006b18 	.word	0x20006b18
 8006fbc:	0800ef28 	.word	0x0800ef28
 8006fc0:	20006b28 	.word	0x20006b28
 8006fc4:	0800ef54 	.word	0x0800ef54
 8006fc8:	20006b20 	.word	0x20006b20
 8006fcc:	200000dc 	.word	0x200000dc
 8006fd0:	2000010c 	.word	0x2000010c
 8006fd4:	20000109 	.word	0x20000109
 8006fd8:	20000104 	.word	0x20000104
 8006fdc:	20000108 	.word	0x20000108
 8006fe0:	20000106 	.word	0x20000106
      }
    }
    tcp_input_pcb = pcb;
 8006fe4:	4a98      	ldr	r2, [pc, #608]	; (8007248 <tcp_input+0x74c>)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006fea:	69f8      	ldr	r0, [r7, #28]
 8006fec:	f000 fac6 	bl	800757c <tcp_process>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006ff4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ff8:	f113 0f0d 	cmn.w	r3, #13
 8006ffc:	f000 80d2 	beq.w	80071a4 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8007000:	4b92      	ldr	r3, [pc, #584]	; (800724c <tcp_input+0x750>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <tcp_input+0x52c>
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	6912      	ldr	r2, [r2, #16]
 8007020:	f06f 010d 	mvn.w	r1, #13
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007028:	69f9      	ldr	r1, [r7, #28]
 800702a:	4889      	ldr	r0, [pc, #548]	; (8007250 <tcp_input+0x754>)
 800702c:	f7ff fc4c 	bl	80068c8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	2002      	movs	r0, #2
 8007034:	f7fd f8be 	bl	80041b4 <memp_free>
 8007038:	e0bf      	b.n	80071ba <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800703e:	4b85      	ldr	r3, [pc, #532]	; (8007254 <tcp_input+0x758>)
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01b      	beq.n	800707e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007046:	4b83      	ldr	r3, [pc, #524]	; (8007254 <tcp_input+0x758>)
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <tcp_input+0x56c>
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	6910      	ldr	r0, [r2, #16]
 800705c:	89fa      	ldrh	r2, [r7, #14]
 800705e:	69f9      	ldr	r1, [r7, #28]
 8007060:	4798      	blx	r3
 8007062:	4603      	mov	r3, r0
 8007064:	74fb      	strb	r3, [r7, #19]
 8007066:	e001      	b.n	800706c <tcp_input+0x570>
 8007068:	2300      	movs	r3, #0
 800706a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800706c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007070:	f113 0f0d 	cmn.w	r3, #13
 8007074:	f000 8098 	beq.w	80071a8 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007078:	4b76      	ldr	r3, [pc, #472]	; (8007254 <tcp_input+0x758>)
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800707e:	69f8      	ldr	r0, [r7, #28]
 8007080:	f000 f900 	bl	8007284 <tcp_input_delayed_close>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 8090 	bne.w	80071ac <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800708c:	4b72      	ldr	r3, [pc, #456]	; (8007258 <tcp_input+0x75c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d041      	beq.n	8007118 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007098:	2b00      	cmp	r3, #0
 800709a:	d006      	beq.n	80070aa <tcp_input+0x5ae>
 800709c:	4b6f      	ldr	r3, [pc, #444]	; (800725c <tcp_input+0x760>)
 800709e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80070a2:	496f      	ldr	r1, [pc, #444]	; (8007260 <tcp_input+0x764>)
 80070a4:	486f      	ldr	r0, [pc, #444]	; (8007264 <tcp_input+0x768>)
 80070a6:	f006 f889 	bl	800d1bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	7e9b      	ldrb	r3, [r3, #26]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d008      	beq.n	80070c8 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80070b6:	4b68      	ldr	r3, [pc, #416]	; (8007258 <tcp_input+0x75c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fd fdac 	bl	8004c18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80070c0:	69f8      	ldr	r0, [r7, #28]
 80070c2:	f7fe fb7d 	bl	80057c0 <tcp_abort>
            goto aborted;
 80070c6:	e078      	b.n	80071ba <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <tcp_input+0x5f0>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	6918      	ldr	r0, [r3, #16]
 80070dc:	4b5e      	ldr	r3, [pc, #376]	; (8007258 <tcp_input+0x75c>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	2300      	movs	r3, #0
 80070e2:	69f9      	ldr	r1, [r7, #28]
 80070e4:	47a0      	blx	r4
 80070e6:	4603      	mov	r3, r0
 80070e8:	74fb      	strb	r3, [r7, #19]
 80070ea:	e008      	b.n	80070fe <tcp_input+0x602>
 80070ec:	4b5a      	ldr	r3, [pc, #360]	; (8007258 <tcp_input+0x75c>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	2300      	movs	r3, #0
 80070f2:	69f9      	ldr	r1, [r7, #28]
 80070f4:	2000      	movs	r0, #0
 80070f6:	f7ff f98b 	bl	8006410 <tcp_recv_null>
 80070fa:	4603      	mov	r3, r0
 80070fc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80070fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007102:	f113 0f0d 	cmn.w	r3, #13
 8007106:	d053      	beq.n	80071b0 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007108:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007110:	4b51      	ldr	r3, [pc, #324]	; (8007258 <tcp_input+0x75c>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007118:	4b4c      	ldr	r3, [pc, #304]	; (800724c <tcp_input+0x750>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	2b00      	cmp	r3, #0
 8007122:	d030      	beq.n	8007186 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007130:	7b5a      	ldrb	r2, [r3, #13]
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007136:	f042 0220 	orr.w	r2, r2, #32
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	735a      	strb	r2, [r3, #13]
 800713e:	e022      	b.n	8007186 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007144:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007148:	d005      	beq.n	8007156 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714e:	3301      	adds	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <tcp_input+0x67c>
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	6918      	ldr	r0, [r3, #16]
 800716a:	2300      	movs	r3, #0
 800716c:	2200      	movs	r2, #0
 800716e:	69f9      	ldr	r1, [r7, #28]
 8007170:	47a0      	blx	r4
 8007172:	4603      	mov	r3, r0
 8007174:	74fb      	strb	r3, [r7, #19]
 8007176:	e001      	b.n	800717c <tcp_input+0x680>
 8007178:	2300      	movs	r3, #0
 800717a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800717c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007180:	f113 0f0d 	cmn.w	r3, #13
 8007184:	d016      	beq.n	80071b4 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007186:	4b30      	ldr	r3, [pc, #192]	; (8007248 <tcp_input+0x74c>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800718c:	69f8      	ldr	r0, [r7, #28]
 800718e:	f000 f879 	bl	8007284 <tcp_input_delayed_close>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10f      	bne.n	80071b8 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007198:	69f8      	ldr	r0, [r7, #28]
 800719a:	f002 fd95 	bl	8009cc8 <tcp_output>
 800719e:	e00c      	b.n	80071ba <tcp_input+0x6be>
        goto aborted;
 80071a0:	bf00      	nop
 80071a2:	e00a      	b.n	80071ba <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80071a4:	bf00      	nop
 80071a6:	e008      	b.n	80071ba <tcp_input+0x6be>
              goto aborted;
 80071a8:	bf00      	nop
 80071aa:	e006      	b.n	80071ba <tcp_input+0x6be>
          goto aborted;
 80071ac:	bf00      	nop
 80071ae:	e004      	b.n	80071ba <tcp_input+0x6be>
            goto aborted;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <tcp_input+0x6be>
              goto aborted;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <tcp_input+0x6be>
          goto aborted;
 80071b8:	bf00      	nop
    tcp_input_pcb = NULL;
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <tcp_input+0x74c>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80071c0:	4b25      	ldr	r3, [pc, #148]	; (8007258 <tcp_input+0x75c>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80071c6:	4b28      	ldr	r3, [pc, #160]	; (8007268 <tcp_input+0x76c>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d037      	beq.n	800723e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 80071ce:	4b26      	ldr	r3, [pc, #152]	; (8007268 <tcp_input+0x76c>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd fd20 	bl	8004c18 <pbuf_free>
      inseg.p = NULL;
 80071d8:	4b23      	ldr	r3, [pc, #140]	; (8007268 <tcp_input+0x76c>)
 80071da:	2200      	movs	r2, #0
 80071dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80071de:	e02e      	b.n	800723e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80071e0:	4b22      	ldr	r3, [pc, #136]	; (800726c <tcp_input+0x770>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	899b      	ldrh	r3, [r3, #12]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fc fbe8 	bl	80039be <lwip_htons>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <tcp_input+0x774>)
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <tcp_input+0x778>)
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <tcp_input+0x77c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007208:	4b18      	ldr	r3, [pc, #96]	; (800726c <tcp_input+0x770>)
 800720a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800720c:	885b      	ldrh	r3, [r3, #2]
 800720e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007210:	4a16      	ldr	r2, [pc, #88]	; (800726c <tcp_input+0x770>)
 8007212:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007214:	8812      	ldrh	r2, [r2, #0]
 8007216:	b292      	uxth	r2, r2
 8007218:	9201      	str	r2, [sp, #4]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	4b17      	ldr	r3, [pc, #92]	; (800727c <tcp_input+0x780>)
 800721e:	4a18      	ldr	r2, [pc, #96]	; (8007280 <tcp_input+0x784>)
 8007220:	f002 ffdc 	bl	800a1dc <tcp_rst>
    pbuf_free(p);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fd fcf7 	bl	8004c18 <pbuf_free>
  return;
 800722a:	e008      	b.n	800723e <tcp_input+0x742>
    goto dropped;
 800722c:	bf00      	nop
 800722e:	e002      	b.n	8007236 <tcp_input+0x73a>
dropped:
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <tcp_input+0x73a>
      goto dropped;
 8007234:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fd fcee 	bl	8004c18 <pbuf_free>
 800723c:	e000      	b.n	8007240 <tcp_input+0x744>
  return;
 800723e:	bf00      	nop
}
 8007240:	3724      	adds	r7, #36	; 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	bf00      	nop
 8007248:	20006b2c 	.word	0x20006b2c
 800724c:	20000109 	.word	0x20000109
 8007250:	20006b18 	.word	0x20006b18
 8007254:	20000104 	.word	0x20000104
 8007258:	2000010c 	.word	0x2000010c
 800725c:	0800ede8 	.word	0x0800ede8
 8007260:	0800ef84 	.word	0x0800ef84
 8007264:	0800ee2c 	.word	0x0800ee2c
 8007268:	200000dc 	.word	0x200000dc
 800726c:	200000ec 	.word	0x200000ec
 8007270:	20000100 	.word	0x20000100
 8007274:	20000106 	.word	0x20000106
 8007278:	200000fc 	.word	0x200000fc
 800727c:	20003490 	.word	0x20003490
 8007280:	20003494 	.word	0x20003494

08007284 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800728c:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <tcp_input_delayed_close+0x5c>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01d      	beq.n	80072d4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7e9b      	ldrb	r3, [r3, #26]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <tcp_input_delayed_close+0x3c>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6912      	ldr	r2, [r2, #16]
 80072b8:	f06f 010e 	mvn.w	r1, #14
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4808      	ldr	r0, [pc, #32]	; (80072e4 <tcp_input_delayed_close+0x60>)
 80072c4:	f7ff fb00 	bl	80068c8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	2002      	movs	r0, #2
 80072cc:	f7fc ff72 	bl	80041b4 <memp_free>
    return 1;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e000      	b.n	80072d6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000109 	.word	0x20000109
 80072e4:	20006b18 	.word	0x20006b18

080072e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80072f0:	4b64      	ldr	r3, [pc, #400]	; (8007484 <tcp_listen_input+0x19c>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f040 80bc 	bne.w	8007476 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80072fe:	4b61      	ldr	r3, [pc, #388]	; (8007484 <tcp_listen_input+0x19c>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b00      	cmp	r3, #0
 8007308:	d016      	beq.n	8007338 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800730a:	4b5f      	ldr	r3, [pc, #380]	; (8007488 <tcp_listen_input+0x1a0>)
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	4b5f      	ldr	r3, [pc, #380]	; (800748c <tcp_listen_input+0x1a4>)
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	4b5e      	ldr	r3, [pc, #376]	; (8007490 <tcp_listen_input+0x1a8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800731a:	4b5e      	ldr	r3, [pc, #376]	; (8007494 <tcp_listen_input+0x1ac>)
 800731c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800731e:	885b      	ldrh	r3, [r3, #2]
 8007320:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007322:	4a5c      	ldr	r2, [pc, #368]	; (8007494 <tcp_listen_input+0x1ac>)
 8007324:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007326:	8812      	ldrh	r2, [r2, #0]
 8007328:	b292      	uxth	r2, r2
 800732a:	9201      	str	r2, [sp, #4]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	4b5a      	ldr	r3, [pc, #360]	; (8007498 <tcp_listen_input+0x1b0>)
 8007330:	4a5a      	ldr	r2, [pc, #360]	; (800749c <tcp_listen_input+0x1b4>)
 8007332:	f002 ff53 	bl	800a1dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007336:	e0a0      	b.n	800747a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8007338:	4b52      	ldr	r3, [pc, #328]	; (8007484 <tcp_listen_input+0x19c>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 809a 	beq.w	800747a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7d5b      	ldrb	r3, [r3, #21]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f93e 	bl	80065cc <tcp_alloc>
 8007350:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d111      	bne.n	800737c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <tcp_listen_input+0x8e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6910      	ldr	r0, [r2, #16]
 8007368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800736c:	2100      	movs	r1, #0
 800736e:	4798      	blx	r3
 8007370:	4603      	mov	r3, r0
 8007372:	73bb      	strb	r3, [r7, #14]
      return;
 8007374:	e082      	b.n	800747c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007376:	23f0      	movs	r3, #240	; 0xf0
 8007378:	73bb      	strb	r3, [r7, #14]
      return;
 800737a:	e07f      	b.n	800747c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800737c:	4b48      	ldr	r3, [pc, #288]	; (80074a0 <tcp_listen_input+0x1b8>)
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007384:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <tcp_listen_input+0x1b8>)
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8ada      	ldrh	r2, [r3, #22]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007394:	4b3f      	ldr	r3, [pc, #252]	; (8007494 <tcp_listen_input+0x1ac>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29a      	uxth	r2, r3
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2203      	movs	r2, #3
 80073a4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80073a6:	4b3a      	ldr	r3, [pc, #232]	; (8007490 <tcp_listen_input+0x1a8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80073b8:	6978      	ldr	r0, [r7, #20]
 80073ba:	f7ff fb01 	bl	80069c0 <tcp_next_iss>
 80073be:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80073d8:	4b2d      	ldr	r3, [pc, #180]	; (8007490 <tcp_listen_input+0x1a8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	1e5a      	subs	r2, r3, #1
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7a1b      	ldrb	r3, [r3, #8]
 80073f4:	f003 030c 	and.w	r3, r3, #12
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <tcp_listen_input+0x1bc>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	4a27      	ldr	r2, [pc, #156]	; (80074a4 <tcp_listen_input+0x1bc>)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	f003 f938 	bl	800a680 <tcp_timer_needed>
 8007410:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <tcp_listen_input+0x1c0>)
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007416:	6978      	ldr	r0, [r7, #20]
 8007418:	f001 fd14 	bl	8008e44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800741c:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <tcp_listen_input+0x1ac>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	89db      	ldrh	r3, [r3, #14]
 8007422:	b29a      	uxth	r2, r3
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7ff fad5 	bl	80069f0 <tcp_eff_send_mss_impl>
 8007446:	4603      	mov	r3, r0
 8007448:	461a      	mov	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800744e:	2112      	movs	r1, #18
 8007450:	6978      	ldr	r0, [r7, #20]
 8007452:	f002 fae1 	bl	8009a18 <tcp_enqueue_flags>
 8007456:	4603      	mov	r3, r0
 8007458:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8007462:	2100      	movs	r1, #0
 8007464:	6978      	ldr	r0, [r7, #20]
 8007466:	f7fe f8f9 	bl	800565c <tcp_abandon>
      return;
 800746a:	e007      	b.n	800747c <tcp_listen_input+0x194>
    tcp_output(npcb);
 800746c:	6978      	ldr	r0, [r7, #20]
 800746e:	f002 fc2b 	bl	8009cc8 <tcp_output>
  return;
 8007472:	bf00      	nop
 8007474:	e001      	b.n	800747a <tcp_listen_input+0x192>
    return;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <tcp_listen_input+0x194>
  return;
 800747a:	bf00      	nop
}
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000108 	.word	0x20000108
 8007488:	20000100 	.word	0x20000100
 800748c:	20000106 	.word	0x20000106
 8007490:	200000fc 	.word	0x200000fc
 8007494:	200000ec 	.word	0x200000ec
 8007498:	20003490 	.word	0x20003490
 800749c:	20003494 	.word	0x20003494
 80074a0:	20003480 	.word	0x20003480
 80074a4:	20006b18 	.word	0x20006b18
 80074a8:	20006b14 	.word	0x20006b14

080074ac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80074b4:	4b29      	ldr	r3, [pc, #164]	; (800755c <tcp_timewait_input+0xb0>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d147      	bne.n	8007550 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80074c0:	4b26      	ldr	r3, [pc, #152]	; (800755c <tcp_timewait_input+0xb0>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d027      	beq.n	800751c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80074cc:	4b24      	ldr	r3, [pc, #144]	; (8007560 <tcp_timewait_input+0xb4>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	db2a      	blt.n	8007530 <tcp_timewait_input+0x84>
 80074da:	4b21      	ldr	r3, [pc, #132]	; (8007560 <tcp_timewait_input+0xb4>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80074e6:	440b      	add	r3, r1
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dc20      	bgt.n	8007530 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80074ee:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <tcp_timewait_input+0xb8>)
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <tcp_timewait_input+0xbc>)
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	4b19      	ldr	r3, [pc, #100]	; (8007560 <tcp_timewait_input+0xb4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074fe:	4b1b      	ldr	r3, [pc, #108]	; (800756c <tcp_timewait_input+0xc0>)
 8007500:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007502:	885b      	ldrh	r3, [r3, #2]
 8007504:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007506:	4a19      	ldr	r2, [pc, #100]	; (800756c <tcp_timewait_input+0xc0>)
 8007508:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800750a:	8812      	ldrh	r2, [r2, #0]
 800750c:	b292      	uxth	r2, r2
 800750e:	9201      	str	r2, [sp, #4]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	4b17      	ldr	r3, [pc, #92]	; (8007570 <tcp_timewait_input+0xc4>)
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <tcp_timewait_input+0xc8>)
 8007516:	f002 fe61 	bl	800a1dc <tcp_rst>
      return;
 800751a:	e01c      	b.n	8007556 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <tcp_timewait_input+0xb0>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007528:	4b13      	ldr	r3, [pc, #76]	; (8007578 <tcp_timewait_input+0xcc>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <tcp_timewait_input+0xbc>)
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7e9b      	ldrb	r3, [r3, #26]
 800753c:	f043 0302 	orr.w	r3, r3, #2
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f002 fbbe 	bl	8009cc8 <tcp_output>
  }
  return;
 800754c:	bf00      	nop
 800754e:	e001      	b.n	8007554 <tcp_timewait_input+0xa8>
    return;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <tcp_timewait_input+0xaa>
  return;
 8007554:	bf00      	nop
}
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000108 	.word	0x20000108
 8007560:	200000fc 	.word	0x200000fc
 8007564:	20000100 	.word	0x20000100
 8007568:	20000106 	.word	0x20000106
 800756c:	200000ec 	.word	0x200000ec
 8007570:	20003490 	.word	0x20003490
 8007574:	20003494 	.word	0x20003494
 8007578:	20006b1c 	.word	0x20006b1c

0800757c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	; 0x28
 8007580:	af02      	add	r7, sp, #8
 8007582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800758c:	4ba4      	ldr	r3, [pc, #656]	; (8007820 <tcp_process+0x2a4>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d04e      	beq.n	8007636 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7d1b      	ldrb	r3, [r3, #20]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d108      	bne.n	80075b2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a4:	4b9f      	ldr	r3, [pc, #636]	; (8007824 <tcp_process+0x2a8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d123      	bne.n	80075f4 <tcp_process+0x78>
        acceptable = 1;
 80075ac:	2301      	movs	r3, #1
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e020      	b.n	80075f4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b6:	4b9c      	ldr	r3, [pc, #624]	; (8007828 <tcp_process+0x2ac>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d102      	bne.n	80075c4 <tcp_process+0x48>
        acceptable = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	76fb      	strb	r3, [r7, #27]
 80075c2:	e017      	b.n	80075f4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80075c4:	4b98      	ldr	r3, [pc, #608]	; (8007828 <tcp_process+0x2ac>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	db10      	blt.n	80075f4 <tcp_process+0x78>
 80075d2:	4b95      	ldr	r3, [pc, #596]	; (8007828 <tcp_process+0x2ac>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80075de:	440b      	add	r3, r1
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc06      	bgt.n	80075f4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	7e9b      	ldrb	r3, [r3, #26]
 80075ea:	f043 0302 	orr.w	r3, r3, #2
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80075f4:	7efb      	ldrb	r3, [r7, #27]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01b      	beq.n	8007632 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7d1b      	ldrb	r3, [r3, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d106      	bne.n	8007610 <tcp_process+0x94>
 8007602:	4b8a      	ldr	r3, [pc, #552]	; (800782c <tcp_process+0x2b0>)
 8007604:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007608:	4989      	ldr	r1, [pc, #548]	; (8007830 <tcp_process+0x2b4>)
 800760a:	488a      	ldr	r0, [pc, #552]	; (8007834 <tcp_process+0x2b8>)
 800760c:	f005 fdd6 	bl	800d1bc <iprintf>
      recv_flags |= TF_RESET;
 8007610:	4b89      	ldr	r3, [pc, #548]	; (8007838 <tcp_process+0x2bc>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f043 0308 	orr.w	r3, r3, #8
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b87      	ldr	r3, [pc, #540]	; (8007838 <tcp_process+0x2bc>)
 800761c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7e9b      	ldrb	r3, [r3, #26]
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	b2da      	uxtb	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800762c:	f06f 030d 	mvn.w	r3, #13
 8007630:	e34d      	b.n	8007cce <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	e34b      	b.n	8007cce <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007636:	4b7a      	ldr	r3, [pc, #488]	; (8007820 <tcp_process+0x2a4>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <tcp_process+0xe8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7d1b      	ldrb	r3, [r3, #20]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d00c      	beq.n	8007664 <tcp_process+0xe8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7d1b      	ldrb	r3, [r3, #20]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d008      	beq.n	8007664 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7e9b      	ldrb	r3, [r3, #26]
 8007656:	f043 0302 	orr.w	r3, r3, #2
 800765a:	b2da      	uxtb	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e334      	b.n	8007cce <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	7e9b      	ldrb	r3, [r3, #26]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007670:	4b72      	ldr	r3, [pc, #456]	; (800783c <tcp_process+0x2c0>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fbdf 	bl	8008e44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7d1b      	ldrb	r3, [r3, #20]
 800768a:	3b02      	subs	r3, #2
 800768c:	2b07      	cmp	r3, #7
 800768e:	f200 830e 	bhi.w	8007cae <tcp_process+0x732>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <tcp_process+0x11c>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080078b1 	.word	0x080078b1
 80076a0:	08007a09 	.word	0x08007a09
 80076a4:	08007a33 	.word	0x08007a33
 80076a8:	08007b5d 	.word	0x08007b5d
 80076ac:	08007a09 	.word	0x08007a09
 80076b0:	08007be9 	.word	0x08007be9
 80076b4:	08007c79 	.word	0x08007c79
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80076b8:	4b59      	ldr	r3, [pc, #356]	; (8007820 <tcp_process+0x2a4>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80cb 	beq.w	800785c <tcp_process+0x2e0>
 80076c6:	4b56      	ldr	r3, [pc, #344]	; (8007820 <tcp_process+0x2a4>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80c4 	beq.w	800785c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	4b52      	ldr	r3, [pc, #328]	; (8007824 <tcp_process+0x2a8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	f040 80bc 	bne.w	800785c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80076e4:	4b50      	ldr	r3, [pc, #320]	; (8007828 <tcp_process+0x2ac>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80076f6:	4b4b      	ldr	r3, [pc, #300]	; (8007824 <tcp_process+0x2a8>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80076fe:	4b50      	ldr	r3, [pc, #320]	; (8007840 <tcp_process+0x2c4>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	89db      	ldrh	r3, [r3, #14]
 8007704:	b29a      	uxth	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007718:	4b43      	ldr	r3, [pc, #268]	; (8007828 <tcp_process+0x2ac>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2204      	movs	r2, #4
 8007726:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7ff f95c 	bl	80069f0 <tcp_eff_send_mss_impl>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	f241 121c 	movw	r2, #4380	; 0x111c
 800774a:	429a      	cmp	r2, r3
 800774c:	bf38      	it	cc
 800774e:	461a      	movcc	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4293      	cmp	r3, r2
 8007758:	bf28      	it	cs
 800775a:	4613      	movcs	r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <tcp_process+0x200>
 800776e:	4b2f      	ldr	r3, [pc, #188]	; (800782c <tcp_process+0x2b0>)
 8007770:	f240 321a 	movw	r2, #794	; 0x31a
 8007774:	4933      	ldr	r1, [pc, #204]	; (8007844 <tcp_process+0x2c8>)
 8007776:	482f      	ldr	r0, [pc, #188]	; (8007834 <tcp_process+0x2b8>)
 8007778:	f005 fd20 	bl	800d1bc <iprintf>
      --pcb->snd_queuelen;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007790:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d111      	bne.n	80077bc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800779c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d106      	bne.n	80077b2 <tcp_process+0x236>
 80077a4:	4b21      	ldr	r3, [pc, #132]	; (800782c <tcp_process+0x2b0>)
 80077a6:	f240 3222 	movw	r2, #802	; 0x322
 80077aa:	4927      	ldr	r1, [pc, #156]	; (8007848 <tcp_process+0x2cc>)
 80077ac:	4821      	ldr	r0, [pc, #132]	; (8007834 <tcp_process+0x2b8>)
 80077ae:	f005 fd05 	bl	800d1bc <iprintf>
        pcb->unsent = rseg->next;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	669a      	str	r2, [r3, #104]	; 0x68
 80077ba:	e003      	b.n	80077c4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80077c4:	69f8      	ldr	r0, [r7, #28]
 80077c6:	f7fe fde0 	bl	800638a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d104      	bne.n	80077dc <tcp_process+0x260>
        pcb->rtime = -1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80077da:	e006      	b.n	80077ea <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <tcp_process+0x28e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6910      	ldr	r0, [r2, #16]
 80077fe:	2200      	movs	r2, #0
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4798      	blx	r3
 8007804:	4603      	mov	r3, r0
 8007806:	76bb      	strb	r3, [r7, #26]
 8007808:	e001      	b.n	800780e <tcp_process+0x292>
 800780a:	2300      	movs	r3, #0
 800780c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800780e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007812:	f113 0f0d 	cmn.w	r3, #13
 8007816:	d119      	bne.n	800784c <tcp_process+0x2d0>
        return ERR_ABRT;
 8007818:	f06f 030c 	mvn.w	r3, #12
 800781c:	e257      	b.n	8007cce <tcp_process+0x752>
 800781e:	bf00      	nop
 8007820:	20000108 	.word	0x20000108
 8007824:	20000100 	.word	0x20000100
 8007828:	200000fc 	.word	0x200000fc
 800782c:	0800ede8 	.word	0x0800ede8
 8007830:	0800efa0 	.word	0x0800efa0
 8007834:	0800ee2c 	.word	0x0800ee2c
 8007838:	20000109 	.word	0x20000109
 800783c:	20006b1c 	.word	0x20006b1c
 8007840:	200000ec 	.word	0x200000ec
 8007844:	0800efc0 	.word	0x0800efc0
 8007848:	0800efd8 	.word	0x0800efd8
      }
      tcp_ack_now(pcb);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7e9b      	ldrb	r3, [r3, #26]
 8007850:	f043 0302 	orr.w	r3, r3, #2
 8007854:	b2da      	uxtb	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800785a:	e22a      	b.n	8007cb2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800785c:	4b9f      	ldr	r3, [pc, #636]	; (8007adc <tcp_process+0x560>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8224 	beq.w	8007cb2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800786a:	4b9d      	ldr	r3, [pc, #628]	; (8007ae0 <tcp_process+0x564>)
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	4b9d      	ldr	r3, [pc, #628]	; (8007ae4 <tcp_process+0x568>)
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	4b9c      	ldr	r3, [pc, #624]	; (8007ae8 <tcp_process+0x56c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800787a:	4b9c      	ldr	r3, [pc, #624]	; (8007aec <tcp_process+0x570>)
 800787c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800787e:	885b      	ldrh	r3, [r3, #2]
 8007880:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007882:	4a9a      	ldr	r2, [pc, #616]	; (8007aec <tcp_process+0x570>)
 8007884:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007886:	8812      	ldrh	r2, [r2, #0]
 8007888:	b292      	uxth	r2, r2
 800788a:	9201      	str	r2, [sp, #4]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	4b98      	ldr	r3, [pc, #608]	; (8007af0 <tcp_process+0x574>)
 8007890:	4a98      	ldr	r2, [pc, #608]	; (8007af4 <tcp_process+0x578>)
 8007892:	f002 fca3 	bl	800a1dc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800789c:	2b05      	cmp	r3, #5
 800789e:	f200 8208 	bhi.w	8007cb2 <tcp_process+0x736>
        pcb->rtime = 0;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f002 fd0d 	bl	800a2c8 <tcp_rexmit_rto>
    break;
 80078ae:	e200      	b.n	8007cb2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80078b0:	4b8a      	ldr	r3, [pc, #552]	; (8007adc <tcp_process+0x560>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8091 	beq.w	80079e0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80078be:	4b88      	ldr	r3, [pc, #544]	; (8007ae0 <tcp_process+0x564>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	db71      	blt.n	80079b2 <tcp_process+0x436>
 80078ce:	4b84      	ldr	r3, [pc, #528]	; (8007ae0 <tcp_process+0x564>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc6a      	bgt.n	80079b2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2204      	movs	r2, #4
 80078e0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <tcp_process+0x386>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <tcp_process+0x386>
 80078f4:	4b80      	ldr	r3, [pc, #512]	; (8007af8 <tcp_process+0x57c>)
 80078f6:	f240 3251 	movw	r2, #849	; 0x351
 80078fa:	4980      	ldr	r1, [pc, #512]	; (8007afc <tcp_process+0x580>)
 80078fc:	4880      	ldr	r0, [pc, #512]	; (8007b00 <tcp_process+0x584>)
 80078fe:	f005 fc5d 	bl	800d1bc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800790a:	23fa      	movs	r3, #250	; 0xfa
 800790c:	76bb      	strb	r3, [r7, #26]
 800790e:	e011      	b.n	8007934 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <tcp_process+0x3b4>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6910      	ldr	r0, [r2, #16]
 8007924:	2200      	movs	r2, #0
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4798      	blx	r3
 800792a:	4603      	mov	r3, r0
 800792c:	76bb      	strb	r3, [r7, #26]
 800792e:	e001      	b.n	8007934 <tcp_process+0x3b8>
 8007930:	23f0      	movs	r3, #240	; 0xf0
 8007932:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007934:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800793c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007940:	f113 0f0d 	cmn.w	r3, #13
 8007944:	d002      	beq.n	800794c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fd ff3a 	bl	80057c0 <tcp_abort>
          }
          return ERR_ABRT;
 800794c:	f06f 030c 	mvn.w	r3, #12
 8007950:	e1bd      	b.n	8007cce <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa42 	bl	8007ddc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8007958:	4b6a      	ldr	r3, [pc, #424]	; (8007b04 <tcp_process+0x588>)
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <tcp_process+0x3f0>
          recv_acked--;
 8007960:	4b68      	ldr	r3, [pc, #416]	; (8007b04 <tcp_process+0x588>)
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	4b66      	ldr	r3, [pc, #408]	; (8007b04 <tcp_process+0x588>)
 800796a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	f241 121c 	movw	r2, #4380	; 0x111c
 8007976:	429a      	cmp	r2, r3
 8007978:	bf38      	it	cc
 800797a:	461a      	movcc	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4293      	cmp	r3, r2
 8007984:	bf28      	it	cs
 8007986:	4613      	movcs	r3, r2
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007990:	4b5d      	ldr	r3, [pc, #372]	; (8007b08 <tcp_process+0x58c>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d034      	beq.n	8007a06 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7e9b      	ldrb	r3, [r3, #26]
 80079a0:	f043 0302 	orr.w	r3, r3, #2
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2207      	movs	r2, #7
 80079ae:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80079b0:	e029      	b.n	8007a06 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079b2:	4b4b      	ldr	r3, [pc, #300]	; (8007ae0 <tcp_process+0x564>)
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <tcp_process+0x568>)
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	4b4a      	ldr	r3, [pc, #296]	; (8007ae8 <tcp_process+0x56c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079c2:	4b4a      	ldr	r3, [pc, #296]	; (8007aec <tcp_process+0x570>)
 80079c4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079ca:	4a48      	ldr	r2, [pc, #288]	; (8007aec <tcp_process+0x570>)
 80079cc:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079ce:	8812      	ldrh	r2, [r2, #0]
 80079d0:	b292      	uxth	r2, r2
 80079d2:	9201      	str	r2, [sp, #4]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4b46      	ldr	r3, [pc, #280]	; (8007af0 <tcp_process+0x574>)
 80079d8:	4a46      	ldr	r2, [pc, #280]	; (8007af4 <tcp_process+0x578>)
 80079da:	f002 fbff 	bl	800a1dc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80079de:	e16a      	b.n	8007cb6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80079e0:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <tcp_process+0x560>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 8164 	beq.w	8007cb6 <tcp_process+0x73a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	1e5a      	subs	r2, r3, #1
 80079f4:	4b3c      	ldr	r3, [pc, #240]	; (8007ae8 <tcp_process+0x56c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	f040 815c 	bne.w	8007cb6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f002 fc98 	bl	800a334 <tcp_rexmit>
    break;
 8007a04:	e157      	b.n	8007cb6 <tcp_process+0x73a>
 8007a06:	e156      	b.n	8007cb6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9e7 	bl	8007ddc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007a0e:	4b3e      	ldr	r3, [pc, #248]	; (8007b08 <tcp_process+0x58c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 814f 	beq.w	8007cba <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7e9b      	ldrb	r3, [r3, #26]
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007a30:	e143      	b.n	8007cba <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9d2 	bl	8007ddc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007a38:	4b33      	ldr	r3, [pc, #204]	; (8007b08 <tcp_process+0x58c>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d074      	beq.n	8007b2e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a44:	4b25      	ldr	r3, [pc, #148]	; (8007adc <tcp_process+0x560>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 0310 	and.w	r3, r3, #16
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d063      	beq.n	8007b18 <tcp_process+0x59c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a54:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <tcp_process+0x564>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d15d      	bne.n	8007b18 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d159      	bne.n	8007b18 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	7e9b      	ldrb	r3, [r3, #26]
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fe fee6 	bl	8006844 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007a78:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <tcp_process+0x590>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d105      	bne.n	8007a8e <tcp_process+0x512>
 8007a82:	4b22      	ldr	r3, [pc, #136]	; (8007b0c <tcp_process+0x590>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a20      	ldr	r2, [pc, #128]	; (8007b0c <tcp_process+0x590>)
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	e013      	b.n	8007ab6 <tcp_process+0x53a>
 8007a8e:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <tcp_process+0x590>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e00c      	b.n	8007ab0 <tcp_process+0x534>
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d104      	bne.n	8007aaa <tcp_process+0x52e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	60da      	str	r2, [r3, #12]
 8007aa8:	e005      	b.n	8007ab6 <tcp_process+0x53a>
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1ef      	bne.n	8007a96 <tcp_process+0x51a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	60da      	str	r2, [r3, #12]
 8007abc:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <tcp_process+0x594>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007ac8:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <tcp_process+0x598>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60da      	str	r2, [r3, #12]
 8007ad0:	4a10      	ldr	r2, [pc, #64]	; (8007b14 <tcp_process+0x598>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	f002 fdd3 	bl	800a680 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8007ada:	e0f0      	b.n	8007cbe <tcp_process+0x742>
 8007adc:	20000108 	.word	0x20000108
 8007ae0:	20000100 	.word	0x20000100
 8007ae4:	20000106 	.word	0x20000106
 8007ae8:	200000fc 	.word	0x200000fc
 8007aec:	200000ec 	.word	0x200000ec
 8007af0:	20003490 	.word	0x20003490
 8007af4:	20003494 	.word	0x20003494
 8007af8:	0800ede8 	.word	0x0800ede8
 8007afc:	0800efec 	.word	0x0800efec
 8007b00:	0800ee2c 	.word	0x0800ee2c
 8007b04:	20000104 	.word	0x20000104
 8007b08:	20000109 	.word	0x20000109
 8007b0c:	20006b18 	.word	0x20006b18
 8007b10:	20006b14 	.word	0x20006b14
 8007b14:	20006b28 	.word	0x20006b28
        tcp_ack_now(pcb);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7e9b      	ldrb	r3, [r3, #26]
 8007b1c:	f043 0302 	orr.w	r3, r3, #2
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2208      	movs	r2, #8
 8007b2a:	751a      	strb	r2, [r3, #20]
    break;
 8007b2c:	e0c7      	b.n	8007cbe <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b2e:	4b6a      	ldr	r3, [pc, #424]	; (8007cd8 <tcp_process+0x75c>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 80c1 	beq.w	8007cbe <tcp_process+0x742>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b40:	4b66      	ldr	r3, [pc, #408]	; (8007cdc <tcp_process+0x760>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	f040 80ba 	bne.w	8007cbe <tcp_process+0x742>
               pcb->unsent == NULL) {
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 80b5 	bne.w	8007cbe <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2206      	movs	r2, #6
 8007b58:	751a      	strb	r2, [r3, #20]
    break;
 8007b5a:	e0b0      	b.n	8007cbe <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f93d 	bl	8007ddc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007b62:	4b5f      	ldr	r3, [pc, #380]	; (8007ce0 <tcp_process+0x764>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80a9 	beq.w	8007cc2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	7e9b      	ldrb	r3, [r3, #26]
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fe fe60 	bl	8006844 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007b84:	4b57      	ldr	r3, [pc, #348]	; (8007ce4 <tcp_process+0x768>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d105      	bne.n	8007b9a <tcp_process+0x61e>
 8007b8e:	4b55      	ldr	r3, [pc, #340]	; (8007ce4 <tcp_process+0x768>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4a53      	ldr	r2, [pc, #332]	; (8007ce4 <tcp_process+0x768>)
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	e013      	b.n	8007bc2 <tcp_process+0x646>
 8007b9a:	4b52      	ldr	r3, [pc, #328]	; (8007ce4 <tcp_process+0x768>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e00c      	b.n	8007bbc <tcp_process+0x640>
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d104      	bne.n	8007bb6 <tcp_process+0x63a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	60da      	str	r2, [r3, #12]
 8007bb4:	e005      	b.n	8007bc2 <tcp_process+0x646>
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1ef      	bne.n	8007ba2 <tcp_process+0x626>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	60da      	str	r2, [r3, #12]
 8007bc8:	4b47      	ldr	r3, [pc, #284]	; (8007ce8 <tcp_process+0x76c>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007bd4:	4b45      	ldr	r3, [pc, #276]	; (8007cec <tcp_process+0x770>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60da      	str	r2, [r3, #12]
 8007bdc:	4a43      	ldr	r2, [pc, #268]	; (8007cec <tcp_process+0x770>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	f002 fd4d 	bl	800a680 <tcp_timer_needed>
    }
    break;
 8007be6:	e06c      	b.n	8007cc2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8f7 	bl	8007ddc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007bee:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <tcp_process+0x75c>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d065      	beq.n	8007cc6 <tcp_process+0x74a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bfe:	4b37      	ldr	r3, [pc, #220]	; (8007cdc <tcp_process+0x760>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d15f      	bne.n	8007cc6 <tcp_process+0x74a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d15b      	bne.n	8007cc6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fe fe18 	bl	8006844 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007c14:	4b33      	ldr	r3, [pc, #204]	; (8007ce4 <tcp_process+0x768>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d105      	bne.n	8007c2a <tcp_process+0x6ae>
 8007c1e:	4b31      	ldr	r3, [pc, #196]	; (8007ce4 <tcp_process+0x768>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4a2f      	ldr	r2, [pc, #188]	; (8007ce4 <tcp_process+0x768>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	e013      	b.n	8007c52 <tcp_process+0x6d6>
 8007c2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ce4 <tcp_process+0x768>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e00c      	b.n	8007c4c <tcp_process+0x6d0>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d104      	bne.n	8007c46 <tcp_process+0x6ca>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	60da      	str	r2, [r3, #12]
 8007c44:	e005      	b.n	8007c52 <tcp_process+0x6d6>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1ef      	bne.n	8007c32 <tcp_process+0x6b6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	60da      	str	r2, [r3, #12]
 8007c58:	4b23      	ldr	r3, [pc, #140]	; (8007ce8 <tcp_process+0x76c>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	220a      	movs	r2, #10
 8007c62:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007c64:	4b21      	ldr	r3, [pc, #132]	; (8007cec <tcp_process+0x770>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	60da      	str	r2, [r3, #12]
 8007c6c:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <tcp_process+0x770>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	f002 fd05 	bl	800a680 <tcp_timer_needed>
    }
    break;
 8007c76:	e026      	b.n	8007cc6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f8af 	bl	8007ddc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007c7e:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <tcp_process+0x75c>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0310 	and.w	r3, r3, #16
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01f      	beq.n	8007cca <tcp_process+0x74e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <tcp_process+0x760>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d119      	bne.n	8007cca <tcp_process+0x74e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d115      	bne.n	8007cca <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007c9e:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <tcp_process+0x764>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f043 0310 	orr.w	r3, r3, #16
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <tcp_process+0x764>)
 8007caa:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007cac:	e00d      	b.n	8007cca <tcp_process+0x74e>
  default:
    break;
 8007cae:	bf00      	nop
 8007cb0:	e00c      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cb2:	bf00      	nop
 8007cb4:	e00a      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cb6:	bf00      	nop
 8007cb8:	e008      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cba:	bf00      	nop
 8007cbc:	e006      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cbe:	bf00      	nop
 8007cc0:	e004      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cc2:	bf00      	nop
 8007cc4:	e002      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cc6:	bf00      	nop
 8007cc8:	e000      	b.n	8007ccc <tcp_process+0x750>
    break;
 8007cca:	bf00      	nop
  }
  return ERR_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000108 	.word	0x20000108
 8007cdc:	20000100 	.word	0x20000100
 8007ce0:	20000109 	.word	0x20000109
 8007ce4:	20006b18 	.word	0x20006b18
 8007ce8:	20006b14 	.word	0x20006b14
 8007cec:	20006b28 	.word	0x20006b28

08007cf0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	899b      	ldrh	r3, [r3, #12]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fb fe5b 	bl	80039be <lwip_htons>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d027      	beq.n	8007d62 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007d12:	6838      	ldr	r0, [r7, #0]
 8007d14:	f7fe fb25 	bl	8006362 <tcp_segs_free>
    next = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	e055      	b.n	8007dca <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	899b      	ldrh	r3, [r3, #12]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb fe49 	bl	80039be <lwip_htons>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00d      	beq.n	8007d52 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	899b      	ldrh	r3, [r3, #12]
 8007d3c:	b29c      	uxth	r4, r3
 8007d3e:	2001      	movs	r0, #1
 8007d40:	f7fb fe3d 	bl	80039be <lwip_htons>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4322      	orrs	r2, r4
 8007d4e:	b292      	uxth	r2, r2
 8007d50:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7fe fb14 	bl	800638a <tcp_seg_free>
    while (next &&
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00e      	beq.n	8007d86 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	891b      	ldrh	r3, [r3, #8]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <tcp_oos_insert_segment+0xe8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	441a      	add	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	8909      	ldrh	r1, [r1, #8]
 8007d7e:	440b      	add	r3, r1
 8007d80:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dacb      	bge.n	8007d1e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01e      	beq.n	8007dca <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	891b      	ldrh	r3, [r3, #8]
 8007d90:	461a      	mov	r2, r3
 8007d92:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <tcp_oos_insert_segment+0xe8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	441a      	add	r2, r3
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd12      	ble.n	8007dca <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <tcp_oos_insert_segment+0xe8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fc fdb3 	bl	8004930 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	601a      	str	r2, [r3, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd90      	pop	{r4, r7, pc}
 8007dd8:	200000fc 	.word	0x200000fc

08007ddc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dde:	b08d      	sub	sp, #52	; 0x34
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7d1b      	ldrb	r3, [r3, #20]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d806      	bhi.n	8007dfe <tcp_receive+0x22>
 8007df0:	4ba6      	ldr	r3, [pc, #664]	; (800808c <tcp_receive+0x2b0>)
 8007df2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007df6:	49a6      	ldr	r1, [pc, #664]	; (8008090 <tcp_receive+0x2b4>)
 8007df8:	48a6      	ldr	r0, [pc, #664]	; (8008094 <tcp_receive+0x2b8>)
 8007dfa:	f005 f9df 	bl	800d1bc <iprintf>

  if (flags & TCP_ACK) {
 8007dfe:	4ba6      	ldr	r3, [pc, #664]	; (8008098 <tcp_receive+0x2bc>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 82bf 	beq.w	800838a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	4413      	add	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e20:	4b9e      	ldr	r3, [pc, #632]	; (800809c <tcp_receive+0x2c0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	db1b      	blt.n	8007e62 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e2e:	4b9b      	ldr	r3, [pc, #620]	; (800809c <tcp_receive+0x2c0>)
 8007e30:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d106      	bne.n	8007e44 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e3a:	4b99      	ldr	r3, [pc, #612]	; (80080a0 <tcp_receive+0x2c4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	db0e      	blt.n	8007e62 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e48:	4b95      	ldr	r3, [pc, #596]	; (80080a0 <tcp_receive+0x2c4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d141      	bne.n	8007ed4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007e50:	4b94      	ldr	r3, [pc, #592]	; (80080a4 <tcp_receive+0x2c8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	89db      	ldrh	r3, [r3, #14]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d938      	bls.n	8007ed4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007e62:	4b90      	ldr	r3, [pc, #576]	; (80080a4 <tcp_receive+0x2c8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	89db      	ldrh	r3, [r3, #14]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d205      	bcs.n	8007e8c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8007e8c:	4b83      	ldr	r3, [pc, #524]	; (800809c <tcp_receive+0x2c0>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007e94:	4b82      	ldr	r3, [pc, #520]	; (80080a0 <tcp_receive+0x2c4>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d111      	bne.n	8007ed4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007ec0:	e008      	b.n	8007ed4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007ed4:	4b72      	ldr	r3, [pc, #456]	; (80080a0 <tcp_receive+0x2c4>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dc53      	bgt.n	8007f8a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007ee2:	4b71      	ldr	r3, [pc, #452]	; (80080a8 <tcp_receive+0x2cc>)
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d146      	bne.n	8007f78 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007ef4:	4413      	add	r3, r2
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d13d      	bne.n	8007f78 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	db38      	blt.n	8007f78 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0a:	4b65      	ldr	r3, [pc, #404]	; (80080a0 <tcp_receive+0x2c4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d132      	bne.n	8007f78 <tcp_receive+0x19c>
              found_dupack = 1;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f1c:	2bff      	cmp	r3, #255	; 0xff
 8007f1e:	d007      	beq.n	8007f30 <tcp_receive+0x154>
                ++pcb->dupacks;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f26:	3301      	adds	r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d916      	bls.n	8007f68 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f44:	4413      	add	r3, r2
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d912      	bls.n	8007f78 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f5c:	4413      	add	r3, r2
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007f66:	e007      	b.n	8007f78 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d102      	bne.n	8007f78 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f002 fa2e 	bl	800a3d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 8169 	bne.w	8008252 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f88:	e163      	b.n	8008252 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007f8a:	4b45      	ldr	r3, [pc, #276]	; (80080a0 <tcp_receive+0x2c4>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f2c0 8107 	blt.w	80081aa <tcp_receive+0x3ce>
 8007f9c:	4b40      	ldr	r3, [pc, #256]	; (80080a0 <tcp_receive+0x2c4>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f300 80ff 	bgt.w	80081aa <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	7e9b      	ldrb	r3, [r3, #26]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7e9b      	ldrb	r3, [r3, #26]
 8007fbc:	f023 0304 	bic.w	r3, r3, #4
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007fe0:	10db      	asrs	r3, r3, #3
 8007fe2:	b21b      	sxth	r3, r3
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	4413      	add	r3, r2
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	b21a      	sxth	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008002:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <tcp_receive+0x2c4>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7d1b      	ldrb	r3, [r3, #20]
 800800e:	2b03      	cmp	r3, #3
 8008010:	f240 8094 	bls.w	800813c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008020:	429a      	cmp	r2, r3
 8008022:	d216      	bcs.n	8008052 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800802e:	4413      	add	r3, r2
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008038:	429a      	cmp	r2, r3
 800803a:	d97f      	bls.n	800813c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008046:	4413      	add	r3, r2
 8008048:	b29a      	uxth	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008050:	e074      	b.n	800813c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800805c:	4619      	mov	r1, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008062:	fb03 f301 	mul.w	r3, r3, r1
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800806c:	fb93 f3f1 	sdiv	r3, r3, r1
 8008070:	b29b      	uxth	r3, r3
 8008072:	4413      	add	r3, r2
 8008074:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800807c:	8a7a      	ldrh	r2, [r7, #18]
 800807e:	429a      	cmp	r2, r3
 8008080:	d95c      	bls.n	800813c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	8a7a      	ldrh	r2, [r7, #18]
 8008086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800808a:	e057      	b.n	800813c <tcp_receive+0x360>
 800808c:	0800ede8 	.word	0x0800ede8
 8008090:	0800f00c 	.word	0x0800f00c
 8008094:	0800ee2c 	.word	0x0800ee2c
 8008098:	20000108 	.word	0x20000108
 800809c:	200000fc 	.word	0x200000fc
 80080a0:	20000100 	.word	0x20000100
 80080a4:	200000ec 	.word	0x200000ec
 80080a8:	20000106 	.word	0x20000106
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fc fe3a 	bl	8004d40 <pbuf_clen>
 80080cc:	4603      	mov	r3, r0
 80080ce:	429c      	cmp	r4, r3
 80080d0:	d206      	bcs.n	80080e0 <tcp_receive+0x304>
 80080d2:	4b70      	ldr	r3, [pc, #448]	; (8008294 <tcp_receive+0x4b8>)
 80080d4:	f240 429e 	movw	r2, #1182	; 0x49e
 80080d8:	496f      	ldr	r1, [pc, #444]	; (8008298 <tcp_receive+0x4bc>)
 80080da:	4870      	ldr	r0, [pc, #448]	; (800829c <tcp_receive+0x4c0>)
 80080dc:	f005 f86e 	bl	800d1bc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fc fe2b 	bl	8004d40 <pbuf_clen>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	891a      	ldrh	r2, [r3, #8]
 8008102:	4b67      	ldr	r3, [pc, #412]	; (80082a0 <tcp_receive+0x4c4>)
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	4413      	add	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	4b65      	ldr	r3, [pc, #404]	; (80082a0 <tcp_receive+0x4c4>)
 800810c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800810e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008110:	f7fe f93b 	bl	800638a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00e      	beq.n	800813c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <tcp_receive+0x360>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <tcp_receive+0x360>
 800812e:	4b59      	ldr	r3, [pc, #356]	; (8008294 <tcp_receive+0x4b8>)
 8008130:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008134:	495b      	ldr	r1, [pc, #364]	; (80082a4 <tcp_receive+0x4c8>)
 8008136:	4859      	ldr	r0, [pc, #356]	; (800829c <tcp_receive+0x4c0>)
 8008138:	f005 f840 	bl	800d1bc <iprintf>
      while (pcb->unacked != NULL &&
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d022      	beq.n	800818a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	f7fb fc44 	bl	80039da <lwip_htonl>
 8008152:	4604      	mov	r4, r0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008158:	891b      	ldrh	r3, [r3, #8]
 800815a:	461d      	mov	r5, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	899b      	ldrh	r3, [r3, #12]
 8008164:	b29b      	uxth	r3, r3
 8008166:	4618      	mov	r0, r3
 8008168:	f7fb fc29 	bl	80039be <lwip_htons>
 800816c:	4603      	mov	r3, r0
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <tcp_receive+0x39e>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <tcp_receive+0x3a0>
 800817a:	2300      	movs	r3, #0
 800817c:	442b      	add	r3, r5
 800817e:	18e2      	adds	r2, r4, r3
 8008180:	4b49      	ldr	r3, [pc, #292]	; (80082a8 <tcp_receive+0x4cc>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008186:	2b00      	cmp	r3, #0
 8008188:	dd90      	ble.n	80080ac <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d104      	bne.n	800819c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008198:	861a      	strh	r2, [r3, #48]	; 0x30
 800819a:	e002      	b.n	80081a2 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	76da      	strb	r2, [r3, #27]
 80081a8:	e002      	b.n	80081b0 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fd30 	bl	8009c10 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80081b0:	e04f      	b.n	8008252 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d103      	bne.n	80081d2 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc fdaf 	bl	8004d40 <pbuf_clen>
 80081e2:	4603      	mov	r3, r0
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d206      	bcs.n	80081f6 <tcp_receive+0x41a>
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <tcp_receive+0x4b8>)
 80081ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80081ee:	492a      	ldr	r1, [pc, #168]	; (8008298 <tcp_receive+0x4bc>)
 80081f0:	482a      	ldr	r0, [pc, #168]	; (800829c <tcp_receive+0x4c0>)
 80081f2:	f004 ffe3 	bl	800d1bc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fc fda0 	bl	8004d40 <pbuf_clen>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	891a      	ldrh	r2, [r3, #8]
 8008218:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <tcp_receive+0x4c4>)
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	4413      	add	r3, r2
 800821e:	b29a      	uxth	r2, r3
 8008220:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <tcp_receive+0x4c4>)
 8008222:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008226:	f7fe f8b0 	bl	800638a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <tcp_receive+0x476>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <tcp_receive+0x476>
 8008244:	4b13      	ldr	r3, [pc, #76]	; (8008294 <tcp_receive+0x4b8>)
 8008246:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800824a:	4916      	ldr	r1, [pc, #88]	; (80082a4 <tcp_receive+0x4c8>)
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <tcp_receive+0x4c0>)
 800824e:	f004 ffb5 	bl	800d1bc <iprintf>
    while (pcb->unsent != NULL &&
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008256:	2b00      	cmp	r3, #0
 8008258:	d036      	beq.n	80082c8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800825a:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <tcp_receive+0x4cc>)
 800825c:	681c      	ldr	r4, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	4618      	mov	r0, r3
 8008268:	f7fb fbb7 	bl	80039da <lwip_htonl>
 800826c:	4605      	mov	r5, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008272:	891b      	ldrh	r3, [r3, #8]
 8008274:	461e      	mov	r6, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	b29b      	uxth	r3, r3
 8008280:	4618      	mov	r0, r3
 8008282:	f7fb fb9c 	bl	80039be <lwip_htons>
 8008286:	4603      	mov	r3, r0
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00d      	beq.n	80082ac <tcp_receive+0x4d0>
 8008290:	2301      	movs	r3, #1
 8008292:	e00c      	b.n	80082ae <tcp_receive+0x4d2>
 8008294:	0800ede8 	.word	0x0800ede8
 8008298:	0800f028 	.word	0x0800f028
 800829c:	0800ee2c 	.word	0x0800ee2c
 80082a0:	20000104 	.word	0x20000104
 80082a4:	0800f050 	.word	0x0800f050
 80082a8:	20000100 	.word	0x20000100
 80082ac:	2300      	movs	r3, #0
 80082ae:	4433      	add	r3, r6
 80082b0:	442b      	add	r3, r5
 80082b2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db07      	blt.n	80082c8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80082b8:	4b8d      	ldr	r3, [pc, #564]	; (80084f0 <tcp_receive+0x714>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f77f af75 	ble.w	80081b2 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80082ce:	4b89      	ldr	r3, [pc, #548]	; (80084f4 <tcp_receive+0x718>)
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	4413      	add	r3, r2
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d052      	beq.n	800838a <tcp_receive+0x5ae>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e8:	4b81      	ldr	r3, [pc, #516]	; (80084f0 <tcp_receive+0x714>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da4b      	bge.n	800838a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80082f2:	4b81      	ldr	r3, [pc, #516]	; (80084f8 <tcp_receive+0x71c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	b29b      	uxth	r3, r3
 8008302:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008304:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800830c:	10db      	asrs	r3, r3, #3
 800830e:	b21b      	sxth	r3, r3
 8008310:	b29b      	uxth	r3, r3
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	b29b      	uxth	r3, r3
 8008316:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800831e:	b29a      	uxth	r2, r3
 8008320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008322:	4413      	add	r3, r2
 8008324:	b29b      	uxth	r3, r3
 8008326:	b21a      	sxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800832c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008330:	2b00      	cmp	r3, #0
 8008332:	da03      	bge.n	800833c <tcp_receive+0x560>
        m = -m;
 8008334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008336:	425b      	negs	r3, r3
 8008338:	b29b      	uxth	r3, r3
 800833a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800833c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008344:	109b      	asrs	r3, r3, #2
 8008346:	b21b      	sxth	r3, r3
 8008348:	b29b      	uxth	r3, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	b29b      	uxth	r3, r3
 800834e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008356:	b29a      	uxth	r2, r3
 8008358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800835a:	4413      	add	r3, r2
 800835c:	b29b      	uxth	r3, r3
 800835e:	b21a      	sxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800836a:	10db      	asrs	r3, r3, #3
 800836c:	b21b      	sxth	r3, r3
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008376:	b29b      	uxth	r3, r3
 8008378:	4413      	add	r3, r2
 800837a:	b29b      	uxth	r3, r3
 800837c:	b21a      	sxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800838a:	4b5c      	ldr	r3, [pc, #368]	; (80084fc <tcp_receive+0x720>)
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 84f1 	beq.w	8008d76 <tcp_receive+0xf9a>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7d1b      	ldrb	r3, [r3, #20]
 8008398:	2b06      	cmp	r3, #6
 800839a:	f200 84ec 	bhi.w	8008d76 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083a2:	4b57      	ldr	r3, [pc, #348]	; (8008500 <tcp_receive+0x724>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f2c0 80b8 	blt.w	8008520 <tcp_receive+0x744>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083b4:	4b51      	ldr	r3, [pc, #324]	; (80084fc <tcp_receive+0x720>)
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	4619      	mov	r1, r3
 80083ba:	4b51      	ldr	r3, [pc, #324]	; (8008500 <tcp_receive+0x724>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	440b      	add	r3, r1
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	3301      	adds	r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f300 80ab 	bgt.w	8008520 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80083ca:	4b4e      	ldr	r3, [pc, #312]	; (8008504 <tcp_receive+0x728>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083d4:	4b4a      	ldr	r3, [pc, #296]	; (8008500 <tcp_receive+0x724>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80083dc:	4b49      	ldr	r3, [pc, #292]	; (8008504 <tcp_receive+0x728>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <tcp_receive+0x616>
 80083e4:	4b48      	ldr	r3, [pc, #288]	; (8008508 <tcp_receive+0x72c>)
 80083e6:	f240 523c 	movw	r2, #1340	; 0x53c
 80083ea:	4948      	ldr	r1, [pc, #288]	; (800850c <tcp_receive+0x730>)
 80083ec:	4848      	ldr	r0, [pc, #288]	; (8008510 <tcp_receive+0x734>)
 80083ee:	f004 fee5 	bl	800d1bc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80083f8:	4293      	cmp	r3, r2
 80083fa:	dd06      	ble.n	800840a <tcp_receive+0x62e>
 80083fc:	4b42      	ldr	r3, [pc, #264]	; (8008508 <tcp_receive+0x72c>)
 80083fe:	f240 523d 	movw	r2, #1341	; 0x53d
 8008402:	4944      	ldr	r1, [pc, #272]	; (8008514 <tcp_receive+0x738>)
 8008404:	4842      	ldr	r0, [pc, #264]	; (8008510 <tcp_receive+0x734>)
 8008406:	f004 fed9 	bl	800d1bc <iprintf>
      if (inseg.p->len < off) {
 800840a:	4b3e      	ldr	r3, [pc, #248]	; (8008504 <tcp_receive+0x728>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	895b      	ldrh	r3, [r3, #10]
 8008410:	461a      	mov	r2, r3
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	4293      	cmp	r3, r2
 8008416:	dd3e      	ble.n	8008496 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008418:	4b3a      	ldr	r3, [pc, #232]	; (8008504 <tcp_receive+0x728>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	891b      	ldrh	r3, [r3, #8]
 800841e:	461a      	mov	r2, r3
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	4293      	cmp	r3, r2
 8008424:	dd06      	ble.n	8008434 <tcp_receive+0x658>
 8008426:	4b38      	ldr	r3, [pc, #224]	; (8008508 <tcp_receive+0x72c>)
 8008428:	f240 523f 	movw	r2, #1343	; 0x53f
 800842c:	493a      	ldr	r1, [pc, #232]	; (8008518 <tcp_receive+0x73c>)
 800842e:	4838      	ldr	r0, [pc, #224]	; (8008510 <tcp_receive+0x734>)
 8008430:	f004 fec4 	bl	800d1bc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008434:	4b33      	ldr	r3, [pc, #204]	; (8008504 <tcp_receive+0x728>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	891a      	ldrh	r2, [r3, #8]
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	b29b      	uxth	r3, r3
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008442:	e00e      	b.n	8008462 <tcp_receive+0x686>
          off -= p->len;
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	895b      	ldrh	r3, [r3, #10]
 8008448:	461a      	mov	r2, r3
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	8a3a      	ldrh	r2, [r7, #16]
 8008454:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2200      	movs	r2, #0
 800845a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	895b      	ldrh	r3, [r3, #10]
 8008466:	461a      	mov	r2, r3
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	4293      	cmp	r3, r2
 800846c:	dcea      	bgt.n	8008444 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	b29b      	uxth	r3, r3
 8008472:	425b      	negs	r3, r3
 8008474:	b29b      	uxth	r3, r3
 8008476:	b21b      	sxth	r3, r3
 8008478:	4619      	mov	r1, r3
 800847a:	69b8      	ldr	r0, [r7, #24]
 800847c:	f7fc fba8 	bl	8004bd0 <pbuf_header>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01c      	beq.n	80084c0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008486:	4b20      	ldr	r3, [pc, #128]	; (8008508 <tcp_receive+0x72c>)
 8008488:	f240 524c 	movw	r2, #1356	; 0x54c
 800848c:	4923      	ldr	r1, [pc, #140]	; (800851c <tcp_receive+0x740>)
 800848e:	4820      	ldr	r0, [pc, #128]	; (8008510 <tcp_receive+0x734>)
 8008490:	f004 fe94 	bl	800d1bc <iprintf>
 8008494:	e014      	b.n	80084c0 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <tcp_receive+0x728>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849c:	b292      	uxth	r2, r2
 800849e:	4252      	negs	r2, r2
 80084a0:	b292      	uxth	r2, r2
 80084a2:	b212      	sxth	r2, r2
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fc fb92 	bl	8004bd0 <pbuf_header>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d006      	beq.n	80084c0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <tcp_receive+0x72c>)
 80084b4:	f240 5251 	movw	r2, #1361	; 0x551
 80084b8:	4918      	ldr	r1, [pc, #96]	; (800851c <tcp_receive+0x740>)
 80084ba:	4815      	ldr	r0, [pc, #84]	; (8008510 <tcp_receive+0x734>)
 80084bc:	f004 fe7e 	bl	800d1bc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80084c0:	4b10      	ldr	r3, [pc, #64]	; (8008504 <tcp_receive+0x728>)
 80084c2:	891a      	ldrh	r2, [r3, #8]
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <tcp_receive+0x724>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	b299      	uxth	r1, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	1acb      	subs	r3, r1, r3
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4413      	add	r3, r2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <tcp_receive+0x728>)
 80084da:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	4a07      	ldr	r2, [pc, #28]	; (8008500 <tcp_receive+0x724>)
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	4b07      	ldr	r3, [pc, #28]	; (8008504 <tcp_receive+0x728>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	4a05      	ldr	r2, [pc, #20]	; (8008500 <tcp_receive+0x724>)
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80084ee:	e025      	b.n	800853c <tcp_receive+0x760>
 80084f0:	20000100 	.word	0x20000100
 80084f4:	20000104 	.word	0x20000104
 80084f8:	20006b1c 	.word	0x20006b1c
 80084fc:	20000106 	.word	0x20000106
 8008500:	200000fc 	.word	0x200000fc
 8008504:	200000dc 	.word	0x200000dc
 8008508:	0800ede8 	.word	0x0800ede8
 800850c:	0800f070 	.word	0x0800f070
 8008510:	0800ee2c 	.word	0x0800ee2c
 8008514:	0800f080 	.word	0x0800f080
 8008518:	0800f090 	.word	0x0800f090
 800851c:	0800f0a0 	.word	0x0800f0a0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008520:	4b87      	ldr	r3, [pc, #540]	; (8008740 <tcp_receive+0x964>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	da06      	bge.n	800853c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7e9b      	ldrb	r3, [r3, #26]
 8008532:	f043 0302 	orr.w	r3, r3, #2
 8008536:	b2da      	uxtb	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800853c:	4b80      	ldr	r3, [pc, #512]	; (8008740 <tcp_receive+0x964>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	f2c0 8410 	blt.w	8008d6c <tcp_receive+0xf90>
 800854c:	4b7c      	ldr	r3, [pc, #496]	; (8008740 <tcp_receive+0x964>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008558:	440b      	add	r3, r1
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	3301      	adds	r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	f300 8404 	bgt.w	8008d6c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008568:	4b75      	ldr	r3, [pc, #468]	; (8008740 <tcp_receive+0x964>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	f040 8287 	bne.w	8008a80 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008572:	4b74      	ldr	r3, [pc, #464]	; (8008744 <tcp_receive+0x968>)
 8008574:	891c      	ldrh	r4, [r3, #8]
 8008576:	4b73      	ldr	r3, [pc, #460]	; (8008744 <tcp_receive+0x968>)
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	899b      	ldrh	r3, [r3, #12]
 800857c:	b29b      	uxth	r3, r3
 800857e:	4618      	mov	r0, r3
 8008580:	f7fb fa1d 	bl	80039be <lwip_htons>
 8008584:	4603      	mov	r3, r0
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <tcp_receive+0x7b6>
 800858e:	2301      	movs	r3, #1
 8008590:	e000      	b.n	8008594 <tcp_receive+0x7b8>
 8008592:	2300      	movs	r3, #0
 8008594:	4423      	add	r3, r4
 8008596:	b29a      	uxth	r2, r3
 8008598:	4b6b      	ldr	r3, [pc, #428]	; (8008748 <tcp_receive+0x96c>)
 800859a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085a0:	4b69      	ldr	r3, [pc, #420]	; (8008748 <tcp_receive+0x96c>)
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d26e      	bcs.n	8008686 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085a8:	4b66      	ldr	r3, [pc, #408]	; (8008744 <tcp_receive+0x968>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	899b      	ldrh	r3, [r3, #12]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fb fa04 	bl	80039be <lwip_htons>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80085c0:	4b60      	ldr	r3, [pc, #384]	; (8008744 <tcp_receive+0x968>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	899b      	ldrh	r3, [r3, #12]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085cc:	b29c      	uxth	r4, r3
 80085ce:	4b5d      	ldr	r3, [pc, #372]	; (8008744 <tcp_receive+0x968>)
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	899b      	ldrh	r3, [r3, #12]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fb f9f1 	bl	80039be <lwip_htons>
 80085dc:	4603      	mov	r3, r0
 80085de:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fb f9ea 	bl	80039be <lwip_htons>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	4b55      	ldr	r3, [pc, #340]	; (8008744 <tcp_receive+0x968>)
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	4322      	orrs	r2, r4
 80085f4:	b292      	uxth	r2, r2
 80085f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085fc:	4b51      	ldr	r3, [pc, #324]	; (8008744 <tcp_receive+0x968>)
 80085fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008600:	4b50      	ldr	r3, [pc, #320]	; (8008744 <tcp_receive+0x968>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	899b      	ldrh	r3, [r3, #12]
 8008606:	b29b      	uxth	r3, r3
 8008608:	4618      	mov	r0, r3
 800860a:	f7fb f9d8 	bl	80039be <lwip_htons>
 800860e:	4603      	mov	r3, r0
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <tcp_receive+0x848>
            inseg.len -= 1;
 8008618:	4b4a      	ldr	r3, [pc, #296]	; (8008744 <tcp_receive+0x968>)
 800861a:	891b      	ldrh	r3, [r3, #8]
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	4b48      	ldr	r3, [pc, #288]	; (8008744 <tcp_receive+0x968>)
 8008622:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008624:	4b47      	ldr	r3, [pc, #284]	; (8008744 <tcp_receive+0x968>)
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	4b46      	ldr	r3, [pc, #280]	; (8008744 <tcp_receive+0x968>)
 800862a:	891b      	ldrh	r3, [r3, #8]
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f7fc f97e 	bl	8004930 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008634:	4b43      	ldr	r3, [pc, #268]	; (8008744 <tcp_receive+0x968>)
 8008636:	891c      	ldrh	r4, [r3, #8]
 8008638:	4b42      	ldr	r3, [pc, #264]	; (8008744 <tcp_receive+0x968>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	899b      	ldrh	r3, [r3, #12]
 800863e:	b29b      	uxth	r3, r3
 8008640:	4618      	mov	r0, r3
 8008642:	f7fb f9bc 	bl	80039be <lwip_htons>
 8008646:	4603      	mov	r3, r0
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <tcp_receive+0x878>
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <tcp_receive+0x87a>
 8008654:	2300      	movs	r3, #0
 8008656:	4423      	add	r3, r4
 8008658:	b29a      	uxth	r2, r3
 800865a:	4b3b      	ldr	r3, [pc, #236]	; (8008748 <tcp_receive+0x96c>)
 800865c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800865e:	4b3a      	ldr	r3, [pc, #232]	; (8008748 <tcp_receive+0x96c>)
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	4b36      	ldr	r3, [pc, #216]	; (8008740 <tcp_receive+0x964>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	441a      	add	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008672:	440b      	add	r3, r1
 8008674:	429a      	cmp	r2, r3
 8008676:	d006      	beq.n	8008686 <tcp_receive+0x8aa>
 8008678:	4b34      	ldr	r3, [pc, #208]	; (800874c <tcp_receive+0x970>)
 800867a:	f240 527f 	movw	r2, #1407	; 0x57f
 800867e:	4934      	ldr	r1, [pc, #208]	; (8008750 <tcp_receive+0x974>)
 8008680:	4834      	ldr	r0, [pc, #208]	; (8008754 <tcp_receive+0x978>)
 8008682:	f004 fd9b 	bl	800d1bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80e1 	beq.w	8008852 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008690:	4b2c      	ldr	r3, [pc, #176]	; (8008744 <tcp_receive+0x968>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	899b      	ldrh	r3, [r3, #12]
 8008696:	b29b      	uxth	r3, r3
 8008698:	4618      	mov	r0, r3
 800869a:	f7fb f990 	bl	80039be <lwip_htons>
 800869e:	4603      	mov	r3, r0
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d010      	beq.n	80086ca <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80086a8:	e00a      	b.n	80086c0 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ae:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80086ba:	68b8      	ldr	r0, [r7, #8]
 80086bc:	f7fd fe65 	bl	800638a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f0      	bne.n	80086aa <tcp_receive+0x8ce>
 80086c8:	e0c3      	b.n	8008852 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80086d0:	e04f      	b.n	8008772 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	899b      	ldrh	r3, [r3, #12]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fb f96f 	bl	80039be <lwip_htons>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d03b      	beq.n	8008762 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <tcp_receive+0x968>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	899b      	ldrh	r3, [r3, #12]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fb f963 	bl	80039be <lwip_htons>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d12f      	bne.n	8008762 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <tcp_receive+0x968>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	899b      	ldrh	r3, [r3, #12]
 8008708:	b29c      	uxth	r4, r3
 800870a:	2001      	movs	r0, #1
 800870c:	f7fb f957 	bl	80039be <lwip_htons>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <tcp_receive+0x968>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4322      	orrs	r2, r4
 800871a:	b292      	uxth	r2, r2
 800871c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <tcp_receive+0x968>)
 8008720:	891c      	ldrh	r4, [r3, #8]
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <tcp_receive+0x968>)
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	899b      	ldrh	r3, [r3, #12]
 8008728:	b29b      	uxth	r3, r3
 800872a:	4618      	mov	r0, r3
 800872c:	f7fb f947 	bl	80039be <lwip_htons>
 8008730:	4603      	mov	r3, r0
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00e      	beq.n	8008758 <tcp_receive+0x97c>
 800873a:	2301      	movs	r3, #1
 800873c:	e00d      	b.n	800875a <tcp_receive+0x97e>
 800873e:	bf00      	nop
 8008740:	200000fc 	.word	0x200000fc
 8008744:	200000dc 	.word	0x200000dc
 8008748:	20000106 	.word	0x20000106
 800874c:	0800ede8 	.word	0x0800ede8
 8008750:	0800f0b4 	.word	0x0800f0b4
 8008754:	0800ee2c 	.word	0x0800ee2c
 8008758:	2300      	movs	r3, #0
 800875a:	4423      	add	r3, r4
 800875c:	b29a      	uxth	r2, r3
 800875e:	4b95      	ldr	r3, [pc, #596]	; (80089b4 <tcp_receive+0xbd8>)
 8008760:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800876c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800876e:	f7fd fe0c 	bl	800638a <tcp_seg_free>
            while (next &&
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00e      	beq.n	8008796 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008778:	4b8e      	ldr	r3, [pc, #568]	; (80089b4 <tcp_receive+0xbd8>)
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	4b8e      	ldr	r3, [pc, #568]	; (80089b8 <tcp_receive+0xbdc>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	441a      	add	r2, r3
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800878c:	8909      	ldrh	r1, [r1, #8]
 800878e:	440b      	add	r3, r1
 8008790:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008792:	2b00      	cmp	r3, #0
 8008794:	da9d      	bge.n	80086d2 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d057      	beq.n	800884c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800879c:	4b85      	ldr	r3, [pc, #532]	; (80089b4 <tcp_receive+0xbd8>)
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b85      	ldr	r3, [pc, #532]	; (80089b8 <tcp_receive+0xbdc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	441a      	add	r2, r3
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dd4b      	ble.n	800884c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	4b7e      	ldr	r3, [pc, #504]	; (80089b8 <tcp_receive+0xbdc>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	4b7d      	ldr	r3, [pc, #500]	; (80089bc <tcp_receive+0xbe0>)
 80087c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80087ca:	4b7c      	ldr	r3, [pc, #496]	; (80089bc <tcp_receive+0xbe0>)
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	899b      	ldrh	r3, [r3, #12]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fb f8f3 	bl	80039be <lwip_htons>
 80087d8:	4603      	mov	r3, r0
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <tcp_receive+0xa12>
                inseg.len -= 1;
 80087e2:	4b76      	ldr	r3, [pc, #472]	; (80089bc <tcp_receive+0xbe0>)
 80087e4:	891b      	ldrh	r3, [r3, #8]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	4b74      	ldr	r3, [pc, #464]	; (80089bc <tcp_receive+0xbe0>)
 80087ec:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80087ee:	4b73      	ldr	r3, [pc, #460]	; (80089bc <tcp_receive+0xbe0>)
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	4b72      	ldr	r3, [pc, #456]	; (80089bc <tcp_receive+0xbe0>)
 80087f4:	891b      	ldrh	r3, [r3, #8]
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7fc f899 	bl	8004930 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80087fe:	4b6f      	ldr	r3, [pc, #444]	; (80089bc <tcp_receive+0xbe0>)
 8008800:	891c      	ldrh	r4, [r3, #8]
 8008802:	4b6e      	ldr	r3, [pc, #440]	; (80089bc <tcp_receive+0xbe0>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	899b      	ldrh	r3, [r3, #12]
 8008808:	b29b      	uxth	r3, r3
 800880a:	4618      	mov	r0, r3
 800880c:	f7fb f8d7 	bl	80039be <lwip_htons>
 8008810:	4603      	mov	r3, r0
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <tcp_receive+0xa42>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <tcp_receive+0xa44>
 800881e:	2300      	movs	r3, #0
 8008820:	4423      	add	r3, r4
 8008822:	b29a      	uxth	r2, r3
 8008824:	4b63      	ldr	r3, [pc, #396]	; (80089b4 <tcp_receive+0xbd8>)
 8008826:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008828:	4b62      	ldr	r3, [pc, #392]	; (80089b4 <tcp_receive+0xbd8>)
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	4b62      	ldr	r3, [pc, #392]	; (80089b8 <tcp_receive+0xbdc>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	441a      	add	r2, r3
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d006      	beq.n	800884c <tcp_receive+0xa70>
 800883e:	4b60      	ldr	r3, [pc, #384]	; (80089c0 <tcp_receive+0xbe4>)
 8008840:	f240 52af 	movw	r2, #1455	; 0x5af
 8008844:	495f      	ldr	r1, [pc, #380]	; (80089c4 <tcp_receive+0xbe8>)
 8008846:	4860      	ldr	r0, [pc, #384]	; (80089c8 <tcp_receive+0xbec>)
 8008848:	f004 fcb8 	bl	800d1bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008850:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008852:	4b58      	ldr	r3, [pc, #352]	; (80089b4 <tcp_receive+0xbd8>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	4b57      	ldr	r3, [pc, #348]	; (80089b8 <tcp_receive+0xbdc>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	441a      	add	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008866:	4b53      	ldr	r3, [pc, #332]	; (80089b4 <tcp_receive+0xbd8>)
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d206      	bcs.n	800887c <tcp_receive+0xaa0>
 800886e:	4b54      	ldr	r3, [pc, #336]	; (80089c0 <tcp_receive+0xbe4>)
 8008870:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008874:	4955      	ldr	r1, [pc, #340]	; (80089cc <tcp_receive+0xbf0>)
 8008876:	4854      	ldr	r0, [pc, #336]	; (80089c8 <tcp_receive+0xbec>)
 8008878:	f004 fca0 	bl	800d1bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008880:	4b4c      	ldr	r3, [pc, #304]	; (80089b4 <tcp_receive+0xbd8>)
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7fd f8ef 	bl	8005a70 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008892:	4b4a      	ldr	r3, [pc, #296]	; (80089bc <tcp_receive+0xbe0>)
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	891b      	ldrh	r3, [r3, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d006      	beq.n	80088aa <tcp_receive+0xace>
          recv_data = inseg.p;
 800889c:	4b47      	ldr	r3, [pc, #284]	; (80089bc <tcp_receive+0xbe0>)
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	4a4b      	ldr	r2, [pc, #300]	; (80089d0 <tcp_receive+0xbf4>)
 80088a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80088a4:	4b45      	ldr	r3, [pc, #276]	; (80089bc <tcp_receive+0xbe0>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088aa:	4b44      	ldr	r3, [pc, #272]	; (80089bc <tcp_receive+0xbe0>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	899b      	ldrh	r3, [r3, #12]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fb f883 	bl	80039be <lwip_htons>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80b4 	beq.w	8008a2c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80088c4:	4b43      	ldr	r3, [pc, #268]	; (80089d4 <tcp_receive+0xbf8>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f043 0320 	orr.w	r3, r3, #32
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <tcp_receive+0xbf8>)
 80088d0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80088d2:	e0ab      	b.n	8008a2c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4a35      	ldr	r2, [pc, #212]	; (80089b8 <tcp_receive+0xbdc>)
 80088e4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	891b      	ldrh	r3, [r3, #8]
 80088ea:	461c      	mov	r4, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	899b      	ldrh	r3, [r3, #12]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fb f862 	bl	80039be <lwip_htons>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <tcp_receive+0xb2c>
 8008904:	2301      	movs	r3, #1
 8008906:	e000      	b.n	800890a <tcp_receive+0xb2e>
 8008908:	2300      	movs	r3, #0
 800890a:	191a      	adds	r2, r3, r4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	441a      	add	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	461c      	mov	r4, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	891b      	ldrh	r3, [r3, #8]
 8008920:	461d      	mov	r5, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	899b      	ldrh	r3, [r3, #12]
 8008928:	b29b      	uxth	r3, r3
 800892a:	4618      	mov	r0, r3
 800892c:	f7fb f847 	bl	80039be <lwip_htons>
 8008930:	4603      	mov	r3, r0
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <tcp_receive+0xb62>
 800893a:	2301      	movs	r3, #1
 800893c:	e000      	b.n	8008940 <tcp_receive+0xb64>
 800893e:	2300      	movs	r3, #0
 8008940:	442b      	add	r3, r5
 8008942:	429c      	cmp	r4, r3
 8008944:	d206      	bcs.n	8008954 <tcp_receive+0xb78>
 8008946:	4b1e      	ldr	r3, [pc, #120]	; (80089c0 <tcp_receive+0xbe4>)
 8008948:	f240 52de 	movw	r2, #1502	; 0x5de
 800894c:	4922      	ldr	r1, [pc, #136]	; (80089d8 <tcp_receive+0xbfc>)
 800894e:	481e      	ldr	r0, [pc, #120]	; (80089c8 <tcp_receive+0xbec>)
 8008950:	f004 fc34 	bl	800d1bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	891b      	ldrh	r3, [r3, #8]
 8008958:	461c      	mov	r4, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	899b      	ldrh	r3, [r3, #12]
 8008960:	b29b      	uxth	r3, r3
 8008962:	4618      	mov	r0, r3
 8008964:	f7fb f82b 	bl	80039be <lwip_htons>
 8008968:	4603      	mov	r3, r0
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <tcp_receive+0xb9a>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <tcp_receive+0xb9c>
 8008976:	2300      	movs	r3, #0
 8008978:	1919      	adds	r1, r3, r4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800897e:	b28b      	uxth	r3, r1
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	b29a      	uxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fd f871 	bl	8005a70 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	891b      	ldrh	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d028      	beq.n	80089ea <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008998:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <tcp_receive+0xbf4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01d      	beq.n	80089dc <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <tcp_receive+0xbf4>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fc fa02 	bl	8004db4 <pbuf_cat>
 80089b0:	e018      	b.n	80089e4 <tcp_receive+0xc08>
 80089b2:	bf00      	nop
 80089b4:	20000106 	.word	0x20000106
 80089b8:	200000fc 	.word	0x200000fc
 80089bc:	200000dc 	.word	0x200000dc
 80089c0:	0800ede8 	.word	0x0800ede8
 80089c4:	0800f0ec 	.word	0x0800f0ec
 80089c8:	0800ee2c 	.word	0x0800ee2c
 80089cc:	0800f128 	.word	0x0800f128
 80089d0:	2000010c 	.word	0x2000010c
 80089d4:	20000109 	.word	0x20000109
 80089d8:	0800f148 	.word	0x0800f148
            } else {
              recv_data = cseg->p;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a71      	ldr	r2, [pc, #452]	; (8008ba8 <tcp_receive+0xdcc>)
 80089e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	899b      	ldrh	r3, [r3, #12]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fa ffe3 	bl	80039be <lwip_htons>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00d      	beq.n	8008a1e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008a02:	4b6a      	ldr	r3, [pc, #424]	; (8008bac <tcp_receive+0xdd0>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	f043 0320 	orr.w	r3, r3, #32
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	4b67      	ldr	r3, [pc, #412]	; (8008bac <tcp_receive+0xdd0>)
 8008a0e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7d1b      	ldrb	r3, [r3, #20]
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d102      	bne.n	8008a1e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2207      	movs	r2, #7
 8008a1c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7fd fcaf 	bl	800638a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d008      	beq.n	8008a46 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008a40:	429a      	cmp	r2, r3
 8008a42:	f43f af47 	beq.w	80088d4 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7e9b      	ldrb	r3, [r3, #26]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00e      	beq.n	8008a70 <tcp_receive+0xc94>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7e9b      	ldrb	r3, [r3, #26]
 8008a56:	f023 0301 	bic.w	r3, r3, #1
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	769a      	strb	r2, [r3, #26]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7e9b      	ldrb	r3, [r3, #26]
 8008a64:	f043 0302 	orr.w	r3, r3, #2
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008a6e:	e181      	b.n	8008d74 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7e9b      	ldrb	r3, [r3, #26]
 8008a74:	f043 0301 	orr.w	r3, r3, #1
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008a7e:	e179      	b.n	8008d74 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 f8c5 	bl	8009c10 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008a8e:	4848      	ldr	r0, [pc, #288]	; (8008bb0 <tcp_receive+0xdd4>)
 8008a90:	f7fd fca2 	bl	80063d8 <tcp_seg_copy>
 8008a94:	4602      	mov	r2, r0
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8008a9a:	e16b      	b.n	8008d74 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aa6:	e150      	b.n	8008d4a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <tcp_receive+0xdd8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d11d      	bne.n	8008af2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008ab6:	4b3e      	ldr	r3, [pc, #248]	; (8008bb0 <tcp_receive+0xdd4>)
 8008ab8:	891a      	ldrh	r2, [r3, #8]
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	891b      	ldrh	r3, [r3, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	f240 8148 	bls.w	8008d54 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008ac4:	483a      	ldr	r0, [pc, #232]	; (8008bb0 <tcp_receive+0xdd4>)
 8008ac6:	f7fd fc87 	bl	80063d8 <tcp_seg_copy>
 8008aca:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8142 	beq.w	8008d58 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <tcp_receive+0xd06>
                    prev->next = cseg;
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	e002      	b.n	8008ae8 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7ff f900 	bl	8007cf0 <tcp_oos_insert_segment>
                }
                break;
 8008af0:	e132      	b.n	8008d58 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d117      	bne.n	8008b28 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008af8:	4b2e      	ldr	r3, [pc, #184]	; (8008bb4 <tcp_receive+0xdd8>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	da57      	bge.n	8008bb8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008b08:	4829      	ldr	r0, [pc, #164]	; (8008bb0 <tcp_receive+0xdd4>)
 8008b0a:	f7fd fc65 	bl	80063d8 <tcp_seg_copy>
 8008b0e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8122 	beq.w	8008d5c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8008b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff f8e5 	bl	8007cf0 <tcp_oos_insert_segment>
                  }
                  break;
 8008b26:	e119      	b.n	8008d5c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008b28:	4b22      	ldr	r3, [pc, #136]	; (8008bb4 <tcp_receive+0xdd8>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	db3e      	blt.n	8008bb8 <tcp_receive+0xddc>
 8008b3a:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <tcp_receive+0xdd8>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	3301      	adds	r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	dc35      	bgt.n	8008bb8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8008b4c:	4818      	ldr	r0, [pc, #96]	; (8008bb0 <tcp_receive+0xdd4>)
 8008b4e:	f7fd fc43 	bl	80063d8 <tcp_seg_copy>
 8008b52:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 8102 	beq.w	8008d60 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b64:	8912      	ldrh	r2, [r2, #8]
 8008b66:	441a      	add	r2, r3
 8008b68:	4b12      	ldr	r3, [pc, #72]	; (8008bb4 <tcp_receive+0xdd8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dd12      	ble.n	8008b98 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008b72:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <tcp_receive+0xdd8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	891b      	ldrh	r3, [r3, #8]
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7fb fecc 	bl	8004930 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff f8a5 	bl	8007cf0 <tcp_oos_insert_segment>
                  }
                  break;
 8008ba6:	e0db      	b.n	8008d60 <tcp_receive+0xf84>
 8008ba8:	2000010c 	.word	0x2000010c
 8008bac:	20000109 	.word	0x20000109
 8008bb0:	200000dc 	.word	0x200000dc
 8008bb4:	200000fc 	.word	0x200000fc
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f040 80bf 	bne.w	8008d40 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008bc2:	4b7c      	ldr	r3, [pc, #496]	; (8008db4 <tcp_receive+0xfd8>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f340 80b6 	ble.w	8008d40 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	899b      	ldrh	r3, [r3, #12]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fa feee 	bl	80039be <lwip_htons>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f040 80bb 	bne.w	8008d64 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008bee:	4872      	ldr	r0, [pc, #456]	; (8008db8 <tcp_receive+0xfdc>)
 8008bf0:	f7fd fbf2 	bl	80063d8 <tcp_seg_copy>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80b2 	beq.w	8008d68 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0c:	8912      	ldrh	r2, [r2, #8]
 8008c0e:	441a      	add	r2, r3
 8008c10:	4b68      	ldr	r3, [pc, #416]	; (8008db4 <tcp_receive+0xfd8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dd12      	ble.n	8008c40 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008c1a:	4b66      	ldr	r3, [pc, #408]	; (8008db4 <tcp_receive+0xfd8>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	891b      	ldrh	r3, [r3, #8]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fb fe78 	bl	8004930 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008c40:	4b5e      	ldr	r3, [pc, #376]	; (8008dbc <tcp_receive+0xfe0>)
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	4b5b      	ldr	r3, [pc, #364]	; (8008db4 <tcp_receive+0xfd8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	441a      	add	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c54:	440b      	add	r3, r1
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f340 8085 	ble.w	8008d68 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	899b      	ldrh	r3, [r3, #12]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fa fea8 	bl	80039be <lwip_htons>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01e      	beq.n	8008cb6 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c86:	b29c      	uxth	r4, r3
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	899b      	ldrh	r3, [r3, #12]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fa fe93 	bl	80039be <lwip_htons>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fa fe8c 	bl	80039be <lwip_htons>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	4322      	orrs	r2, r4
 8008cb2:	b292      	uxth	r2, r2
 8008cb4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc0:	4413      	add	r3, r2
 8008cc2:	b299      	uxth	r1, r3
 8008cc4:	4b3b      	ldr	r3, [pc, #236]	; (8008db4 <tcp_receive+0xfd8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	1a8a      	subs	r2, r1, r2
 8008cd0:	b292      	uxth	r2, r2
 8008cd2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	891b      	ldrh	r3, [r3, #8]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7fb fe24 	bl	8004930 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	891c      	ldrh	r4, [r3, #8]
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	899b      	ldrh	r3, [r3, #12]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fa fe60 	bl	80039be <lwip_htons>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <tcp_receive+0xf30>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <tcp_receive+0xf32>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4423      	add	r3, r4
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <tcp_receive+0xfe0>)
 8008d14:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d16:	4b29      	ldr	r3, [pc, #164]	; (8008dbc <tcp_receive+0xfe0>)
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <tcp_receive+0xfd8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	441a      	add	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d2a:	440b      	add	r3, r1
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d01b      	beq.n	8008d68 <tcp_receive+0xf8c>
 8008d30:	4b23      	ldr	r3, [pc, #140]	; (8008dc0 <tcp_receive+0xfe4>)
 8008d32:	f240 627b 	movw	r2, #1659	; 0x67b
 8008d36:	4923      	ldr	r1, [pc, #140]	; (8008dc4 <tcp_receive+0xfe8>)
 8008d38:	4823      	ldr	r0, [pc, #140]	; (8008dc8 <tcp_receive+0xfec>)
 8008d3a:	f004 fa3f 	bl	800d1bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008d3e:	e013      	b.n	8008d68 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f47f aeab 	bne.w	8008aa8 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8008d52:	e00f      	b.n	8008d74 <tcp_receive+0xf98>
                break;
 8008d54:	bf00      	nop
 8008d56:	e00d      	b.n	8008d74 <tcp_receive+0xf98>
                break;
 8008d58:	bf00      	nop
 8008d5a:	e00b      	b.n	8008d74 <tcp_receive+0xf98>
                  break;
 8008d5c:	bf00      	nop
 8008d5e:	e009      	b.n	8008d74 <tcp_receive+0xf98>
                  break;
 8008d60:	bf00      	nop
 8008d62:	e007      	b.n	8008d74 <tcp_receive+0xf98>
                  break;
 8008d64:	bf00      	nop
 8008d66:	e005      	b.n	8008d74 <tcp_receive+0xf98>
                break;
 8008d68:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8008d6a:	e003      	b.n	8008d74 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 ff4f 	bl	8009c10 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d72:	e01a      	b.n	8008daa <tcp_receive+0xfce>
 8008d74:	e019      	b.n	8008daa <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <tcp_receive+0xfd8>)
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db0a      	blt.n	8008d9a <tcp_receive+0xfbe>
 8008d84:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <tcp_receive+0xfd8>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d90:	440b      	add	r3, r1
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	3301      	adds	r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	dd07      	ble.n	8008daa <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7e9b      	ldrb	r3, [r3, #26]
 8008d9e:	f043 0302 	orr.w	r3, r3, #2
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008da8:	e7ff      	b.n	8008daa <tcp_receive+0xfce>
 8008daa:	bf00      	nop
 8008dac:	3734      	adds	r7, #52	; 0x34
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	bf00      	nop
 8008db4:	200000fc 	.word	0x200000fc
 8008db8:	200000dc 	.word	0x200000dc
 8008dbc:	20000106 	.word	0x20000106
 8008dc0:	0800ede8 	.word	0x0800ede8
 8008dc4:	0800f0b4 	.word	0x0800f0b4
 8008dc8:	0800ee2c 	.word	0x0800ee2c

08008dcc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008dd2:	4b18      	ldr	r3, [pc, #96]	; (8008e34 <tcp_getoptbyte+0x68>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <tcp_getoptbyte+0x1a>
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <tcp_getoptbyte+0x6c>)
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	4b17      	ldr	r3, [pc, #92]	; (8008e3c <tcp_getoptbyte+0x70>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d20e      	bcs.n	8008e04 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <tcp_getoptbyte+0x74>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3314      	adds	r3, #20
 8008dec:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <tcp_getoptbyte+0x6c>)
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	b291      	uxth	r1, r2
 8008df6:	4a10      	ldr	r2, [pc, #64]	; (8008e38 <tcp_getoptbyte+0x6c>)
 8008df8:	8011      	strh	r1, [r2, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	4413      	add	r3, r2
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	e010      	b.n	8008e26 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <tcp_getoptbyte+0x6c>)
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	b291      	uxth	r1, r2
 8008e0c:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <tcp_getoptbyte+0x6c>)
 8008e0e:	8011      	strh	r1, [r2, #0]
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <tcp_getoptbyte+0x70>)
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <tcp_getoptbyte+0x68>)
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	4413      	add	r3, r2
 8008e24:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	200000f4 	.word	0x200000f4
 8008e38:	200000f8 	.word	0x200000f8
 8008e3c:	200000f2 	.word	0x200000f2
 8008e40:	200000ec 	.word	0x200000ec

08008e44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008e4c:	4b2d      	ldr	r3, [pc, #180]	; (8008f04 <tcp_parseopt+0xc0>)
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d053      	beq.n	8008efc <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008e54:	4b2c      	ldr	r3, [pc, #176]	; (8008f08 <tcp_parseopt+0xc4>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	e043      	b.n	8008ee4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8008e5c:	f7ff ffb6 	bl	8008dcc <tcp_getoptbyte>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d03c      	beq.n	8008ee4 <tcp_parseopt+0xa0>
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d002      	beq.n	8008e74 <tcp_parseopt+0x30>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d03f      	beq.n	8008ef2 <tcp_parseopt+0xae>
 8008e72:	e026      	b.n	8008ec2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008e74:	f7ff ffaa 	bl	8008dcc <tcp_getoptbyte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d13b      	bne.n	8008ef6 <tcp_parseopt+0xb2>
 8008e7e:	4b22      	ldr	r3, [pc, #136]	; (8008f08 <tcp_parseopt+0xc4>)
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	3302      	adds	r3, #2
 8008e84:	4a1f      	ldr	r2, [pc, #124]	; (8008f04 <tcp_parseopt+0xc0>)
 8008e86:	8812      	ldrh	r2, [r2, #0]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	dc34      	bgt.n	8008ef6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008e8c:	f7ff ff9e 	bl	8008dcc <tcp_getoptbyte>
 8008e90:	4603      	mov	r3, r0
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	021b      	lsls	r3, r3, #8
 8008e96:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8008e98:	f7ff ff98 	bl	8008dcc <tcp_getoptbyte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	89bb      	ldrh	r3, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008ea6:	89bb      	ldrh	r3, [r7, #12]
 8008ea8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008eac:	d804      	bhi.n	8008eb8 <tcp_parseopt+0x74>
 8008eae:	89bb      	ldrh	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <tcp_parseopt+0x74>
 8008eb4:	89ba      	ldrh	r2, [r7, #12]
 8008eb6:	e001      	b.n	8008ebc <tcp_parseopt+0x78>
 8008eb8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008ec0:	e010      	b.n	8008ee4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008ec2:	f7ff ff83 	bl	8008dcc <tcp_getoptbyte>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d914      	bls.n	8008efa <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <tcp_parseopt+0xc4>)
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	4413      	add	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b02      	subs	r3, #2
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <tcp_parseopt+0xc4>)
 8008ee2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008ee4:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <tcp_parseopt+0xc4>)
 8008ee6:	881a      	ldrh	r2, [r3, #0]
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <tcp_parseopt+0xc0>)
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d3b5      	bcc.n	8008e5c <tcp_parseopt+0x18>
 8008ef0:	e004      	b.n	8008efc <tcp_parseopt+0xb8>
        return;
 8008ef2:	bf00      	nop
 8008ef4:	e002      	b.n	8008efc <tcp_parseopt+0xb8>
          return;
 8008ef6:	bf00      	nop
 8008ef8:	e000      	b.n	8008efc <tcp_parseopt+0xb8>
          return;
 8008efa:	bf00      	nop
      }
    }
  }
}
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	200000f0 	.word	0x200000f0
 8008f08:	200000f8 	.word	0x200000f8

08008f0c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <tcp_trigger_input_pcb_close+0x1c>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f043 0310 	orr.w	r3, r3, #16
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <tcp_trigger_input_pcb_close+0x1c>)
 8008f1c:	701a      	strb	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	20000109 	.word	0x20000109

08008f2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607b      	str	r3, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	817b      	strh	r3, [r7, #10]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008f3e:	897a      	ldrh	r2, [r7, #10]
 8008f40:	893b      	ldrh	r3, [r7, #8]
 8008f42:	4413      	add	r3, r2
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3314      	adds	r3, #20
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	2001      	movs	r0, #1
 8008f50:	f7fb faf0 	bl	8004534 <pbuf_alloc>
 8008f54:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d057      	beq.n	800900c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	895b      	ldrh	r3, [r3, #10]
 8008f60:	461a      	mov	r2, r3
 8008f62:	897b      	ldrh	r3, [r7, #10]
 8008f64:	3314      	adds	r3, #20
 8008f66:	429a      	cmp	r2, r3
 8008f68:	da05      	bge.n	8008f76 <tcp_output_alloc_header+0x4a>
 8008f6a:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <tcp_output_alloc_header+0xec>)
 8008f6c:	2273      	movs	r2, #115	; 0x73
 8008f6e:	492b      	ldr	r1, [pc, #172]	; (800901c <tcp_output_alloc_header+0xf0>)
 8008f70:	482b      	ldr	r0, [pc, #172]	; (8009020 <tcp_output_alloc_header+0xf4>)
 8008f72:	f004 f923 	bl	800d1bc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8adb      	ldrh	r3, [r3, #22]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fa fd1c 	bl	80039be <lwip_htons>
 8008f86:	4603      	mov	r3, r0
 8008f88:	461a      	mov	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8b1b      	ldrh	r3, [r3, #24]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fa fd13 	bl	80039be <lwip_htons>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fa fd15 	bl	80039da <lwip_htonl>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008fb6:	897b      	ldrh	r3, [r7, #10]
 8008fb8:	089b      	lsrs	r3, r3, #2
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	3305      	adds	r3, #5
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	031b      	lsls	r3, r3, #12
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f043 0310 	orr.w	r3, r3, #16
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fa fcf7 	bl	80039be <lwip_htons>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fa fcee 	bl	80039be <lwip_htons>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2200      	movs	r2, #0
 8008fee:	741a      	strb	r2, [r3, #16]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	749a      	strb	r2, [r3, #18]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800900c:	697b      	ldr	r3, [r7, #20]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	0800f170 	.word	0x0800f170
 800901c:	0800f1a4 	.word	0x0800f1a4
 8009020:	0800f1d4 	.word	0x0800f1d4

08009024 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009030:	2b00      	cmp	r3, #0
 8009032:	d02d      	beq.n	8009090 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e002      	b.n	8009042 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f8      	bne.n	800903c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	899b      	ldrh	r3, [r3, #12]
 8009050:	b29b      	uxth	r3, r3
 8009052:	4618      	mov	r0, r3
 8009054:	f7fa fcb3 	bl	80039be <lwip_htons>
 8009058:	4603      	mov	r3, r0
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b00      	cmp	r3, #0
 8009060:	d116      	bne.n	8009090 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	899b      	ldrh	r3, [r3, #12]
 8009068:	b29c      	uxth	r4, r3
 800906a:	2001      	movs	r0, #1
 800906c:	f7fa fca7 	bl	80039be <lwip_htons>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	4322      	orrs	r2, r4
 800907a:	b292      	uxth	r2, r2
 800907c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7e9b      	ldrb	r3, [r3, #26]
 8009082:	f043 0320 	orr.w	r3, r3, #32
 8009086:	b2da      	uxtb	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	e004      	b.n	800909a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009090:	2101      	movs	r1, #1
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fcc0 	bl	8009a18 <tcp_enqueue_flags>
 8009098:	4603      	mov	r3, r0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd90      	pop	{r4, r7, pc}
	...

080090a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80090b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80090c2:	2004      	movs	r0, #4
 80090c4:	f7fb f82a 	bl	800411c <memp_malloc>
 80090c8:	6138      	str	r0, [r7, #16]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80090d0:	68b8      	ldr	r0, [r7, #8]
 80090d2:	f7fb fda1 	bl	8004c18 <pbuf_free>
    return NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e061      	b.n	800919e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80090e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	891a      	ldrh	r2, [r3, #8]
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d205      	bcs.n	8009106 <tcp_create_segment+0x62>
 80090fa:	4b2b      	ldr	r3, [pc, #172]	; (80091a8 <tcp_create_segment+0x104>)
 80090fc:	22ba      	movs	r2, #186	; 0xba
 80090fe:	492b      	ldr	r1, [pc, #172]	; (80091ac <tcp_create_segment+0x108>)
 8009100:	482b      	ldr	r0, [pc, #172]	; (80091b0 <tcp_create_segment+0x10c>)
 8009102:	f004 f85b 	bl	800d1bc <iprintf>
  seg->len = p->tot_len - optlen;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	891a      	ldrh	r2, [r3, #8]
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	b29b      	uxth	r3, r3
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	b29a      	uxth	r2, r3
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009116:	2114      	movs	r1, #20
 8009118:	68b8      	ldr	r0, [r7, #8]
 800911a:	f7fb fd59 	bl	8004bd0 <pbuf_header>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009124:	6938      	ldr	r0, [r7, #16]
 8009126:	f7fd f930 	bl	800638a <tcp_seg_free>
    return NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	e037      	b.n	800919e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8ada      	ldrh	r2, [r3, #22]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	68dc      	ldr	r4, [r3, #12]
 8009140:	4610      	mov	r0, r2
 8009142:	f7fa fc3c 	bl	80039be <lwip_htons>
 8009146:	4603      	mov	r3, r0
 8009148:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8b1a      	ldrh	r2, [r3, #24]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	68dc      	ldr	r4, [r3, #12]
 8009152:	4610      	mov	r0, r2
 8009154:	f7fa fc33 	bl	80039be <lwip_htons>
 8009158:	4603      	mov	r3, r0
 800915a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	68dc      	ldr	r4, [r3, #12]
 8009160:	6838      	ldr	r0, [r7, #0]
 8009162:	f7fa fc3a 	bl	80039da <lwip_htonl>
 8009166:	4603      	mov	r3, r0
 8009168:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	089b      	lsrs	r3, r3, #2
 800916e:	b2db      	uxtb	r3, r3
 8009170:	b29b      	uxth	r3, r3
 8009172:	3305      	adds	r3, #5
 8009174:	b29b      	uxth	r3, r3
 8009176:	031b      	lsls	r3, r3, #12
 8009178:	b29a      	uxth	r2, r3
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	b29b      	uxth	r3, r3
 800917e:	4313      	orrs	r3, r2
 8009180:	b29a      	uxth	r2, r3
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	68dc      	ldr	r4, [r3, #12]
 8009186:	4610      	mov	r0, r2
 8009188:	f7fa fc19 	bl	80039be <lwip_htons>
 800918c:	4603      	mov	r3, r0
 800918e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	749a      	strb	r2, [r3, #18]
 8009198:	2200      	movs	r2, #0
 800919a:	74da      	strb	r2, [r3, #19]
  return seg;
 800919c:	693b      	ldr	r3, [r7, #16]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd90      	pop	{r4, r7, pc}
 80091a6:	bf00      	nop
 80091a8:	0800f170 	.word	0x0800f170
 80091ac:	0800f1fc 	.word	0x0800f1fc
 80091b0:	0800f1d4 	.word	0x0800f1d4

080091b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	607b      	str	r3, [r7, #4]
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	460b      	mov	r3, r1
 80091c2:	81bb      	strh	r3, [r7, #12]
 80091c4:	4613      	mov	r3, r2
 80091c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80091c8:	89bb      	ldrh	r3, [r7, #12]
 80091ca:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80091cc:	89ba      	ldrh	r2, [r7, #12]
 80091ce:	897b      	ldrh	r3, [r7, #10]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d221      	bcs.n	8009218 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80091d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d111      	bne.n	8009204 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	7e9b      	ldrb	r3, [r3, #26]
 80091e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d115      	bne.n	8009218 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80091ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d007      	beq.n	8009204 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d103      	bne.n	8009204 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8009200:	2b00      	cmp	r3, #0
 8009202:	d009      	beq.n	8009218 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009204:	89bb      	ldrh	r3, [r7, #12]
 8009206:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800920a:	f023 0203 	bic.w	r2, r3, #3
 800920e:	897b      	ldrh	r3, [r7, #10]
 8009210:	4293      	cmp	r3, r2
 8009212:	bf28      	it	cs
 8009214:	4613      	movcs	r3, r2
 8009216:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009218:	8af9      	ldrh	r1, [r7, #22]
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2200      	movs	r2, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f7fb f988 	bl	8004534 <pbuf_alloc>
 8009224:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	e019      	b.n	8009264 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d006      	beq.n	8009246 <tcp_pbuf_prealloc+0x92>
 8009238:	4b0c      	ldr	r3, [pc, #48]	; (800926c <tcp_pbuf_prealloc+0xb8>)
 800923a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800923e:	490c      	ldr	r1, [pc, #48]	; (8009270 <tcp_pbuf_prealloc+0xbc>)
 8009240:	480c      	ldr	r0, [pc, #48]	; (8009274 <tcp_pbuf_prealloc+0xc0>)
 8009242:	f003 ffbb 	bl	800d1bc <iprintf>
  *oversize = p->len - length;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	895a      	ldrh	r2, [r3, #10]
 800924a:	89bb      	ldrh	r3, [r7, #12]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	b29a      	uxth	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	89ba      	ldrh	r2, [r7, #12]
 8009258:	811a      	strh	r2, [r3, #8]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	891a      	ldrh	r2, [r3, #8]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	815a      	strh	r2, [r3, #10]
  return p;
 8009262:	693b      	ldr	r3, [r7, #16]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	0800f170 	.word	0x0800f170
 8009270:	0800f214 	.word	0x0800f214
 8009274:	0800f1d4 	.word	0x0800f1d4

08009278 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7d1b      	ldrb	r3, [r3, #20]
 8009288:	2b04      	cmp	r3, #4
 800928a:	d00e      	beq.n	80092aa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009290:	2b07      	cmp	r3, #7
 8009292:	d00a      	beq.n	80092aa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009298:	2b02      	cmp	r3, #2
 800929a:	d006      	beq.n	80092aa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d002      	beq.n	80092aa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80092a4:	f06f 030a 	mvn.w	r3, #10
 80092a8:	e04f      	b.n	800934a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80092aa:	887b      	ldrh	r3, [r7, #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <tcp_write_checks+0x3c>
    return ERR_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e04a      	b.n	800934a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092ba:	887a      	ldrh	r2, [r7, #2]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d909      	bls.n	80092d4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7e9b      	ldrb	r3, [r3, #26]
 80092c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80092ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d2:	e03a      	b.n	800934a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d806      	bhi.n	80092ec <tcp_write_checks+0x74>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092e4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d909      	bls.n	8009300 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7e9b      	ldrb	r3, [r3, #26]
 80092f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80092fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092fe:	e024      	b.n	800934a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00f      	beq.n	800932a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d11a      	bne.n	8009348 <tcp_write_checks+0xd0>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009316:	2b00      	cmp	r3, #0
 8009318:	d116      	bne.n	8009348 <tcp_write_checks+0xd0>
 800931a:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <tcp_write_checks+0xdc>)
 800931c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009320:	490d      	ldr	r1, [pc, #52]	; (8009358 <tcp_write_checks+0xe0>)
 8009322:	480e      	ldr	r0, [pc, #56]	; (800935c <tcp_write_checks+0xe4>)
 8009324:	f003 ff4a 	bl	800d1bc <iprintf>
 8009328:	e00e      	b.n	8009348 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d103      	bne.n	800933a <tcp_write_checks+0xc2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009336:	2b00      	cmp	r3, #0
 8009338:	d006      	beq.n	8009348 <tcp_write_checks+0xd0>
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <tcp_write_checks+0xdc>)
 800933c:	f240 1259 	movw	r2, #345	; 0x159
 8009340:	4907      	ldr	r1, [pc, #28]	; (8009360 <tcp_write_checks+0xe8>)
 8009342:	4806      	ldr	r0, [pc, #24]	; (800935c <tcp_write_checks+0xe4>)
 8009344:	f003 ff3a 	bl	800d1bc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	0800f170 	.word	0x0800f170
 8009358:	0800f228 	.word	0x0800f228
 800935c:	0800f1d4 	.word	0x0800f1d4
 8009360:	0800f264 	.word	0x0800f264

08009364 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009364:	b590      	push	{r4, r7, lr}
 8009366:	b09b      	sub	sp, #108	; 0x6c
 8009368:	af04      	add	r7, sp, #16
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4611      	mov	r1, r2
 8009370:	461a      	mov	r2, r3
 8009372:	460b      	mov	r3, r1
 8009374:	80fb      	strh	r3, [r7, #6]
 8009376:	4613      	mov	r3, r2
 8009378:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	653b      	str	r3, [r7, #80]	; 0x50
 8009382:	2300      	movs	r3, #0
 8009384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009386:	2300      	movs	r3, #0
 8009388:	64bb      	str	r3, [r7, #72]	; 0x48
 800938a:	2300      	movs	r3, #0
 800938c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800938e:	2300      	movs	r3, #0
 8009390:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093b2:	085b      	lsrs	r3, r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093ba:	4293      	cmp	r3, r2
 80093bc:	bf28      	it	cs
 80093be:	4613      	movcs	r3, r2
 80093c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80093c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <tcp_write+0x6a>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093cc:	e000      	b.n	80093d0 <tcp_write+0x6c>
 80093ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d109      	bne.n	80093ec <tcp_write+0x88>
 80093d8:	4b92      	ldr	r3, [pc, #584]	; (8009624 <tcp_write+0x2c0>)
 80093da:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80093de:	4992      	ldr	r1, [pc, #584]	; (8009628 <tcp_write+0x2c4>)
 80093e0:	4892      	ldr	r0, [pc, #584]	; (800962c <tcp_write+0x2c8>)
 80093e2:	f003 feeb 	bl	800d1bc <iprintf>
 80093e6:	f06f 030f 	mvn.w	r3, #15
 80093ea:	e30a      	b.n	8009a02 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	4619      	mov	r1, r3
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff ff41 	bl	8009278 <tcp_write_checks>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80093fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <tcp_write+0xa6>
    return err;
 8009404:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009408:	e2fb      	b.n	8009a02 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009410:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 80f5 	beq.w	8009608 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009422:	653b      	str	r3, [r7, #80]	; 0x50
 8009424:	e002      	b.n	800942c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8009426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800942c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f8      	bne.n	8009426 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009436:	7a9b      	ldrb	r3, [r3, #10]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	b29b      	uxth	r3, r3
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009446:	891b      	ldrh	r3, [r3, #8]
 8009448:	4619      	mov	r1, r3
 800944a:	8c3b      	ldrh	r3, [r7, #32]
 800944c:	440b      	add	r3, r1
 800944e:	429a      	cmp	r2, r3
 8009450:	da06      	bge.n	8009460 <tcp_write+0xfc>
 8009452:	4b74      	ldr	r3, [pc, #464]	; (8009624 <tcp_write+0x2c0>)
 8009454:	f240 12c7 	movw	r2, #455	; 0x1c7
 8009458:	4975      	ldr	r1, [pc, #468]	; (8009630 <tcp_write+0x2cc>)
 800945a:	4874      	ldr	r0, [pc, #464]	; (800962c <tcp_write+0x2c8>)
 800945c:	f003 feae 	bl	800d1bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009462:	891a      	ldrh	r2, [r3, #8]
 8009464:	8c3b      	ldrh	r3, [r7, #32]
 8009466:	4413      	add	r3, r2
 8009468:	b29b      	uxth	r3, r3
 800946a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009476:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009478:	8a7b      	ldrh	r3, [r7, #18]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d027      	beq.n	80094ce <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800947e:	8a7b      	ldrh	r3, [r7, #18]
 8009480:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009482:	429a      	cmp	r2, r3
 8009484:	d206      	bcs.n	8009494 <tcp_write+0x130>
 8009486:	4b67      	ldr	r3, [pc, #412]	; (8009624 <tcp_write+0x2c0>)
 8009488:	f240 12d9 	movw	r2, #473	; 0x1d9
 800948c:	4969      	ldr	r1, [pc, #420]	; (8009634 <tcp_write+0x2d0>)
 800948e:	4867      	ldr	r0, [pc, #412]	; (800962c <tcp_write+0x2c8>)
 8009490:	f003 fe94 	bl	800d1bc <iprintf>
      seg = last_unsent;
 8009494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009496:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009498:	8a7b      	ldrh	r3, [r7, #18]
 800949a:	88fa      	ldrh	r2, [r7, #6]
 800949c:	429a      	cmp	r2, r3
 800949e:	d901      	bls.n	80094a4 <tcp_write+0x140>
 80094a0:	8a7b      	ldrh	r3, [r7, #18]
 80094a2:	e000      	b.n	80094a6 <tcp_write+0x142>
 80094a4:	88fb      	ldrh	r3, [r7, #6]
 80094a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80094a8:	4293      	cmp	r3, r2
 80094aa:	bfa8      	it	ge
 80094ac:	4613      	movge	r3, r2
 80094ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80094b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80094b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80094b6:	4413      	add	r3, r2
 80094b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80094bc:	8a7a      	ldrh	r2, [r7, #18]
 80094be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80094c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80094c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80094ce:	8a7b      	ldrh	r3, [r7, #18]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <tcp_write+0x188>
 80094d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80094d8:	88fb      	ldrh	r3, [r7, #6]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d006      	beq.n	80094ec <tcp_write+0x188>
 80094de:	4b51      	ldr	r3, [pc, #324]	; (8009624 <tcp_write+0x2c0>)
 80094e0:	f240 12e1 	movw	r2, #481	; 0x1e1
 80094e4:	4954      	ldr	r1, [pc, #336]	; (8009638 <tcp_write+0x2d4>)
 80094e6:	4851      	ldr	r0, [pc, #324]	; (800962c <tcp_write+0x2c8>)
 80094e8:	f003 fe68 	bl	800d1bc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80094ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80094f0:	88fb      	ldrh	r3, [r7, #6]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	f080 8168 	bcs.w	80097c8 <tcp_write+0x464>
 80094f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 8164 	beq.w	80097c8 <tcp_write+0x464>
 8009500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009502:	891b      	ldrh	r3, [r3, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 815f 	beq.w	80097c8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009510:	1ad2      	subs	r2, r2, r3
 8009512:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009514:	4293      	cmp	r3, r2
 8009516:	bfa8      	it	ge
 8009518:	4613      	movge	r3, r2
 800951a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800951c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800951e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009520:	797b      	ldrb	r3, [r7, #5]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d027      	beq.n	800957a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800952a:	f107 0012 	add.w	r0, r7, #18
 800952e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009530:	8bf9      	ldrh	r1, [r7, #30]
 8009532:	2301      	movs	r3, #1
 8009534:	9302      	str	r3, [sp, #8]
 8009536:	797b      	ldrb	r3, [r7, #5]
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	4603      	mov	r3, r0
 8009540:	2004      	movs	r0, #4
 8009542:	f7ff fe37 	bl	80091b4 <tcp_pbuf_prealloc>
 8009546:	6578      	str	r0, [r7, #84]	; 0x54
 8009548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8227 	beq.w	800999e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009552:	6858      	ldr	r0, [r3, #4]
 8009554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	4413      	add	r3, r2
 800955c:	8bfa      	ldrh	r2, [r7, #30]
 800955e:	4619      	mov	r1, r3
 8009560:	f003 fe19 	bl	800d196 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009564:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009566:	f7fb fbeb 	bl	8004d40 <pbuf_clen>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009572:	4413      	add	r3, r2
 8009574:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009578:	e03f      	b.n	80095fa <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800957a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	637b      	str	r3, [r7, #52]	; 0x34
 8009580:	e002      	b.n	8009588 <tcp_write+0x224>
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
 8009588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1f8      	bne.n	8009582 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009592:	7b1b      	ldrb	r3, [r3, #12]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d115      	bne.n	80095c4 <tcp_write+0x260>
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800959e:	8952      	ldrh	r2, [r2, #10]
 80095a0:	4413      	add	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d10d      	bne.n	80095c4 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80095a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d006      	beq.n	80095be <tcp_write+0x25a>
 80095b0:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <tcp_write+0x2c0>)
 80095b2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80095b6:	4921      	ldr	r1, [pc, #132]	; (800963c <tcp_write+0x2d8>)
 80095b8:	481c      	ldr	r0, [pc, #112]	; (800962c <tcp_write+0x2c8>)
 80095ba:	f003 fdff 	bl	800d1bc <iprintf>
          extendlen = seglen;
 80095be:	8bfb      	ldrh	r3, [r7, #30]
 80095c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80095c2:	e01a      	b.n	80095fa <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80095c4:	8bfb      	ldrh	r3, [r7, #30]
 80095c6:	2201      	movs	r2, #1
 80095c8:	4619      	mov	r1, r3
 80095ca:	2004      	movs	r0, #4
 80095cc:	f7fa ffb2 	bl	8004534 <pbuf_alloc>
 80095d0:	6578      	str	r0, [r7, #84]	; 0x54
 80095d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 81e4 	beq.w	80099a2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80095da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	441a      	add	r2, r3
 80095e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80095e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80095e8:	f7fb fbaa 	bl	8004d40 <pbuf_clen>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80095f4:	4413      	add	r3, r2
 80095f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80095fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095fe:	8bfb      	ldrh	r3, [r7, #30]
 8009600:	4413      	add	r3, r2
 8009602:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009606:	e0df      	b.n	80097c8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 80da 	beq.w	80097c8 <tcp_write+0x464>
 8009614:	4b03      	ldr	r3, [pc, #12]	; (8009624 <tcp_write+0x2c0>)
 8009616:	f240 2225 	movw	r2, #549	; 0x225
 800961a:	4909      	ldr	r1, [pc, #36]	; (8009640 <tcp_write+0x2dc>)
 800961c:	4803      	ldr	r0, [pc, #12]	; (800962c <tcp_write+0x2c8>)
 800961e:	f003 fdcd 	bl	800d1bc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009622:	e0d1      	b.n	80097c8 <tcp_write+0x464>
 8009624:	0800f170 	.word	0x0800f170
 8009628:	0800f298 	.word	0x0800f298
 800962c:	0800f1d4 	.word	0x0800f1d4
 8009630:	0800f2cc 	.word	0x0800f2cc
 8009634:	0800f2e4 	.word	0x0800f2e4
 8009638:	0800f304 	.word	0x0800f304
 800963c:	0800f324 	.word	0x0800f324
 8009640:	0800f350 	.word	0x0800f350
    struct pbuf *p;
    u16_t left = len - pos;
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800964e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009652:	b29b      	uxth	r3, r3
 8009654:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800965a:	8b7a      	ldrh	r2, [r7, #26]
 800965c:	8bbb      	ldrh	r3, [r7, #28]
 800965e:	4293      	cmp	r3, r2
 8009660:	bf28      	it	cs
 8009662:	4613      	movcs	r3, r2
 8009664:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009666:	797b      	ldrb	r3, [r7, #5]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d036      	beq.n	80096de <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009674:	b29a      	uxth	r2, r3
 8009676:	8b3b      	ldrh	r3, [r7, #24]
 8009678:	4413      	add	r3, r2
 800967a:	b299      	uxth	r1, r3
 800967c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf0c      	ite	eq
 8009682:	2301      	moveq	r3, #1
 8009684:	2300      	movne	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f107 0012 	add.w	r0, r7, #18
 800968c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800968e:	9302      	str	r3, [sp, #8]
 8009690:	797b      	ldrb	r3, [r7, #5]
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	4603      	mov	r3, r0
 800969a:	2000      	movs	r0, #0
 800969c:	f7ff fd8a 	bl	80091b4 <tcp_pbuf_prealloc>
 80096a0:	6338      	str	r0, [r7, #48]	; 0x30
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 817e 	beq.w	80099a6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	895b      	ldrh	r3, [r3, #10]
 80096ae:	8b3a      	ldrh	r2, [r7, #24]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d906      	bls.n	80096c2 <tcp_write+0x35e>
 80096b4:	4b8f      	ldr	r3, [pc, #572]	; (80098f4 <tcp_write+0x590>)
 80096b6:	f240 2241 	movw	r2, #577	; 0x241
 80096ba:	498f      	ldr	r1, [pc, #572]	; (80098f8 <tcp_write+0x594>)
 80096bc:	488f      	ldr	r0, [pc, #572]	; (80098fc <tcp_write+0x598>)
 80096be:	f003 fd7d 	bl	800d1bc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ca:	18d0      	adds	r0, r2, r3
 80096cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	4413      	add	r3, r2
 80096d4:	8b3a      	ldrh	r2, [r7, #24]
 80096d6:	4619      	mov	r1, r3
 80096d8:	f003 fd5d 	bl	800d196 <memcpy>
 80096dc:	e02e      	b.n	800973c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80096de:	8a7b      	ldrh	r3, [r7, #18]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <tcp_write+0x38e>
 80096e4:	4b83      	ldr	r3, [pc, #524]	; (80098f4 <tcp_write+0x590>)
 80096e6:	f240 224b 	movw	r2, #587	; 0x24b
 80096ea:	4985      	ldr	r1, [pc, #532]	; (8009900 <tcp_write+0x59c>)
 80096ec:	4883      	ldr	r0, [pc, #524]	; (80098fc <tcp_write+0x598>)
 80096ee:	f003 fd65 	bl	800d1bc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80096f2:	8b3b      	ldrh	r3, [r7, #24]
 80096f4:	2201      	movs	r2, #1
 80096f6:	4619      	mov	r1, r3
 80096f8:	2000      	movs	r0, #0
 80096fa:	f7fa ff1b 	bl	8004534 <pbuf_alloc>
 80096fe:	6178      	str	r0, [r7, #20]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 8151 	beq.w	80099aa <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	441a      	add	r2, r3
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009718:	b29b      	uxth	r3, r3
 800971a:	2200      	movs	r2, #0
 800971c:	4619      	mov	r1, r3
 800971e:	2000      	movs	r0, #0
 8009720:	f7fa ff08 	bl	8004534 <pbuf_alloc>
 8009724:	6338      	str	r0, [r7, #48]	; 0x30
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800972c:	6978      	ldr	r0, [r7, #20]
 800972e:	f7fb fa73 	bl	8004c18 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009732:	e13d      	b.n	80099b0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009734:	6979      	ldr	r1, [r7, #20]
 8009736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009738:	f7fb fb3c 	bl	8004db4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800973c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800973e:	f7fb faff 	bl	8004d40 <pbuf_clen>
 8009742:	4603      	mov	r3, r0
 8009744:	461a      	mov	r2, r3
 8009746:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800974a:	4413      	add	r3, r2
 800974c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009750:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009754:	2b09      	cmp	r3, #9
 8009756:	d805      	bhi.n	8009764 <tcp_write+0x400>
 8009758:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800975c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009760:	4293      	cmp	r3, r2
 8009762:	d903      	bls.n	800976c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009766:	f7fb fa57 	bl	8004c18 <pbuf_free>
      goto memerr;
 800976a:	e121      	b.n	80099b0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009774:	441a      	add	r2, r3
 8009776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	4613      	mov	r3, r2
 800977e:	2200      	movs	r2, #0
 8009780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f7ff fc8e 	bl	80090a4 <tcp_create_segment>
 8009788:	64f8      	str	r0, [r7, #76]	; 0x4c
 800978a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 810e 	beq.w	80099ae <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <tcp_write+0x43a>
      queue = seg;
 8009798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979a:	647b      	str	r3, [r7, #68]	; 0x44
 800979c:	e00c      	b.n	80097b8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800979e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <tcp_write+0x44e>
 80097a4:	4b53      	ldr	r3, [pc, #332]	; (80098f4 <tcp_write+0x590>)
 80097a6:	f240 2285 	movw	r2, #645	; 0x285
 80097aa:	4956      	ldr	r1, [pc, #344]	; (8009904 <tcp_write+0x5a0>)
 80097ac:	4853      	ldr	r0, [pc, #332]	; (80098fc <tcp_write+0x598>)
 80097ae:	f003 fd05 	bl	800d1bc <iprintf>
      prev_seg->next = seg;
 80097b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097b6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80097bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097c0:	8b3b      	ldrh	r3, [r7, #24]
 80097c2:	4413      	add	r3, r2
 80097c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80097c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f4ff af38 	bcc.w	8009644 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80097d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d02c      	beq.n	8009834 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80097da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097e0:	e01e      	b.n	8009820 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	891a      	ldrh	r2, [r3, #8]
 80097e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80097e8:	4413      	add	r3, r2
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d110      	bne.n	800981a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097fe:	8952      	ldrh	r2, [r2, #10]
 8009800:	4413      	add	r3, r2
 8009802:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009804:	68b9      	ldr	r1, [r7, #8]
 8009806:	4618      	mov	r0, r3
 8009808:	f003 fcc5 	bl	800d196 <memcpy>
        p->len += oversize_used;
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	895a      	ldrh	r2, [r3, #10]
 8009810:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009812:	4413      	add	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1dd      	bne.n	80097e2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8009826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009828:	891a      	ldrh	r2, [r3, #8]
 800982a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800982c:	4413      	add	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009832:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009834:	8a7a      	ldrh	r2, [r7, #18]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800983c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800983e:	2b00      	cmp	r3, #0
 8009840:	d018      	beq.n	8009874 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009844:	2b00      	cmp	r3, #0
 8009846:	d106      	bne.n	8009856 <tcp_write+0x4f2>
 8009848:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <tcp_write+0x590>)
 800984a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800984e:	492e      	ldr	r1, [pc, #184]	; (8009908 <tcp_write+0x5a4>)
 8009850:	482a      	ldr	r0, [pc, #168]	; (80098fc <tcp_write+0x598>)
 8009852:	f003 fcb3 	bl	800d1bc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800985c:	4618      	mov	r0, r3
 800985e:	f7fb faa9 	bl	8004db4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009864:	891a      	ldrh	r2, [r3, #8]
 8009866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009868:	891b      	ldrh	r3, [r3, #8]
 800986a:	4413      	add	r3, r2
 800986c:	b29a      	uxth	r2, r3
 800986e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009870:	811a      	strh	r2, [r3, #8]
 8009872:	e037      	b.n	80098e4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8009874:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d034      	beq.n	80098e4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800987a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <tcp_write+0x524>
 8009880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <tcp_write+0x532>
 8009888:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <tcp_write+0x590>)
 800988a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800988e:	491f      	ldr	r1, [pc, #124]	; (800990c <tcp_write+0x5a8>)
 8009890:	481a      	ldr	r0, [pc, #104]	; (80098fc <tcp_write+0x598>)
 8009892:	f003 fc93 	bl	800d1bc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	62bb      	str	r3, [r7, #40]	; 0x28
 800989c:	e009      	b.n	80098b2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	891a      	ldrh	r2, [r3, #8]
 80098a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80098a4:	4413      	add	r3, r2
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1f1      	bne.n	800989e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	891a      	ldrh	r2, [r3, #8]
 80098be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80098c0:	4413      	add	r3, r2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	895a      	ldrh	r2, [r3, #10]
 80098cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80098ce:	4413      	add	r3, r2
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80098d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d8:	891a      	ldrh	r2, [r3, #8]
 80098da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80098dc:	4413      	add	r3, r2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098e2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80098e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d112      	bne.n	8009910 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ee:	669a      	str	r2, [r3, #104]	; 0x68
 80098f0:	e011      	b.n	8009916 <tcp_write+0x5b2>
 80098f2:	bf00      	nop
 80098f4:	0800f170 	.word	0x0800f170
 80098f8:	0800f380 	.word	0x0800f380
 80098fc:	0800f1d4 	.word	0x0800f1d4
 8009900:	0800f3c0 	.word	0x0800f3c0
 8009904:	0800f3d0 	.word	0x0800f3d0
 8009908:	0800f3e4 	.word	0x0800f3e4
 800990c:	0800f41c 	.word	0x0800f41c
  } else {
    last_unsent->next = queue;
 8009910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009914:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	441a      	add	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009928:	88fb      	ldrh	r3, [r7, #6]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800993a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00e      	beq.n	8009966 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <tcp_write+0x602>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009954:	2b00      	cmp	r3, #0
 8009956:	d106      	bne.n	8009966 <tcp_write+0x602>
 8009958:	4b2c      	ldr	r3, [pc, #176]	; (8009a0c <tcp_write+0x6a8>)
 800995a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800995e:	492c      	ldr	r1, [pc, #176]	; (8009a10 <tcp_write+0x6ac>)
 8009960:	482c      	ldr	r0, [pc, #176]	; (8009a14 <tcp_write+0x6b0>)
 8009962:	f003 fc2b 	bl	800d1bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8009966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d016      	beq.n	800999a <tcp_write+0x636>
 800996c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d012      	beq.n	800999a <tcp_write+0x636>
 8009974:	797b      	ldrb	r3, [r7, #5]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10d      	bne.n	800999a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800997e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	899b      	ldrh	r3, [r3, #12]
 8009984:	b29c      	uxth	r4, r3
 8009986:	2008      	movs	r0, #8
 8009988:	f7fa f819 	bl	80039be <lwip_htons>
 800998c:	4603      	mov	r3, r0
 800998e:	461a      	mov	r2, r3
 8009990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	4322      	orrs	r2, r4
 8009996:	b292      	uxth	r2, r2
 8009998:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	e031      	b.n	8009a02 <tcp_write+0x69e>
          goto memerr;
 800999e:	bf00      	nop
 80099a0:	e006      	b.n	80099b0 <tcp_write+0x64c>
            goto memerr;
 80099a2:	bf00      	nop
 80099a4:	e004      	b.n	80099b0 <tcp_write+0x64c>
        goto memerr;
 80099a6:	bf00      	nop
 80099a8:	e002      	b.n	80099b0 <tcp_write+0x64c>
        goto memerr;
 80099aa:	bf00      	nop
 80099ac:	e000      	b.n	80099b0 <tcp_write+0x64c>
      goto memerr;
 80099ae:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	7e9b      	ldrb	r3, [r3, #26]
 80099b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80099be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <tcp_write+0x666>
    pbuf_free(concat_p);
 80099c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099c6:	f7fb f927 	bl	8004c18 <pbuf_free>
  }
  if (queue != NULL) {
 80099ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <tcp_write+0x672>
    tcp_segs_free(queue);
 80099d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80099d2:	f7fc fcc6 	bl	8006362 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00e      	beq.n	80099fe <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <tcp_write+0x69a>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d106      	bne.n	80099fe <tcp_write+0x69a>
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <tcp_write+0x6a8>)
 80099f2:	f240 3202 	movw	r2, #770	; 0x302
 80099f6:	4906      	ldr	r1, [pc, #24]	; (8009a10 <tcp_write+0x6ac>)
 80099f8:	4806      	ldr	r0, [pc, #24]	; (8009a14 <tcp_write+0x6b0>)
 80099fa:	f003 fbdf 	bl	800d1bc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80099fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	375c      	adds	r7, #92	; 0x5c
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800f170 	.word	0x0800f170
 8009a10:	0800f454 	.word	0x0800f454
 8009a14:	0800f1d4 	.word	0x0800f1d4

08009a18 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08a      	sub	sp, #40	; 0x28
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <tcp_enqueue_flags+0x2c>
 8009a36:	4b6f      	ldr	r3, [pc, #444]	; (8009bf4 <tcp_enqueue_flags+0x1dc>)
 8009a38:	f240 321b 	movw	r2, #795	; 0x31b
 8009a3c:	496e      	ldr	r1, [pc, #440]	; (8009bf8 <tcp_enqueue_flags+0x1e0>)
 8009a3e:	486f      	ldr	r0, [pc, #444]	; (8009bfc <tcp_enqueue_flags+0x1e4>)
 8009a40:	f003 fbbc 	bl	800d1bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d806      	bhi.n	8009a5c <tcp_enqueue_flags+0x44>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a54:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d90e      	bls.n	8009a7a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	7e9b      	ldrb	r3, [r3, #26]
 8009a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a78:	e0b7      	b.n	8009bea <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8009a84:	2301      	movs	r3, #1
 8009a86:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009a88:	7ffb      	ldrb	r3, [r7, #31]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7fa fd49 	bl	8004534 <pbuf_alloc>
 8009aa2:	6138      	str	r0, [r7, #16]
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d109      	bne.n	8009abe <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	7e9b      	ldrb	r3, [r3, #26]
 8009aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009abc:	e095      	b.n	8009bea <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	895a      	ldrh	r2, [r3, #10]
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d206      	bcs.n	8009ad8 <tcp_enqueue_flags+0xc0>
 8009aca:	4b4a      	ldr	r3, [pc, #296]	; (8009bf4 <tcp_enqueue_flags+0x1dc>)
 8009acc:	f240 3241 	movw	r2, #833	; 0x341
 8009ad0:	494b      	ldr	r1, [pc, #300]	; (8009c00 <tcp_enqueue_flags+0x1e8>)
 8009ad2:	484a      	ldr	r0, [pc, #296]	; (8009bfc <tcp_enqueue_flags+0x1e4>)
 8009ad4:	f003 fb72 	bl	800d1bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	6939      	ldr	r1, [r7, #16]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fadc 	bl	80090a4 <tcp_create_segment>
 8009aec:	60f8      	str	r0, [r7, #12]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d109      	bne.n	8009b08 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	7e9b      	ldrb	r3, [r3, #26]
 8009af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b06:	e070      	b.n	8009bea <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0303 	and.w	r3, r3, #3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d006      	beq.n	8009b22 <tcp_enqueue_flags+0x10a>
 8009b14:	4b37      	ldr	r3, [pc, #220]	; (8009bf4 <tcp_enqueue_flags+0x1dc>)
 8009b16:	f240 3249 	movw	r2, #841	; 0x349
 8009b1a:	493a      	ldr	r1, [pc, #232]	; (8009c04 <tcp_enqueue_flags+0x1ec>)
 8009b1c:	4837      	ldr	r0, [pc, #220]	; (8009bfc <tcp_enqueue_flags+0x1e4>)
 8009b1e:	f003 fb4d 	bl	800d1bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	891b      	ldrh	r3, [r3, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d006      	beq.n	8009b38 <tcp_enqueue_flags+0x120>
 8009b2a:	4b32      	ldr	r3, [pc, #200]	; (8009bf4 <tcp_enqueue_flags+0x1dc>)
 8009b2c:	f240 324a 	movw	r2, #842	; 0x34a
 8009b30:	4935      	ldr	r1, [pc, #212]	; (8009c08 <tcp_enqueue_flags+0x1f0>)
 8009b32:	4832      	ldr	r0, [pc, #200]	; (8009bfc <tcp_enqueue_flags+0x1e4>)
 8009b34:	f003 fb42 	bl	800d1bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d103      	bne.n	8009b48 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	669a      	str	r2, [r3, #104]	; 0x68
 8009b46:	e00d      	b.n	8009b64 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b4c:	61bb      	str	r3, [r7, #24]
 8009b4e:	e002      	b.n	8009b56 <tcp_enqueue_flags+0x13e>
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	61bb      	str	r3, [r7, #24]
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f8      	bne.n	8009b50 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <tcp_enqueue_flags+0x168>
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7e9b      	ldrb	r3, [r3, #26]
 8009b98:	f043 0320 	orr.w	r3, r3, #32
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fb f8ca 	bl	8004d40 <pbuf_clen>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00e      	beq.n	8009be8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <tcp_enqueue_flags+0x1d0>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d106      	bne.n	8009be8 <tcp_enqueue_flags+0x1d0>
 8009bda:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <tcp_enqueue_flags+0x1dc>)
 8009bdc:	f240 326d 	movw	r2, #877	; 0x36d
 8009be0:	490a      	ldr	r1, [pc, #40]	; (8009c0c <tcp_enqueue_flags+0x1f4>)
 8009be2:	4806      	ldr	r0, [pc, #24]	; (8009bfc <tcp_enqueue_flags+0x1e4>)
 8009be4:	f003 faea 	bl	800d1bc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800f170 	.word	0x0800f170
 8009bf8:	0800f474 	.word	0x0800f474
 8009bfc:	0800f1d4 	.word	0x0800f1d4
 8009c00:	0800f4cc 	.word	0x0800f4cc
 8009c04:	0800f508 	.word	0x0800f508
 8009c08:	0800f520 	.word	0x0800f520
 8009c0c:	0800f54c 	.word	0x0800f54c

08009c10 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	b08b      	sub	sp, #44	; 0x2c
 8009c14:	af04      	add	r7, sp, #16
 8009c16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009c1c:	7dbb      	ldrb	r3, [r7, #22]
 8009c1e:	b29c      	uxth	r4, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f9 fed8 	bl	80039da <lwip_htonl>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4621      	mov	r1, r4
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff f97b 	bl	8008f2c <tcp_output_alloc_header>
 8009c36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	7e9b      	ldrb	r3, [r3, #26]
 8009c42:	f043 0303 	orr.w	r3, r3, #3
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009c4c:	f06f 0301 	mvn.w	r3, #1
 8009c50:	e036      	b.n	8009cc0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 f8fc 	bl	800be54 <ip4_route>
 8009c5c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8009c64:	23fc      	movs	r3, #252	; 0xfc
 8009c66:	75fb      	strb	r3, [r7, #23]
 8009c68:	e012      	b.n	8009c90 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	1d18      	adds	r0, r3, #4
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7a9c      	ldrb	r4, [r3, #10]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7a5b      	ldrb	r3, [r3, #9]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	9202      	str	r2, [sp, #8]
 8009c7c:	2206      	movs	r2, #6
 8009c7e:	9201      	str	r2, [sp, #4]
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	4623      	mov	r3, r4
 8009c84:	4602      	mov	r2, r0
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f002 fa96 	bl	800c1b8 <ip4_output_if>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009c90:	6938      	ldr	r0, [r7, #16]
 8009c92:	f7fa ffc1 	bl	8004c18 <pbuf_free>

  if (err != ERR_OK) {
 8009c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	7e9b      	ldrb	r3, [r3, #26]
 8009ca2:	f043 0303 	orr.w	r3, r3, #3
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	769a      	strb	r2, [r3, #26]
 8009cac:	e006      	b.n	8009cbc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7e9b      	ldrb	r3, [r3, #26]
 8009cb2:	f023 0303 	bic.w	r3, r3, #3
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8009cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	371c      	adds	r7, #28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd90      	pop	{r4, r7, pc}

08009cc8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009cc8:	b5b0      	push	{r4, r5, r7, lr}
 8009cca:	b08a      	sub	sp, #40	; 0x28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7d1b      	ldrb	r3, [r3, #20]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d106      	bne.n	8009ce6 <tcp_output+0x1e>
 8009cd8:	4b9b      	ldr	r3, [pc, #620]	; (8009f48 <tcp_output+0x280>)
 8009cda:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009cde:	499b      	ldr	r1, [pc, #620]	; (8009f4c <tcp_output+0x284>)
 8009ce0:	489b      	ldr	r0, [pc, #620]	; (8009f50 <tcp_output+0x288>)
 8009ce2:	f003 fa6b 	bl	800d1bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009ce6:	4b9b      	ldr	r3, [pc, #620]	; (8009f54 <tcp_output+0x28c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d101      	bne.n	8009cf4 <tcp_output+0x2c>
    return ERR_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e1cf      	b.n	800a094 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d203      	bcs.n	8009d0c <tcp_output+0x44>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d0a:	e002      	b.n	8009d12 <tcp_output+0x4a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d12:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7e9b      	ldrb	r3, [r3, #26]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d017      	beq.n	8009d56 <tcp_output+0x8e>
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00f      	beq.n	8009d4c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7f9 fe51 	bl	80039da <lwip_htonl>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d42:	8912      	ldrh	r2, [r2, #8]
 8009d44:	4413      	add	r3, r2
     (seg == NULL ||
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d204      	bcs.n	8009d56 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ff5f 	bl	8009c10 <tcp_send_empty_ack>
 8009d52:	4603      	mov	r3, r0
 8009d54:	e19e      	b.n	800a094 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d007      	beq.n	8009d72 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8009d62:	e002      	b.n	8009d6a <tcp_output+0xa2>
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	623b      	str	r3, [r7, #32]
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f8      	bne.n	8009d64 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 f86c 	bl	800be54 <ip4_route>
 8009d7c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <tcp_output+0xc2>
    return ERR_RTE;
 8009d84:	f06f 0303 	mvn.w	r3, #3
 8009d88:	e184      	b.n	800a094 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <tcp_output+0xd0>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d111      	bne.n	8009dbc <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d002      	beq.n	8009da4 <tcp_output+0xdc>
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	3304      	adds	r3, #4
 8009da2:	e000      	b.n	8009da6 <tcp_output+0xde>
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <tcp_output+0xec>
      return ERR_RTE;
 8009dae:	f06f 0303 	mvn.w	r3, #3
 8009db2:	e16f      	b.n	800a094 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 813e 	beq.w	800a040 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7f9 fe05 	bl	80039da <lwip_htonl>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dda:	8912      	ldrh	r2, [r2, #8]
 8009ddc:	4413      	add	r3, r2
  if (seg != NULL &&
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	f080 812d 	bcs.w	800a040 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8129 	beq.w	800a040 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009df4:	461a      	mov	r2, r3
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	f040 8121 	bne.w	800a040 <tcp_output+0x378>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 811c 	bne.w	800a040 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f040 812b 	bne.w	800a06a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009e24:	e121      	b.n	800a06a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7f9 fdc5 	bl	80039be <lwip_htons>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d006      	beq.n	8009e4c <tcp_output+0x184>
 8009e3e:	4b42      	ldr	r3, [pc, #264]	; (8009f48 <tcp_output+0x280>)
 8009e40:	f240 4246 	movw	r2, #1094	; 0x446
 8009e44:	4944      	ldr	r1, [pc, #272]	; (8009f58 <tcp_output+0x290>)
 8009e46:	4842      	ldr	r0, [pc, #264]	; (8009f50 <tcp_output+0x288>)
 8009e48:	f003 f9b8 	bl	800d1bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d01f      	beq.n	8009e94 <tcp_output+0x1cc>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7e9b      	ldrb	r3, [r3, #26]
 8009e58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d119      	bne.n	8009e94 <tcp_output+0x1cc>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <tcp_output+0x1b8>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d110      	bne.n	8009e94 <tcp_output+0x1cc>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e76:	891a      	ldrh	r2, [r3, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d209      	bcs.n	8009e94 <tcp_output+0x1cc>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d004      	beq.n	8009e94 <tcp_output+0x1cc>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e90:	2b08      	cmp	r3, #8
 8009e92:	d901      	bls.n	8009e98 <tcp_output+0x1d0>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <tcp_output+0x1d2>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	7e9b      	ldrb	r3, [r3, #26]
 8009ea2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80e1 	beq.w	800a06e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	7d1b      	ldrb	r3, [r3, #20]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d00d      	beq.n	8009ed0 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	899b      	ldrh	r3, [r3, #12]
 8009eba:	b29c      	uxth	r4, r3
 8009ebc:	2010      	movs	r0, #16
 8009ebe:	f7f9 fd7e 	bl	80039be <lwip_htons>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	4322      	orrs	r2, r4
 8009ecc:	b292      	uxth	r2, r2
 8009ece:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ed6:	f000 f8e1 	bl	800a09c <tcp_output_segment>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	7e9b      	ldrb	r3, [r3, #26]
 8009eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	769a      	strb	r2, [r3, #26]
      return err;
 8009ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef8:	e0cc      	b.n	800a094 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7d1b      	ldrb	r3, [r3, #20]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d006      	beq.n	8009f18 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	7e9b      	ldrb	r3, [r3, #26]
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7f9 fd5b 	bl	80039da <lwip_htonl>
 8009f24:	4604      	mov	r4, r0
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	891b      	ldrh	r3, [r3, #8]
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7f9 fd42 	bl	80039be <lwip_htons>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <tcp_output+0x294>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e00a      	b.n	8009f5e <tcp_output+0x296>
 8009f48:	0800f170 	.word	0x0800f170
 8009f4c:	0800f574 	.word	0x0800f574
 8009f50:	0800f1d4 	.word	0x0800f1d4
 8009f54:	20006b2c 	.word	0x20006b2c
 8009f58:	0800f59c 	.word	0x0800f59c
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	442b      	add	r3, r5
 8009f60:	4423      	add	r3, r4
 8009f62:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da02      	bge.n	8009f76 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	891b      	ldrh	r3, [r3, #8]
 8009f7a:	461c      	mov	r4, r3
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	899b      	ldrh	r3, [r3, #12]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7f9 fd1a 	bl	80039be <lwip_htons>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <tcp_output+0x2d0>
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <tcp_output+0x2d2>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4423      	add	r3, r4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d049      	beq.n	800a034 <tcp_output+0x36c>
      seg->next = NULL;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d105      	bne.n	8009fba <tcp_output+0x2f2>
        pcb->unacked = seg;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	623b      	str	r3, [r7, #32]
 8009fb8:	e03f      	b.n	800a03a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f9 fd0a 	bl	80039da <lwip_htonl>
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f9 fd03 	bl	80039da <lwip_htonl>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	1ae3      	subs	r3, r4, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	da24      	bge.n	800a026 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	336c      	adds	r3, #108	; 0x6c
 8009fe0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009fe2:	e002      	b.n	8009fea <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f9 fced 	bl	80039da <lwip_htonl>
 800a000:	4604      	mov	r4, r0
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7f9 fce6 	bl	80039da <lwip_htonl>
 800a00e:	4603      	mov	r3, r0
 800a010:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a012:	2b00      	cmp	r3, #0
 800a014:	dbe6      	blt.n	8009fe4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	e009      	b.n	800a03a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	623b      	str	r3, [r7, #32]
 800a032:	e002      	b.n	800a03a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a036:	f7fc f9a8 	bl	800638a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a03e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	2b00      	cmp	r3, #0
 800a044:	d015      	beq.n	800a072 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7f9 fcc4 	bl	80039da <lwip_htonl>
 800a052:	4602      	mov	r2, r0
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	8912      	ldrh	r2, [r2, #8]
 800a05e:	4413      	add	r3, r2
  while (seg != NULL &&
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	429a      	cmp	r2, r3
 800a064:	f4bf aedf 	bcs.w	8009e26 <tcp_output+0x15e>
  }
output_done:
 800a068:	e003      	b.n	800a072 <tcp_output+0x3aa>
    goto output_done;
 800a06a:	bf00      	nop
 800a06c:	e002      	b.n	800a074 <tcp_output+0x3ac>
      break;
 800a06e:	bf00      	nop
 800a070:	e000      	b.n	800a074 <tcp_output+0x3ac>
output_done:
 800a072:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	7e9b      	ldrb	r3, [r3, #26]
 800a088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3728      	adds	r7, #40	; 0x28
 800a098:	46bd      	mov	sp, r7
 800a09a:	bdb0      	pop	{r4, r5, r7, pc}

0800a09c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a09c:	b5b0      	push	{r4, r5, r7, lr}
 800a09e:	b08c      	sub	sp, #48	; 0x30
 800a0a0:	af04      	add	r7, sp, #16
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	89db      	ldrh	r3, [r3, #14]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d001      	beq.n	800a0b6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e08b      	b.n	800a1ce <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68dc      	ldr	r4, [r3, #12]
 800a0be:	4610      	mov	r0, r2
 800a0c0:	f7f9 fc8b 	bl	80039da <lwip_htonl>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68dc      	ldr	r4, [r3, #12]
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7f9 fc74 	bl	80039be <lwip_htons>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a0e2:	441a      	add	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	3314      	adds	r3, #20
 800a0ee:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	7a9b      	ldrb	r3, [r3, #10]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d014      	beq.n	800a126 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4619      	mov	r1, r3
 800a102:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a106:	f7fc fc73 	bl	80069f0 <tcp_eff_send_mss_impl>
 800a10a:	4603      	mov	r3, r0
 800a10c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a10e:	8b7b      	ldrh	r3, [r7, #26]
 800a110:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a114:	4618      	mov	r0, r3
 800a116:	f7f9 fc60 	bl	80039da <lwip_htonl>
 800a11a:	4602      	mov	r2, r0
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	3304      	adds	r3, #4
 800a124:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	da02      	bge.n	800a136 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2200      	movs	r2, #0
 800a134:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10c      	bne.n	800a158 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800a13e:	4b26      	ldr	r3, [pc, #152]	; (800a1d8 <tcp_output_segment+0x13c>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7f9 fc44 	bl	80039da <lwip_htonl>
 800a152:	4602      	mov	r2, r0
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	461a      	mov	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	8959      	ldrh	r1, [r3, #10]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	8b3a      	ldrh	r2, [r7, #24]
 800a174:	1a8a      	subs	r2, r1, r2
 800a176:	b292      	uxth	r2, r2
 800a178:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	8919      	ldrh	r1, [r3, #8]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	8b3a      	ldrh	r2, [r7, #24]
 800a186:	1a8a      	subs	r2, r1, r2
 800a188:	b292      	uxth	r2, r2
 800a18a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	68d2      	ldr	r2, [r2, #12]
 800a194:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	741a      	strb	r2, [r3, #16]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6858      	ldr	r0, [r3, #4]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	1d1c      	adds	r4, r3, #4
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	7a9d      	ldrb	r5, [r3, #10]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	7a5b      	ldrb	r3, [r3, #9]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	9202      	str	r2, [sp, #8]
 800a1b8:	2206      	movs	r2, #6
 800a1ba:	9201      	str	r2, [sp, #4]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	462b      	mov	r3, r5
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	f001 fff9 	bl	800c1b8 <ip4_output_if>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800a1ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20006b1c 	.word	0x20006b1c

0800a1dc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08c      	sub	sp, #48	; 0x30
 800a1e0:	af04      	add	r7, sp, #16
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2114      	movs	r1, #20
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	f7fa f9a0 	bl	8004534 <pbuf_alloc>
 800a1f4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d05b      	beq.n	800a2b4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	895b      	ldrh	r3, [r3, #10]
 800a200:	2b13      	cmp	r3, #19
 800a202:	d806      	bhi.n	800a212 <tcp_rst+0x36>
 800a204:	4b2d      	ldr	r3, [pc, #180]	; (800a2bc <tcp_rst+0xe0>)
 800a206:	f240 524d 	movw	r2, #1357	; 0x54d
 800a20a:	492d      	ldr	r1, [pc, #180]	; (800a2c0 <tcp_rst+0xe4>)
 800a20c:	482d      	ldr	r0, [pc, #180]	; (800a2c4 <tcp_rst+0xe8>)
 800a20e:	f002 ffd5 	bl	800d1bc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800a218:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f9 fbcf 	bl	80039be <lwip_htons>
 800a220:	4603      	mov	r3, r0
 800a222:	461a      	mov	r2, r3
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a228:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f9 fbc7 	bl	80039be <lwip_htons>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f7f9 fbce 	bl	80039da <lwip_htonl>
 800a23e:	4602      	mov	r2, r0
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a244:	68b8      	ldr	r0, [r7, #8]
 800a246:	f7f9 fbc8 	bl	80039da <lwip_htonl>
 800a24a:	4602      	mov	r2, r0
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a250:	f245 0014 	movw	r0, #20500	; 0x5014
 800a254:	f7f9 fbb3 	bl	80039be <lwip_htons>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2200      	movs	r2, #0
 800a264:	f042 0208 	orr.w	r2, r2, #8
 800a268:	739a      	strb	r2, [r3, #14]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a270:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	2200      	movs	r2, #0
 800a276:	741a      	strb	r2, [r3, #16]
 800a278:	2200      	movs	r2, #0
 800a27a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	2200      	movs	r2, #0
 800a280:	749a      	strb	r2, [r3, #18]
 800a282:	2200      	movs	r2, #0
 800a284:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a286:	6838      	ldr	r0, [r7, #0]
 800a288:	f001 fde4 	bl	800be54 <ip4_route>
 800a28c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00b      	beq.n	800a2ac <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	9302      	str	r3, [sp, #8]
 800a298:	2306      	movs	r3, #6
 800a29a:	9301      	str	r3, [sp, #4]
 800a29c:	2300      	movs	r3, #0
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	23ff      	movs	r3, #255	; 0xff
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	69f8      	ldr	r0, [r7, #28]
 800a2a8:	f001 ff86 	bl	800c1b8 <ip4_output_if>
  }
  pbuf_free(p);
 800a2ac:	69f8      	ldr	r0, [r7, #28]
 800a2ae:	f7fa fcb3 	bl	8004c18 <pbuf_free>
 800a2b2:	e000      	b.n	800a2b6 <tcp_rst+0xda>
    return;
 800a2b4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a2b6:	3720      	adds	r7, #32
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	0800f170 	.word	0x0800f170
 800a2c0:	0800f1a4 	.word	0x0800f1a4
 800a2c4:	0800f1d4 	.word	0x0800f1d4

0800a2c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d029      	beq.n	800a32c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	e002      	b.n	800a2e6 <tcp_rexmit_rto+0x1e>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1f8      	bne.n	800a2e0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a30a:	2bff      	cmp	r3, #255	; 0xff
 800a30c:	d007      	beq.n	800a31e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a314:	3301      	adds	r3, #1
 800a316:	b2da      	uxtb	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fccf 	bl	8009cc8 <tcp_output>
 800a32a:	e000      	b.n	800a32e <tcp_rexmit_rto+0x66>
    return;
 800a32c:	bf00      	nop
}
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d043      	beq.n	800a3cc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a348:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3368      	adds	r3, #104	; 0x68
 800a356:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a358:	e002      	b.n	800a360 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d011      	beq.n	800a38c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	4618      	mov	r0, r3
 800a372:	f7f9 fb32 	bl	80039da <lwip_htonl>
 800a376:	4604      	mov	r4, r0
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f9 fb2b 	bl	80039da <lwip_htonl>
 800a384:	4603      	mov	r3, r0
 800a386:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a388:	2b00      	cmp	r3, #0
 800a38a:	dbe6      	blt.n	800a35a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d103      	bne.n	800a3aa <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3b0:	2bff      	cmp	r3, #255	; 0xff
 800a3b2:	d007      	beq.n	800a3c4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	635a      	str	r2, [r3, #52]	; 0x34
 800a3ca:	e000      	b.n	800a3ce <tcp_rexmit+0x9a>
    return;
 800a3cc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd90      	pop	{r4, r7, pc}

0800a3d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d04c      	beq.n	800a47e <tcp_rexmit_fast+0xaa>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7e9b      	ldrb	r3, [r3, #26]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d146      	bne.n	800a47e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ff9f 	bl	800a334 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a402:	429a      	cmp	r2, r3
 800a404:	d208      	bcs.n	800a418 <tcp_rexmit_fast+0x44>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	da00      	bge.n	800a412 <tcp_rexmit_fast+0x3e>
 800a410:	3301      	adds	r3, #1
 800a412:	105b      	asrs	r3, r3, #1
 800a414:	b29b      	uxth	r3, r3
 800a416:	e007      	b.n	800a428 <tcp_rexmit_fast+0x54>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	da00      	bge.n	800a424 <tcp_rexmit_fast+0x50>
 800a422:	3301      	adds	r3, #1
 800a424:	105b      	asrs	r3, r3, #1
 800a426:	b29b      	uxth	r3, r3
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a434:	461a      	mov	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d206      	bcs.n	800a44e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	b29a      	uxth	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a458:	4619      	mov	r1, r3
 800a45a:	0049      	lsls	r1, r1, #1
 800a45c:	440b      	add	r3, r1
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4413      	add	r3, r2
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7e9b      	ldrb	r3, [r3, #26]
 800a46e:	f043 0304 	orr.w	r3, r3, #4
 800a472:	b2da      	uxtb	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800a47e:	bf00      	nop
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b08a      	sub	sp, #40	; 0x28
 800a48a:	af04      	add	r7, sp, #16
 800a48c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a492:	3b01      	subs	r3, #1
 800a494:	4618      	mov	r0, r3
 800a496:	f7f9 faa0 	bl	80039da <lwip_htonl>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2200      	movs	r2, #0
 800a49e:	2100      	movs	r1, #0
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7fe fd43 	bl	8008f2c <tcp_output_alloc_header>
 800a4a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a4ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4b2:	e021      	b.n	800a4f8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f001 fccb 	bl	800be54 <ip4_route>
 800a4be:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <tcp_keepalive+0x46>
    err = ERR_RTE;
 800a4c6:	23fc      	movs	r3, #252	; 0xfc
 800a4c8:	75fb      	strb	r3, [r7, #23]
 800a4ca:	e010      	b.n	800a4ee <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	1d1a      	adds	r2, r3, #4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	7a98      	ldrb	r0, [r3, #10]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	9302      	str	r3, [sp, #8]
 800a4da:	2306      	movs	r3, #6
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	6938      	ldr	r0, [r7, #16]
 800a4e6:	f001 fe67 	bl	800c1b8 <ip4_output_if>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a4ee:	6938      	ldr	r0, [r7, #16]
 800a4f0:	f7fa fb92 	bl	8004c18 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b08f      	sub	sp, #60	; 0x3c
 800a504:	af04      	add	r7, sp, #16
 800a506:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d102      	bne.n	800a51a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a518:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e085      	b.n	800a630 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	899b      	ldrh	r3, [r3, #12]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f9 fa46 	bl	80039be <lwip_htons>
 800a532:	4603      	mov	r3, r0
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <tcp_zero_window_probe+0x48>
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	891b      	ldrh	r3, [r3, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <tcp_zero_window_probe+0x48>
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <tcp_zero_window_probe+0x4a>
 800a548:	2300      	movs	r3, #0
 800a54a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a54c:	7ffb      	ldrb	r3, [r7, #31]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bf0c      	ite	eq
 800a552:	2301      	moveq	r3, #1
 800a554:	2300      	movne	r3, #0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	8bba      	ldrh	r2, [r7, #28]
 800a562:	2100      	movs	r1, #0
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7fe fce1 	bl	8008f2c <tcp_output_alloc_header>
 800a56a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a576:	e05b      	b.n	800a630 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a57e:	7ffb      	ldrb	r3, [r7, #31]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00e      	beq.n	800a5a2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	899b      	ldrh	r3, [r3, #12]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a58e:	b29c      	uxth	r4, r3
 800a590:	2011      	movs	r0, #17
 800a592:	f7f9 fa14 	bl	80039be <lwip_htons>
 800a596:	4603      	mov	r3, r0
 800a598:	4323      	orrs	r3, r4
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	819a      	strh	r2, [r3, #12]
 800a5a0:	e010      	b.n	800a5c4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	3314      	adds	r3, #20
 800a5a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	6858      	ldr	r0, [r3, #4]
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	891a      	ldrh	r2, [r3, #8]
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	891b      	ldrh	r3, [r3, #8]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	2201      	movs	r2, #1
 800a5be:	6939      	ldr	r1, [r7, #16]
 800a5c0:	f7fa fd2a 	bl	8005018 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7f9 fa05 	bl	80039da <lwip_htonl>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da02      	bge.n	800a5e8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 fc31 	bl	800be54 <ip4_route>
 800a5f2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d103      	bne.n	800a602 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800a5fa:	23fc      	movs	r3, #252	; 0xfc
 800a5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a600:	e011      	b.n	800a626 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	1d1a      	adds	r2, r3, #4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	7a98      	ldrb	r0, [r3, #10]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	9302      	str	r3, [sp, #8]
 800a610:	2306      	movs	r3, #6
 800a612:	9301      	str	r3, [sp, #4]
 800a614:	2300      	movs	r3, #0
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4603      	mov	r3, r0
 800a61a:	69b8      	ldr	r0, [r7, #24]
 800a61c:	f001 fdcc 	bl	800c1b8 <ip4_output_if>
 800a620:	4603      	mov	r3, r0
 800a622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a626:	69b8      	ldr	r0, [r7, #24]
 800a628:	f7fa faf6 	bl	8004c18 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a62c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a630:	4618      	mov	r0, r3
 800a632:	372c      	adds	r7, #44	; 0x2c
 800a634:	46bd      	mov	sp, r7
 800a636:	bd90      	pop	{r4, r7, pc}

0800a638 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a640:	f7fa fe3e 	bl	80052c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <tcpip_tcp_timer+0x38>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d103      	bne.n	800a654 <tcpip_tcp_timer+0x1c>
 800a64c:	4b09      	ldr	r3, [pc, #36]	; (800a674 <tcpip_tcp_timer+0x3c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a654:	2200      	movs	r2, #0
 800a656:	4908      	ldr	r1, [pc, #32]	; (800a678 <tcpip_tcp_timer+0x40>)
 800a658:	20fa      	movs	r0, #250	; 0xfa
 800a65a:	f000 f86f 	bl	800a73c <sys_timeout>
 800a65e:	e002      	b.n	800a666 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <tcpip_tcp_timer+0x44>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
  }
}
 800a666:	bf00      	nop
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	20006b18 	.word	0x20006b18
 800a674:	20006b28 	.word	0x20006b28
 800a678:	0800a639 	.word	0x0800a639
 800a67c:	20000118 	.word	0x20000118

0800a680 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <tcp_timer_needed+0x30>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10f      	bne.n	800a6ac <tcp_timer_needed+0x2c>
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <tcp_timer_needed+0x34>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <tcp_timer_needed+0x1c>
 800a694:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <tcp_timer_needed+0x38>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <tcp_timer_needed+0x30>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4905      	ldr	r1, [pc, #20]	; (800a6bc <tcp_timer_needed+0x3c>)
 800a6a6:	20fa      	movs	r0, #250	; 0xfa
 800a6a8:	f000 f848 	bl	800a73c <sys_timeout>
  }
}
 800a6ac:	bf00      	nop
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000118 	.word	0x20000118
 800a6b4:	20006b18 	.word	0x20006b18
 800a6b8:	20006b28 	.word	0x20006b28
 800a6bc:	0800a639 	.word	0x0800a639

0800a6c0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	4903      	ldr	r1, [pc, #12]	; (800a6e8 <cyclic_timer+0x28>)
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f82e 	bl	800a73c <sys_timeout>
}
 800a6e0:	bf00      	nop
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	0800a6c1 	.word	0x0800a6c1

0800a6ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	607b      	str	r3, [r7, #4]
 800a6f6:	e00e      	b.n	800a716 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a6f8:	4a0d      	ldr	r2, [pc, #52]	; (800a730 <sys_timeouts_init+0x44>)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	4a0a      	ldr	r2, [pc, #40]	; (800a730 <sys_timeouts_init+0x44>)
 800a706:	4413      	add	r3, r2
 800a708:	461a      	mov	r2, r3
 800a70a:	490a      	ldr	r1, [pc, #40]	; (800a734 <sys_timeouts_init+0x48>)
 800a70c:	f000 f816 	bl	800a73c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3301      	adds	r3, #1
 800a714:	607b      	str	r3, [r7, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d9ed      	bls.n	800a6f8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a71c:	f7f9 f948 	bl	80039b0 <sys_now>
 800a720:	4602      	mov	r2, r0
 800a722:	4b05      	ldr	r3, [pc, #20]	; (800a738 <sys_timeouts_init+0x4c>)
 800a724:	601a      	str	r2, [r3, #0]
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	0800fe70 	.word	0x0800fe70
 800a734:	0800a6c1 	.word	0x0800a6c1
 800a738:	20000114 	.word	0x20000114

0800a73c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a748:	2008      	movs	r0, #8
 800a74a:	f7f9 fce7 	bl	800411c <memp_malloc>
 800a74e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10a      	bne.n	800a76c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 8084 	bne.w	800a866 <sys_timeout+0x12a>
 800a75e:	4b44      	ldr	r3, [pc, #272]	; (800a870 <sys_timeout+0x134>)
 800a760:	22d4      	movs	r2, #212	; 0xd4
 800a762:	4944      	ldr	r1, [pc, #272]	; (800a874 <sys_timeout+0x138>)
 800a764:	4844      	ldr	r0, [pc, #272]	; (800a878 <sys_timeout+0x13c>)
 800a766:	f002 fd29 	bl	800d1bc <iprintf>
    return;
 800a76a:	e07c      	b.n	800a866 <sys_timeout+0x12a>
  }

  now = sys_now();
 800a76c:	f7f9 f920 	bl	80039b0 <sys_now>
 800a770:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a772:	4b42      	ldr	r3, [pc, #264]	; (800a87c <sys_timeout+0x140>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <sys_timeout+0x4a>
    diff = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a77e:	4a40      	ldr	r2, [pc, #256]	; (800a880 <sys_timeout+0x144>)
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	e004      	b.n	800a790 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a786:	4b3e      	ldr	r3, [pc, #248]	; (800a880 <sys_timeout+0x144>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	441a      	add	r2, r3
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a7ac:	4b33      	ldr	r3, [pc, #204]	; (800a87c <sys_timeout+0x140>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <sys_timeout+0x80>
    next_timeout = timeout;
 800a7b4:	4a31      	ldr	r2, [pc, #196]	; (800a87c <sys_timeout+0x140>)
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	6013      	str	r3, [r2, #0]
    return;
 800a7ba:	e055      	b.n	800a868 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a7bc:	4b2f      	ldr	r3, [pc, #188]	; (800a87c <sys_timeout+0x140>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d20f      	bcs.n	800a7e8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a7c8:	4b2c      	ldr	r3, [pc, #176]	; (800a87c <sys_timeout+0x140>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6859      	ldr	r1, [r3, #4]
 800a7ce:	4b2b      	ldr	r3, [pc, #172]	; (800a87c <sys_timeout+0x140>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	1a8a      	subs	r2, r1, r2
 800a7d6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a7d8:	4b28      	ldr	r3, [pc, #160]	; (800a87c <sys_timeout+0x140>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a7e0:	4a26      	ldr	r2, [pc, #152]	; (800a87c <sys_timeout+0x140>)
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	e03f      	b.n	800a868 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a7e8:	4b24      	ldr	r3, [pc, #144]	; (800a87c <sys_timeout+0x140>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	e036      	b.n	800a85e <sys_timeout+0x122>
      timeout->time -= t->time;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	1ad2      	subs	r2, r2, r3
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d006      	beq.n	800a814 <sys_timeout+0xd8>
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	429a      	cmp	r2, r3
 800a812:	d921      	bls.n	800a858 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d009      	beq.n	800a830 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6859      	ldr	r1, [r3, #4]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1a8a      	subs	r2, r1, r2
 800a82c:	605a      	str	r2, [r3, #4]
 800a82e:	e00b      	b.n	800a848 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	429a      	cmp	r2, r3
 800a838:	d206      	bcs.n	800a848 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a83a:	4b10      	ldr	r3, [pc, #64]	; (800a87c <sys_timeout+0x140>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	441a      	add	r2, r3
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	601a      	str	r2, [r3, #0]
        break;
 800a856:	e007      	b.n	800a868 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1c5      	bne.n	800a7f0 <sys_timeout+0xb4>
 800a864:	e000      	b.n	800a868 <sys_timeout+0x12c>
    return;
 800a866:	bf00      	nop
      }
    }
  }
}
 800a868:	3720      	adds	r7, #32
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	0800f5b4 	.word	0x0800f5b4
 800a874:	0800f5e8 	.word	0x0800f5e8
 800a878:	0800f628 	.word	0x0800f628
 800a87c:	20000110 	.word	0x20000110
 800a880:	20000114 	.word	0x20000114

0800a884 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a88a:	4b24      	ldr	r3, [pc, #144]	; (800a91c <sys_check_timeouts+0x98>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d040      	beq.n	800a914 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a892:	f7f9 f88d 	bl	80039b0 <sys_now>
 800a896:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a898:	4b21      	ldr	r3, [pc, #132]	; (800a920 <sys_check_timeouts+0x9c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a8a2:	4b20      	ldr	r3, [pc, #128]	; (800a924 <sys_check_timeouts+0xa0>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <sys_check_timeouts+0x2c>
 800a8ac:	f7f9 fe12 	bl	80044d4 <pbuf_free_ooseq>
      had_one = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a8b4:	4b19      	ldr	r3, [pc, #100]	; (800a91c <sys_check_timeouts+0x98>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d026      	beq.n	800a90e <sys_check_timeouts+0x8a>
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d321      	bcc.n	800a90e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	4b13      	ldr	r3, [pc, #76]	; (800a920 <sys_check_timeouts+0x9c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	4a11      	ldr	r2, [pc, #68]	; (800a920 <sys_check_timeouts+0x9c>)
 800a8da:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a0c      	ldr	r2, [pc, #48]	; (800a91c <sys_check_timeouts+0x98>)
 800a8ec:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a8fa:	68b9      	ldr	r1, [r7, #8]
 800a8fc:	2008      	movs	r0, #8
 800a8fe:	f7f9 fc59 	bl	80041b4 <memp_free>
        if (handler != NULL) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6838      	ldr	r0, [r7, #0]
 800a90c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a90e:	7cfb      	ldrb	r3, [r7, #19]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1c6      	bne.n	800a8a2 <sys_check_timeouts+0x1e>
  }
}
 800a914:	bf00      	nop
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20000110 	.word	0x20000110
 800a920:	20000114 	.word	0x20000114
 800a924:	20006b10 	.word	0x20006b10

0800a928 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a92c:	bf00      	nop
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
	...

0800a938 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d018      	beq.n	800a97e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d013      	beq.n	800a97a <udp_input_local_match+0x42>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a95a:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <udp_input_local_match+0x74>)
 800a95c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a962:	d00a      	beq.n	800a97a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	4b10      	ldr	r3, [pc, #64]	; (800a9ac <udp_input_local_match+0x74>)
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	405a      	eors	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3308      	adds	r3, #8
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a976:	2b00      	cmp	r3, #0
 800a978:	d110      	bne.n	800a99c <udp_input_local_match+0x64>
          return 1;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e00f      	b.n	800a99e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d009      	beq.n	800a998 <udp_input_local_match+0x60>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <udp_input_local_match+0x60>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	4b06      	ldr	r3, [pc, #24]	; (800a9ac <udp_input_local_match+0x74>)
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	429a      	cmp	r2, r3
 800a996:	d101      	bne.n	800a99c <udp_input_local_match+0x64>
      return 1;
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	20003480 	.word	0x20003480

0800a9b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a9b0:	b590      	push	{r4, r7, lr}
 800a9b2:	b08d      	sub	sp, #52	; 0x34
 800a9b4:	af02      	add	r7, sp, #8
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	895b      	ldrh	r3, [r3, #10]
 800a9c2:	2b07      	cmp	r3, #7
 800a9c4:	d803      	bhi.n	800a9ce <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7fa f926 	bl	8004c18 <pbuf_free>
    goto end;
 800a9cc:	e0c6      	b.n	800ab5c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a9d4:	4b63      	ldr	r3, [pc, #396]	; (800ab64 <udp_input+0x1b4>)
 800a9d6:	695a      	ldr	r2, [r3, #20]
 800a9d8:	4b62      	ldr	r3, [pc, #392]	; (800ab64 <udp_input+0x1b4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f001 fcbc 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7f8 ffe5 	bl	80039be <lwip_htons>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	885b      	ldrh	r3, [r3, #2]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f8 ffdd 	bl	80039be <lwip_htons>
 800aa04:	4603      	mov	r3, r0
 800aa06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800aa10:	2300      	movs	r3, #0
 800aa12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa14:	4b54      	ldr	r3, [pc, #336]	; (800ab68 <udp_input+0x1b8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1a:	e03b      	b.n	800aa94 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	8a5b      	ldrh	r3, [r3, #18]
 800aa20:	89fa      	ldrh	r2, [r7, #14]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d131      	bne.n	800aa8a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800aa26:	7cfb      	ldrb	r3, [r7, #19]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa2e:	f7ff ff83 	bl	800a938 <udp_input_local_match>
 800aa32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d028      	beq.n	800aa8a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	7c1b      	ldrb	r3, [r3, #16]
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d104      	bne.n	800aa4e <udp_input+0x9e>
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	8a9b      	ldrh	r3, [r3, #20]
 800aa52:	8a3a      	ldrh	r2, [r7, #16]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d118      	bne.n	800aa8a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	4b3f      	ldr	r3, [pc, #252]	; (800ab64 <udp_input+0x1b4>)
 800aa66:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d10e      	bne.n	800aa8a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d014      	beq.n	800aa9c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	68da      	ldr	r2, [r3, #12]
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aa7a:	4b3b      	ldr	r3, [pc, #236]	; (800ab68 <udp_input+0x1b8>)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800aa82:	4a39      	ldr	r2, [pc, #228]	; (800ab68 <udp_input+0x1b8>)
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800aa88:	e008      	b.n	800aa9c <udp_input+0xec>
      }
    }

    prev = pcb;
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1c0      	bne.n	800aa1c <udp_input+0x6c>
 800aa9a:	e000      	b.n	800aa9e <udp_input+0xee>
        break;
 800aa9c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <udp_input+0xf8>
    pcb = uncon_pcb;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <udp_input+0x104>
    for_us = 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	76fb      	strb	r3, [r7, #27]
 800aab2:	e00a      	b.n	800aaca <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	3304      	adds	r3, #4
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b2a      	ldr	r3, [pc, #168]	; (800ab64 <udp_input+0x1b4>)
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	bf0c      	ite	eq
 800aac2:	2301      	moveq	r3, #1
 800aac4:	2300      	movne	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800aaca:	7efb      	ldrb	r3, [r7, #27]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d042      	beq.n	800ab56 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800aad0:	f06f 0107 	mvn.w	r1, #7
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7fa f87b 	bl	8004bd0 <pbuf_header>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00a      	beq.n	800aaf6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800aae0:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <udp_input+0x1bc>)
 800aae2:	f240 1255 	movw	r2, #341	; 0x155
 800aae6:	4922      	ldr	r1, [pc, #136]	; (800ab70 <udp_input+0x1c0>)
 800aae8:	4822      	ldr	r0, [pc, #136]	; (800ab74 <udp_input+0x1c4>)
 800aaea:	f002 fb67 	bl	800d1bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7fa f892 	bl	8004c18 <pbuf_free>
      goto end;
 800aaf4:	e032      	b.n	800ab5c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d012      	beq.n	800ab22 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	699c      	ldr	r4, [r3, #24]
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	69d8      	ldr	r0, [r3, #28]
 800ab0c:	8a3b      	ldrh	r3, [r7, #16]
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	4b19      	ldr	r3, [pc, #100]	; (800ab78 <udp_input+0x1c8>)
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ab18:	e021      	b.n	800ab5e <udp_input+0x1ae>
        pbuf_free(p);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7fa f87c 	bl	8004c18 <pbuf_free>
        goto end;
 800ab20:	e01c      	b.n	800ab5c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ab22:	7cfb      	ldrb	r3, [r7, #19]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d112      	bne.n	800ab4e <udp_input+0x19e>
 800ab28:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <udp_input+0x1b4>)
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab30:	2be0      	cmp	r3, #224	; 0xe0
 800ab32:	d00c      	beq.n	800ab4e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <udp_input+0x1b4>)
 800ab36:	899b      	ldrh	r3, [r3, #12]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7fa f857 	bl	8004bf4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ab46:	2103      	movs	r1, #3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 f8fb 	bl	800bd44 <icmp_dest_unreach>
      pbuf_free(p);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7fa f862 	bl	8004c18 <pbuf_free>
  return;
 800ab54:	e003      	b.n	800ab5e <udp_input+0x1ae>
    pbuf_free(p);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fa f85e 	bl	8004c18 <pbuf_free>
  return;
 800ab5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ab5e:	372c      	adds	r7, #44	; 0x2c
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd90      	pop	{r4, r7, pc}
 800ab64:	20003480 	.word	0x20003480
 800ab68:	20006b30 	.word	0x20006b30
 800ab6c:	0800f650 	.word	0x0800f650
 800ab70:	0800f680 	.word	0x0800f680
 800ab74:	0800f694 	.word	0x0800f694
 800ab78:	20003490 	.word	0x20003490

0800ab7c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d01e      	beq.n	800abca <udp_netif_ip_addr_changed+0x4e>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01a      	beq.n	800abca <udp_netif_ip_addr_changed+0x4e>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <udp_netif_ip_addr_changed+0x4e>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d013      	beq.n	800abca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aba2:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <udp_netif_ip_addr_changed+0x5c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	e00c      	b.n	800abc4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d103      	bne.n	800abbe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1ef      	bne.n	800abaa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800abca:	bf00      	nop
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	20006b30 	.word	0x20006b30

0800abdc <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d105      	bne.n	800abf6 <free_etharp_q+0x1a>
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <free_etharp_q+0x70>)
 800abec:	2297      	movs	r2, #151	; 0x97
 800abee:	4918      	ldr	r1, [pc, #96]	; (800ac50 <free_etharp_q+0x74>)
 800abf0:	4818      	ldr	r0, [pc, #96]	; (800ac54 <free_etharp_q+0x78>)
 800abf2:	f002 fae3 	bl	800d1bc <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d11e      	bne.n	800ac3c <free_etharp_q+0x60>
 800abfe:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <free_etharp_q+0x70>)
 800ac00:	2298      	movs	r2, #152	; 0x98
 800ac02:	4915      	ldr	r1, [pc, #84]	; (800ac58 <free_etharp_q+0x7c>)
 800ac04:	4813      	ldr	r0, [pc, #76]	; (800ac54 <free_etharp_q+0x78>)
 800ac06:	f002 fad9 	bl	800d1bc <iprintf>
  while (q) {
 800ac0a:	e017      	b.n	800ac3c <free_etharp_q+0x60>
    r = q;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	60fb      	str	r3, [r7, #12]
    q = q->next;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d105      	bne.n	800ac2a <free_etharp_q+0x4e>
 800ac1e:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <free_etharp_q+0x70>)
 800ac20:	229c      	movs	r2, #156	; 0x9c
 800ac22:	490e      	ldr	r1, [pc, #56]	; (800ac5c <free_etharp_q+0x80>)
 800ac24:	480b      	ldr	r0, [pc, #44]	; (800ac54 <free_etharp_q+0x78>)
 800ac26:	f002 fac9 	bl	800d1bc <iprintf>
    pbuf_free(r->p);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f9 fff2 	bl	8004c18 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 800ac34:	68f9      	ldr	r1, [r7, #12]
 800ac36:	2007      	movs	r0, #7
 800ac38:	f7f9 fabc 	bl	80041b4 <memp_free>
  while (q) {
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e4      	bne.n	800ac0c <free_etharp_q+0x30>
  }
}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800f6ec 	.word	0x0800f6ec
 800ac50:	0800f724 	.word	0x0800f724
 800ac54:	0800f730 	.word	0x0800f730
 800ac58:	0800f758 	.word	0x0800f758
 800ac5c:	0800f768 	.word	0x0800f768

0800ac60 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ac68:	4915      	ldr	r1, [pc, #84]	; (800acc0 <etharp_free_entry+0x60>)
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	4413      	add	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	440b      	add	r3, r1
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d013      	beq.n	800aca4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ac7c:	4910      	ldr	r1, [pc, #64]	; (800acc0 <etharp_free_entry+0x60>)
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4613      	mov	r3, r2
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	4413      	add	r3, r2
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	440b      	add	r3, r1
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff ffa5 	bl	800abdc <free_etharp_q>
    arp_table[i].q = NULL;
 800ac92:	490b      	ldr	r1, [pc, #44]	; (800acc0 <etharp_free_entry+0x60>)
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	00db      	lsls	r3, r3, #3
 800ac9e:	440b      	add	r3, r1
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800aca4:	4906      	ldr	r1, [pc, #24]	; (800acc0 <etharp_free_entry+0x60>)
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4613      	mov	r3, r2
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	4413      	add	r3, r2
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	440b      	add	r3, r1
 800acb2:	3314      	adds	r3, #20
 800acb4:	2200      	movs	r2, #0
 800acb6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	2000011c 	.word	0x2000011c

0800acc4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800acca:	2300      	movs	r3, #0
 800accc:	71fb      	strb	r3, [r7, #7]
 800acce:	e096      	b.n	800adfe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800acd0:	79fa      	ldrb	r2, [r7, #7]
 800acd2:	494f      	ldr	r1, [pc, #316]	; (800ae10 <etharp_tmr+0x14c>)
 800acd4:	4613      	mov	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	4413      	add	r3, r2
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	440b      	add	r3, r1
 800acde:	3314      	adds	r3, #20
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800ace4:	79bb      	ldrb	r3, [r7, #6]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 8086 	beq.w	800adf8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800acec:	79fa      	ldrb	r2, [r7, #7]
 800acee:	4948      	ldr	r1, [pc, #288]	; (800ae10 <etharp_tmr+0x14c>)
 800acf0:	4613      	mov	r3, r2
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	4413      	add	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	440b      	add	r3, r1
 800acfa:	3312      	adds	r3, #18
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	3301      	adds	r3, #1
 800ad00:	b298      	uxth	r0, r3
 800ad02:	4943      	ldr	r1, [pc, #268]	; (800ae10 <etharp_tmr+0x14c>)
 800ad04:	4613      	mov	r3, r2
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	4413      	add	r3, r2
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	440b      	add	r3, r1
 800ad0e:	3312      	adds	r3, #18
 800ad10:	4602      	mov	r2, r0
 800ad12:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad14:	79fa      	ldrb	r2, [r7, #7]
 800ad16:	493e      	ldr	r1, [pc, #248]	; (800ae10 <etharp_tmr+0x14c>)
 800ad18:	4613      	mov	r3, r2
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	4413      	add	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	440b      	add	r3, r1
 800ad22:	3312      	adds	r3, #18
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad2a:	d215      	bcs.n	800ad58 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad2c:	79fa      	ldrb	r2, [r7, #7]
 800ad2e:	4938      	ldr	r1, [pc, #224]	; (800ae10 <etharp_tmr+0x14c>)
 800ad30:	4613      	mov	r3, r2
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	440b      	add	r3, r1
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d10f      	bne.n	800ad62 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ad42:	79fa      	ldrb	r2, [r7, #7]
 800ad44:	4932      	ldr	r1, [pc, #200]	; (800ae10 <etharp_tmr+0x14c>)
 800ad46:	4613      	mov	r3, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	440b      	add	r3, r1
 800ad50:	3312      	adds	r3, #18
 800ad52:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad54:	2b04      	cmp	r3, #4
 800ad56:	d904      	bls.n	800ad62 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff ff80 	bl	800ac60 <etharp_free_entry>
 800ad60:	e04a      	b.n	800adf8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ad62:	79fa      	ldrb	r2, [r7, #7]
 800ad64:	492a      	ldr	r1, [pc, #168]	; (800ae10 <etharp_tmr+0x14c>)
 800ad66:	4613      	mov	r3, r2
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	4413      	add	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	440b      	add	r3, r1
 800ad70:	3314      	adds	r3, #20
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d10a      	bne.n	800ad8e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ad78:	79fa      	ldrb	r2, [r7, #7]
 800ad7a:	4925      	ldr	r1, [pc, #148]	; (800ae10 <etharp_tmr+0x14c>)
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	4413      	add	r3, r2
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	440b      	add	r3, r1
 800ad86:	3314      	adds	r3, #20
 800ad88:	2204      	movs	r2, #4
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	e034      	b.n	800adf8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ad8e:	79fa      	ldrb	r2, [r7, #7]
 800ad90:	491f      	ldr	r1, [pc, #124]	; (800ae10 <etharp_tmr+0x14c>)
 800ad92:	4613      	mov	r3, r2
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4413      	add	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	440b      	add	r3, r1
 800ad9c:	3314      	adds	r3, #20
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b04      	cmp	r3, #4
 800ada2:	d10a      	bne.n	800adba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ada4:	79fa      	ldrb	r2, [r7, #7]
 800ada6:	491a      	ldr	r1, [pc, #104]	; (800ae10 <etharp_tmr+0x14c>)
 800ada8:	4613      	mov	r3, r2
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	4413      	add	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	440b      	add	r3, r1
 800adb2:	3314      	adds	r3, #20
 800adb4:	2202      	movs	r2, #2
 800adb6:	701a      	strb	r2, [r3, #0]
 800adb8:	e01e      	b.n	800adf8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800adba:	79fa      	ldrb	r2, [r7, #7]
 800adbc:	4914      	ldr	r1, [pc, #80]	; (800ae10 <etharp_tmr+0x14c>)
 800adbe:	4613      	mov	r3, r2
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	4413      	add	r3, r2
 800adc4:	00db      	lsls	r3, r3, #3
 800adc6:	440b      	add	r3, r1
 800adc8:	3314      	adds	r3, #20
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d113      	bne.n	800adf8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800add0:	79fa      	ldrb	r2, [r7, #7]
 800add2:	490f      	ldr	r1, [pc, #60]	; (800ae10 <etharp_tmr+0x14c>)
 800add4:	4613      	mov	r3, r2
 800add6:	005b      	lsls	r3, r3, #1
 800add8:	4413      	add	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	440b      	add	r3, r1
 800adde:	3308      	adds	r3, #8
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	79fa      	ldrb	r2, [r7, #7]
 800ade4:	4613      	mov	r3, r2
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	4413      	add	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	4a08      	ldr	r2, [pc, #32]	; (800ae10 <etharp_tmr+0x14c>)
 800adee:	4413      	add	r3, r2
 800adf0:	3304      	adds	r3, #4
 800adf2:	4619      	mov	r1, r3
 800adf4:	f000 fe90 	bl	800bb18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	3301      	adds	r3, #1
 800adfc:	71fb      	strb	r3, [r7, #7]
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	2b09      	cmp	r3, #9
 800ae02:	f67f af65 	bls.w	800acd0 <etharp_tmr+0xc>
      }
    }
  }
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	2000011c 	.word	0x2000011c

0800ae14 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ae22:	230a      	movs	r3, #10
 800ae24:	77fb      	strb	r3, [r7, #31]
 800ae26:	230a      	movs	r3, #10
 800ae28:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800ae2a:	230a      	movs	r3, #10
 800ae2c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ae32:	230a      	movs	r3, #10
 800ae34:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	833b      	strh	r3, [r7, #24]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	82fb      	strh	r3, [r7, #22]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae42:	2300      	movs	r3, #0
 800ae44:	773b      	strb	r3, [r7, #28]
 800ae46:	e093      	b.n	800af70 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ae48:	7f3a      	ldrb	r2, [r7, #28]
 800ae4a:	4990      	ldr	r1, [pc, #576]	; (800b08c <etharp_find_entry+0x278>)
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	4413      	add	r3, r2
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	440b      	add	r3, r1
 800ae56:	3314      	adds	r3, #20
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ae5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ae60:	2b0a      	cmp	r3, #10
 800ae62:	d105      	bne.n	800ae70 <etharp_find_entry+0x5c>
 800ae64:	7cfb      	ldrb	r3, [r7, #19]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d102      	bne.n	800ae70 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ae6a:	7f3b      	ldrb	r3, [r7, #28]
 800ae6c:	777b      	strb	r3, [r7, #29]
 800ae6e:	e07c      	b.n	800af6a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ae70:	7cfb      	ldrb	r3, [r7, #19]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d079      	beq.n	800af6a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ae76:	7cfb      	ldrb	r3, [r7, #19]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d009      	beq.n	800ae90 <etharp_find_entry+0x7c>
 800ae7c:	7cfb      	ldrb	r3, [r7, #19]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d806      	bhi.n	800ae90 <etharp_find_entry+0x7c>
 800ae82:	4b83      	ldr	r3, [pc, #524]	; (800b090 <etharp_find_entry+0x27c>)
 800ae84:	f44f 7293 	mov.w	r2, #294	; 0x126
 800ae88:	4982      	ldr	r1, [pc, #520]	; (800b094 <etharp_find_entry+0x280>)
 800ae8a:	4883      	ldr	r0, [pc, #524]	; (800b098 <etharp_find_entry+0x284>)
 800ae8c:	f002 f996 	bl	800d1bc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00f      	beq.n	800aeb6 <etharp_find_entry+0xa2>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6819      	ldr	r1, [r3, #0]
 800ae9a:	7f3a      	ldrb	r2, [r7, #28]
 800ae9c:	487b      	ldr	r0, [pc, #492]	; (800b08c <etharp_find_entry+0x278>)
 800ae9e:	4613      	mov	r3, r2
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	4413      	add	r3, r2
 800aea4:	00db      	lsls	r3, r3, #3
 800aea6:	4403      	add	r3, r0
 800aea8:	3304      	adds	r3, #4
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4299      	cmp	r1, r3
 800aeae:	d102      	bne.n	800aeb6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800aeb0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800aeb4:	e0e5      	b.n	800b082 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800aeb6:	7cfb      	ldrb	r3, [r7, #19]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d13b      	bne.n	800af34 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aebc:	7f3a      	ldrb	r2, [r7, #28]
 800aebe:	4973      	ldr	r1, [pc, #460]	; (800b08c <etharp_find_entry+0x278>)
 800aec0:	4613      	mov	r3, r2
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	4413      	add	r3, r2
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	440b      	add	r3, r1
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d018      	beq.n	800af02 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800aed0:	7f3a      	ldrb	r2, [r7, #28]
 800aed2:	496e      	ldr	r1, [pc, #440]	; (800b08c <etharp_find_entry+0x278>)
 800aed4:	4613      	mov	r3, r2
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	4413      	add	r3, r2
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	440b      	add	r3, r1
 800aede:	3312      	adds	r3, #18
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	8b3a      	ldrh	r2, [r7, #24]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d840      	bhi.n	800af6a <etharp_find_entry+0x156>
            old_queue = i;
 800aee8:	7f3b      	ldrb	r3, [r7, #28]
 800aeea:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800aeec:	7f3a      	ldrb	r2, [r7, #28]
 800aeee:	4967      	ldr	r1, [pc, #412]	; (800b08c <etharp_find_entry+0x278>)
 800aef0:	4613      	mov	r3, r2
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	4413      	add	r3, r2
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	440b      	add	r3, r1
 800aefa:	3312      	adds	r3, #18
 800aefc:	881b      	ldrh	r3, [r3, #0]
 800aefe:	833b      	strh	r3, [r7, #24]
 800af00:	e033      	b.n	800af6a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800af02:	7f3a      	ldrb	r2, [r7, #28]
 800af04:	4961      	ldr	r1, [pc, #388]	; (800b08c <etharp_find_entry+0x278>)
 800af06:	4613      	mov	r3, r2
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	4413      	add	r3, r2
 800af0c:	00db      	lsls	r3, r3, #3
 800af0e:	440b      	add	r3, r1
 800af10:	3312      	adds	r3, #18
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	8afa      	ldrh	r2, [r7, #22]
 800af16:	429a      	cmp	r2, r3
 800af18:	d827      	bhi.n	800af6a <etharp_find_entry+0x156>
            old_pending = i;
 800af1a:	7f3b      	ldrb	r3, [r7, #28]
 800af1c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800af1e:	7f3a      	ldrb	r2, [r7, #28]
 800af20:	495a      	ldr	r1, [pc, #360]	; (800b08c <etharp_find_entry+0x278>)
 800af22:	4613      	mov	r3, r2
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4413      	add	r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	440b      	add	r3, r1
 800af2c:	3312      	adds	r3, #18
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	82fb      	strh	r3, [r7, #22]
 800af32:	e01a      	b.n	800af6a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800af34:	7cfb      	ldrb	r3, [r7, #19]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d917      	bls.n	800af6a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800af3a:	7f3a      	ldrb	r2, [r7, #28]
 800af3c:	4953      	ldr	r1, [pc, #332]	; (800b08c <etharp_find_entry+0x278>)
 800af3e:	4613      	mov	r3, r2
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	4413      	add	r3, r2
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	440b      	add	r3, r1
 800af48:	3312      	adds	r3, #18
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	8aba      	ldrh	r2, [r7, #20]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d80b      	bhi.n	800af6a <etharp_find_entry+0x156>
            old_stable = i;
 800af52:	7f3b      	ldrb	r3, [r7, #28]
 800af54:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800af56:	7f3a      	ldrb	r2, [r7, #28]
 800af58:	494c      	ldr	r1, [pc, #304]	; (800b08c <etharp_find_entry+0x278>)
 800af5a:	4613      	mov	r3, r2
 800af5c:	005b      	lsls	r3, r3, #1
 800af5e:	4413      	add	r3, r2
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	440b      	add	r3, r1
 800af64:	3312      	adds	r3, #18
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af6a:	7f3b      	ldrb	r3, [r7, #28]
 800af6c:	3301      	adds	r3, #1
 800af6e:	773b      	strb	r3, [r7, #28]
 800af70:	7f3b      	ldrb	r3, [r7, #28]
 800af72:	2b09      	cmp	r3, #9
 800af74:	f67f af68 	bls.w	800ae48 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d108      	bne.n	800af94 <etharp_find_entry+0x180>
 800af82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af86:	2b0a      	cmp	r3, #10
 800af88:	d107      	bne.n	800af9a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	d102      	bne.n	800af9a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800af94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af98:	e073      	b.n	800b082 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800af9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af9e:	2b09      	cmp	r3, #9
 800afa0:	dc02      	bgt.n	800afa8 <etharp_find_entry+0x194>
    i = empty;
 800afa2:	7f7b      	ldrb	r3, [r7, #29]
 800afa4:	773b      	strb	r3, [r7, #28]
 800afa6:	e036      	b.n	800b016 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800afa8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800afac:	2b09      	cmp	r3, #9
 800afae:	dc13      	bgt.n	800afd8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800afb0:	7fbb      	ldrb	r3, [r7, #30]
 800afb2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800afb4:	7f3a      	ldrb	r2, [r7, #28]
 800afb6:	4935      	ldr	r1, [pc, #212]	; (800b08c <etharp_find_entry+0x278>)
 800afb8:	4613      	mov	r3, r2
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	4413      	add	r3, r2
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	440b      	add	r3, r1
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d018      	beq.n	800affa <etharp_find_entry+0x1e6>
 800afc8:	4b31      	ldr	r3, [pc, #196]	; (800b090 <etharp_find_entry+0x27c>)
 800afca:	f240 126f 	movw	r2, #367	; 0x16f
 800afce:	4933      	ldr	r1, [pc, #204]	; (800b09c <etharp_find_entry+0x288>)
 800afd0:	4831      	ldr	r0, [pc, #196]	; (800b098 <etharp_find_entry+0x284>)
 800afd2:	f002 f8f3 	bl	800d1bc <iprintf>
 800afd6:	e010      	b.n	800affa <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800afd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afdc:	2b09      	cmp	r3, #9
 800afde:	dc02      	bgt.n	800afe6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800afe0:	7ffb      	ldrb	r3, [r7, #31]
 800afe2:	773b      	strb	r3, [r7, #28]
 800afe4:	e009      	b.n	800affa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800afe6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800afea:	2b09      	cmp	r3, #9
 800afec:	dc02      	bgt.n	800aff4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800afee:	7efb      	ldrb	r3, [r7, #27]
 800aff0:	773b      	strb	r3, [r7, #28]
 800aff2:	e002      	b.n	800affa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800aff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aff8:	e043      	b.n	800b082 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800affa:	7f3b      	ldrb	r3, [r7, #28]
 800affc:	2b09      	cmp	r3, #9
 800affe:	d906      	bls.n	800b00e <etharp_find_entry+0x1fa>
 800b000:	4b23      	ldr	r3, [pc, #140]	; (800b090 <etharp_find_entry+0x27c>)
 800b002:	f240 1281 	movw	r2, #385	; 0x181
 800b006:	4926      	ldr	r1, [pc, #152]	; (800b0a0 <etharp_find_entry+0x28c>)
 800b008:	4823      	ldr	r0, [pc, #140]	; (800b098 <etharp_find_entry+0x284>)
 800b00a:	f002 f8d7 	bl	800d1bc <iprintf>
    etharp_free_entry(i);
 800b00e:	7f3b      	ldrb	r3, [r7, #28]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fe25 	bl	800ac60 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b016:	7f3b      	ldrb	r3, [r7, #28]
 800b018:	2b09      	cmp	r3, #9
 800b01a:	d906      	bls.n	800b02a <etharp_find_entry+0x216>
 800b01c:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <etharp_find_entry+0x27c>)
 800b01e:	f240 1285 	movw	r2, #389	; 0x185
 800b022:	491f      	ldr	r1, [pc, #124]	; (800b0a0 <etharp_find_entry+0x28c>)
 800b024:	481c      	ldr	r0, [pc, #112]	; (800b098 <etharp_find_entry+0x284>)
 800b026:	f002 f8c9 	bl	800d1bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b02a:	7f3a      	ldrb	r2, [r7, #28]
 800b02c:	4917      	ldr	r1, [pc, #92]	; (800b08c <etharp_find_entry+0x278>)
 800b02e:	4613      	mov	r3, r2
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4413      	add	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	440b      	add	r3, r1
 800b038:	3314      	adds	r3, #20
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d006      	beq.n	800b04e <etharp_find_entry+0x23a>
 800b040:	4b13      	ldr	r3, [pc, #76]	; (800b090 <etharp_find_entry+0x27c>)
 800b042:	f240 1287 	movw	r2, #391	; 0x187
 800b046:	4917      	ldr	r1, [pc, #92]	; (800b0a4 <etharp_find_entry+0x290>)
 800b048:	4813      	ldr	r0, [pc, #76]	; (800b098 <etharp_find_entry+0x284>)
 800b04a:	f002 f8b7 	bl	800d1bc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00a      	beq.n	800b06a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b054:	7f3a      	ldrb	r2, [r7, #28]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6819      	ldr	r1, [r3, #0]
 800b05a:	480c      	ldr	r0, [pc, #48]	; (800b08c <etharp_find_entry+0x278>)
 800b05c:	4613      	mov	r3, r2
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	4413      	add	r3, r2
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	4403      	add	r3, r0
 800b066:	3304      	adds	r3, #4
 800b068:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b06a:	7f3a      	ldrb	r2, [r7, #28]
 800b06c:	4907      	ldr	r1, [pc, #28]	; (800b08c <etharp_find_entry+0x278>)
 800b06e:	4613      	mov	r3, r2
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	4413      	add	r3, r2
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	440b      	add	r3, r1
 800b078:	3312      	adds	r3, #18
 800b07a:	2200      	movs	r2, #0
 800b07c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b07e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3720      	adds	r7, #32
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	2000011c 	.word	0x2000011c
 800b090:	0800f6ec 	.word	0x0800f6ec
 800b094:	0800f778 	.word	0x0800f778
 800b098:	0800f730 	.word	0x0800f730
 800b09c:	0800f7b8 	.word	0x0800f7b8
 800b0a0:	0800f7d0 	.word	0x0800f7d0
 800b0a4:	0800f7e4 	.word	0x0800f7e4

0800b0a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af02      	add	r7, sp, #8
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b0bc:	2b06      	cmp	r3, #6
 800b0be:	d006      	beq.n	800b0ce <etharp_update_arp_entry+0x26>
 800b0c0:	4b4c      	ldr	r3, [pc, #304]	; (800b1f4 <etharp_update_arp_entry+0x14c>)
 800b0c2:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b0c6:	494c      	ldr	r1, [pc, #304]	; (800b1f8 <etharp_update_arp_entry+0x150>)
 800b0c8:	484c      	ldr	r0, [pc, #304]	; (800b1fc <etharp_update_arp_entry+0x154>)
 800b0ca:	f002 f877 	bl	800d1bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <etharp_update_arp_entry+0x52>
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00e      	beq.n	800b0fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68f9      	ldr	r1, [r7, #12]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 f93a 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800b0e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d105      	bne.n	800b0fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b0f6:	2be0      	cmp	r3, #224	; 0xe0
 800b0f8:	d102      	bne.n	800b100 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b0fa:	f06f 030f 	mvn.w	r3, #15
 800b0fe:	e075      	b.n	800b1ec <etharp_update_arp_entry+0x144>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b100:	78fb      	ldrb	r3, [r7, #3]
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	4619      	mov	r1, r3
 800b106:	68b8      	ldr	r0, [r7, #8]
 800b108:	f7ff fe84 	bl	800ae14 <etharp_find_entry>
 800b10c:	4603      	mov	r3, r0
 800b10e:	77fb      	strb	r3, [r7, #31]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b110:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b114:	2b00      	cmp	r3, #0
 800b116:	da02      	bge.n	800b11e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b118:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b11c:	e066      	b.n	800b1ec <etharp_update_arp_entry+0x144>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b11e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b122:	4937      	ldr	r1, [pc, #220]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b124:	4613      	mov	r3, r2
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	4413      	add	r3, r2
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	440b      	add	r3, r1
 800b12e:	3314      	adds	r3, #20
 800b130:	2202      	movs	r2, #2
 800b132:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b134:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b138:	4931      	ldr	r1, [pc, #196]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b13a:	4613      	mov	r3, r2
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	4413      	add	r3, r2
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	440b      	add	r3, r1
 800b144:	3308      	adds	r3, #8
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b14a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b14e:	4613      	mov	r3, r2
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	4413      	add	r3, r2
 800b154:	00db      	lsls	r3, r3, #3
 800b156:	3308      	adds	r3, #8
 800b158:	4a29      	ldr	r2, [pc, #164]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b15a:	4413      	add	r3, r2
 800b15c:	3304      	adds	r3, #4
 800b15e:	2206      	movs	r2, #6
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	4618      	mov	r0, r3
 800b164:	f002 f817 	bl	800d196 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b168:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b16c:	4924      	ldr	r1, [pc, #144]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b16e:	4613      	mov	r3, r2
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	4413      	add	r3, r2
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	440b      	add	r3, r1
 800b178:	3312      	adds	r3, #18
 800b17a:	2200      	movs	r2, #0
 800b17c:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 800b17e:	e029      	b.n	800b1d4 <etharp_update_arp_entry+0x12c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 800b180:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b184:	491e      	ldr	r1, [pc, #120]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b186:	4613      	mov	r3, r2
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4413      	add	r3, r2
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	440b      	add	r3, r1
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 800b194:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	6819      	ldr	r1, [r3, #0]
 800b19c:	4818      	ldr	r0, [pc, #96]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b19e:	4613      	mov	r3, r2
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	4413      	add	r3, r2
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	4403      	add	r3, r0
 800b1a8:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 800b1b0:	69b9      	ldr	r1, [r7, #24]
 800b1b2:	2007      	movs	r0, #7
 800b1b4:	f7f8 fffe 	bl	80041b4 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800b1be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6979      	ldr	r1, [r7, #20]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f001 ff69 	bl	800d0a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b1ce:	6978      	ldr	r0, [r7, #20]
 800b1d0:	f7f9 fd22 	bl	8004c18 <pbuf_free>
  while (arp_table[i].q != NULL) {
 800b1d4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800b1d8:	4909      	ldr	r1, [pc, #36]	; (800b200 <etharp_update_arp_entry+0x158>)
 800b1da:	4613      	mov	r3, r2
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	4413      	add	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	440b      	add	r3, r1
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1ca      	bne.n	800b180 <etharp_update_arp_entry+0xd8>
  }
  return ERR_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3720      	adds	r7, #32
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	0800f6ec 	.word	0x0800f6ec
 800b1f8:	0800f810 	.word	0x0800f810
 800b1fc:	0800f730 	.word	0x0800f730
 800b200:	2000011c 	.word	0x2000011c

0800b204 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]
 800b210:	e01f      	b.n	800b252 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800b212:	7bfa      	ldrb	r2, [r7, #15]
 800b214:	4912      	ldr	r1, [pc, #72]	; (800b260 <etharp_cleanup_netif+0x5c>)
 800b216:	4613      	mov	r3, r2
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	4413      	add	r3, r2
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	440b      	add	r3, r1
 800b220:	3314      	adds	r3, #20
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00f      	beq.n	800b24c <etharp_cleanup_netif+0x48>
 800b22c:	7bfa      	ldrb	r2, [r7, #15]
 800b22e:	490c      	ldr	r1, [pc, #48]	; (800b260 <etharp_cleanup_netif+0x5c>)
 800b230:	4613      	mov	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	4413      	add	r3, r2
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	440b      	add	r3, r1
 800b23a:	3308      	adds	r3, #8
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d103      	bne.n	800b24c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fd0a 	bl	800ac60 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	3301      	adds	r3, #1
 800b250:	73fb      	strb	r3, [r7, #15]
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b09      	cmp	r3, #9
 800b256:	d9dc      	bls.n	800b212 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	2000011c 	.word	0x2000011c

0800b264 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b264:	b5b0      	push	{r4, r5, r7, lr}
 800b266:	b08a      	sub	sp, #40	; 0x28
 800b268:	af04      	add	r7, sp, #16
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d107      	bne.n	800b284 <etharp_input+0x20>
 800b274:	4b3d      	ldr	r3, [pc, #244]	; (800b36c <etharp_input+0x108>)
 800b276:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b27a:	493d      	ldr	r1, [pc, #244]	; (800b370 <etharp_input+0x10c>)
 800b27c:	483d      	ldr	r0, [pc, #244]	; (800b374 <etharp_input+0x110>)
 800b27e:	f001 ff9d 	bl	800d1bc <iprintf>
 800b282:	e06f      	b.n	800b364 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b294:	d10c      	bne.n	800b2b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b29a:	2b06      	cmp	r3, #6
 800b29c:	d108      	bne.n	800b2b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	d104      	bne.n	800b2b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d003      	beq.n	800b2b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7f9 fcb1 	bl	8004c18 <pbuf_free>
    return;
 800b2b6:	e055      	b.n	800b364 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	330e      	adds	r3, #14
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	3318      	adds	r3, #24
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d102      	bne.n	800b2d8 <etharp_input+0x74>
    for_us = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	75fb      	strb	r3, [r7, #23]
 800b2d6:	e009      	b.n	800b2ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2301      	moveq	r3, #1
 800b2e6:	2300      	movne	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f103 0208 	add.w	r2, r3, #8
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <etharp_input+0x98>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e000      	b.n	800b2fe <etharp_input+0x9a>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	f107 010c 	add.w	r1, r7, #12
 800b302:	6838      	ldr	r0, [r7, #0]
 800b304:	f7ff fed0 	bl	800b0a8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	88db      	ldrh	r3, [r3, #6]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b312:	d003      	beq.n	800b31c <etharp_input+0xb8>
 800b314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b318:	d01e      	beq.n	800b358 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b31a:	e020      	b.n	800b35e <etharp_input+0xfa>
    if (for_us) {
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d01c      	beq.n	800b35c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b33c:	2102      	movs	r1, #2
 800b33e:	9103      	str	r1, [sp, #12]
 800b340:	f107 010c 	add.w	r1, r7, #12
 800b344:	9102      	str	r1, [sp, #8]
 800b346:	9201      	str	r2, [sp, #4]
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	462b      	mov	r3, r5
 800b34c:	4622      	mov	r2, r4
 800b34e:	4601      	mov	r1, r0
 800b350:	6838      	ldr	r0, [r7, #0]
 800b352:	f000 fb33 	bl	800b9bc <etharp_raw>
    break;
 800b356:	e001      	b.n	800b35c <etharp_input+0xf8>
    break;
 800b358:	bf00      	nop
 800b35a:	e000      	b.n	800b35e <etharp_input+0xfa>
    break;
 800b35c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7f9 fc5a 	bl	8004c18 <pbuf_free>
}
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bdb0      	pop	{r4, r5, r7, pc}
 800b36a:	bf00      	nop
 800b36c:	0800f6ec 	.word	0x0800f6ec
 800b370:	0800f868 	.word	0x0800f868
 800b374:	0800f730 	.word	0x0800f730

0800b378 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	4613      	mov	r3, r2
 800b384:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b386:	79fa      	ldrb	r2, [r7, #7]
 800b388:	4944      	ldr	r1, [pc, #272]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b38a:	4613      	mov	r3, r2
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	4413      	add	r3, r2
 800b390:	00db      	lsls	r3, r3, #3
 800b392:	440b      	add	r3, r1
 800b394:	3314      	adds	r3, #20
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d806      	bhi.n	800b3aa <etharp_output_to_arp_index+0x32>
 800b39c:	4b40      	ldr	r3, [pc, #256]	; (800b4a0 <etharp_output_to_arp_index+0x128>)
 800b39e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800b3a2:	4940      	ldr	r1, [pc, #256]	; (800b4a4 <etharp_output_to_arp_index+0x12c>)
 800b3a4:	4840      	ldr	r0, [pc, #256]	; (800b4a8 <etharp_output_to_arp_index+0x130>)
 800b3a6:	f001 ff09 	bl	800d1bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b3aa:	79fa      	ldrb	r2, [r7, #7]
 800b3ac:	493b      	ldr	r1, [pc, #236]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	4413      	add	r3, r2
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	440b      	add	r3, r1
 800b3b8:	3314      	adds	r3, #20
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d153      	bne.n	800b468 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b3c0:	79fa      	ldrb	r2, [r7, #7]
 800b3c2:	4936      	ldr	r1, [pc, #216]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	4413      	add	r3, r2
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3312      	adds	r3, #18
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b3d6:	d919      	bls.n	800b40c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b3d8:	79fa      	ldrb	r2, [r7, #7]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	4a2e      	ldr	r2, [pc, #184]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b3e4:	4413      	add	r3, r2
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 fb94 	bl	800bb18 <etharp_request>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d138      	bne.n	800b468 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b3f6:	79fa      	ldrb	r2, [r7, #7]
 800b3f8:	4928      	ldr	r1, [pc, #160]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	4413      	add	r3, r2
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	440b      	add	r3, r1
 800b404:	3314      	adds	r3, #20
 800b406:	2203      	movs	r2, #3
 800b408:	701a      	strb	r2, [r3, #0]
 800b40a:	e02d      	b.n	800b468 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b40c:	79fa      	ldrb	r2, [r7, #7]
 800b40e:	4923      	ldr	r1, [pc, #140]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b410:	4613      	mov	r3, r2
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	4413      	add	r3, r2
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	440b      	add	r3, r1
 800b41a:	3312      	adds	r3, #18
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b422:	d321      	bcc.n	800b468 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b424:	79fa      	ldrb	r2, [r7, #7]
 800b426:	4613      	mov	r3, r2
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4413      	add	r3, r2
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	4a1b      	ldr	r2, [pc, #108]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b430:	4413      	add	r3, r2
 800b432:	1d19      	adds	r1, r3, #4
 800b434:	79fa      	ldrb	r2, [r7, #7]
 800b436:	4613      	mov	r3, r2
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	4413      	add	r3, r2
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	3308      	adds	r3, #8
 800b440:	4a16      	ldr	r2, [pc, #88]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b442:	4413      	add	r3, r2
 800b444:	3304      	adds	r3, #4
 800b446:	461a      	mov	r2, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 fb43 	bl	800bad4 <etharp_request_dst>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b454:	79fa      	ldrb	r2, [r7, #7]
 800b456:	4911      	ldr	r1, [pc, #68]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b458:	4613      	mov	r3, r2
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	4413      	add	r3, r2
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	440b      	add	r3, r1
 800b462:	3314      	adds	r3, #20
 800b464:	2203      	movs	r2, #3
 800b466:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800b46e:	79fa      	ldrb	r2, [r7, #7]
 800b470:	4613      	mov	r3, r2
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	4413      	add	r3, r2
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	3308      	adds	r3, #8
 800b47a:	4a08      	ldr	r2, [pc, #32]	; (800b49c <etharp_output_to_arp_index+0x124>)
 800b47c:	4413      	add	r3, r2
 800b47e:	1d1a      	adds	r2, r3, #4
 800b480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	4613      	mov	r3, r2
 800b488:	460a      	mov	r2, r1
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f001 fe07 	bl	800d0a0 <ethernet_output>
 800b492:	4603      	mov	r3, r0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	2000011c 	.word	0x2000011c
 800b4a0:	0800f6ec 	.word	0x0800f6ec
 800b4a4:	0800f888 	.word	0x0800f888
 800b4a8:	0800f730 	.word	0x0800f730

0800b4ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b08a      	sub	sp, #40	; 0x28
 800b4b0:	af02      	add	r7, sp, #8
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d106      	bne.n	800b4d0 <etharp_output+0x24>
 800b4c2:	4b69      	ldr	r3, [pc, #420]	; (800b668 <etharp_output+0x1bc>)
 800b4c4:	f240 321b 	movw	r2, #795	; 0x31b
 800b4c8:	4968      	ldr	r1, [pc, #416]	; (800b66c <etharp_output+0x1c0>)
 800b4ca:	4869      	ldr	r0, [pc, #420]	; (800b670 <etharp_output+0x1c4>)
 800b4cc:	f001 fe76 	bl	800d1bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d106      	bne.n	800b4e4 <etharp_output+0x38>
 800b4d6:	4b64      	ldr	r3, [pc, #400]	; (800b668 <etharp_output+0x1bc>)
 800b4d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b4dc:	4965      	ldr	r1, [pc, #404]	; (800b674 <etharp_output+0x1c8>)
 800b4de:	4864      	ldr	r0, [pc, #400]	; (800b670 <etharp_output+0x1c4>)
 800b4e0:	f001 fe6c 	bl	800d1bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <etharp_output+0x4c>
 800b4ea:	4b5f      	ldr	r3, [pc, #380]	; (800b668 <etharp_output+0x1bc>)
 800b4ec:	f240 321d 	movw	r2, #797	; 0x31d
 800b4f0:	4961      	ldr	r1, [pc, #388]	; (800b678 <etharp_output+0x1cc>)
 800b4f2:	485f      	ldr	r0, [pc, #380]	; (800b670 <etharp_output+0x1c4>)
 800b4f4:	f001 fe62 	bl	800d1bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68f9      	ldr	r1, [r7, #12]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 ff2c 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b50a:	4b5c      	ldr	r3, [pc, #368]	; (800b67c <etharp_output+0x1d0>)
 800b50c:	61fb      	str	r3, [r7, #28]
 800b50e:	e09b      	b.n	800b648 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b518:	2be0      	cmp	r3, #224	; 0xe0
 800b51a:	d118      	bne.n	800b54e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b51c:	2301      	movs	r3, #1
 800b51e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b520:	2300      	movs	r3, #0
 800b522:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b524:	235e      	movs	r3, #94	; 0x5e
 800b526:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3301      	adds	r3, #1
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b532:	b2db      	uxtb	r3, r3
 800b534:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3302      	adds	r3, #2
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3303      	adds	r3, #3
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b546:	f107 0310 	add.w	r3, r7, #16
 800b54a:	61fb      	str	r3, [r7, #28]
 800b54c:	e07c      	b.n	800b648 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3304      	adds	r3, #4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	405a      	eors	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3308      	adds	r3, #8
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4013      	ands	r3, r2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d012      	beq.n	800b58c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b56c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b570:	4293      	cmp	r3, r2
 800b572:	d00b      	beq.n	800b58c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	330c      	adds	r3, #12
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	330c      	adds	r3, #12
 800b582:	61bb      	str	r3, [r7, #24]
 800b584:	e002      	b.n	800b58c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b586:	f06f 0303 	mvn.w	r3, #3
 800b58a:	e069      	b.n	800b660 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b58c:	4b3c      	ldr	r3, [pc, #240]	; (800b680 <etharp_output+0x1d4>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	4619      	mov	r1, r3
 800b592:	4a3c      	ldr	r2, [pc, #240]	; (800b684 <etharp_output+0x1d8>)
 800b594:	460b      	mov	r3, r1
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	440b      	add	r3, r1
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	4413      	add	r3, r2
 800b59e:	3314      	adds	r3, #20
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d917      	bls.n	800b5d6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4b35      	ldr	r3, [pc, #212]	; (800b680 <etharp_output+0x1d4>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	4934      	ldr	r1, [pc, #208]	; (800b684 <etharp_output+0x1d8>)
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4403      	add	r3, r0
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3304      	adds	r3, #4
 800b5be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d108      	bne.n	800b5d6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b5c4:	4b2e      	ldr	r3, [pc, #184]	; (800b680 <etharp_output+0x1d4>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	68b9      	ldr	r1, [r7, #8]
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f7ff fed3 	bl	800b378 <etharp_output_to_arp_index>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	e044      	b.n	800b660 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]
 800b5da:	e02a      	b.n	800b632 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b5dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b5e0:	4928      	ldr	r1, [pc, #160]	; (800b684 <etharp_output+0x1d8>)
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4413      	add	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3314      	adds	r3, #20
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d918      	bls.n	800b626 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	6819      	ldr	r1, [r3, #0]
 800b5f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b5fc:	4821      	ldr	r0, [pc, #132]	; (800b684 <etharp_output+0x1d8>)
 800b5fe:	4613      	mov	r3, r2
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	4413      	add	r3, r2
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	4403      	add	r3, r0
 800b608:	3304      	adds	r3, #4
 800b60a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b60c:	4299      	cmp	r1, r3
 800b60e:	d10a      	bne.n	800b626 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b610:	7dfa      	ldrb	r2, [r7, #23]
 800b612:	4b1b      	ldr	r3, [pc, #108]	; (800b680 <etharp_output+0x1d4>)
 800b614:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	461a      	mov	r2, r3
 800b61a:	68b9      	ldr	r1, [r7, #8]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f7ff feab 	bl	800b378 <etharp_output_to_arp_index>
 800b622:	4603      	mov	r3, r0
 800b624:	e01c      	b.n	800b660 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b626:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	3301      	adds	r3, #1
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	75fb      	strb	r3, [r7, #23]
 800b632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b636:	2b09      	cmp	r3, #9
 800b638:	ddd0      	ble.n	800b5dc <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	69b9      	ldr	r1, [r7, #24]
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 f822 	bl	800b688 <etharp_query>
 800b644:	4603      	mov	r3, r0
 800b646:	e00b      	b.n	800b660 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800b64e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f001 fd21 	bl	800d0a0 <ethernet_output>
 800b65e:	4603      	mov	r3, r0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	0800f6ec 	.word	0x0800f6ec
 800b66c:	0800f868 	.word	0x0800f868
 800b670:	0800f730 	.word	0x0800f730
 800b674:	0800f724 	.word	0x0800f724
 800b678:	0800f858 	.word	0x0800f858
 800b67c:	0800fe8c 	.word	0x0800fe8c
 800b680:	2000020c 	.word	0x2000020c
 800b684:	2000011c 	.word	0x2000011c

0800b688 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b090      	sub	sp, #64	; 0x40
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3325      	adds	r3, #37	; 0x25
 800b698:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 800b69a:	23ff      	movs	r3, #255	; 0xff
 800b69c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	633b      	str	r3, [r7, #48]	; 0x30
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68f9      	ldr	r1, [r7, #12]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fe56 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10c      	bne.n	800b6d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6be:	2be0      	cmp	r3, #224	; 0xe0
 800b6c0:	d006      	beq.n	800b6d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b6d0:	f06f 030f 	mvn.w	r3, #15
 800b6d4:	e15f      	b.n	800b996 <etharp_query+0x30e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	2101      	movs	r1, #1
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f7ff fb9a 	bl	800ae14 <etharp_find_entry>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	76fb      	strb	r3, [r7, #27]

  /* could not find or create entry? */
  if (i < 0) {
 800b6e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	da02      	bge.n	800b6f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b6ec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b6f0:	e151      	b.n	800b996 <etharp_query+0x30e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b6f2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b6f6:	49aa      	ldr	r1, [pc, #680]	; (800b9a0 <etharp_query+0x318>)
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	440b      	add	r3, r1
 800b702:	3314      	adds	r3, #20
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d117      	bne.n	800b73a <etharp_query+0xb2>
    is_new_entry = 1;
 800b70a:	2301      	movs	r3, #1
 800b70c:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b70e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b712:	49a3      	ldr	r1, [pc, #652]	; (800b9a0 <etharp_query+0x318>)
 800b714:	4613      	mov	r3, r2
 800b716:	005b      	lsls	r3, r3, #1
 800b718:	4413      	add	r3, r2
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	440b      	add	r3, r1
 800b71e:	3314      	adds	r3, #20
 800b720:	2201      	movs	r2, #1
 800b722:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b724:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b728:	499d      	ldr	r1, [pc, #628]	; (800b9a0 <etharp_query+0x318>)
 800b72a:	4613      	mov	r3, r2
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	4413      	add	r3, r2
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	440b      	add	r3, r1
 800b734:	3308      	adds	r3, #8
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b73a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b73e:	4998      	ldr	r1, [pc, #608]	; (800b9a0 <etharp_query+0x318>)
 800b740:	4613      	mov	r3, r2
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	4413      	add	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	440b      	add	r3, r1
 800b74a:	3314      	adds	r3, #20
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d012      	beq.n	800b778 <etharp_query+0xf0>
 800b752:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b756:	4992      	ldr	r1, [pc, #584]	; (800b9a0 <etharp_query+0x318>)
 800b758:	4613      	mov	r3, r2
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	4413      	add	r3, r2
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	440b      	add	r3, r1
 800b762:	3314      	adds	r3, #20
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d806      	bhi.n	800b778 <etharp_query+0xf0>
 800b76a:	4b8e      	ldr	r3, [pc, #568]	; (800b9a4 <etharp_query+0x31c>)
 800b76c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b770:	498d      	ldr	r1, [pc, #564]	; (800b9a8 <etharp_query+0x320>)
 800b772:	488e      	ldr	r0, [pc, #568]	; (800b9ac <etharp_query+0x324>)
 800b774:	f001 fd22 	bl	800d1bc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d102      	bne.n	800b784 <etharp_query+0xfc>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10c      	bne.n	800b79e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b784:	68b9      	ldr	r1, [r7, #8]
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f000 f9c6 	bl	800bb18 <etharp_request>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <etharp_query+0x116>
      return result;
 800b798:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b79c:	e0fb      	b.n	800b996 <etharp_query+0x30e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <etharp_query+0x12a>
 800b7a4:	4b7f      	ldr	r3, [pc, #508]	; (800b9a4 <etharp_query+0x31c>)
 800b7a6:	f240 32db 	movw	r2, #987	; 0x3db
 800b7aa:	4981      	ldr	r1, [pc, #516]	; (800b9b0 <etharp_query+0x328>)
 800b7ac:	487f      	ldr	r0, [pc, #508]	; (800b9ac <etharp_query+0x324>)
 800b7ae:	f001 fd05 	bl	800d1bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b7b2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b7b6:	497a      	ldr	r1, [pc, #488]	; (800b9a0 <etharp_query+0x318>)
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	4413      	add	r3, r2
 800b7be:	00db      	lsls	r3, r3, #3
 800b7c0:	440b      	add	r3, r1
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d919      	bls.n	800b7fe <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800b7ca:	7efa      	ldrb	r2, [r7, #27]
 800b7cc:	4b79      	ldr	r3, [pc, #484]	; (800b9b4 <etharp_query+0x32c>)
 800b7ce:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b7d0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	4413      	add	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	3308      	adds	r3, #8
 800b7de:	4a70      	ldr	r2, [pc, #448]	; (800b9a0 <etharp_query+0x318>)
 800b7e0:	4413      	add	r3, r2
 800b7e2:	1d1a      	adds	r2, r3, #4
 800b7e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f001 fc55 	bl	800d0a0 <ethernet_output>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b7fc:	e0c9      	b.n	800b992 <etharp_query+0x30a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b7fe:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b802:	4967      	ldr	r1, [pc, #412]	; (800b9a0 <etharp_query+0x318>)
 800b804:	4613      	mov	r3, r2
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	4413      	add	r3, r2
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	440b      	add	r3, r1
 800b80e:	3314      	adds	r3, #20
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b01      	cmp	r3, #1
 800b814:	f040 80bd 	bne.w	800b992 <etharp_query+0x30a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 800b820:	e01a      	b.n	800b858 <etharp_query+0x1d0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b824:	895a      	ldrh	r2, [r3, #10]
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	891b      	ldrh	r3, [r3, #8]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d10a      	bne.n	800b844 <etharp_query+0x1bc>
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d006      	beq.n	800b844 <etharp_query+0x1bc>
 800b836:	4b5b      	ldr	r3, [pc, #364]	; (800b9a4 <etharp_query+0x31c>)
 800b838:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800b83c:	495e      	ldr	r1, [pc, #376]	; (800b9b8 <etharp_query+0x330>)
 800b83e:	485b      	ldr	r0, [pc, #364]	; (800b9ac <etharp_query+0x324>)
 800b840:	f001 fcbc 	bl	800d1bc <iprintf>
      if (p->type != PBUF_ROM) {
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	7b1b      	ldrb	r3, [r3, #12]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d002      	beq.n	800b852 <etharp_query+0x1ca>
        copy_needed = 1;
 800b84c:	2301      	movs	r3, #1
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 800b850:	e005      	b.n	800b85e <etharp_query+0x1d6>
      }
      p = p->next;
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e1      	bne.n	800b822 <etharp_query+0x19a>
    }
    if (copy_needed) {
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	2b00      	cmp	r3, #0
 800b862:	d017      	beq.n	800b894 <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	891b      	ldrh	r3, [r3, #8]
 800b868:	2200      	movs	r2, #0
 800b86a:	4619      	mov	r1, r3
 800b86c:	2002      	movs	r0, #2
 800b86e:	f7f8 fe61 	bl	8004534 <pbuf_alloc>
 800b872:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (p != NULL) {
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d011      	beq.n	800b89e <etharp_query+0x216>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b87e:	f7f9 faff 	bl	8004e80 <pbuf_copy>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <etharp_query+0x216>
          pbuf_free(p);
 800b888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b88a:	f7f9 f9c5 	bl	8004c18 <pbuf_free>
          p = NULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b892:	e004      	b.n	800b89e <etharp_query+0x216>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 800b898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b89a:	f7f9 fa69 	bl	8004d70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d073      	beq.n	800b98c <etharp_query+0x304>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 800b8a4:	2007      	movs	r0, #7
 800b8a6:	f7f8 fc39 	bl	800411c <memp_malloc>
 800b8aa:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d065      	beq.n	800b97e <etharp_query+0x2f6>
        unsigned int qlen = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8c0:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 800b8c2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b8c6:	4936      	ldr	r1, [pc, #216]	; (800b9a0 <etharp_query+0x318>)
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4413      	add	r3, r2
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	440b      	add	r3, r1
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01b      	beq.n	800b910 <etharp_query+0x288>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 800b8d8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b8dc:	4930      	ldr	r1, [pc, #192]	; (800b9a0 <etharp_query+0x318>)
 800b8de:	4613      	mov	r3, r2
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	4413      	add	r3, r2
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	440b      	add	r3, r1
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	623b      	str	r3, [r7, #32]
          qlen++;
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 800b8f2:	e005      	b.n	800b900 <etharp_query+0x278>
            r = r->next;
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	623b      	str	r3, [r7, #32]
            qlen++;
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f5      	bne.n	800b8f4 <etharp_query+0x26c>
          }
          r->next = new_entry;
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	e009      	b.n	800b924 <etharp_query+0x29c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 800b910:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b914:	4922      	ldr	r1, [pc, #136]	; (800b9a0 <etharp_query+0x318>)
 800b916:	4613      	mov	r3, r2
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	4413      	add	r3, r2
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	440b      	add	r3, r1
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	2b02      	cmp	r3, #2
 800b928:	d925      	bls.n	800b976 <etharp_query+0x2ee>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 800b92a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b92e:	491c      	ldr	r1, [pc, #112]	; (800b9a0 <etharp_query+0x318>)
 800b930:	4613      	mov	r3, r2
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	4413      	add	r3, r2
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	440b      	add	r3, r1
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 800b93e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b942:	4917      	ldr	r1, [pc, #92]	; (800b9a0 <etharp_query+0x318>)
 800b944:	4613      	mov	r3, r2
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	4413      	add	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	440b      	add	r3, r1
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800b954:	6819      	ldr	r1, [r3, #0]
 800b956:	4812      	ldr	r0, [pc, #72]	; (800b9a0 <etharp_query+0x318>)
 800b958:	4613      	mov	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	4413      	add	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4403      	add	r3, r0
 800b962:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7f9 f955 	bl	8004c18 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 800b96e:	6939      	ldr	r1, [r7, #16]
 800b970:	2007      	movs	r0, #7
 800b972:	f7f8 fc1f 	bl	80041b4 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b97c:	e009      	b.n	800b992 <etharp_query+0x30a>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 800b97e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b980:	f7f9 f94a 	bl	8004c18 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 800b984:	23ff      	movs	r3, #255	; 0xff
 800b986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b98a:	e002      	b.n	800b992 <etharp_query+0x30a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b98c:	23ff      	movs	r3, #255	; 0xff
 800b98e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 800b992:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b996:	4618      	mov	r0, r3
 800b998:	3738      	adds	r7, #56	; 0x38
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	2000011c 	.word	0x2000011c
 800b9a4:	0800f6ec 	.word	0x0800f6ec
 800b9a8:	0800f8b8 	.word	0x0800f8b8
 800b9ac:	0800f730 	.word	0x0800f730
 800b9b0:	0800f724 	.word	0x0800f724
 800b9b4:	2000020c 	.word	0x2000020c
 800b9b8:	0800f8e0 	.word	0x0800f8e0

0800b9bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08a      	sub	sp, #40	; 0x28
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d106      	bne.n	800b9e2 <etharp_raw+0x26>
 800b9d4:	4b3a      	ldr	r3, [pc, #232]	; (800bac0 <etharp_raw+0x104>)
 800b9d6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800b9da:	493a      	ldr	r1, [pc, #232]	; (800bac4 <etharp_raw+0x108>)
 800b9dc:	483a      	ldr	r0, [pc, #232]	; (800bac8 <etharp_raw+0x10c>)
 800b9de:	f001 fbed 	bl	800d1bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	211c      	movs	r1, #28
 800b9e6:	2002      	movs	r0, #2
 800b9e8:	f7f8 fda4 	bl	8004534 <pbuf_alloc>
 800b9ec:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d102      	bne.n	800b9fa <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9f8:	e05d      	b.n	800bab6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	895b      	ldrh	r3, [r3, #10]
 800b9fe:	2b1b      	cmp	r3, #27
 800ba00:	d806      	bhi.n	800ba10 <etharp_raw+0x54>
 800ba02:	4b2f      	ldr	r3, [pc, #188]	; (800bac0 <etharp_raw+0x104>)
 800ba04:	f240 4264 	movw	r2, #1124	; 0x464
 800ba08:	4930      	ldr	r1, [pc, #192]	; (800bacc <etharp_raw+0x110>)
 800ba0a:	482f      	ldr	r0, [pc, #188]	; (800bac8 <etharp_raw+0x10c>)
 800ba0c:	f001 fbd6 	bl	800d1bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ba16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7f7 ffd0 	bl	80039be <lwip_htons>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	461a      	mov	r2, r3
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba2c:	2b06      	cmp	r3, #6
 800ba2e:	d006      	beq.n	800ba3e <etharp_raw+0x82>
 800ba30:	4b23      	ldr	r3, [pc, #140]	; (800bac0 <etharp_raw+0x104>)
 800ba32:	f240 426b 	movw	r2, #1131	; 0x46b
 800ba36:	4926      	ldr	r1, [pc, #152]	; (800bad0 <etharp_raw+0x114>)
 800ba38:	4823      	ldr	r0, [pc, #140]	; (800bac8 <etharp_raw+0x10c>)
 800ba3a:	f001 fbbf 	bl	800d1bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	3308      	adds	r3, #8
 800ba42:	2206      	movs	r2, #6
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 fba5 	bl	800d196 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	3312      	adds	r3, #18
 800ba50:	2206      	movs	r2, #6
 800ba52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 fb9e 	bl	800d196 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	330e      	adds	r3, #14
 800ba5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	3318      	adds	r3, #24
 800ba68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6a:	6812      	ldr	r2, [r2, #0]
 800ba6c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2200      	movs	r2, #0
 800ba72:	701a      	strb	r2, [r3, #0]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f042 0201 	orr.w	r2, r2, #1
 800ba7a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f042 0208 	orr.w	r2, r2, #8
 800ba84:	709a      	strb	r2, [r3, #2]
 800ba86:	2200      	movs	r2, #0
 800ba88:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2204      	movs	r2, #4
 800ba94:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ba96:	f640 0306 	movw	r3, #2054	; 0x806
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f001 fafc 	bl	800d0a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800baa8:	69b8      	ldr	r0, [r7, #24]
 800baaa:	f7f9 f8b5 	bl	8004c18 <pbuf_free>
  p = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3720      	adds	r7, #32
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	0800f6ec 	.word	0x0800f6ec
 800bac4:	0800f868 	.word	0x0800f868
 800bac8:	0800f730 	.word	0x0800f730
 800bacc:	0800f8fc 	.word	0x0800f8fc
 800bad0:	0800f930 	.word	0x0800f930

0800bad4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af04      	add	r7, sp, #16
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800baf0:	2201      	movs	r2, #1
 800baf2:	9203      	str	r2, [sp, #12]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	9202      	str	r2, [sp, #8]
 800baf8:	4a06      	ldr	r2, [pc, #24]	; (800bb14 <etharp_request_dst+0x40>)
 800bafa:	9201      	str	r2, [sp, #4]
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	4603      	mov	r3, r0
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f7ff ff5a 	bl	800b9bc <etharp_raw>
 800bb08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	0800fe94 	.word	0x0800fe94

0800bb18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bb22:	4a05      	ldr	r2, [pc, #20]	; (800bb38 <etharp_request+0x20>)
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff ffd4 	bl	800bad4 <etharp_request_dst>
 800bb2c:	4603      	mov	r3, r0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	0800fe8c 	.word	0x0800fe8c

0800bb3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08e      	sub	sp, #56	; 0x38
 800bb40:	af04      	add	r7, sp, #16
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bb46:	4b79      	ldr	r3, [pc, #484]	; (800bd2c <icmp_input+0x1f0>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL(iphdr_in) * 4;
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	f003 030f 	and.w	r3, r3, #15
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800bb5c:	8bfb      	ldrh	r3, [r7, #30]
 800bb5e:	2b13      	cmp	r3, #19
 800bb60:	f240 80d3 	bls.w	800bd0a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	895b      	ldrh	r3, [r3, #10]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	f240 80d0 	bls.w	800bd0e <icmp_input+0x1d2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bb76:	7f7b      	ldrb	r3, [r7, #29]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 80bf 	beq.w	800bcfc <icmp_input+0x1c0>
 800bb7e:	2b08      	cmp	r3, #8
 800bb80:	f040 80bf 	bne.w	800bd02 <icmp_input+0x1c6>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800bb84:	4b6a      	ldr	r3, [pc, #424]	; (800bd30 <icmp_input+0x1f4>)
 800bb86:	627b      	str	r3, [r7, #36]	; 0x24
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb88:	4b68      	ldr	r3, [pc, #416]	; (800bd2c <icmp_input+0x1f0>)
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb90:	2be0      	cmp	r3, #224	; 0xe0
 800bb92:	d102      	bne.n	800bb9a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
      /* For multicast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	3304      	adds	r3, #4
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bb9a:	4b64      	ldr	r3, [pc, #400]	; (800bd2c <icmp_input+0x1f0>)
 800bb9c:	695a      	ldr	r2, [r3, #20]
 800bb9e:	4b63      	ldr	r3, [pc, #396]	; (800bd2c <icmp_input+0x1f0>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f000 fbd9 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
      /* For broadcast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	891b      	ldrh	r3, [r3, #8]
 800bbba:	2b07      	cmp	r3, #7
 800bbbc:	f240 80a9 	bls.w	800bd12 <icmp_input+0x1d6>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800bbc0:	8bfb      	ldrh	r3, [r7, #30]
 800bbc2:	330e      	adds	r3, #14
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	b21b      	sxth	r3, r3
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7f9 f800 	bl	8004bd0 <pbuf_header>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d046      	beq.n	800bc64 <icmp_input+0x128>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	891a      	ldrh	r2, [r3, #8]
 800bbda:	8bfb      	ldrh	r3, [r7, #30]
 800bbdc:	4413      	add	r3, r2
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	2002      	movs	r0, #2
 800bbe6:	f7f8 fca5 	bl	8004534 <pbuf_alloc>
 800bbea:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 8094 	beq.w	800bd1c <icmp_input+0x1e0>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	895b      	ldrh	r3, [r3, #10]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	8bfb      	ldrh	r3, [r7, #30]
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d203      	bcs.n	800bc0a <icmp_input+0xce>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800bc02:	69b8      	ldr	r0, [r7, #24]
 800bc04:	f7f9 f808 	bl	8004c18 <pbuf_free>
        goto icmperr;
 800bc08:	e089      	b.n	800bd1e <icmp_input+0x1e2>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	8bfa      	ldrh	r2, [r7, #30]
 800bc10:	6a39      	ldr	r1, [r7, #32]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 fabf 	bl	800d196 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800bc18:	8bfb      	ldrh	r3, [r7, #30]
 800bc1a:	425b      	negs	r3, r3
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	b21b      	sxth	r3, r3
 800bc20:	4619      	mov	r1, r3
 800bc22:	69b8      	ldr	r0, [r7, #24]
 800bc24:	f7f8 ffd4 	bl	8004bd0 <pbuf_header>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <icmp_input+0x106>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bc2e:	4b41      	ldr	r3, [pc, #260]	; (800bd34 <icmp_input+0x1f8>)
 800bc30:	22af      	movs	r2, #175	; 0xaf
 800bc32:	4941      	ldr	r1, [pc, #260]	; (800bd38 <icmp_input+0x1fc>)
 800bc34:	4841      	ldr	r0, [pc, #260]	; (800bd3c <icmp_input+0x200>)
 800bc36:	f001 fac1 	bl	800d1bc <iprintf>
        pbuf_free(r);
 800bc3a:	69b8      	ldr	r0, [r7, #24]
 800bc3c:	f7f8 ffec 	bl	8004c18 <pbuf_free>
        goto icmperr;
 800bc40:	e06d      	b.n	800bd1e <icmp_input+0x1e2>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	69b8      	ldr	r0, [r7, #24]
 800bc46:	f7f9 f91b 	bl	8004e80 <pbuf_copy>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <icmp_input+0x11c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800bc50:	69b8      	ldr	r0, [r7, #24]
 800bc52:	f7f8 ffe1 	bl	8004c18 <pbuf_free>
        goto icmperr;
 800bc56:	e062      	b.n	800bd1e <icmp_input+0x1e2>
      }
      /* free the original p */
      pbuf_free(p);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7f8 ffdd 	bl	8004c18 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	607b      	str	r3, [r7, #4]
 800bc62:	e015      	b.n	800bc90 <icmp_input+0x154>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800bc64:	8bfb      	ldrh	r3, [r7, #30]
 800bc66:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800bc6a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800bc6e:	33f2      	adds	r3, #242	; 0xf2
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	b21b      	sxth	r3, r3
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7f8 ffaa 	bl	8004bd0 <pbuf_header>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d006      	beq.n	800bc90 <icmp_input+0x154>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bc82:	4b2c      	ldr	r3, [pc, #176]	; (800bd34 <icmp_input+0x1f8>)
 800bc84:	22c0      	movs	r2, #192	; 0xc0
 800bc86:	492e      	ldr	r1, [pc, #184]	; (800bd40 <icmp_input+0x204>)
 800bc88:	482c      	ldr	r0, [pc, #176]	; (800bd3c <icmp_input+0x200>)
 800bc8a:	f001 fa97 	bl	800d1bc <iprintf>
        goto icmperr;
 800bc8e:	e046      	b.n	800bd1e <icmp_input+0x1e2>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800bc96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7f8 ff97 	bl	8004bd0 <pbuf_header>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d12b      	bne.n	800bd00 <icmp_input+0x1c4>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bcb6:	4b1d      	ldr	r3, [pc, #116]	; (800bd2c <icmp_input+0x1f0>)
 800bcb8:	691a      	ldr	r2, [r3, #16]
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	709a      	strb	r2, [r3, #2]
 800bcca:	2200      	movs	r2, #0
 800bccc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	22ff      	movs	r2, #255	; 0xff
 800bcd2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	729a      	strb	r2, [r3, #10]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	9302      	str	r3, [sp, #8]
 800bce2:	2301      	movs	r3, #1
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	2300      	movs	r3, #0
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	23ff      	movs	r3, #255	; 0xff
 800bcec:	2200      	movs	r2, #0
 800bcee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fa61 	bl	800c1b8 <ip4_output_if>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800bcfa:	e001      	b.n	800bd00 <icmp_input+0x1c4>
    break;
 800bcfc:	bf00      	nop
 800bcfe:	e000      	b.n	800bd02 <icmp_input+0x1c6>
    break;
 800bd00:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7f8 ff88 	bl	8004c18 <pbuf_free>
  return;
 800bd08:	e00d      	b.n	800bd26 <icmp_input+0x1ea>
    goto lenerr;
 800bd0a:	bf00      	nop
 800bd0c:	e002      	b.n	800bd14 <icmp_input+0x1d8>
    goto lenerr;
 800bd0e:	bf00      	nop
 800bd10:	e000      	b.n	800bd14 <icmp_input+0x1d8>
      goto lenerr;
 800bd12:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7f8 ff7f 	bl	8004c18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd1a:	e004      	b.n	800bd26 <icmp_input+0x1ea>
        goto icmperr;
 800bd1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7f8 ff7a 	bl	8004c18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bd26:	3728      	adds	r7, #40	; 0x28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20003480 	.word	0x20003480
 800bd30:	20003494 	.word	0x20003494
 800bd34:	0800f974 	.word	0x0800f974
 800bd38:	0800f9ac 	.word	0x0800f9ac
 800bd3c:	0800f9e4 	.word	0x0800f9e4
 800bd40:	0800fa0c 	.word	0x0800fa0c

0800bd44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	461a      	mov	r2, r3
 800bd54:	2103      	movs	r1, #3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f814 	bl	800bd84 <icmp_send_response>
}
 800bd5c:	bf00      	nop
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	461a      	mov	r2, r3
 800bd74:	210b      	movs	r1, #11
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f804 	bl	800bd84 <icmp_send_response>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b08c      	sub	sp, #48	; 0x30
 800bd88:	af04      	add	r7, sp, #16
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
 800bd90:	4613      	mov	r3, r2
 800bd92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bd94:	2200      	movs	r2, #0
 800bd96:	2124      	movs	r1, #36	; 0x24
 800bd98:	2001      	movs	r0, #1
 800bd9a:	f7f8 fbcb 	bl	8004534 <pbuf_alloc>
 800bd9e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d04c      	beq.n	800be40 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	895b      	ldrh	r3, [r3, #10]
 800bdaa:	2b23      	cmp	r3, #35	; 0x23
 800bdac:	d806      	bhi.n	800bdbc <icmp_send_response+0x38>
 800bdae:	4b26      	ldr	r3, [pc, #152]	; (800be48 <icmp_send_response+0xc4>)
 800bdb0:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bdb4:	4925      	ldr	r1, [pc, #148]	; (800be4c <icmp_send_response+0xc8>)
 800bdb6:	4826      	ldr	r0, [pc, #152]	; (800be50 <icmp_send_response+0xcc>)
 800bdb8:	f001 fa00 	bl	800d1bc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	78fa      	ldrb	r2, [r7, #3]
 800bdcc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	78ba      	ldrb	r2, [r7, #2]
 800bdd2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	711a      	strb	r2, [r3, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2200      	movs	r2, #0
 800bde2:	719a      	strb	r2, [r3, #6]
 800bde4:	2200      	movs	r2, #0
 800bde6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f103 0008 	add.w	r0, r3, #8
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	221c      	movs	r2, #28
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	f001 f9cd 	bl	800d196 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800be02:	f107 030c 	add.w	r3, r7, #12
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f824 	bl	800be54 <ip4_route>
 800be0c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d011      	beq.n	800be38 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2200      	movs	r2, #0
 800be18:	709a      	strb	r2, [r3, #2]
 800be1a:	2200      	movs	r2, #0
 800be1c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800be1e:	f107 020c 	add.w	r2, r7, #12
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	9302      	str	r3, [sp, #8]
 800be26:	2301      	movs	r3, #1
 800be28:	9301      	str	r3, [sp, #4]
 800be2a:	2300      	movs	r3, #0
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	23ff      	movs	r3, #255	; 0xff
 800be30:	2100      	movs	r1, #0
 800be32:	69f8      	ldr	r0, [r7, #28]
 800be34:	f000 f9c0 	bl	800c1b8 <ip4_output_if>
  }
  pbuf_free(q);
 800be38:	69f8      	ldr	r0, [r7, #28]
 800be3a:	f7f8 feed 	bl	8004c18 <pbuf_free>
 800be3e:	e000      	b.n	800be42 <icmp_send_response+0xbe>
    return;
 800be40:	bf00      	nop
}
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	0800f974 	.word	0x0800f974
 800be4c:	0800fa40 	.word	0x0800fa40
 800be50:	0800f9e4 	.word	0x0800f9e4

0800be54 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800be5c:	4b30      	ldr	r3, [pc, #192]	; (800bf20 <ip4_route+0xcc>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e036      	b.n	800bed2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b00      	cmp	r3, #0
 800be72:	d02b      	beq.n	800becc <ip4_route+0x78>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800be7a:	089b      	lsrs	r3, r3, #2
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d022      	beq.n	800becc <ip4_route+0x78>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3304      	adds	r3, #4
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01d      	beq.n	800becc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3304      	adds	r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	405a      	eors	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3308      	adds	r3, #8
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4013      	ands	r3, r2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	e033      	b.n	800bf14 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d108      	bne.n	800becc <ip4_route+0x78>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	330c      	adds	r3, #12
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d101      	bne.n	800becc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	e023      	b.n	800bf14 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1c5      	bne.n	800be64 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bed8:	4b12      	ldr	r3, [pc, #72]	; (800bf24 <ip4_route+0xd0>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d015      	beq.n	800bf0c <ip4_route+0xb8>
 800bee0:	4b10      	ldr	r3, [pc, #64]	; (800bf24 <ip4_route+0xd0>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00d      	beq.n	800bf0c <ip4_route+0xb8>
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <ip4_route+0xd0>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800bf00:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <ip4_route+0xd0>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3304      	adds	r3, #4
 800bf06:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e001      	b.n	800bf14 <ip4_route+0xc0>
  }

  return netif_default;
 800bf10:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <ip4_route+0xd0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	20006b08 	.word	0x20006b08
 800bf24:	20006b0c 	.word	0x20006b0c

0800bf28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	091b      	lsrs	r3, r3, #4
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d004      	beq.n	800bf4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7f8 fe67 	bl	8004c18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e12b      	b.n	800c1a6 <ip4_input+0x27e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800bf5a:	897b      	ldrh	r3, [r7, #10]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	885b      	ldrh	r3, [r3, #2]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7f7 fd29 	bl	80039be <lwip_htons>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	891b      	ldrh	r3, [r3, #8]
 800bf74:	893a      	ldrh	r2, [r7, #8]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d204      	bcs.n	800bf84 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800bf7a:	893b      	ldrh	r3, [r7, #8]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7f8 fcd6 	bl	8004930 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	895b      	ldrh	r3, [r3, #10]
 800bf88:	897a      	ldrh	r2, [r7, #10]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d807      	bhi.n	800bf9e <ip4_input+0x76>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	891b      	ldrh	r3, [r3, #8]
 800bf92:	893a      	ldrh	r2, [r7, #8]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d802      	bhi.n	800bf9e <ip4_input+0x76>
 800bf98:	897b      	ldrh	r3, [r7, #10]
 800bf9a:	2b13      	cmp	r3, #19
 800bf9c:	d804      	bhi.n	800bfa8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7f8 fe3a 	bl	8004c18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e0fe      	b.n	800c1a6 <ip4_input+0x27e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	4a80      	ldr	r2, [pc, #512]	; (800c1b0 <ip4_input+0x288>)
 800bfae:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	4a7e      	ldr	r2, [pc, #504]	; (800c1b0 <ip4_input+0x288>)
 800bfb6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bfb8:	4b7d      	ldr	r3, [pc, #500]	; (800c1b0 <ip4_input+0x288>)
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfc0:	2be0      	cmp	r3, #224	; 0xe0
 800bfc2:	d112      	bne.n	800bfea <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d007      	beq.n	800bfe4 <ip4_input+0xbc>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <ip4_input+0xbc>
      netif = inp;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	613b      	str	r3, [r7, #16]
 800bfe2:	e041      	b.n	800c068 <ip4_input+0x140>
    } else {
      netif = NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	e03e      	b.n	800c068 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800bfea:	2301      	movs	r3, #1
 800bfec:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d014      	beq.n	800c02c <ip4_input+0x104>
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	3304      	adds	r3, #4
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00f      	beq.n	800c02c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c00c:	4b68      	ldr	r3, [pc, #416]	; (800c1b0 <ip4_input+0x288>)
 800c00e:	695a      	ldr	r2, [r3, #20]
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	3304      	adds	r3, #4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	429a      	cmp	r2, r3
 800c018:	d026      	beq.n	800c068 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c01a:	4b65      	ldr	r3, [pc, #404]	; (800c1b0 <ip4_input+0x288>)
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	6939      	ldr	r1, [r7, #16]
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f99b 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800c026:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d11d      	bne.n	800c068 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00d      	beq.n	800c04e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c032:	4b5f      	ldr	r3, [pc, #380]	; (800c1b0 <ip4_input+0x288>)
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b7f      	cmp	r3, #127	; 0x7f
 800c03a:	d102      	bne.n	800c042 <ip4_input+0x11a>
          netif = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	613b      	str	r3, [r7, #16]
          break;
 800c040:	e012      	b.n	800c068 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c046:	4b5b      	ldr	r3, [pc, #364]	; (800c1b4 <ip4_input+0x28c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	613b      	str	r3, [r7, #16]
 800c04c:	e002      	b.n	800c054 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d102      	bne.n	800c062 <ip4_input+0x13a>
        netif = netif->next;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1c4      	bne.n	800bff2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c068:	4b51      	ldr	r3, [pc, #324]	; (800c1b0 <ip4_input+0x288>)
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 f974 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d105      	bne.n	800c086 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c07a:	4b4d      	ldr	r3, [pc, #308]	; (800c1b0 <ip4_input+0x288>)
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c082:	2be0      	cmp	r3, #224	; 0xe0
 800c084:	d104      	bne.n	800c090 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7f8 fdc6 	bl	8004c18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	e08a      	b.n	800c1a6 <ip4_input+0x27e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d104      	bne.n	800c0a0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7f8 fdbe 	bl	8004c18 <pbuf_free>
    return ERR_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	e082      	b.n	800c1a6 <ip4_input+0x27e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	88db      	ldrh	r3, [r3, #6]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fc98 	bl	800c9e8 <ip4_reass>
 800c0b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <ip4_input+0x19c>
      return ERR_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	e070      	b.n	800c1a6 <ip4_input+0x27e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c0ca:	4a39      	ldr	r2, [pc, #228]	; (800c1b0 <ip4_input+0x288>)
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c0d0:	4a37      	ldr	r2, [pc, #220]	; (800c1b0 <ip4_input+0x288>)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c0d6:	4a36      	ldr	r2, [pc, #216]	; (800c1b0 <ip4_input+0x288>)
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	4b30      	ldr	r3, [pc, #192]	; (800c1b0 <ip4_input+0x288>)
 800c0ee:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7f9 f834 	bl	8005160 <raw_input>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d13f      	bne.n	800c17e <ip4_input+0x256>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c0fe:	897b      	ldrh	r3, [r7, #10]
 800c100:	425b      	negs	r3, r3
 800c102:	b29b      	uxth	r3, r3
 800c104:	b21b      	sxth	r3, r3
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7f8 fd61 	bl	8004bd0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	7a5b      	ldrb	r3, [r3, #9]
 800c112:	2b06      	cmp	r3, #6
 800c114:	d009      	beq.n	800c12a <ip4_input+0x202>
 800c116:	2b11      	cmp	r3, #17
 800c118:	d002      	beq.n	800c120 <ip4_input+0x1f8>
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d00a      	beq.n	800c134 <ip4_input+0x20c>
 800c11e:	e00e      	b.n	800c13e <ip4_input+0x216>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7fe fc44 	bl	800a9b0 <udp_input>
      break;
 800c128:	e02a      	b.n	800c180 <ip4_input+0x258>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7fa fce5 	bl	8006afc <tcp_input>
      break;
 800c132:	e025      	b.n	800c180 <ip4_input+0x258>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff fd00 	bl	800bb3c <icmp_input>
      break;
 800c13c:	e020      	b.n	800c180 <ip4_input+0x258>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c13e:	4b1c      	ldr	r3, [pc, #112]	; (800c1b0 <ip4_input+0x288>)
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	6939      	ldr	r1, [r7, #16]
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f909 	bl	800c35c <ip4_addr_isbroadcast_u32>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d112      	bne.n	800c176 <ip4_input+0x24e>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c150:	4b17      	ldr	r3, [pc, #92]	; (800c1b0 <ip4_input+0x288>)
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c158:	2be0      	cmp	r3, #224	; 0xe0
 800c15a:	d00c      	beq.n	800c176 <ip4_input+0x24e>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c15c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7f8 fd46 	bl	8004bf4 <pbuf_header_force>
        p->payload = iphdr;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c16e:	2102      	movs	r1, #2
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff fde7 	bl	800bd44 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7f8 fd4e 	bl	8004c18 <pbuf_free>
 800c17c:	e000      	b.n	800c180 <ip4_input+0x258>

      IP_STATS_INC(ip.proterr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }
 800c17e:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c180:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <ip4_input+0x288>)
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c186:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <ip4_input+0x288>)
 800c188:	2200      	movs	r2, #0
 800c18a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c18c:	4b08      	ldr	r3, [pc, #32]	; (800c1b0 <ip4_input+0x288>)
 800c18e:	2200      	movs	r2, #0
 800c190:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c192:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <ip4_input+0x288>)
 800c194:	2200      	movs	r2, #0
 800c196:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c198:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <ip4_input+0x288>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c19e:	4b04      	ldr	r3, [pc, #16]	; (800c1b0 <ip4_input+0x288>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20003480 	.word	0x20003480
 800c1b4:	20006b08 	.word	0x20006b08

0800c1b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af04      	add	r7, sp, #16
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d009      	beq.n	800c1e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <ip4_output_if+0x26>
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d102      	bne.n	800c1e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c1e4:	78fa      	ldrb	r2, [r7, #3]
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	9302      	str	r3, [sp, #8]
 800c1ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	6979      	ldr	r1, [r7, #20]
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 f805 	bl	800c20c <ip4_output_if_src>
 800c202:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	89db      	ldrh	r3, [r3, #14]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d006      	beq.n	800c230 <ip4_output_if_src+0x24>
 800c222:	4b48      	ldr	r3, [pc, #288]	; (800c344 <ip4_output_if_src+0x138>)
 800c224:	f240 3233 	movw	r2, #819	; 0x333
 800c228:	4947      	ldr	r1, [pc, #284]	; (800c348 <ip4_output_if_src+0x13c>)
 800c22a:	4848      	ldr	r0, [pc, #288]	; (800c34c <ip4_output_if_src+0x140>)
 800c22c:	f000 ffc6 	bl	800d1bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d060      	beq.n	800c2f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c236:	2314      	movs	r3, #20
 800c238:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c23a:	2114      	movs	r1, #20
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7f8 fcc7 	bl	8004bd0 <pbuf_header>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c248:	f06f 0301 	mvn.w	r3, #1
 800c24c:	e075      	b.n	800c33a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	895b      	ldrh	r3, [r3, #10]
 800c258:	2b13      	cmp	r3, #19
 800c25a:	d806      	bhi.n	800c26a <ip4_output_if_src+0x5e>
 800c25c:	4b39      	ldr	r3, [pc, #228]	; (800c344 <ip4_output_if_src+0x138>)
 800c25e:	f240 3261 	movw	r2, #865	; 0x361
 800c262:	493b      	ldr	r1, [pc, #236]	; (800c350 <ip4_output_if_src+0x144>)
 800c264:	4839      	ldr	r0, [pc, #228]	; (800c34c <ip4_output_if_src+0x140>)
 800c266:	f000 ffa9 	bl	800d1bc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	78fa      	ldrb	r2, [r7, #3]
 800c26e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c276:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c280:	8b7b      	ldrh	r3, [r7, #26]
 800c282:	089b      	lsrs	r3, r3, #2
 800c284:	b29b      	uxth	r3, r3
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c298:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	891b      	ldrh	r3, [r3, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f7 fb8d 	bl	80039be <lwip_htons>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	719a      	strb	r2, [r3, #6]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c2b6:	4b27      	ldr	r3, [pc, #156]	; (800c354 <ip4_output_if_src+0x148>)
 800c2b8:	881b      	ldrh	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f7 fb7f 	bl	80039be <lwip_htons>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c2c8:	4b22      	ldr	r3, [pc, #136]	; (800c354 <ip4_output_if_src+0x148>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	4b20      	ldr	r3, [pc, #128]	; (800c354 <ip4_output_if_src+0x148>)
 800c2d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d104      	bne.n	800c2e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c2da:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <ip4_output_if_src+0x14c>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	60da      	str	r2, [r3, #12]
 800c2e2:	e003      	b.n	800c2ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	729a      	strb	r2, [r3, #10]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	72da      	strb	r2, [r3, #11]
 800c2f6:	e008      	b.n	800c30a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c304:	f107 0314 	add.w	r3, r7, #20
 800c308:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <ip4_output_if_src+0x120>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	891a      	ldrh	r2, [r3, #8]
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d906      	bls.n	800c32c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 fd0a 	bl	800cd3c <ip4_frag>
 800c328:	4603      	mov	r3, r0
 800c32a:	e006      	b.n	800c33a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c336:	4798      	blx	r3
 800c338:	4603      	mov	r3, r0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3720      	adds	r7, #32
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	0800fa6c 	.word	0x0800fa6c
 800c348:	0800faa0 	.word	0x0800faa0
 800c34c:	0800faac 	.word	0x0800faac
 800c350:	0800fad4 	.word	0x0800fad4
 800c354:	2000020e 	.word	0x2000020e
 800c358:	0800fe88 	.word	0x0800fe88

0800c35c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c370:	d002      	beq.n	800c378 <ip4_addr_isbroadcast_u32+0x1c>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c378:	2301      	movs	r3, #1
 800c37a:	e02a      	b.n	800c3d2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	e021      	b.n	800c3d2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	3304      	adds	r3, #4
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d101      	bne.n	800c39e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	e019      	b.n	800c3d2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	405a      	eors	r2, r3
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4013      	ands	r3, r2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10d      	bne.n	800c3d0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	43da      	mvns	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d101      	bne.n	800c3d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e000      	b.n	800c3d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c3d0:	2300      	movs	r3, #0
  }
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
	...

0800c3e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <ip_reass_tmr+0x54>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c3f0:	e018      	b.n	800c424 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	7fdb      	ldrb	r3, [r3, #31]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00b      	beq.n	800c412 <ip_reass_tmr+0x32>
      r->timer--;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	7fdb      	ldrb	r3, [r3, #31]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	b2da      	uxtb	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	e008      	b.n	800c424 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c41c:	68b9      	ldr	r1, [r7, #8]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f80a 	bl	800c438 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e3      	bne.n	800c3f2 <ip_reass_tmr+0x12>
     }
   }
}
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20000210 	.word	0x20000210

0800c438 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b088      	sub	sp, #32
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d105      	bne.n	800c45a <ip_reass_free_complete_datagram+0x22>
 800c44e:	4b45      	ldr	r3, [pc, #276]	; (800c564 <ip_reass_free_complete_datagram+0x12c>)
 800c450:	22ab      	movs	r2, #171	; 0xab
 800c452:	4945      	ldr	r1, [pc, #276]	; (800c568 <ip_reass_free_complete_datagram+0x130>)
 800c454:	4845      	ldr	r0, [pc, #276]	; (800c56c <ip_reass_free_complete_datagram+0x134>)
 800c456:	f000 feb1 	bl	800d1bc <iprintf>
  if (prev != NULL) {
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00a      	beq.n	800c476 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	d005      	beq.n	800c476 <ip_reass_free_complete_datagram+0x3e>
 800c46a:	4b3e      	ldr	r3, [pc, #248]	; (800c564 <ip_reass_free_complete_datagram+0x12c>)
 800c46c:	22ad      	movs	r2, #173	; 0xad
 800c46e:	4940      	ldr	r1, [pc, #256]	; (800c570 <ip_reass_free_complete_datagram+0x138>)
 800c470:	483e      	ldr	r0, [pc, #248]	; (800c56c <ip_reass_free_complete_datagram+0x134>)
 800c472:	f000 fea3 	bl	800d1bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	889b      	ldrh	r3, [r3, #4]
 800c482:	b29b      	uxth	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d12a      	bne.n	800c4de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	6858      	ldr	r0, [r3, #4]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	3308      	adds	r3, #8
 800c49e:	2214      	movs	r2, #20
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	f000 fe78 	bl	800d196 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	69b8      	ldr	r0, [r7, #24]
 800c4aa:	f7ff fc5b 	bl	800bd64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c4ae:	69b8      	ldr	r0, [r7, #24]
 800c4b0:	f7f8 fc46 	bl	8004d40 <pbuf_clen>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c4b8:	8bfa      	ldrh	r2, [r7, #30]
 800c4ba:	8a7b      	ldrh	r3, [r7, #18]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c2:	db05      	blt.n	800c4d0 <ip_reass_free_complete_datagram+0x98>
 800c4c4:	4b27      	ldr	r3, [pc, #156]	; (800c564 <ip_reass_free_complete_datagram+0x12c>)
 800c4c6:	22bc      	movs	r2, #188	; 0xbc
 800c4c8:	492a      	ldr	r1, [pc, #168]	; (800c574 <ip_reass_free_complete_datagram+0x13c>)
 800c4ca:	4828      	ldr	r0, [pc, #160]	; (800c56c <ip_reass_free_complete_datagram+0x134>)
 800c4cc:	f000 fe76 	bl	800d1bc <iprintf>
    pbufs_freed += clen;
 800c4d0:	8bfa      	ldrh	r2, [r7, #30]
 800c4d2:	8a7b      	ldrh	r3, [r7, #18]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c4d8:	69b8      	ldr	r0, [r7, #24]
 800c4da:	f7f8 fb9d 	bl	8004c18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c4e4:	e01f      	b.n	800c526 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7f8 fc22 	bl	8004d40 <pbuf_clen>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c500:	8bfa      	ldrh	r2, [r7, #30]
 800c502:	8a7b      	ldrh	r3, [r7, #18]
 800c504:	4413      	add	r3, r2
 800c506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c50a:	db05      	blt.n	800c518 <ip_reass_free_complete_datagram+0xe0>
 800c50c:	4b15      	ldr	r3, [pc, #84]	; (800c564 <ip_reass_free_complete_datagram+0x12c>)
 800c50e:	22cc      	movs	r2, #204	; 0xcc
 800c510:	4918      	ldr	r1, [pc, #96]	; (800c574 <ip_reass_free_complete_datagram+0x13c>)
 800c512:	4816      	ldr	r0, [pc, #88]	; (800c56c <ip_reass_free_complete_datagram+0x134>)
 800c514:	f000 fe52 	bl	800d1bc <iprintf>
    pbufs_freed += clen;
 800c518:	8bfa      	ldrh	r2, [r7, #30]
 800c51a:	8a7b      	ldrh	r3, [r7, #18]
 800c51c:	4413      	add	r3, r2
 800c51e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7f8 fb79 	bl	8004c18 <pbuf_free>
  while (p != NULL) {
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1dc      	bne.n	800c4e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f8c2 	bl	800c6b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c534:	4b10      	ldr	r3, [pc, #64]	; (800c578 <ip_reass_free_complete_datagram+0x140>)
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	8bfa      	ldrh	r2, [r7, #30]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d905      	bls.n	800c54a <ip_reass_free_complete_datagram+0x112>
 800c53e:	4b09      	ldr	r3, [pc, #36]	; (800c564 <ip_reass_free_complete_datagram+0x12c>)
 800c540:	22d2      	movs	r2, #210	; 0xd2
 800c542:	490e      	ldr	r1, [pc, #56]	; (800c57c <ip_reass_free_complete_datagram+0x144>)
 800c544:	4809      	ldr	r0, [pc, #36]	; (800c56c <ip_reass_free_complete_datagram+0x134>)
 800c546:	f000 fe39 	bl	800d1bc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c54a:	4b0b      	ldr	r3, [pc, #44]	; (800c578 <ip_reass_free_complete_datagram+0x140>)
 800c54c:	881a      	ldrh	r2, [r3, #0]
 800c54e:	8bfb      	ldrh	r3, [r7, #30]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	b29a      	uxth	r2, r3
 800c554:	4b08      	ldr	r3, [pc, #32]	; (800c578 <ip_reass_free_complete_datagram+0x140>)
 800c556:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c558:	8bfb      	ldrh	r3, [r7, #30]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3720      	adds	r7, #32
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	0800fb04 	.word	0x0800fb04
 800c568:	0800fb40 	.word	0x0800fb40
 800c56c:	0800fb4c 	.word	0x0800fb4c
 800c570:	0800fb74 	.word	0x0800fb74
 800c574:	0800fb88 	.word	0x0800fb88
 800c578:	20000214 	.word	0x20000214
 800c57c:	0800fba8 	.word	0x0800fba8

0800c580 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c596:	2300      	movs	r3, #0
 800c598:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c59e:	4b28      	ldr	r3, [pc, #160]	; (800c640 <ip_reass_remove_oldest_datagram+0xc0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c5a4:	e030      	b.n	800c608 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	695a      	ldr	r2, [r3, #20]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d10c      	bne.n	800c5cc <ip_reass_remove_oldest_datagram+0x4c>
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	699a      	ldr	r2, [r3, #24]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d106      	bne.n	800c5cc <ip_reass_remove_oldest_datagram+0x4c>
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	899a      	ldrh	r2, [r3, #12]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	889b      	ldrh	r3, [r3, #4]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d014      	beq.n	800c5f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	61bb      	str	r3, [r7, #24]
 800c5e0:	e009      	b.n	800c5f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	7fda      	ldrb	r2, [r3, #31]
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	7fdb      	ldrb	r3, [r3, #31]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d803      	bhi.n	800c5f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1cb      	bne.n	800c5a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d008      	beq.n	800c626 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c614:	69b9      	ldr	r1, [r7, #24]
 800c616:	6a38      	ldr	r0, [r7, #32]
 800c618:	f7ff ff0e 	bl	800c438 <ip_reass_free_complete_datagram>
 800c61c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	da02      	bge.n	800c634 <ip_reass_remove_oldest_datagram+0xb4>
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2b01      	cmp	r3, #1
 800c632:	dcac      	bgt.n	800c58e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c634:	697b      	ldr	r3, [r7, #20]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3728      	adds	r7, #40	; 0x28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	20000210 	.word	0x20000210

0800c644 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c64e:	2005      	movs	r0, #5
 800c650:	f7f7 fd64 	bl	800411c <memp_malloc>
 800c654:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d110      	bne.n	800c67e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff ff8e 	bl	800c580 <ip_reass_remove_oldest_datagram>
 800c664:	4602      	mov	r2, r0
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	4293      	cmp	r3, r2
 800c66a:	dc03      	bgt.n	800c674 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c66c:	2005      	movs	r0, #5
 800c66e:	f7f7 fd55 	bl	800411c <memp_malloc>
 800c672:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	e016      	b.n	800c6ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c67e:	2220      	movs	r2, #32
 800c680:	2100      	movs	r1, #0
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 fd92 	bl	800d1ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2203      	movs	r2, #3
 800c68c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c68e:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <ip_reass_enqueue_new_datagram+0x70>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c696:	4a07      	ldr	r2, [pc, #28]	; (800c6b4 <ip_reass_enqueue_new_datagram+0x70>)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	2214      	movs	r2, #20
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 fd76 	bl	800d196 <memcpy>
  return ipr;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	20000210 	.word	0x20000210

0800c6b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c6c2:	4b10      	ldr	r3, [pc, #64]	; (800c704 <ip_reass_dequeue_datagram+0x4c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d104      	bne.n	800c6d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0c      	ldr	r2, [pc, #48]	; (800c704 <ip_reass_dequeue_datagram+0x4c>)
 800c6d2:	6013      	str	r3, [r2, #0]
 800c6d4:	e00d      	b.n	800c6f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <ip_reass_dequeue_datagram+0x32>
 800c6dc:	4b0a      	ldr	r3, [pc, #40]	; (800c708 <ip_reass_dequeue_datagram+0x50>)
 800c6de:	f240 1245 	movw	r2, #325	; 0x145
 800c6e2:	490a      	ldr	r1, [pc, #40]	; (800c70c <ip_reass_dequeue_datagram+0x54>)
 800c6e4:	480a      	ldr	r0, [pc, #40]	; (800c710 <ip_reass_dequeue_datagram+0x58>)
 800c6e6:	f000 fd69 	bl	800d1bc <iprintf>
    prev->next = ipr->next;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	2005      	movs	r0, #5
 800c6f6:	f7f7 fd5d 	bl	80041b4 <memp_free>
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20000210 	.word	0x20000210
 800c708:	0800fb04 	.word	0x0800fb04
 800c70c:	0800fbc4 	.word	0x0800fbc4
 800c710:	0800fb4c 	.word	0x0800fb4c

0800c714 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b08c      	sub	sp, #48	; 0x30
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c720:	2300      	movs	r3, #0
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c724:	2301      	movs	r3, #1
 800c726:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	885b      	ldrh	r3, [r3, #2]
 800c732:	b29b      	uxth	r3, r3
 800c734:	4618      	mov	r0, r3
 800c736:	f7f7 f942 	bl	80039be <lwip_htons>
 800c73a:	4603      	mov	r3, r0
 800c73c:	461a      	mov	r2, r3
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	f003 030f 	and.w	r3, r3, #15
 800c748:	b29b      	uxth	r3, r3
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	88db      	ldrh	r3, [r3, #6]
 800c756:	b29b      	uxth	r3, r3
 800c758:	4618      	mov	r0, r3
 800c75a:	f7f7 f930 	bl	80039be <lwip_htons>
 800c75e:	4603      	mov	r3, r0
 800c760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c764:	b29b      	uxth	r3, r3
 800c766:	00db      	lsls	r3, r3, #3
 800c768:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	705a      	strb	r2, [r3, #1]
 800c77a:	2200      	movs	r2, #0
 800c77c:	709a      	strb	r2, [r3, #2]
 800c77e:	2200      	movs	r2, #0
 800c780:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	8b3a      	ldrh	r2, [r7, #24]
 800c786:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c788:	8b3a      	ldrh	r2, [r7, #24]
 800c78a:	8b7b      	ldrh	r3, [r7, #26]
 800c78c:	4413      	add	r3, r2
 800c78e:	b29a      	uxth	r2, r3
 800c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c792:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
 800c79a:	e061      	b.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	889b      	ldrh	r3, [r3, #4]
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	889b      	ldrh	r3, [r3, #4]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d232      	bcs.n	800c818 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d01f      	beq.n	800c7fe <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	889b      	ldrh	r3, [r3, #4]
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	88db      	ldrh	r3, [r3, #6]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	f0c0 80e3 	bcc.w	800c996 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d2:	88db      	ldrh	r3, [r3, #6]
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	889b      	ldrh	r3, [r3, #4]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	f200 80da 	bhi.w	800c996 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	88db      	ldrh	r3, [r3, #6]
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	889b      	ldrh	r3, [r3, #4]
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d037      	beq.n	800c868 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c7fc:	e034      	b.n	800c868 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	88db      	ldrh	r3, [r3, #6]
 800c802:	b29a      	uxth	r2, r3
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	889b      	ldrh	r3, [r3, #4]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	429a      	cmp	r2, r3
 800c80c:	f200 80c5 	bhi.w	800c99a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	605a      	str	r2, [r3, #4]
      break;
 800c816:	e027      	b.n	800c868 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	889b      	ldrh	r3, [r3, #4]
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	889b      	ldrh	r3, [r3, #4]
 800c822:	b29b      	uxth	r3, r3
 800c824:	429a      	cmp	r2, r3
 800c826:	f000 80ba 	beq.w	800c99e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82c:	889b      	ldrh	r3, [r3, #4]
 800c82e:	b29a      	uxth	r2, r3
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	88db      	ldrh	r3, [r3, #6]
 800c834:	b29b      	uxth	r3, r3
 800c836:	429a      	cmp	r2, r3
 800c838:	f0c0 80b3 	bcc.w	800c9a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d009      	beq.n	800c856 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	88db      	ldrh	r3, [r3, #6]
 800c846:	b29a      	uxth	r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	889b      	ldrh	r3, [r3, #4]
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	429a      	cmp	r2, r3
 800c850:	d001      	beq.n	800c856 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	2b00      	cmp	r3, #0
 800c864:	d19a      	bne.n	800c79c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800c866:	e000      	b.n	800c86a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800c868:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d12d      	bne.n	800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	2b00      	cmp	r3, #0
 800c874:	d01c      	beq.n	800c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c878:	88db      	ldrh	r3, [r3, #6]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	889b      	ldrh	r3, [r3, #4]
 800c880:	b29b      	uxth	r3, r3
 800c882:	429a      	cmp	r2, r3
 800c884:	d906      	bls.n	800c894 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800c886:	4b51      	ldr	r3, [pc, #324]	; (800c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c888:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c88c:	4950      	ldr	r1, [pc, #320]	; (800c9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c88e:	4851      	ldr	r0, [pc, #324]	; (800c9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c890:	f000 fc94 	bl	800d1bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	88db      	ldrh	r3, [r3, #6]
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	889b      	ldrh	r3, [r3, #4]
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d010      	beq.n	800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	623b      	str	r3, [r7, #32]
 800c8ae:	e00d      	b.n	800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d006      	beq.n	800c8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800c8b8:	4b44      	ldr	r3, [pc, #272]	; (800c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c8ba:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800c8be:	4946      	ldr	r1, [pc, #280]	; (800c9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c8c0:	4844      	ldr	r0, [pc, #272]	; (800c9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c8c2:	f000 fc7b 	bl	800d1bc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d105      	bne.n	800c8de <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	7f9b      	ldrb	r3, [r3, #30]
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d059      	beq.n	800c992 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800c8de:	6a3b      	ldr	r3, [r7, #32]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d04f      	beq.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d006      	beq.n	800c8fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	889b      	ldrh	r3, [r3, #4]
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	623b      	str	r3, [r7, #32]
 800c8fe:	e041      	b.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c90a:	e012      	b.n	800c932 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	88db      	ldrh	r3, [r3, #6]
 800c916:	b29a      	uxth	r2, r3
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	889b      	ldrh	r3, [r3, #4]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	429a      	cmp	r2, r3
 800c920:	d002      	beq.n	800c928 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	623b      	str	r3, [r7, #32]
            break;
 800c926:	e007      	b.n	800c938 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e9      	bne.n	800c90c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d022      	beq.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800c946:	4b21      	ldr	r3, [pc, #132]	; (800c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c948:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800c94c:	4923      	ldr	r1, [pc, #140]	; (800c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c94e:	4821      	ldr	r0, [pc, #132]	; (800c9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c950:	f000 fc34 	bl	800d1bc <iprintf>
          LWIP_ASSERT("sanity check",
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d106      	bne.n	800c96e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800c960:	4b1a      	ldr	r3, [pc, #104]	; (800c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c962:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c966:	491d      	ldr	r1, [pc, #116]	; (800c9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c968:	481a      	ldr	r0, [pc, #104]	; (800c9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c96a:	f000 fc27 	bl	800d1bc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d006      	beq.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800c976:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c978:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800c97c:	4918      	ldr	r1, [pc, #96]	; (800c9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c97e:	4815      	ldr	r0, [pc, #84]	; (800c9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c980:	f000 fc1c 	bl	800d1bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	2b00      	cmp	r3, #0
 800c988:	bf14      	ite	ne
 800c98a:	2301      	movne	r3, #1
 800c98c:	2300      	moveq	r3, #0
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	e018      	b.n	800c9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c992:	2300      	movs	r3, #0
 800c994:	e016      	b.n	800c9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800c996:	bf00      	nop
 800c998:	e004      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800c99a:	bf00      	nop
 800c99c:	e002      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c99e:	bf00      	nop
 800c9a0:	e000      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c9a2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c9a4:	68b8      	ldr	r0, [r7, #8]
 800c9a6:	f7f8 f9cb 	bl	8004d40 <pbuf_clen>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	1a9b      	subs	r3, r3, r2
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	; (800c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c9b8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c9ba:	68b8      	ldr	r0, [r7, #8]
 800c9bc:	f7f8 f92c 	bl	8004c18 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3730      	adds	r7, #48	; 0x30
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	0800fb04 	.word	0x0800fb04
 800c9d0:	0800fbe0 	.word	0x0800fbe0
 800c9d4:	0800fb4c 	.word	0x0800fb4c
 800c9d8:	0800fc00 	.word	0x0800fc00
 800c9dc:	0800fc38 	.word	0x0800fc38
 800c9e0:	0800fc48 	.word	0x0800fc48
 800c9e4:	20000214 	.word	0x20000214

0800c9e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08e      	sub	sp, #56	; 0x38
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	f003 030f 	and.w	r3, r3, #15
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	2b14      	cmp	r3, #20
 800ca02:	f040 8131 	bne.w	800cc68 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca08:	88db      	ldrh	r3, [r3, #6]
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7f6 ffd6 	bl	80039be <lwip_htons>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	885b      	ldrh	r3, [r3, #2]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f6 ffca 	bl	80039be <lwip_htons>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	f003 030f 	and.w	r3, r3, #15
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7f8 f97c 	bl	8004d40 <pbuf_clen>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ca4c:	4b8d      	ldr	r3, [pc, #564]	; (800cc84 <ip4_reass+0x29c>)
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	461a      	mov	r2, r3
 800ca52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca54:	4413      	add	r3, r2
 800ca56:	2b0a      	cmp	r3, #10
 800ca58:	dd10      	ble.n	800ca7c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca60:	f7ff fd8e 	bl	800c580 <ip_reass_remove_oldest_datagram>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 8100 	beq.w	800cc6c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ca6c:	4b85      	ldr	r3, [pc, #532]	; (800cc84 <ip4_reass+0x29c>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	461a      	mov	r2, r3
 800ca72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca74:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca76:	2b0a      	cmp	r3, #10
 800ca78:	f300 80f8 	bgt.w	800cc6c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca7c:	4b82      	ldr	r3, [pc, #520]	; (800cc88 <ip4_reass+0x2a0>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	633b      	str	r3, [r7, #48]	; 0x30
 800ca82:	e015      	b.n	800cab0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	695a      	ldr	r2, [r3, #20]
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d10c      	bne.n	800caaa <ip4_reass+0xc2>
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	699a      	ldr	r2, [r3, #24]
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d106      	bne.n	800caaa <ip4_reass+0xc2>
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9e:	899a      	ldrh	r2, [r3, #12]
 800caa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa2:	889b      	ldrh	r3, [r3, #4]
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d006      	beq.n	800cab8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	633b      	str	r3, [r7, #48]	; 0x30
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1e6      	bne.n	800ca84 <ip4_reass+0x9c>
 800cab6:	e000      	b.n	800caba <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cab8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d109      	bne.n	800cad4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cac2:	4619      	mov	r1, r3
 800cac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac6:	f7ff fdbd 	bl	800c644 <ip_reass_enqueue_new_datagram>
 800caca:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d11c      	bne.n	800cb0c <ip4_reass+0x124>
      goto nullreturn;
 800cad2:	e0ce      	b.n	800cc72 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	88db      	ldrh	r3, [r3, #6]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	4618      	mov	r0, r3
 800cadc:	f7f6 ff6f 	bl	80039be <lwip_htons>
 800cae0:	4603      	mov	r3, r0
 800cae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d110      	bne.n	800cb0c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	89db      	ldrh	r3, [r3, #14]
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f6 ff65 	bl	80039be <lwip_htons>
 800caf4:	4603      	mov	r3, r0
 800caf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d006      	beq.n	800cb0c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	3308      	adds	r3, #8
 800cb02:	2214      	movs	r2, #20
 800cb04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fb45 	bl	800d196 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	88db      	ldrh	r3, [r3, #6]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	f003 0320 	and.w	r3, r3, #32
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bf0c      	ite	eq
 800cb1a:	2301      	moveq	r3, #1
 800cb1c:	2300      	movne	r3, #0
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00e      	beq.n	800cb46 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb2c:	4413      	add	r3, r2
 800cb2e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cb30:	8b7a      	ldrh	r2, [r7, #26]
 800cb32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb34:	429a      	cmp	r2, r3
 800cb36:	f0c0 8099 	bcc.w	800cc6c <ip4_reass+0x284>
 800cb3a:	8b7b      	ldrh	r3, [r7, #26]
 800cb3c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cb40:	4293      	cmp	r3, r2
 800cb42:	f200 8093 	bhi.w	800cc6c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cb46:	69fa      	ldr	r2, [r7, #28]
 800cb48:	6879      	ldr	r1, [r7, #4]
 800cb4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb4c:	f7ff fde2 	bl	800c714 <ip_reass_chain_frag_into_datagram_and_validate>
 800cb50:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb58:	f000 808a 	beq.w	800cc70 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cb5c:	4b49      	ldr	r3, [pc, #292]	; (800cc84 <ip4_reass+0x29c>)
 800cb5e:	881a      	ldrh	r2, [r3, #0]
 800cb60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb62:	4413      	add	r3, r2
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	4b47      	ldr	r3, [pc, #284]	; (800cc84 <ip4_reass+0x29c>)
 800cb68:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00d      	beq.n	800cb8c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb74:	4413      	add	r3, r2
 800cb76:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	8a7a      	ldrh	r2, [r7, #18]
 800cb7c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	7f9b      	ldrb	r3, [r3, #30]
 800cb82:	f043 0301 	orr.w	r3, r3, #1
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d168      	bne.n	800cc64 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	8b9b      	ldrh	r3, [r3, #28]
 800cb96:	3314      	adds	r3, #20
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	2214      	movs	r2, #20
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbba:	f000 faec 	bl	800d196 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	8b9b      	ldrh	r3, [r3, #28]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7f6 fefb 	bl	80039be <lwip_htons>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	461a      	mov	r2, r3
 800cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	719a      	strb	r2, [r3, #6]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	2200      	movs	r2, #0
 800cbde:	729a      	strb	r2, [r3, #10]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cbea:	e00e      	b.n	800cc0a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800cbf2:	f06f 0113 	mvn.w	r1, #19
 800cbf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cbf8:	f7f7 ffea 	bl	8004bd0 <pbuf_header>
      pbuf_cat(p, r);
 800cbfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f7f8 f8d8 	bl	8004db4 <pbuf_cat>
      r = iprh->next_pbuf;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1ed      	bne.n	800cbec <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cc10:	4b1d      	ldr	r3, [pc, #116]	; (800cc88 <ip4_reass+0x2a0>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d102      	bne.n	800cc20 <ip4_reass+0x238>
      ipr_prev = NULL;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc1e:	e010      	b.n	800cc42 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc20:	4b19      	ldr	r3, [pc, #100]	; (800cc88 <ip4_reass+0x2a0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc26:	e007      	b.n	800cc38 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d006      	beq.n	800cc40 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1f4      	bne.n	800cc28 <ip4_reass+0x240>
 800cc3e:	e000      	b.n	800cc42 <ip4_reass+0x25a>
          break;
 800cc40:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cc42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc46:	f7ff fd37 	bl	800c6b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7f8 f878 	bl	8004d40 <pbuf_clen>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	4b0b      	ldr	r3, [pc, #44]	; (800cc84 <ip4_reass+0x29c>)
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	4b09      	ldr	r3, [pc, #36]	; (800cc84 <ip4_reass+0x29c>)
 800cc5e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	e00a      	b.n	800cc7a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cc64:	2300      	movs	r3, #0
 800cc66:	e008      	b.n	800cc7a <ip4_reass+0x292>
    goto nullreturn;
 800cc68:	bf00      	nop
 800cc6a:	e002      	b.n	800cc72 <ip4_reass+0x28a>

nullreturn:
 800cc6c:	bf00      	nop
 800cc6e:	e000      	b.n	800cc72 <ip4_reass+0x28a>
    goto nullreturn;
 800cc70:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7f7 ffd0 	bl	8004c18 <pbuf_free>
  return NULL;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3738      	adds	r7, #56	; 0x38
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20000214 	.word	0x20000214
 800cc88:	20000210 	.word	0x20000210

0800cc8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800cc90:	2006      	movs	r0, #6
 800cc92:	f7f7 fa43 	bl	800411c <memp_malloc>
 800cc96:	4603      	mov	r3, r0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ccac:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ccb0:	4906      	ldr	r1, [pc, #24]	; (800cccc <ip_frag_free_pbuf_custom_ref+0x30>)
 800ccb2:	4807      	ldr	r0, [pc, #28]	; (800ccd0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ccb4:	f000 fa82 	bl	800d1bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	2006      	movs	r0, #6
 800ccbc:	f7f7 fa7a 	bl	80041b4 <memp_free>
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	0800fb04 	.word	0x0800fb04
 800cccc:	0800fc6c 	.word	0x0800fc6c
 800ccd0:	0800fb4c 	.word	0x0800fb4c

0800ccd4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <ipfrag_free_pbuf_custom+0x20>
 800cce6:	4b11      	ldr	r3, [pc, #68]	; (800cd2c <ipfrag_free_pbuf_custom+0x58>)
 800cce8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800ccec:	4910      	ldr	r1, [pc, #64]	; (800cd30 <ipfrag_free_pbuf_custom+0x5c>)
 800ccee:	4811      	ldr	r0, [pc, #68]	; (800cd34 <ipfrag_free_pbuf_custom+0x60>)
 800ccf0:	f000 fa64 	bl	800d1bc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d006      	beq.n	800cd0a <ipfrag_free_pbuf_custom+0x36>
 800ccfc:	4b0b      	ldr	r3, [pc, #44]	; (800cd2c <ipfrag_free_pbuf_custom+0x58>)
 800ccfe:	f240 22b9 	movw	r2, #697	; 0x2b9
 800cd02:	490d      	ldr	r1, [pc, #52]	; (800cd38 <ipfrag_free_pbuf_custom+0x64>)
 800cd04:	480b      	ldr	r0, [pc, #44]	; (800cd34 <ipfrag_free_pbuf_custom+0x60>)
 800cd06:	f000 fa59 	bl	800d1bc <iprintf>
  if (pcr->original != NULL) {
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d004      	beq.n	800cd1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7f7 ff7e 	bl	8004c18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff ffbd 	bl	800cc9c <ip_frag_free_pbuf_custom_ref>
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0800fb04 	.word	0x0800fb04
 800cd30:	0800fc78 	.word	0x0800fc78
 800cd34:	0800fb4c 	.word	0x0800fb4c
 800cd38:	0800fc84 	.word	0x0800fc84

0800cd3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b092      	sub	sp, #72	; 0x48
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cd50:	3b14      	subs	r3, #20
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	da00      	bge.n	800cd58 <ip4_frag+0x1c>
 800cd56:	3307      	adds	r3, #7
 800cd58:	10db      	asrs	r3, r3, #3
 800cd5a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cd5c:	2314      	movs	r3, #20
 800cd5e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd68:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	f003 030f 	and.w	r3, r3, #15
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	2b14      	cmp	r3, #20
 800cd76:	d009      	beq.n	800cd8c <ip4_frag+0x50>
 800cd78:	4b79      	ldr	r3, [pc, #484]	; (800cf60 <ip4_frag+0x224>)
 800cd7a:	f240 22e1 	movw	r2, #737	; 0x2e1
 800cd7e:	4979      	ldr	r1, [pc, #484]	; (800cf64 <ip4_frag+0x228>)
 800cd80:	4879      	ldr	r0, [pc, #484]	; (800cf68 <ip4_frag+0x22c>)
 800cd82:	f000 fa1b 	bl	800d1bc <iprintf>
 800cd86:	f06f 0305 	mvn.w	r3, #5
 800cd8a:	e0e5      	b.n	800cf58 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	88db      	ldrh	r3, [r3, #6]
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7f6 fe13 	bl	80039be <lwip_htons>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800cd9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cda2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800cda4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cda6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d009      	beq.n	800cdc2 <ip4_frag+0x86>
 800cdae:	4b6c      	ldr	r3, [pc, #432]	; (800cf60 <ip4_frag+0x224>)
 800cdb0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cdb4:	496d      	ldr	r1, [pc, #436]	; (800cf6c <ip4_frag+0x230>)
 800cdb6:	486c      	ldr	r0, [pc, #432]	; (800cf68 <ip4_frag+0x22c>)
 800cdb8:	f000 fa00 	bl	800d1bc <iprintf>
 800cdbc:	f06f 0305 	mvn.w	r3, #5
 800cdc0:	e0ca      	b.n	800cf58 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	891b      	ldrh	r3, [r3, #8]
 800cdc6:	3b14      	subs	r3, #20
 800cdc8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800cdca:	e0bc      	b.n	800cf46 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800cdcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cdce:	00da      	lsls	r2, r3, #3
 800cdd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	bfa8      	it	ge
 800cdd6:	4613      	movge	r3, r2
 800cdd8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cdda:	2200      	movs	r2, #0
 800cddc:	2114      	movs	r1, #20
 800cdde:	2002      	movs	r0, #2
 800cde0:	f7f7 fba8 	bl	8004534 <pbuf_alloc>
 800cde4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 80b2 	beq.w	800cf52 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	895b      	ldrh	r3, [r3, #10]
 800cdf2:	2b13      	cmp	r3, #19
 800cdf4:	d806      	bhi.n	800ce04 <ip4_frag+0xc8>
 800cdf6:	4b5a      	ldr	r3, [pc, #360]	; (800cf60 <ip4_frag+0x224>)
 800cdf8:	f240 3209 	movw	r2, #777	; 0x309
 800cdfc:	495c      	ldr	r1, [pc, #368]	; (800cf70 <ip4_frag+0x234>)
 800cdfe:	485a      	ldr	r0, [pc, #360]	; (800cf68 <ip4_frag+0x22c>)
 800ce00:	f000 f9dc 	bl	800d1bc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	2214      	movs	r2, #20
 800ce0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 f9c2 	bl	800d196 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800ce18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800ce1c:	e04f      	b.n	800cebe <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	895a      	ldrh	r2, [r3, #10]
 800ce22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ce28:	8b7a      	ldrh	r2, [r7, #26]
 800ce2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	bf28      	it	cs
 800ce30:	4613      	movcs	r3, r2
 800ce32:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ce34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <ip4_frag+0x10a>
        poff = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	60fb      	str	r3, [r7, #12]
        continue;
 800ce44:	e03b      	b.n	800cebe <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ce46:	f7ff ff21 	bl	800cc8c <ip_frag_alloc_pbuf_custom_ref>
 800ce4a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800ce52:	6a38      	ldr	r0, [r7, #32]
 800ce54:	f7f7 fee0 	bl	8004c18 <pbuf_free>
        goto memerr;
 800ce58:	e07c      	b.n	800cf54 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ce5a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ce60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce62:	4413      	add	r3, r2
 800ce64:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800ce66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ce68:	9201      	str	r2, [sp, #4]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2202      	movs	r2, #2
 800ce70:	2004      	movs	r0, #4
 800ce72:	f7f7 fcf3 	bl	800485c <pbuf_alloced_custom>
 800ce76:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ce7e:	6978      	ldr	r0, [r7, #20]
 800ce80:	f7ff ff0c 	bl	800cc9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ce84:	6a38      	ldr	r0, [r7, #32]
 800ce86:	f7f7 fec7 	bl	8004c18 <pbuf_free>
        goto memerr;
 800ce8a:	e063      	b.n	800cf54 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7f7 ff6f 	bl	8004d70 <pbuf_ref>
      pcr->original = p;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	4a36      	ldr	r2, [pc, #216]	; (800cf74 <ip4_frag+0x238>)
 800ce9c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ce9e:	6939      	ldr	r1, [r7, #16]
 800cea0:	6a38      	ldr	r0, [r7, #32]
 800cea2:	f7f7 ff87 	bl	8004db4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800cea6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800cea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800ceae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <ip4_frag+0x182>
        poff = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cebe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1ac      	bne.n	800ce1e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800cec4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cec6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cec8:	4413      	add	r3, r2
 800ceca:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cecc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ced2:	3b14      	subs	r3, #20
 800ced4:	429a      	cmp	r2, r3
 800ced6:	bfd4      	ite	le
 800ced8:	2301      	movle	r3, #1
 800ceda:	2300      	movgt	r3, #0
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cee0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cee6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d103      	bne.n	800cef6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800ceee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cef4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cef6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f6 fd60 	bl	80039be <lwip_htons>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461a      	mov	r2, r3
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800cf06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf08:	3314      	adds	r3, #20
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7f6 fd56 	bl	80039be <lwip_htons>
 800cf12:	4603      	mov	r3, r0
 800cf14:	461a      	mov	r2, r3
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	729a      	strb	r2, [r3, #10]
 800cf20:	2200      	movs	r2, #0
 800cf22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	6a39      	ldr	r1, [r7, #32]
 800cf2c:	68b8      	ldr	r0, [r7, #8]
 800cf2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cf30:	6a38      	ldr	r0, [r7, #32]
 800cf32:	f7f7 fe71 	bl	8004c18 <pbuf_free>
    left -= fragsize;
 800cf36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cf38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800cf3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800cf40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cf42:	4413      	add	r3, r2
 800cf44:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800cf46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f af3f 	bne.w	800cdcc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e002      	b.n	800cf58 <ip4_frag+0x21c>
      goto memerr;
 800cf52:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cf54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3740      	adds	r7, #64	; 0x40
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	0800fb04 	.word	0x0800fb04
 800cf64:	0800fc90 	.word	0x0800fc90
 800cf68:	0800fb4c 	.word	0x0800fb4c
 800cf6c:	0800fcb8 	.word	0x0800fcb8
 800cf70:	0800fcd4 	.word	0x0800fcd4
 800cf74:	0800ccd5 	.word	0x0800ccd5

0800cf78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800cf82:	230e      	movs	r3, #14
 800cf84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	895b      	ldrh	r3, [r3, #10]
 800cf8a:	2b0e      	cmp	r3, #14
 800cf8c:	d977      	bls.n	800d07e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	7b1a      	ldrb	r2, [r3, #12]
 800cf98:	7b5b      	ldrb	r3, [r3, #13]
 800cf9a:	021b      	lsls	r3, r3, #8
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d023      	beq.n	800cff4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d10f      	bne.n	800cfd4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	785b      	ldrb	r3, [r3, #1]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d11b      	bne.n	800cff4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cfc0:	2b5e      	cmp	r3, #94	; 0x5e
 800cfc2:	d117      	bne.n	800cff4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7b5b      	ldrb	r3, [r3, #13]
 800cfc8:	f043 0310 	orr.w	r3, r3, #16
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	735a      	strb	r2, [r3, #13]
 800cfd2:	e00f      	b.n	800cff4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2206      	movs	r2, #6
 800cfd8:	4930      	ldr	r1, [pc, #192]	; (800d09c <ethernet_input+0x124>)
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f8cc 	bl	800d178 <memcmp>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7b5b      	ldrb	r3, [r3, #13]
 800cfea:	f043 0308 	orr.w	r3, r3, #8
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cff4:	89fb      	ldrh	r3, [r7, #14]
 800cff6:	2b08      	cmp	r3, #8
 800cff8:	d003      	beq.n	800d002 <ethernet_input+0x8a>
 800cffa:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cffe:	d01e      	beq.n	800d03e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d000:	e044      	b.n	800d08c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d008:	f003 0308 	and.w	r3, r3, #8
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d038      	beq.n	800d082 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	895b      	ldrh	r3, [r3, #10]
 800d014:	461a      	mov	r2, r3
 800d016:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	db33      	blt.n	800d086 <ethernet_input+0x10e>
 800d01e:	8afb      	ldrh	r3, [r7, #22]
 800d020:	425b      	negs	r3, r3
 800d022:	b29b      	uxth	r3, r3
 800d024:	b21b      	sxth	r3, r3
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7f7 fdd1 	bl	8004bd0 <pbuf_header>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d128      	bne.n	800d086 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7fe ff76 	bl	800bf28 <ip4_input>
      break;
 800d03c:	e01d      	b.n	800d07a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d044:	f003 0308 	and.w	r3, r3, #8
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01e      	beq.n	800d08a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	895b      	ldrh	r3, [r3, #10]
 800d050:	461a      	mov	r2, r3
 800d052:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d056:	429a      	cmp	r2, r3
 800d058:	db15      	blt.n	800d086 <ethernet_input+0x10e>
 800d05a:	8afb      	ldrh	r3, [r7, #22]
 800d05c:	425b      	negs	r3, r3
 800d05e:	b29b      	uxth	r3, r3
 800d060:	b21b      	sxth	r3, r3
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7f7 fdb3 	bl	8004bd0 <pbuf_header>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10a      	bne.n	800d086 <ethernet_input+0x10e>
        etharp_input(p, netif);
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f7fe f8f6 	bl	800b264 <etharp_input>
      break;
 800d078:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	e00a      	b.n	800d094 <ethernet_input+0x11c>
    goto free_and_return;
 800d07e:	bf00      	nop
 800d080:	e004      	b.n	800d08c <ethernet_input+0x114>
        goto free_and_return;
 800d082:	bf00      	nop
 800d084:	e002      	b.n	800d08c <ethernet_input+0x114>

free_and_return:
 800d086:	bf00      	nop
 800d088:	e000      	b.n	800d08c <ethernet_input+0x114>
        goto free_and_return;
 800d08a:	bf00      	nop
  pbuf_free(p);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7f7 fdc3 	bl	8004c18 <pbuf_free>
  return ERR_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3718      	adds	r7, #24
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	0800fe8c 	.word	0x0800fe8c

0800d0a0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d0ae:	8c3b      	ldrh	r3, [r7, #32]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f6 fc84 	bl	80039be <lwip_htons>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d0ba:	210e      	movs	r1, #14
 800d0bc:	68b8      	ldr	r0, [r7, #8]
 800d0be:	f7f7 fd87 	bl	8004bd0 <pbuf_header>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d125      	bne.n	800d114 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	8afa      	ldrh	r2, [r7, #22]
 800d0d2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	2206      	movs	r2, #6
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 f85b 	bl	800d196 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	3306      	adds	r3, #6
 800d0e4:	2206      	movs	r2, #6
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 f854 	bl	800d196 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d0f4:	2b06      	cmp	r3, #6
 800d0f6:	d006      	beq.n	800d106 <ethernet_output+0x66>
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <ethernet_output+0x84>)
 800d0fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d0fe:	490a      	ldr	r1, [pc, #40]	; (800d128 <ethernet_output+0x88>)
 800d100:	480a      	ldr	r0, [pc, #40]	; (800d12c <ethernet_output+0x8c>)
 800d102:	f000 f85b 	bl	800d1bc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	4798      	blx	r3
 800d110:	4603      	mov	r3, r0
 800d112:	e002      	b.n	800d11a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d114:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d116:	f06f 0301 	mvn.w	r3, #1
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3718      	adds	r7, #24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	0800fcf4 	.word	0x0800fcf4
 800d128:	0800fd2c 	.word	0x0800fd2c
 800d12c:	0800fd60 	.word	0x0800fd60

0800d130 <__libc_init_array>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	4e0d      	ldr	r6, [pc, #52]	; (800d168 <__libc_init_array+0x38>)
 800d134:	4c0d      	ldr	r4, [pc, #52]	; (800d16c <__libc_init_array+0x3c>)
 800d136:	1ba4      	subs	r4, r4, r6
 800d138:	10a4      	asrs	r4, r4, #2
 800d13a:	2500      	movs	r5, #0
 800d13c:	42a5      	cmp	r5, r4
 800d13e:	d109      	bne.n	800d154 <__libc_init_array+0x24>
 800d140:	4e0b      	ldr	r6, [pc, #44]	; (800d170 <__libc_init_array+0x40>)
 800d142:	4c0c      	ldr	r4, [pc, #48]	; (800d174 <__libc_init_array+0x44>)
 800d144:	f000 ff1e 	bl	800df84 <_init>
 800d148:	1ba4      	subs	r4, r4, r6
 800d14a:	10a4      	asrs	r4, r4, #2
 800d14c:	2500      	movs	r5, #0
 800d14e:	42a5      	cmp	r5, r4
 800d150:	d105      	bne.n	800d15e <__libc_init_array+0x2e>
 800d152:	bd70      	pop	{r4, r5, r6, pc}
 800d154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d158:	4798      	blx	r3
 800d15a:	3501      	adds	r5, #1
 800d15c:	e7ee      	b.n	800d13c <__libc_init_array+0xc>
 800d15e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d162:	4798      	blx	r3
 800d164:	3501      	adds	r5, #1
 800d166:	e7f2      	b.n	800d14e <__libc_init_array+0x1e>
 800d168:	0800ff3c 	.word	0x0800ff3c
 800d16c:	0800ff3c 	.word	0x0800ff3c
 800d170:	0800ff3c 	.word	0x0800ff3c
 800d174:	0800ff40 	.word	0x0800ff40

0800d178 <memcmp>:
 800d178:	b530      	push	{r4, r5, lr}
 800d17a:	2400      	movs	r4, #0
 800d17c:	42a2      	cmp	r2, r4
 800d17e:	d101      	bne.n	800d184 <memcmp+0xc>
 800d180:	2000      	movs	r0, #0
 800d182:	e007      	b.n	800d194 <memcmp+0x1c>
 800d184:	5d03      	ldrb	r3, [r0, r4]
 800d186:	3401      	adds	r4, #1
 800d188:	190d      	adds	r5, r1, r4
 800d18a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800d18e:	42ab      	cmp	r3, r5
 800d190:	d0f4      	beq.n	800d17c <memcmp+0x4>
 800d192:	1b58      	subs	r0, r3, r5
 800d194:	bd30      	pop	{r4, r5, pc}

0800d196 <memcpy>:
 800d196:	b510      	push	{r4, lr}
 800d198:	1e43      	subs	r3, r0, #1
 800d19a:	440a      	add	r2, r1
 800d19c:	4291      	cmp	r1, r2
 800d19e:	d100      	bne.n	800d1a2 <memcpy+0xc>
 800d1a0:	bd10      	pop	{r4, pc}
 800d1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1aa:	e7f7      	b.n	800d19c <memcpy+0x6>

0800d1ac <memset>:
 800d1ac:	4402      	add	r2, r0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d100      	bne.n	800d1b6 <memset+0xa>
 800d1b4:	4770      	bx	lr
 800d1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ba:	e7f9      	b.n	800d1b0 <memset+0x4>

0800d1bc <iprintf>:
 800d1bc:	b40f      	push	{r0, r1, r2, r3}
 800d1be:	4b0a      	ldr	r3, [pc, #40]	; (800d1e8 <iprintf+0x2c>)
 800d1c0:	b513      	push	{r0, r1, r4, lr}
 800d1c2:	681c      	ldr	r4, [r3, #0]
 800d1c4:	b124      	cbz	r4, 800d1d0 <iprintf+0x14>
 800d1c6:	69a3      	ldr	r3, [r4, #24]
 800d1c8:	b913      	cbnz	r3, 800d1d0 <iprintf+0x14>
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 f84e 	bl	800d26c <__sinit>
 800d1d0:	ab05      	add	r3, sp, #20
 800d1d2:	9a04      	ldr	r2, [sp, #16]
 800d1d4:	68a1      	ldr	r1, [r4, #8]
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 f9a3 	bl	800d524 <_vfiprintf_r>
 800d1de:	b002      	add	sp, #8
 800d1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e4:	b004      	add	sp, #16
 800d1e6:	4770      	bx	lr
 800d1e8:	20000010 	.word	0x20000010

0800d1ec <std>:
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	b510      	push	{r4, lr}
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	e9c0 3300 	strd	r3, r3, [r0]
 800d1f6:	6083      	str	r3, [r0, #8]
 800d1f8:	8181      	strh	r1, [r0, #12]
 800d1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d1fc:	81c2      	strh	r2, [r0, #14]
 800d1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d202:	6183      	str	r3, [r0, #24]
 800d204:	4619      	mov	r1, r3
 800d206:	2208      	movs	r2, #8
 800d208:	305c      	adds	r0, #92	; 0x5c
 800d20a:	f7ff ffcf 	bl	800d1ac <memset>
 800d20e:	4b05      	ldr	r3, [pc, #20]	; (800d224 <std+0x38>)
 800d210:	6263      	str	r3, [r4, #36]	; 0x24
 800d212:	4b05      	ldr	r3, [pc, #20]	; (800d228 <std+0x3c>)
 800d214:	62a3      	str	r3, [r4, #40]	; 0x28
 800d216:	4b05      	ldr	r3, [pc, #20]	; (800d22c <std+0x40>)
 800d218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <std+0x44>)
 800d21c:	6224      	str	r4, [r4, #32]
 800d21e:	6323      	str	r3, [r4, #48]	; 0x30
 800d220:	bd10      	pop	{r4, pc}
 800d222:	bf00      	nop
 800d224:	0800da81 	.word	0x0800da81
 800d228:	0800daa3 	.word	0x0800daa3
 800d22c:	0800dadb 	.word	0x0800dadb
 800d230:	0800daff 	.word	0x0800daff

0800d234 <_cleanup_r>:
 800d234:	4901      	ldr	r1, [pc, #4]	; (800d23c <_cleanup_r+0x8>)
 800d236:	f000 b885 	b.w	800d344 <_fwalk_reent>
 800d23a:	bf00      	nop
 800d23c:	0800ddd9 	.word	0x0800ddd9

0800d240 <__sfmoreglue>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	1e4a      	subs	r2, r1, #1
 800d244:	2568      	movs	r5, #104	; 0x68
 800d246:	4355      	muls	r5, r2
 800d248:	460e      	mov	r6, r1
 800d24a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d24e:	f000 f8e5 	bl	800d41c <_malloc_r>
 800d252:	4604      	mov	r4, r0
 800d254:	b140      	cbz	r0, 800d268 <__sfmoreglue+0x28>
 800d256:	2100      	movs	r1, #0
 800d258:	e9c0 1600 	strd	r1, r6, [r0]
 800d25c:	300c      	adds	r0, #12
 800d25e:	60a0      	str	r0, [r4, #8]
 800d260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d264:	f7ff ffa2 	bl	800d1ac <memset>
 800d268:	4620      	mov	r0, r4
 800d26a:	bd70      	pop	{r4, r5, r6, pc}

0800d26c <__sinit>:
 800d26c:	6983      	ldr	r3, [r0, #24]
 800d26e:	b510      	push	{r4, lr}
 800d270:	4604      	mov	r4, r0
 800d272:	bb33      	cbnz	r3, 800d2c2 <__sinit+0x56>
 800d274:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d278:	6503      	str	r3, [r0, #80]	; 0x50
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <__sinit+0x58>)
 800d27c:	4a12      	ldr	r2, [pc, #72]	; (800d2c8 <__sinit+0x5c>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6282      	str	r2, [r0, #40]	; 0x28
 800d282:	4298      	cmp	r0, r3
 800d284:	bf04      	itt	eq
 800d286:	2301      	moveq	r3, #1
 800d288:	6183      	streq	r3, [r0, #24]
 800d28a:	f000 f81f 	bl	800d2cc <__sfp>
 800d28e:	6060      	str	r0, [r4, #4]
 800d290:	4620      	mov	r0, r4
 800d292:	f000 f81b 	bl	800d2cc <__sfp>
 800d296:	60a0      	str	r0, [r4, #8]
 800d298:	4620      	mov	r0, r4
 800d29a:	f000 f817 	bl	800d2cc <__sfp>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	60e0      	str	r0, [r4, #12]
 800d2a2:	2104      	movs	r1, #4
 800d2a4:	6860      	ldr	r0, [r4, #4]
 800d2a6:	f7ff ffa1 	bl	800d1ec <std>
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2109      	movs	r1, #9
 800d2ae:	68a0      	ldr	r0, [r4, #8]
 800d2b0:	f7ff ff9c 	bl	800d1ec <std>
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	2112      	movs	r1, #18
 800d2b8:	68e0      	ldr	r0, [r4, #12]
 800d2ba:	f7ff ff97 	bl	800d1ec <std>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	61a3      	str	r3, [r4, #24]
 800d2c2:	bd10      	pop	{r4, pc}
 800d2c4:	0800fe9c 	.word	0x0800fe9c
 800d2c8:	0800d235 	.word	0x0800d235

0800d2cc <__sfp>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	4b1b      	ldr	r3, [pc, #108]	; (800d33c <__sfp+0x70>)
 800d2d0:	681e      	ldr	r6, [r3, #0]
 800d2d2:	69b3      	ldr	r3, [r6, #24]
 800d2d4:	4607      	mov	r7, r0
 800d2d6:	b913      	cbnz	r3, 800d2de <__sfp+0x12>
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7ff ffc7 	bl	800d26c <__sinit>
 800d2de:	3648      	adds	r6, #72	; 0x48
 800d2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	d503      	bpl.n	800d2f0 <__sfp+0x24>
 800d2e8:	6833      	ldr	r3, [r6, #0]
 800d2ea:	b133      	cbz	r3, 800d2fa <__sfp+0x2e>
 800d2ec:	6836      	ldr	r6, [r6, #0]
 800d2ee:	e7f7      	b.n	800d2e0 <__sfp+0x14>
 800d2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2f4:	b16d      	cbz	r5, 800d312 <__sfp+0x46>
 800d2f6:	3468      	adds	r4, #104	; 0x68
 800d2f8:	e7f4      	b.n	800d2e4 <__sfp+0x18>
 800d2fa:	2104      	movs	r1, #4
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f7ff ff9f 	bl	800d240 <__sfmoreglue>
 800d302:	6030      	str	r0, [r6, #0]
 800d304:	2800      	cmp	r0, #0
 800d306:	d1f1      	bne.n	800d2ec <__sfp+0x20>
 800d308:	230c      	movs	r3, #12
 800d30a:	603b      	str	r3, [r7, #0]
 800d30c:	4604      	mov	r4, r0
 800d30e:	4620      	mov	r0, r4
 800d310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d312:	4b0b      	ldr	r3, [pc, #44]	; (800d340 <__sfp+0x74>)
 800d314:	6665      	str	r5, [r4, #100]	; 0x64
 800d316:	e9c4 5500 	strd	r5, r5, [r4]
 800d31a:	60a5      	str	r5, [r4, #8]
 800d31c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d320:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d324:	2208      	movs	r2, #8
 800d326:	4629      	mov	r1, r5
 800d328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d32c:	f7ff ff3e 	bl	800d1ac <memset>
 800d330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d338:	e7e9      	b.n	800d30e <__sfp+0x42>
 800d33a:	bf00      	nop
 800d33c:	0800fe9c 	.word	0x0800fe9c
 800d340:	ffff0001 	.word	0xffff0001

0800d344 <_fwalk_reent>:
 800d344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d348:	4680      	mov	r8, r0
 800d34a:	4689      	mov	r9, r1
 800d34c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d350:	2600      	movs	r6, #0
 800d352:	b914      	cbnz	r4, 800d35a <_fwalk_reent+0x16>
 800d354:	4630      	mov	r0, r6
 800d356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d35a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d35e:	3f01      	subs	r7, #1
 800d360:	d501      	bpl.n	800d366 <_fwalk_reent+0x22>
 800d362:	6824      	ldr	r4, [r4, #0]
 800d364:	e7f5      	b.n	800d352 <_fwalk_reent+0xe>
 800d366:	89ab      	ldrh	r3, [r5, #12]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d907      	bls.n	800d37c <_fwalk_reent+0x38>
 800d36c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d370:	3301      	adds	r3, #1
 800d372:	d003      	beq.n	800d37c <_fwalk_reent+0x38>
 800d374:	4629      	mov	r1, r5
 800d376:	4640      	mov	r0, r8
 800d378:	47c8      	blx	r9
 800d37a:	4306      	orrs	r6, r0
 800d37c:	3568      	adds	r5, #104	; 0x68
 800d37e:	e7ee      	b.n	800d35e <_fwalk_reent+0x1a>

0800d380 <_free_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	4605      	mov	r5, r0
 800d384:	2900      	cmp	r1, #0
 800d386:	d045      	beq.n	800d414 <_free_r+0x94>
 800d388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d38c:	1f0c      	subs	r4, r1, #4
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bfb8      	it	lt
 800d392:	18e4      	addlt	r4, r4, r3
 800d394:	f000 fdc0 	bl	800df18 <__malloc_lock>
 800d398:	4a1f      	ldr	r2, [pc, #124]	; (800d418 <_free_r+0x98>)
 800d39a:	6813      	ldr	r3, [r2, #0]
 800d39c:	4610      	mov	r0, r2
 800d39e:	b933      	cbnz	r3, 800d3ae <_free_r+0x2e>
 800d3a0:	6063      	str	r3, [r4, #4]
 800d3a2:	6014      	str	r4, [r2, #0]
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3aa:	f000 bdb6 	b.w	800df1a <__malloc_unlock>
 800d3ae:	42a3      	cmp	r3, r4
 800d3b0:	d90c      	bls.n	800d3cc <_free_r+0x4c>
 800d3b2:	6821      	ldr	r1, [r4, #0]
 800d3b4:	1862      	adds	r2, r4, r1
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	bf04      	itt	eq
 800d3ba:	681a      	ldreq	r2, [r3, #0]
 800d3bc:	685b      	ldreq	r3, [r3, #4]
 800d3be:	6063      	str	r3, [r4, #4]
 800d3c0:	bf04      	itt	eq
 800d3c2:	1852      	addeq	r2, r2, r1
 800d3c4:	6022      	streq	r2, [r4, #0]
 800d3c6:	6004      	str	r4, [r0, #0]
 800d3c8:	e7ec      	b.n	800d3a4 <_free_r+0x24>
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	b10a      	cbz	r2, 800d3d4 <_free_r+0x54>
 800d3d0:	42a2      	cmp	r2, r4
 800d3d2:	d9fa      	bls.n	800d3ca <_free_r+0x4a>
 800d3d4:	6819      	ldr	r1, [r3, #0]
 800d3d6:	1858      	adds	r0, r3, r1
 800d3d8:	42a0      	cmp	r0, r4
 800d3da:	d10b      	bne.n	800d3f4 <_free_r+0x74>
 800d3dc:	6820      	ldr	r0, [r4, #0]
 800d3de:	4401      	add	r1, r0
 800d3e0:	1858      	adds	r0, r3, r1
 800d3e2:	4282      	cmp	r2, r0
 800d3e4:	6019      	str	r1, [r3, #0]
 800d3e6:	d1dd      	bne.n	800d3a4 <_free_r+0x24>
 800d3e8:	6810      	ldr	r0, [r2, #0]
 800d3ea:	6852      	ldr	r2, [r2, #4]
 800d3ec:	605a      	str	r2, [r3, #4]
 800d3ee:	4401      	add	r1, r0
 800d3f0:	6019      	str	r1, [r3, #0]
 800d3f2:	e7d7      	b.n	800d3a4 <_free_r+0x24>
 800d3f4:	d902      	bls.n	800d3fc <_free_r+0x7c>
 800d3f6:	230c      	movs	r3, #12
 800d3f8:	602b      	str	r3, [r5, #0]
 800d3fa:	e7d3      	b.n	800d3a4 <_free_r+0x24>
 800d3fc:	6820      	ldr	r0, [r4, #0]
 800d3fe:	1821      	adds	r1, r4, r0
 800d400:	428a      	cmp	r2, r1
 800d402:	bf04      	itt	eq
 800d404:	6811      	ldreq	r1, [r2, #0]
 800d406:	6852      	ldreq	r2, [r2, #4]
 800d408:	6062      	str	r2, [r4, #4]
 800d40a:	bf04      	itt	eq
 800d40c:	1809      	addeq	r1, r1, r0
 800d40e:	6021      	streq	r1, [r4, #0]
 800d410:	605c      	str	r4, [r3, #4]
 800d412:	e7c7      	b.n	800d3a4 <_free_r+0x24>
 800d414:	bd38      	pop	{r3, r4, r5, pc}
 800d416:	bf00      	nop
 800d418:	20000218 	.word	0x20000218

0800d41c <_malloc_r>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	1ccd      	adds	r5, r1, #3
 800d420:	f025 0503 	bic.w	r5, r5, #3
 800d424:	3508      	adds	r5, #8
 800d426:	2d0c      	cmp	r5, #12
 800d428:	bf38      	it	cc
 800d42a:	250c      	movcc	r5, #12
 800d42c:	2d00      	cmp	r5, #0
 800d42e:	4606      	mov	r6, r0
 800d430:	db01      	blt.n	800d436 <_malloc_r+0x1a>
 800d432:	42a9      	cmp	r1, r5
 800d434:	d903      	bls.n	800d43e <_malloc_r+0x22>
 800d436:	230c      	movs	r3, #12
 800d438:	6033      	str	r3, [r6, #0]
 800d43a:	2000      	movs	r0, #0
 800d43c:	bd70      	pop	{r4, r5, r6, pc}
 800d43e:	f000 fd6b 	bl	800df18 <__malloc_lock>
 800d442:	4a21      	ldr	r2, [pc, #132]	; (800d4c8 <_malloc_r+0xac>)
 800d444:	6814      	ldr	r4, [r2, #0]
 800d446:	4621      	mov	r1, r4
 800d448:	b991      	cbnz	r1, 800d470 <_malloc_r+0x54>
 800d44a:	4c20      	ldr	r4, [pc, #128]	; (800d4cc <_malloc_r+0xb0>)
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	b91b      	cbnz	r3, 800d458 <_malloc_r+0x3c>
 800d450:	4630      	mov	r0, r6
 800d452:	f000 fb05 	bl	800da60 <_sbrk_r>
 800d456:	6020      	str	r0, [r4, #0]
 800d458:	4629      	mov	r1, r5
 800d45a:	4630      	mov	r0, r6
 800d45c:	f000 fb00 	bl	800da60 <_sbrk_r>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d124      	bne.n	800d4ae <_malloc_r+0x92>
 800d464:	230c      	movs	r3, #12
 800d466:	6033      	str	r3, [r6, #0]
 800d468:	4630      	mov	r0, r6
 800d46a:	f000 fd56 	bl	800df1a <__malloc_unlock>
 800d46e:	e7e4      	b.n	800d43a <_malloc_r+0x1e>
 800d470:	680b      	ldr	r3, [r1, #0]
 800d472:	1b5b      	subs	r3, r3, r5
 800d474:	d418      	bmi.n	800d4a8 <_malloc_r+0x8c>
 800d476:	2b0b      	cmp	r3, #11
 800d478:	d90f      	bls.n	800d49a <_malloc_r+0x7e>
 800d47a:	600b      	str	r3, [r1, #0]
 800d47c:	50cd      	str	r5, [r1, r3]
 800d47e:	18cc      	adds	r4, r1, r3
 800d480:	4630      	mov	r0, r6
 800d482:	f000 fd4a 	bl	800df1a <__malloc_unlock>
 800d486:	f104 000b 	add.w	r0, r4, #11
 800d48a:	1d23      	adds	r3, r4, #4
 800d48c:	f020 0007 	bic.w	r0, r0, #7
 800d490:	1ac3      	subs	r3, r0, r3
 800d492:	d0d3      	beq.n	800d43c <_malloc_r+0x20>
 800d494:	425a      	negs	r2, r3
 800d496:	50e2      	str	r2, [r4, r3]
 800d498:	e7d0      	b.n	800d43c <_malloc_r+0x20>
 800d49a:	428c      	cmp	r4, r1
 800d49c:	684b      	ldr	r3, [r1, #4]
 800d49e:	bf16      	itet	ne
 800d4a0:	6063      	strne	r3, [r4, #4]
 800d4a2:	6013      	streq	r3, [r2, #0]
 800d4a4:	460c      	movne	r4, r1
 800d4a6:	e7eb      	b.n	800d480 <_malloc_r+0x64>
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	6849      	ldr	r1, [r1, #4]
 800d4ac:	e7cc      	b.n	800d448 <_malloc_r+0x2c>
 800d4ae:	1cc4      	adds	r4, r0, #3
 800d4b0:	f024 0403 	bic.w	r4, r4, #3
 800d4b4:	42a0      	cmp	r0, r4
 800d4b6:	d005      	beq.n	800d4c4 <_malloc_r+0xa8>
 800d4b8:	1a21      	subs	r1, r4, r0
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f000 fad0 	bl	800da60 <_sbrk_r>
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	d0cf      	beq.n	800d464 <_malloc_r+0x48>
 800d4c4:	6025      	str	r5, [r4, #0]
 800d4c6:	e7db      	b.n	800d480 <_malloc_r+0x64>
 800d4c8:	20000218 	.word	0x20000218
 800d4cc:	2000021c 	.word	0x2000021c

0800d4d0 <__sfputc_r>:
 800d4d0:	6893      	ldr	r3, [r2, #8]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	b410      	push	{r4}
 800d4d8:	6093      	str	r3, [r2, #8]
 800d4da:	da08      	bge.n	800d4ee <__sfputc_r+0x1e>
 800d4dc:	6994      	ldr	r4, [r2, #24]
 800d4de:	42a3      	cmp	r3, r4
 800d4e0:	db01      	blt.n	800d4e6 <__sfputc_r+0x16>
 800d4e2:	290a      	cmp	r1, #10
 800d4e4:	d103      	bne.n	800d4ee <__sfputc_r+0x1e>
 800d4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ea:	f000 bb0d 	b.w	800db08 <__swbuf_r>
 800d4ee:	6813      	ldr	r3, [r2, #0]
 800d4f0:	1c58      	adds	r0, r3, #1
 800d4f2:	6010      	str	r0, [r2, #0]
 800d4f4:	7019      	strb	r1, [r3, #0]
 800d4f6:	4608      	mov	r0, r1
 800d4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <__sfputs_r>:
 800d4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d500:	4606      	mov	r6, r0
 800d502:	460f      	mov	r7, r1
 800d504:	4614      	mov	r4, r2
 800d506:	18d5      	adds	r5, r2, r3
 800d508:	42ac      	cmp	r4, r5
 800d50a:	d101      	bne.n	800d510 <__sfputs_r+0x12>
 800d50c:	2000      	movs	r0, #0
 800d50e:	e007      	b.n	800d520 <__sfputs_r+0x22>
 800d510:	463a      	mov	r2, r7
 800d512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d516:	4630      	mov	r0, r6
 800d518:	f7ff ffda 	bl	800d4d0 <__sfputc_r>
 800d51c:	1c43      	adds	r3, r0, #1
 800d51e:	d1f3      	bne.n	800d508 <__sfputs_r+0xa>
 800d520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d524 <_vfiprintf_r>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	460c      	mov	r4, r1
 800d52a:	b09d      	sub	sp, #116	; 0x74
 800d52c:	4617      	mov	r7, r2
 800d52e:	461d      	mov	r5, r3
 800d530:	4606      	mov	r6, r0
 800d532:	b118      	cbz	r0, 800d53c <_vfiprintf_r+0x18>
 800d534:	6983      	ldr	r3, [r0, #24]
 800d536:	b90b      	cbnz	r3, 800d53c <_vfiprintf_r+0x18>
 800d538:	f7ff fe98 	bl	800d26c <__sinit>
 800d53c:	4b7c      	ldr	r3, [pc, #496]	; (800d730 <_vfiprintf_r+0x20c>)
 800d53e:	429c      	cmp	r4, r3
 800d540:	d158      	bne.n	800d5f4 <_vfiprintf_r+0xd0>
 800d542:	6874      	ldr	r4, [r6, #4]
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	0718      	lsls	r0, r3, #28
 800d548:	d55e      	bpl.n	800d608 <_vfiprintf_r+0xe4>
 800d54a:	6923      	ldr	r3, [r4, #16]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d05b      	beq.n	800d608 <_vfiprintf_r+0xe4>
 800d550:	2300      	movs	r3, #0
 800d552:	9309      	str	r3, [sp, #36]	; 0x24
 800d554:	2320      	movs	r3, #32
 800d556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d55a:	2330      	movs	r3, #48	; 0x30
 800d55c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d560:	9503      	str	r5, [sp, #12]
 800d562:	f04f 0b01 	mov.w	fp, #1
 800d566:	46b8      	mov	r8, r7
 800d568:	4645      	mov	r5, r8
 800d56a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d56e:	b10b      	cbz	r3, 800d574 <_vfiprintf_r+0x50>
 800d570:	2b25      	cmp	r3, #37	; 0x25
 800d572:	d154      	bne.n	800d61e <_vfiprintf_r+0xfa>
 800d574:	ebb8 0a07 	subs.w	sl, r8, r7
 800d578:	d00b      	beq.n	800d592 <_vfiprintf_r+0x6e>
 800d57a:	4653      	mov	r3, sl
 800d57c:	463a      	mov	r2, r7
 800d57e:	4621      	mov	r1, r4
 800d580:	4630      	mov	r0, r6
 800d582:	f7ff ffbc 	bl	800d4fe <__sfputs_r>
 800d586:	3001      	adds	r0, #1
 800d588:	f000 80c2 	beq.w	800d710 <_vfiprintf_r+0x1ec>
 800d58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58e:	4453      	add	r3, sl
 800d590:	9309      	str	r3, [sp, #36]	; 0x24
 800d592:	f898 3000 	ldrb.w	r3, [r8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 80ba 	beq.w	800d710 <_vfiprintf_r+0x1ec>
 800d59c:	2300      	movs	r3, #0
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5a6:	9304      	str	r3, [sp, #16]
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d5b0:	46a8      	mov	r8, r5
 800d5b2:	2205      	movs	r2, #5
 800d5b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d5b8:	485e      	ldr	r0, [pc, #376]	; (800d734 <_vfiprintf_r+0x210>)
 800d5ba:	f7f2 fe41 	bl	8000240 <memchr>
 800d5be:	9b04      	ldr	r3, [sp, #16]
 800d5c0:	bb78      	cbnz	r0, 800d622 <_vfiprintf_r+0xfe>
 800d5c2:	06d9      	lsls	r1, r3, #27
 800d5c4:	bf44      	itt	mi
 800d5c6:	2220      	movmi	r2, #32
 800d5c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d5cc:	071a      	lsls	r2, r3, #28
 800d5ce:	bf44      	itt	mi
 800d5d0:	222b      	movmi	r2, #43	; 0x2b
 800d5d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d5d6:	782a      	ldrb	r2, [r5, #0]
 800d5d8:	2a2a      	cmp	r2, #42	; 0x2a
 800d5da:	d02a      	beq.n	800d632 <_vfiprintf_r+0x10e>
 800d5dc:	9a07      	ldr	r2, [sp, #28]
 800d5de:	46a8      	mov	r8, r5
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	250a      	movs	r5, #10
 800d5e4:	4641      	mov	r1, r8
 800d5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5ea:	3b30      	subs	r3, #48	; 0x30
 800d5ec:	2b09      	cmp	r3, #9
 800d5ee:	d969      	bls.n	800d6c4 <_vfiprintf_r+0x1a0>
 800d5f0:	b360      	cbz	r0, 800d64c <_vfiprintf_r+0x128>
 800d5f2:	e024      	b.n	800d63e <_vfiprintf_r+0x11a>
 800d5f4:	4b50      	ldr	r3, [pc, #320]	; (800d738 <_vfiprintf_r+0x214>)
 800d5f6:	429c      	cmp	r4, r3
 800d5f8:	d101      	bne.n	800d5fe <_vfiprintf_r+0xda>
 800d5fa:	68b4      	ldr	r4, [r6, #8]
 800d5fc:	e7a2      	b.n	800d544 <_vfiprintf_r+0x20>
 800d5fe:	4b4f      	ldr	r3, [pc, #316]	; (800d73c <_vfiprintf_r+0x218>)
 800d600:	429c      	cmp	r4, r3
 800d602:	bf08      	it	eq
 800d604:	68f4      	ldreq	r4, [r6, #12]
 800d606:	e79d      	b.n	800d544 <_vfiprintf_r+0x20>
 800d608:	4621      	mov	r1, r4
 800d60a:	4630      	mov	r0, r6
 800d60c:	f000 fae0 	bl	800dbd0 <__swsetup_r>
 800d610:	2800      	cmp	r0, #0
 800d612:	d09d      	beq.n	800d550 <_vfiprintf_r+0x2c>
 800d614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d618:	b01d      	add	sp, #116	; 0x74
 800d61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61e:	46a8      	mov	r8, r5
 800d620:	e7a2      	b.n	800d568 <_vfiprintf_r+0x44>
 800d622:	4a44      	ldr	r2, [pc, #272]	; (800d734 <_vfiprintf_r+0x210>)
 800d624:	1a80      	subs	r0, r0, r2
 800d626:	fa0b f000 	lsl.w	r0, fp, r0
 800d62a:	4318      	orrs	r0, r3
 800d62c:	9004      	str	r0, [sp, #16]
 800d62e:	4645      	mov	r5, r8
 800d630:	e7be      	b.n	800d5b0 <_vfiprintf_r+0x8c>
 800d632:	9a03      	ldr	r2, [sp, #12]
 800d634:	1d11      	adds	r1, r2, #4
 800d636:	6812      	ldr	r2, [r2, #0]
 800d638:	9103      	str	r1, [sp, #12]
 800d63a:	2a00      	cmp	r2, #0
 800d63c:	db01      	blt.n	800d642 <_vfiprintf_r+0x11e>
 800d63e:	9207      	str	r2, [sp, #28]
 800d640:	e004      	b.n	800d64c <_vfiprintf_r+0x128>
 800d642:	4252      	negs	r2, r2
 800d644:	f043 0302 	orr.w	r3, r3, #2
 800d648:	9207      	str	r2, [sp, #28]
 800d64a:	9304      	str	r3, [sp, #16]
 800d64c:	f898 3000 	ldrb.w	r3, [r8]
 800d650:	2b2e      	cmp	r3, #46	; 0x2e
 800d652:	d10e      	bne.n	800d672 <_vfiprintf_r+0x14e>
 800d654:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d658:	2b2a      	cmp	r3, #42	; 0x2a
 800d65a:	d138      	bne.n	800d6ce <_vfiprintf_r+0x1aa>
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	1d1a      	adds	r2, r3, #4
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	9203      	str	r2, [sp, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	bfb8      	it	lt
 800d668:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d66c:	f108 0802 	add.w	r8, r8, #2
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	4d33      	ldr	r5, [pc, #204]	; (800d740 <_vfiprintf_r+0x21c>)
 800d674:	f898 1000 	ldrb.w	r1, [r8]
 800d678:	2203      	movs	r2, #3
 800d67a:	4628      	mov	r0, r5
 800d67c:	f7f2 fde0 	bl	8000240 <memchr>
 800d680:	b140      	cbz	r0, 800d694 <_vfiprintf_r+0x170>
 800d682:	2340      	movs	r3, #64	; 0x40
 800d684:	1b40      	subs	r0, r0, r5
 800d686:	fa03 f000 	lsl.w	r0, r3, r0
 800d68a:	9b04      	ldr	r3, [sp, #16]
 800d68c:	4303      	orrs	r3, r0
 800d68e:	f108 0801 	add.w	r8, r8, #1
 800d692:	9304      	str	r3, [sp, #16]
 800d694:	f898 1000 	ldrb.w	r1, [r8]
 800d698:	482a      	ldr	r0, [pc, #168]	; (800d744 <_vfiprintf_r+0x220>)
 800d69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d69e:	2206      	movs	r2, #6
 800d6a0:	f108 0701 	add.w	r7, r8, #1
 800d6a4:	f7f2 fdcc 	bl	8000240 <memchr>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d037      	beq.n	800d71c <_vfiprintf_r+0x1f8>
 800d6ac:	4b26      	ldr	r3, [pc, #152]	; (800d748 <_vfiprintf_r+0x224>)
 800d6ae:	bb1b      	cbnz	r3, 800d6f8 <_vfiprintf_r+0x1d4>
 800d6b0:	9b03      	ldr	r3, [sp, #12]
 800d6b2:	3307      	adds	r3, #7
 800d6b4:	f023 0307 	bic.w	r3, r3, #7
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6be:	444b      	add	r3, r9
 800d6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c2:	e750      	b.n	800d566 <_vfiprintf_r+0x42>
 800d6c4:	fb05 3202 	mla	r2, r5, r2, r3
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	4688      	mov	r8, r1
 800d6cc:	e78a      	b.n	800d5e4 <_vfiprintf_r+0xc0>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f108 0801 	add.w	r8, r8, #1
 800d6d4:	9305      	str	r3, [sp, #20]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	250a      	movs	r5, #10
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6e0:	3a30      	subs	r2, #48	; 0x30
 800d6e2:	2a09      	cmp	r2, #9
 800d6e4:	d903      	bls.n	800d6ee <_vfiprintf_r+0x1ca>
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d0c3      	beq.n	800d672 <_vfiprintf_r+0x14e>
 800d6ea:	9105      	str	r1, [sp, #20]
 800d6ec:	e7c1      	b.n	800d672 <_vfiprintf_r+0x14e>
 800d6ee:	fb05 2101 	mla	r1, r5, r1, r2
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	e7f0      	b.n	800d6da <_vfiprintf_r+0x1b6>
 800d6f8:	ab03      	add	r3, sp, #12
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4b13      	ldr	r3, [pc, #76]	; (800d74c <_vfiprintf_r+0x228>)
 800d700:	a904      	add	r1, sp, #16
 800d702:	4630      	mov	r0, r6
 800d704:	f3af 8000 	nop.w
 800d708:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d70c:	4681      	mov	r9, r0
 800d70e:	d1d5      	bne.n	800d6bc <_vfiprintf_r+0x198>
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	065b      	lsls	r3, r3, #25
 800d714:	f53f af7e 	bmi.w	800d614 <_vfiprintf_r+0xf0>
 800d718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d71a:	e77d      	b.n	800d618 <_vfiprintf_r+0xf4>
 800d71c:	ab03      	add	r3, sp, #12
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	4622      	mov	r2, r4
 800d722:	4b0a      	ldr	r3, [pc, #40]	; (800d74c <_vfiprintf_r+0x228>)
 800d724:	a904      	add	r1, sp, #16
 800d726:	4630      	mov	r0, r6
 800d728:	f000 f888 	bl	800d83c <_printf_i>
 800d72c:	e7ec      	b.n	800d708 <_vfiprintf_r+0x1e4>
 800d72e:	bf00      	nop
 800d730:	0800fec0 	.word	0x0800fec0
 800d734:	0800ff00 	.word	0x0800ff00
 800d738:	0800fee0 	.word	0x0800fee0
 800d73c:	0800fea0 	.word	0x0800fea0
 800d740:	0800ff06 	.word	0x0800ff06
 800d744:	0800ff0a 	.word	0x0800ff0a
 800d748:	00000000 	.word	0x00000000
 800d74c:	0800d4ff 	.word	0x0800d4ff

0800d750 <_printf_common>:
 800d750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d754:	4691      	mov	r9, r2
 800d756:	461f      	mov	r7, r3
 800d758:	688a      	ldr	r2, [r1, #8]
 800d75a:	690b      	ldr	r3, [r1, #16]
 800d75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d760:	4293      	cmp	r3, r2
 800d762:	bfb8      	it	lt
 800d764:	4613      	movlt	r3, r2
 800d766:	f8c9 3000 	str.w	r3, [r9]
 800d76a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d76e:	4606      	mov	r6, r0
 800d770:	460c      	mov	r4, r1
 800d772:	b112      	cbz	r2, 800d77a <_printf_common+0x2a>
 800d774:	3301      	adds	r3, #1
 800d776:	f8c9 3000 	str.w	r3, [r9]
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	0699      	lsls	r1, r3, #26
 800d77e:	bf42      	ittt	mi
 800d780:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d784:	3302      	addmi	r3, #2
 800d786:	f8c9 3000 	strmi.w	r3, [r9]
 800d78a:	6825      	ldr	r5, [r4, #0]
 800d78c:	f015 0506 	ands.w	r5, r5, #6
 800d790:	d107      	bne.n	800d7a2 <_printf_common+0x52>
 800d792:	f104 0a19 	add.w	sl, r4, #25
 800d796:	68e3      	ldr	r3, [r4, #12]
 800d798:	f8d9 2000 	ldr.w	r2, [r9]
 800d79c:	1a9b      	subs	r3, r3, r2
 800d79e:	42ab      	cmp	r3, r5
 800d7a0:	dc28      	bgt.n	800d7f4 <_printf_common+0xa4>
 800d7a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d7a6:	6822      	ldr	r2, [r4, #0]
 800d7a8:	3300      	adds	r3, #0
 800d7aa:	bf18      	it	ne
 800d7ac:	2301      	movne	r3, #1
 800d7ae:	0692      	lsls	r2, r2, #26
 800d7b0:	d42d      	bmi.n	800d80e <_printf_common+0xbe>
 800d7b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	47c0      	blx	r8
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d020      	beq.n	800d802 <_printf_common+0xb2>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	68e5      	ldr	r5, [r4, #12]
 800d7c4:	f8d9 2000 	ldr.w	r2, [r9]
 800d7c8:	f003 0306 	and.w	r3, r3, #6
 800d7cc:	2b04      	cmp	r3, #4
 800d7ce:	bf08      	it	eq
 800d7d0:	1aad      	subeq	r5, r5, r2
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	6922      	ldr	r2, [r4, #16]
 800d7d6:	bf0c      	ite	eq
 800d7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7dc:	2500      	movne	r5, #0
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	bfc4      	itt	gt
 800d7e2:	1a9b      	subgt	r3, r3, r2
 800d7e4:	18ed      	addgt	r5, r5, r3
 800d7e6:	f04f 0900 	mov.w	r9, #0
 800d7ea:	341a      	adds	r4, #26
 800d7ec:	454d      	cmp	r5, r9
 800d7ee:	d11a      	bne.n	800d826 <_printf_common+0xd6>
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	e008      	b.n	800d806 <_printf_common+0xb6>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	4652      	mov	r2, sl
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	47c0      	blx	r8
 800d7fe:	3001      	adds	r0, #1
 800d800:	d103      	bne.n	800d80a <_printf_common+0xba>
 800d802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80a:	3501      	adds	r5, #1
 800d80c:	e7c3      	b.n	800d796 <_printf_common+0x46>
 800d80e:	18e1      	adds	r1, r4, r3
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	2030      	movs	r0, #48	; 0x30
 800d814:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d818:	4422      	add	r2, r4
 800d81a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d81e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d822:	3302      	adds	r3, #2
 800d824:	e7c5      	b.n	800d7b2 <_printf_common+0x62>
 800d826:	2301      	movs	r3, #1
 800d828:	4622      	mov	r2, r4
 800d82a:	4639      	mov	r1, r7
 800d82c:	4630      	mov	r0, r6
 800d82e:	47c0      	blx	r8
 800d830:	3001      	adds	r0, #1
 800d832:	d0e6      	beq.n	800d802 <_printf_common+0xb2>
 800d834:	f109 0901 	add.w	r9, r9, #1
 800d838:	e7d8      	b.n	800d7ec <_printf_common+0x9c>
	...

0800d83c <_printf_i>:
 800d83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d840:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d844:	460c      	mov	r4, r1
 800d846:	7e09      	ldrb	r1, [r1, #24]
 800d848:	b085      	sub	sp, #20
 800d84a:	296e      	cmp	r1, #110	; 0x6e
 800d84c:	4617      	mov	r7, r2
 800d84e:	4606      	mov	r6, r0
 800d850:	4698      	mov	r8, r3
 800d852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d854:	f000 80b3 	beq.w	800d9be <_printf_i+0x182>
 800d858:	d822      	bhi.n	800d8a0 <_printf_i+0x64>
 800d85a:	2963      	cmp	r1, #99	; 0x63
 800d85c:	d036      	beq.n	800d8cc <_printf_i+0x90>
 800d85e:	d80a      	bhi.n	800d876 <_printf_i+0x3a>
 800d860:	2900      	cmp	r1, #0
 800d862:	f000 80b9 	beq.w	800d9d8 <_printf_i+0x19c>
 800d866:	2958      	cmp	r1, #88	; 0x58
 800d868:	f000 8083 	beq.w	800d972 <_printf_i+0x136>
 800d86c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d870:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d874:	e032      	b.n	800d8dc <_printf_i+0xa0>
 800d876:	2964      	cmp	r1, #100	; 0x64
 800d878:	d001      	beq.n	800d87e <_printf_i+0x42>
 800d87a:	2969      	cmp	r1, #105	; 0x69
 800d87c:	d1f6      	bne.n	800d86c <_printf_i+0x30>
 800d87e:	6820      	ldr	r0, [r4, #0]
 800d880:	6813      	ldr	r3, [r2, #0]
 800d882:	0605      	lsls	r5, r0, #24
 800d884:	f103 0104 	add.w	r1, r3, #4
 800d888:	d52a      	bpl.n	800d8e0 <_printf_i+0xa4>
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6011      	str	r1, [r2, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	da03      	bge.n	800d89a <_printf_i+0x5e>
 800d892:	222d      	movs	r2, #45	; 0x2d
 800d894:	425b      	negs	r3, r3
 800d896:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d89a:	486f      	ldr	r0, [pc, #444]	; (800da58 <_printf_i+0x21c>)
 800d89c:	220a      	movs	r2, #10
 800d89e:	e039      	b.n	800d914 <_printf_i+0xd8>
 800d8a0:	2973      	cmp	r1, #115	; 0x73
 800d8a2:	f000 809d 	beq.w	800d9e0 <_printf_i+0x1a4>
 800d8a6:	d808      	bhi.n	800d8ba <_printf_i+0x7e>
 800d8a8:	296f      	cmp	r1, #111	; 0x6f
 800d8aa:	d020      	beq.n	800d8ee <_printf_i+0xb2>
 800d8ac:	2970      	cmp	r1, #112	; 0x70
 800d8ae:	d1dd      	bne.n	800d86c <_printf_i+0x30>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	f043 0320 	orr.w	r3, r3, #32
 800d8b6:	6023      	str	r3, [r4, #0]
 800d8b8:	e003      	b.n	800d8c2 <_printf_i+0x86>
 800d8ba:	2975      	cmp	r1, #117	; 0x75
 800d8bc:	d017      	beq.n	800d8ee <_printf_i+0xb2>
 800d8be:	2978      	cmp	r1, #120	; 0x78
 800d8c0:	d1d4      	bne.n	800d86c <_printf_i+0x30>
 800d8c2:	2378      	movs	r3, #120	; 0x78
 800d8c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8c8:	4864      	ldr	r0, [pc, #400]	; (800da5c <_printf_i+0x220>)
 800d8ca:	e055      	b.n	800d978 <_printf_i+0x13c>
 800d8cc:	6813      	ldr	r3, [r2, #0]
 800d8ce:	1d19      	adds	r1, r3, #4
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6011      	str	r1, [r2, #0]
 800d8d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e08c      	b.n	800d9fa <_printf_i+0x1be>
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6011      	str	r1, [r2, #0]
 800d8e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8e8:	bf18      	it	ne
 800d8ea:	b21b      	sxthne	r3, r3
 800d8ec:	e7cf      	b.n	800d88e <_printf_i+0x52>
 800d8ee:	6813      	ldr	r3, [r2, #0]
 800d8f0:	6825      	ldr	r5, [r4, #0]
 800d8f2:	1d18      	adds	r0, r3, #4
 800d8f4:	6010      	str	r0, [r2, #0]
 800d8f6:	0628      	lsls	r0, r5, #24
 800d8f8:	d501      	bpl.n	800d8fe <_printf_i+0xc2>
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	e002      	b.n	800d904 <_printf_i+0xc8>
 800d8fe:	0668      	lsls	r0, r5, #25
 800d900:	d5fb      	bpl.n	800d8fa <_printf_i+0xbe>
 800d902:	881b      	ldrh	r3, [r3, #0]
 800d904:	4854      	ldr	r0, [pc, #336]	; (800da58 <_printf_i+0x21c>)
 800d906:	296f      	cmp	r1, #111	; 0x6f
 800d908:	bf14      	ite	ne
 800d90a:	220a      	movne	r2, #10
 800d90c:	2208      	moveq	r2, #8
 800d90e:	2100      	movs	r1, #0
 800d910:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d914:	6865      	ldr	r5, [r4, #4]
 800d916:	60a5      	str	r5, [r4, #8]
 800d918:	2d00      	cmp	r5, #0
 800d91a:	f2c0 8095 	blt.w	800da48 <_printf_i+0x20c>
 800d91e:	6821      	ldr	r1, [r4, #0]
 800d920:	f021 0104 	bic.w	r1, r1, #4
 800d924:	6021      	str	r1, [r4, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d13d      	bne.n	800d9a6 <_printf_i+0x16a>
 800d92a:	2d00      	cmp	r5, #0
 800d92c:	f040 808e 	bne.w	800da4c <_printf_i+0x210>
 800d930:	4665      	mov	r5, ip
 800d932:	2a08      	cmp	r2, #8
 800d934:	d10b      	bne.n	800d94e <_printf_i+0x112>
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	07db      	lsls	r3, r3, #31
 800d93a:	d508      	bpl.n	800d94e <_printf_i+0x112>
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	6862      	ldr	r2, [r4, #4]
 800d940:	429a      	cmp	r2, r3
 800d942:	bfde      	ittt	le
 800d944:	2330      	movle	r3, #48	; 0x30
 800d946:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d94a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d94e:	ebac 0305 	sub.w	r3, ip, r5
 800d952:	6123      	str	r3, [r4, #16]
 800d954:	f8cd 8000 	str.w	r8, [sp]
 800d958:	463b      	mov	r3, r7
 800d95a:	aa03      	add	r2, sp, #12
 800d95c:	4621      	mov	r1, r4
 800d95e:	4630      	mov	r0, r6
 800d960:	f7ff fef6 	bl	800d750 <_printf_common>
 800d964:	3001      	adds	r0, #1
 800d966:	d14d      	bne.n	800da04 <_printf_i+0x1c8>
 800d968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d96c:	b005      	add	sp, #20
 800d96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d972:	4839      	ldr	r0, [pc, #228]	; (800da58 <_printf_i+0x21c>)
 800d974:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d978:	6813      	ldr	r3, [r2, #0]
 800d97a:	6821      	ldr	r1, [r4, #0]
 800d97c:	1d1d      	adds	r5, r3, #4
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6015      	str	r5, [r2, #0]
 800d982:	060a      	lsls	r2, r1, #24
 800d984:	d50b      	bpl.n	800d99e <_printf_i+0x162>
 800d986:	07ca      	lsls	r2, r1, #31
 800d988:	bf44      	itt	mi
 800d98a:	f041 0120 	orrmi.w	r1, r1, #32
 800d98e:	6021      	strmi	r1, [r4, #0]
 800d990:	b91b      	cbnz	r3, 800d99a <_printf_i+0x15e>
 800d992:	6822      	ldr	r2, [r4, #0]
 800d994:	f022 0220 	bic.w	r2, r2, #32
 800d998:	6022      	str	r2, [r4, #0]
 800d99a:	2210      	movs	r2, #16
 800d99c:	e7b7      	b.n	800d90e <_printf_i+0xd2>
 800d99e:	064d      	lsls	r5, r1, #25
 800d9a0:	bf48      	it	mi
 800d9a2:	b29b      	uxthmi	r3, r3
 800d9a4:	e7ef      	b.n	800d986 <_printf_i+0x14a>
 800d9a6:	4665      	mov	r5, ip
 800d9a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9ac:	fb02 3311 	mls	r3, r2, r1, r3
 800d9b0:	5cc3      	ldrb	r3, [r0, r3]
 800d9b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	2900      	cmp	r1, #0
 800d9ba:	d1f5      	bne.n	800d9a8 <_printf_i+0x16c>
 800d9bc:	e7b9      	b.n	800d932 <_printf_i+0xf6>
 800d9be:	6813      	ldr	r3, [r2, #0]
 800d9c0:	6825      	ldr	r5, [r4, #0]
 800d9c2:	6961      	ldr	r1, [r4, #20]
 800d9c4:	1d18      	adds	r0, r3, #4
 800d9c6:	6010      	str	r0, [r2, #0]
 800d9c8:	0628      	lsls	r0, r5, #24
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	d501      	bpl.n	800d9d2 <_printf_i+0x196>
 800d9ce:	6019      	str	r1, [r3, #0]
 800d9d0:	e002      	b.n	800d9d8 <_printf_i+0x19c>
 800d9d2:	066a      	lsls	r2, r5, #25
 800d9d4:	d5fb      	bpl.n	800d9ce <_printf_i+0x192>
 800d9d6:	8019      	strh	r1, [r3, #0]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	6123      	str	r3, [r4, #16]
 800d9dc:	4665      	mov	r5, ip
 800d9de:	e7b9      	b.n	800d954 <_printf_i+0x118>
 800d9e0:	6813      	ldr	r3, [r2, #0]
 800d9e2:	1d19      	adds	r1, r3, #4
 800d9e4:	6011      	str	r1, [r2, #0]
 800d9e6:	681d      	ldr	r5, [r3, #0]
 800d9e8:	6862      	ldr	r2, [r4, #4]
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f7f2 fc27 	bl	8000240 <memchr>
 800d9f2:	b108      	cbz	r0, 800d9f8 <_printf_i+0x1bc>
 800d9f4:	1b40      	subs	r0, r0, r5
 800d9f6:	6060      	str	r0, [r4, #4]
 800d9f8:	6863      	ldr	r3, [r4, #4]
 800d9fa:	6123      	str	r3, [r4, #16]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da02:	e7a7      	b.n	800d954 <_printf_i+0x118>
 800da04:	6923      	ldr	r3, [r4, #16]
 800da06:	462a      	mov	r2, r5
 800da08:	4639      	mov	r1, r7
 800da0a:	4630      	mov	r0, r6
 800da0c:	47c0      	blx	r8
 800da0e:	3001      	adds	r0, #1
 800da10:	d0aa      	beq.n	800d968 <_printf_i+0x12c>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	079b      	lsls	r3, r3, #30
 800da16:	d413      	bmi.n	800da40 <_printf_i+0x204>
 800da18:	68e0      	ldr	r0, [r4, #12]
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	4298      	cmp	r0, r3
 800da1e:	bfb8      	it	lt
 800da20:	4618      	movlt	r0, r3
 800da22:	e7a3      	b.n	800d96c <_printf_i+0x130>
 800da24:	2301      	movs	r3, #1
 800da26:	464a      	mov	r2, r9
 800da28:	4639      	mov	r1, r7
 800da2a:	4630      	mov	r0, r6
 800da2c:	47c0      	blx	r8
 800da2e:	3001      	adds	r0, #1
 800da30:	d09a      	beq.n	800d968 <_printf_i+0x12c>
 800da32:	3501      	adds	r5, #1
 800da34:	68e3      	ldr	r3, [r4, #12]
 800da36:	9a03      	ldr	r2, [sp, #12]
 800da38:	1a9b      	subs	r3, r3, r2
 800da3a:	42ab      	cmp	r3, r5
 800da3c:	dcf2      	bgt.n	800da24 <_printf_i+0x1e8>
 800da3e:	e7eb      	b.n	800da18 <_printf_i+0x1dc>
 800da40:	2500      	movs	r5, #0
 800da42:	f104 0919 	add.w	r9, r4, #25
 800da46:	e7f5      	b.n	800da34 <_printf_i+0x1f8>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1ac      	bne.n	800d9a6 <_printf_i+0x16a>
 800da4c:	7803      	ldrb	r3, [r0, #0]
 800da4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da56:	e76c      	b.n	800d932 <_printf_i+0xf6>
 800da58:	0800ff11 	.word	0x0800ff11
 800da5c:	0800ff22 	.word	0x0800ff22

0800da60 <_sbrk_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4c06      	ldr	r4, [pc, #24]	; (800da7c <_sbrk_r+0x1c>)
 800da64:	2300      	movs	r3, #0
 800da66:	4605      	mov	r5, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	6023      	str	r3, [r4, #0]
 800da6c:	f7f3 fb42 	bl	80010f4 <_sbrk>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_sbrk_r+0x1a>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	b103      	cbz	r3, 800da7a <_sbrk_r+0x1a>
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	20006b34 	.word	0x20006b34

0800da80 <__sread>:
 800da80:	b510      	push	{r4, lr}
 800da82:	460c      	mov	r4, r1
 800da84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da88:	f000 fa48 	bl	800df1c <_read_r>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	bfab      	itete	ge
 800da90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da92:	89a3      	ldrhlt	r3, [r4, #12]
 800da94:	181b      	addge	r3, r3, r0
 800da96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da9a:	bfac      	ite	ge
 800da9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800da9e:	81a3      	strhlt	r3, [r4, #12]
 800daa0:	bd10      	pop	{r4, pc}

0800daa2 <__swrite>:
 800daa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa6:	461f      	mov	r7, r3
 800daa8:	898b      	ldrh	r3, [r1, #12]
 800daaa:	05db      	lsls	r3, r3, #23
 800daac:	4605      	mov	r5, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	4616      	mov	r6, r2
 800dab2:	d505      	bpl.n	800dac0 <__swrite+0x1e>
 800dab4:	2302      	movs	r3, #2
 800dab6:	2200      	movs	r2, #0
 800dab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dabc:	f000 f9b6 	bl	800de2c <_lseek_r>
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	4632      	mov	r2, r6
 800dace:	463b      	mov	r3, r7
 800dad0:	4628      	mov	r0, r5
 800dad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad6:	f000 b869 	b.w	800dbac <_write_r>

0800dada <__sseek>:
 800dada:	b510      	push	{r4, lr}
 800dadc:	460c      	mov	r4, r1
 800dade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae2:	f000 f9a3 	bl	800de2c <_lseek_r>
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	bf15      	itete	ne
 800daec:	6560      	strne	r0, [r4, #84]	; 0x54
 800daee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800daf6:	81a3      	strheq	r3, [r4, #12]
 800daf8:	bf18      	it	ne
 800dafa:	81a3      	strhne	r3, [r4, #12]
 800dafc:	bd10      	pop	{r4, pc}

0800dafe <__sclose>:
 800dafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db02:	f000 b8d3 	b.w	800dcac <_close_r>
	...

0800db08 <__swbuf_r>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	460e      	mov	r6, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	4605      	mov	r5, r0
 800db10:	b118      	cbz	r0, 800db1a <__swbuf_r+0x12>
 800db12:	6983      	ldr	r3, [r0, #24]
 800db14:	b90b      	cbnz	r3, 800db1a <__swbuf_r+0x12>
 800db16:	f7ff fba9 	bl	800d26c <__sinit>
 800db1a:	4b21      	ldr	r3, [pc, #132]	; (800dba0 <__swbuf_r+0x98>)
 800db1c:	429c      	cmp	r4, r3
 800db1e:	d12a      	bne.n	800db76 <__swbuf_r+0x6e>
 800db20:	686c      	ldr	r4, [r5, #4]
 800db22:	69a3      	ldr	r3, [r4, #24]
 800db24:	60a3      	str	r3, [r4, #8]
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	071a      	lsls	r2, r3, #28
 800db2a:	d52e      	bpl.n	800db8a <__swbuf_r+0x82>
 800db2c:	6923      	ldr	r3, [r4, #16]
 800db2e:	b363      	cbz	r3, 800db8a <__swbuf_r+0x82>
 800db30:	6923      	ldr	r3, [r4, #16]
 800db32:	6820      	ldr	r0, [r4, #0]
 800db34:	1ac0      	subs	r0, r0, r3
 800db36:	6963      	ldr	r3, [r4, #20]
 800db38:	b2f6      	uxtb	r6, r6
 800db3a:	4283      	cmp	r3, r0
 800db3c:	4637      	mov	r7, r6
 800db3e:	dc04      	bgt.n	800db4a <__swbuf_r+0x42>
 800db40:	4621      	mov	r1, r4
 800db42:	4628      	mov	r0, r5
 800db44:	f000 f948 	bl	800ddd8 <_fflush_r>
 800db48:	bb28      	cbnz	r0, 800db96 <__swbuf_r+0x8e>
 800db4a:	68a3      	ldr	r3, [r4, #8]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	60a3      	str	r3, [r4, #8]
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	6022      	str	r2, [r4, #0]
 800db56:	701e      	strb	r6, [r3, #0]
 800db58:	6963      	ldr	r3, [r4, #20]
 800db5a:	3001      	adds	r0, #1
 800db5c:	4283      	cmp	r3, r0
 800db5e:	d004      	beq.n	800db6a <__swbuf_r+0x62>
 800db60:	89a3      	ldrh	r3, [r4, #12]
 800db62:	07db      	lsls	r3, r3, #31
 800db64:	d519      	bpl.n	800db9a <__swbuf_r+0x92>
 800db66:	2e0a      	cmp	r6, #10
 800db68:	d117      	bne.n	800db9a <__swbuf_r+0x92>
 800db6a:	4621      	mov	r1, r4
 800db6c:	4628      	mov	r0, r5
 800db6e:	f000 f933 	bl	800ddd8 <_fflush_r>
 800db72:	b190      	cbz	r0, 800db9a <__swbuf_r+0x92>
 800db74:	e00f      	b.n	800db96 <__swbuf_r+0x8e>
 800db76:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <__swbuf_r+0x9c>)
 800db78:	429c      	cmp	r4, r3
 800db7a:	d101      	bne.n	800db80 <__swbuf_r+0x78>
 800db7c:	68ac      	ldr	r4, [r5, #8]
 800db7e:	e7d0      	b.n	800db22 <__swbuf_r+0x1a>
 800db80:	4b09      	ldr	r3, [pc, #36]	; (800dba8 <__swbuf_r+0xa0>)
 800db82:	429c      	cmp	r4, r3
 800db84:	bf08      	it	eq
 800db86:	68ec      	ldreq	r4, [r5, #12]
 800db88:	e7cb      	b.n	800db22 <__swbuf_r+0x1a>
 800db8a:	4621      	mov	r1, r4
 800db8c:	4628      	mov	r0, r5
 800db8e:	f000 f81f 	bl	800dbd0 <__swsetup_r>
 800db92:	2800      	cmp	r0, #0
 800db94:	d0cc      	beq.n	800db30 <__swbuf_r+0x28>
 800db96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800db9a:	4638      	mov	r0, r7
 800db9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db9e:	bf00      	nop
 800dba0:	0800fec0 	.word	0x0800fec0
 800dba4:	0800fee0 	.word	0x0800fee0
 800dba8:	0800fea0 	.word	0x0800fea0

0800dbac <_write_r>:
 800dbac:	b538      	push	{r3, r4, r5, lr}
 800dbae:	4c07      	ldr	r4, [pc, #28]	; (800dbcc <_write_r+0x20>)
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	4608      	mov	r0, r1
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	6022      	str	r2, [r4, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	f7f3 fa49 	bl	8001052 <_write>
 800dbc0:	1c43      	adds	r3, r0, #1
 800dbc2:	d102      	bne.n	800dbca <_write_r+0x1e>
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	b103      	cbz	r3, 800dbca <_write_r+0x1e>
 800dbc8:	602b      	str	r3, [r5, #0]
 800dbca:	bd38      	pop	{r3, r4, r5, pc}
 800dbcc:	20006b34 	.word	0x20006b34

0800dbd0 <__swsetup_r>:
 800dbd0:	4b32      	ldr	r3, [pc, #200]	; (800dc9c <__swsetup_r+0xcc>)
 800dbd2:	b570      	push	{r4, r5, r6, lr}
 800dbd4:	681d      	ldr	r5, [r3, #0]
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460c      	mov	r4, r1
 800dbda:	b125      	cbz	r5, 800dbe6 <__swsetup_r+0x16>
 800dbdc:	69ab      	ldr	r3, [r5, #24]
 800dbde:	b913      	cbnz	r3, 800dbe6 <__swsetup_r+0x16>
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	f7ff fb43 	bl	800d26c <__sinit>
 800dbe6:	4b2e      	ldr	r3, [pc, #184]	; (800dca0 <__swsetup_r+0xd0>)
 800dbe8:	429c      	cmp	r4, r3
 800dbea:	d10f      	bne.n	800dc0c <__swsetup_r+0x3c>
 800dbec:	686c      	ldr	r4, [r5, #4]
 800dbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	0715      	lsls	r5, r2, #28
 800dbf6:	d42c      	bmi.n	800dc52 <__swsetup_r+0x82>
 800dbf8:	06d0      	lsls	r0, r2, #27
 800dbfa:	d411      	bmi.n	800dc20 <__swsetup_r+0x50>
 800dbfc:	2209      	movs	r2, #9
 800dbfe:	6032      	str	r2, [r6, #0]
 800dc00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc0a:	e03e      	b.n	800dc8a <__swsetup_r+0xba>
 800dc0c:	4b25      	ldr	r3, [pc, #148]	; (800dca4 <__swsetup_r+0xd4>)
 800dc0e:	429c      	cmp	r4, r3
 800dc10:	d101      	bne.n	800dc16 <__swsetup_r+0x46>
 800dc12:	68ac      	ldr	r4, [r5, #8]
 800dc14:	e7eb      	b.n	800dbee <__swsetup_r+0x1e>
 800dc16:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <__swsetup_r+0xd8>)
 800dc18:	429c      	cmp	r4, r3
 800dc1a:	bf08      	it	eq
 800dc1c:	68ec      	ldreq	r4, [r5, #12]
 800dc1e:	e7e6      	b.n	800dbee <__swsetup_r+0x1e>
 800dc20:	0751      	lsls	r1, r2, #29
 800dc22:	d512      	bpl.n	800dc4a <__swsetup_r+0x7a>
 800dc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc26:	b141      	cbz	r1, 800dc3a <__swsetup_r+0x6a>
 800dc28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	d002      	beq.n	800dc36 <__swsetup_r+0x66>
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7ff fba5 	bl	800d380 <_free_r>
 800dc36:	2300      	movs	r3, #0
 800dc38:	6363      	str	r3, [r4, #52]	; 0x34
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc40:	81a3      	strh	r3, [r4, #12]
 800dc42:	2300      	movs	r3, #0
 800dc44:	6063      	str	r3, [r4, #4]
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	f043 0308 	orr.w	r3, r3, #8
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	6923      	ldr	r3, [r4, #16]
 800dc54:	b94b      	cbnz	r3, 800dc6a <__swsetup_r+0x9a>
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc60:	d003      	beq.n	800dc6a <__swsetup_r+0x9a>
 800dc62:	4621      	mov	r1, r4
 800dc64:	4630      	mov	r0, r6
 800dc66:	f000 f917 	bl	800de98 <__smakebuf_r>
 800dc6a:	89a2      	ldrh	r2, [r4, #12]
 800dc6c:	f012 0301 	ands.w	r3, r2, #1
 800dc70:	d00c      	beq.n	800dc8c <__swsetup_r+0xbc>
 800dc72:	2300      	movs	r3, #0
 800dc74:	60a3      	str	r3, [r4, #8]
 800dc76:	6963      	ldr	r3, [r4, #20]
 800dc78:	425b      	negs	r3, r3
 800dc7a:	61a3      	str	r3, [r4, #24]
 800dc7c:	6923      	ldr	r3, [r4, #16]
 800dc7e:	b953      	cbnz	r3, 800dc96 <__swsetup_r+0xc6>
 800dc80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dc88:	d1ba      	bne.n	800dc00 <__swsetup_r+0x30>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	0792      	lsls	r2, r2, #30
 800dc8e:	bf58      	it	pl
 800dc90:	6963      	ldrpl	r3, [r4, #20]
 800dc92:	60a3      	str	r3, [r4, #8]
 800dc94:	e7f2      	b.n	800dc7c <__swsetup_r+0xac>
 800dc96:	2000      	movs	r0, #0
 800dc98:	e7f7      	b.n	800dc8a <__swsetup_r+0xba>
 800dc9a:	bf00      	nop
 800dc9c:	20000010 	.word	0x20000010
 800dca0:	0800fec0 	.word	0x0800fec0
 800dca4:	0800fee0 	.word	0x0800fee0
 800dca8:	0800fea0 	.word	0x0800fea0

0800dcac <_close_r>:
 800dcac:	b538      	push	{r3, r4, r5, lr}
 800dcae:	4c06      	ldr	r4, [pc, #24]	; (800dcc8 <_close_r+0x1c>)
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	6023      	str	r3, [r4, #0]
 800dcb8:	f7f3 f9e7 	bl	800108a <_close>
 800dcbc:	1c43      	adds	r3, r0, #1
 800dcbe:	d102      	bne.n	800dcc6 <_close_r+0x1a>
 800dcc0:	6823      	ldr	r3, [r4, #0]
 800dcc2:	b103      	cbz	r3, 800dcc6 <_close_r+0x1a>
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	20006b34 	.word	0x20006b34

0800dccc <__sflush_r>:
 800dccc:	898a      	ldrh	r2, [r1, #12]
 800dcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	0710      	lsls	r0, r2, #28
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	d458      	bmi.n	800dd8c <__sflush_r+0xc0>
 800dcda:	684b      	ldr	r3, [r1, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dc05      	bgt.n	800dcec <__sflush_r+0x20>
 800dce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	dc02      	bgt.n	800dcec <__sflush_r+0x20>
 800dce6:	2000      	movs	r0, #0
 800dce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcee:	2e00      	cmp	r6, #0
 800dcf0:	d0f9      	beq.n	800dce6 <__sflush_r+0x1a>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcf8:	682f      	ldr	r7, [r5, #0]
 800dcfa:	6a21      	ldr	r1, [r4, #32]
 800dcfc:	602b      	str	r3, [r5, #0]
 800dcfe:	d032      	beq.n	800dd66 <__sflush_r+0x9a>
 800dd00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	075a      	lsls	r2, r3, #29
 800dd06:	d505      	bpl.n	800dd14 <__sflush_r+0x48>
 800dd08:	6863      	ldr	r3, [r4, #4]
 800dd0a:	1ac0      	subs	r0, r0, r3
 800dd0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd0e:	b10b      	cbz	r3, 800dd14 <__sflush_r+0x48>
 800dd10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd12:	1ac0      	subs	r0, r0, r3
 800dd14:	2300      	movs	r3, #0
 800dd16:	4602      	mov	r2, r0
 800dd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd1a:	6a21      	ldr	r1, [r4, #32]
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b0      	blx	r6
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	89a3      	ldrh	r3, [r4, #12]
 800dd24:	d106      	bne.n	800dd34 <__sflush_r+0x68>
 800dd26:	6829      	ldr	r1, [r5, #0]
 800dd28:	291d      	cmp	r1, #29
 800dd2a:	d848      	bhi.n	800ddbe <__sflush_r+0xf2>
 800dd2c:	4a29      	ldr	r2, [pc, #164]	; (800ddd4 <__sflush_r+0x108>)
 800dd2e:	40ca      	lsrs	r2, r1
 800dd30:	07d6      	lsls	r6, r2, #31
 800dd32:	d544      	bpl.n	800ddbe <__sflush_r+0xf2>
 800dd34:	2200      	movs	r2, #0
 800dd36:	6062      	str	r2, [r4, #4]
 800dd38:	04d9      	lsls	r1, r3, #19
 800dd3a:	6922      	ldr	r2, [r4, #16]
 800dd3c:	6022      	str	r2, [r4, #0]
 800dd3e:	d504      	bpl.n	800dd4a <__sflush_r+0x7e>
 800dd40:	1c42      	adds	r2, r0, #1
 800dd42:	d101      	bne.n	800dd48 <__sflush_r+0x7c>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b903      	cbnz	r3, 800dd4a <__sflush_r+0x7e>
 800dd48:	6560      	str	r0, [r4, #84]	; 0x54
 800dd4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd4c:	602f      	str	r7, [r5, #0]
 800dd4e:	2900      	cmp	r1, #0
 800dd50:	d0c9      	beq.n	800dce6 <__sflush_r+0x1a>
 800dd52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd56:	4299      	cmp	r1, r3
 800dd58:	d002      	beq.n	800dd60 <__sflush_r+0x94>
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f7ff fb10 	bl	800d380 <_free_r>
 800dd60:	2000      	movs	r0, #0
 800dd62:	6360      	str	r0, [r4, #52]	; 0x34
 800dd64:	e7c0      	b.n	800dce8 <__sflush_r+0x1c>
 800dd66:	2301      	movs	r3, #1
 800dd68:	4628      	mov	r0, r5
 800dd6a:	47b0      	blx	r6
 800dd6c:	1c41      	adds	r1, r0, #1
 800dd6e:	d1c8      	bne.n	800dd02 <__sflush_r+0x36>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0c5      	beq.n	800dd02 <__sflush_r+0x36>
 800dd76:	2b1d      	cmp	r3, #29
 800dd78:	d001      	beq.n	800dd7e <__sflush_r+0xb2>
 800dd7a:	2b16      	cmp	r3, #22
 800dd7c:	d101      	bne.n	800dd82 <__sflush_r+0xb6>
 800dd7e:	602f      	str	r7, [r5, #0]
 800dd80:	e7b1      	b.n	800dce6 <__sflush_r+0x1a>
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd88:	81a3      	strh	r3, [r4, #12]
 800dd8a:	e7ad      	b.n	800dce8 <__sflush_r+0x1c>
 800dd8c:	690f      	ldr	r7, [r1, #16]
 800dd8e:	2f00      	cmp	r7, #0
 800dd90:	d0a9      	beq.n	800dce6 <__sflush_r+0x1a>
 800dd92:	0793      	lsls	r3, r2, #30
 800dd94:	680e      	ldr	r6, [r1, #0]
 800dd96:	bf08      	it	eq
 800dd98:	694b      	ldreq	r3, [r1, #20]
 800dd9a:	600f      	str	r7, [r1, #0]
 800dd9c:	bf18      	it	ne
 800dd9e:	2300      	movne	r3, #0
 800dda0:	eba6 0807 	sub.w	r8, r6, r7
 800dda4:	608b      	str	r3, [r1, #8]
 800dda6:	f1b8 0f00 	cmp.w	r8, #0
 800ddaa:	dd9c      	ble.n	800dce6 <__sflush_r+0x1a>
 800ddac:	4643      	mov	r3, r8
 800ddae:	463a      	mov	r2, r7
 800ddb0:	6a21      	ldr	r1, [r4, #32]
 800ddb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	47b0      	blx	r6
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	dc06      	bgt.n	800ddca <__sflush_r+0xfe>
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddc2:	81a3      	strh	r3, [r4, #12]
 800ddc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddc8:	e78e      	b.n	800dce8 <__sflush_r+0x1c>
 800ddca:	4407      	add	r7, r0
 800ddcc:	eba8 0800 	sub.w	r8, r8, r0
 800ddd0:	e7e9      	b.n	800dda6 <__sflush_r+0xda>
 800ddd2:	bf00      	nop
 800ddd4:	20400001 	.word	0x20400001

0800ddd8 <_fflush_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	690b      	ldr	r3, [r1, #16]
 800dddc:	4605      	mov	r5, r0
 800ddde:	460c      	mov	r4, r1
 800dde0:	b1db      	cbz	r3, 800de1a <_fflush_r+0x42>
 800dde2:	b118      	cbz	r0, 800ddec <_fflush_r+0x14>
 800dde4:	6983      	ldr	r3, [r0, #24]
 800dde6:	b90b      	cbnz	r3, 800ddec <_fflush_r+0x14>
 800dde8:	f7ff fa40 	bl	800d26c <__sinit>
 800ddec:	4b0c      	ldr	r3, [pc, #48]	; (800de20 <_fflush_r+0x48>)
 800ddee:	429c      	cmp	r4, r3
 800ddf0:	d109      	bne.n	800de06 <_fflush_r+0x2e>
 800ddf2:	686c      	ldr	r4, [r5, #4]
 800ddf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf8:	b17b      	cbz	r3, 800de1a <_fflush_r+0x42>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de02:	f7ff bf63 	b.w	800dccc <__sflush_r>
 800de06:	4b07      	ldr	r3, [pc, #28]	; (800de24 <_fflush_r+0x4c>)
 800de08:	429c      	cmp	r4, r3
 800de0a:	d101      	bne.n	800de10 <_fflush_r+0x38>
 800de0c:	68ac      	ldr	r4, [r5, #8]
 800de0e:	e7f1      	b.n	800ddf4 <_fflush_r+0x1c>
 800de10:	4b05      	ldr	r3, [pc, #20]	; (800de28 <_fflush_r+0x50>)
 800de12:	429c      	cmp	r4, r3
 800de14:	bf08      	it	eq
 800de16:	68ec      	ldreq	r4, [r5, #12]
 800de18:	e7ec      	b.n	800ddf4 <_fflush_r+0x1c>
 800de1a:	2000      	movs	r0, #0
 800de1c:	bd38      	pop	{r3, r4, r5, pc}
 800de1e:	bf00      	nop
 800de20:	0800fec0 	.word	0x0800fec0
 800de24:	0800fee0 	.word	0x0800fee0
 800de28:	0800fea0 	.word	0x0800fea0

0800de2c <_lseek_r>:
 800de2c:	b538      	push	{r3, r4, r5, lr}
 800de2e:	4c07      	ldr	r4, [pc, #28]	; (800de4c <_lseek_r+0x20>)
 800de30:	4605      	mov	r5, r0
 800de32:	4608      	mov	r0, r1
 800de34:	4611      	mov	r1, r2
 800de36:	2200      	movs	r2, #0
 800de38:	6022      	str	r2, [r4, #0]
 800de3a:	461a      	mov	r2, r3
 800de3c:	f7f3 f94c 	bl	80010d8 <_lseek>
 800de40:	1c43      	adds	r3, r0, #1
 800de42:	d102      	bne.n	800de4a <_lseek_r+0x1e>
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	b103      	cbz	r3, 800de4a <_lseek_r+0x1e>
 800de48:	602b      	str	r3, [r5, #0]
 800de4a:	bd38      	pop	{r3, r4, r5, pc}
 800de4c:	20006b34 	.word	0x20006b34

0800de50 <__swhatbuf_r>:
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	460e      	mov	r6, r1
 800de54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de58:	2900      	cmp	r1, #0
 800de5a:	b096      	sub	sp, #88	; 0x58
 800de5c:	4614      	mov	r4, r2
 800de5e:	461d      	mov	r5, r3
 800de60:	da07      	bge.n	800de72 <__swhatbuf_r+0x22>
 800de62:	2300      	movs	r3, #0
 800de64:	602b      	str	r3, [r5, #0]
 800de66:	89b3      	ldrh	r3, [r6, #12]
 800de68:	061a      	lsls	r2, r3, #24
 800de6a:	d410      	bmi.n	800de8e <__swhatbuf_r+0x3e>
 800de6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de70:	e00e      	b.n	800de90 <__swhatbuf_r+0x40>
 800de72:	466a      	mov	r2, sp
 800de74:	f000 f864 	bl	800df40 <_fstat_r>
 800de78:	2800      	cmp	r0, #0
 800de7a:	dbf2      	blt.n	800de62 <__swhatbuf_r+0x12>
 800de7c:	9a01      	ldr	r2, [sp, #4]
 800de7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de86:	425a      	negs	r2, r3
 800de88:	415a      	adcs	r2, r3
 800de8a:	602a      	str	r2, [r5, #0]
 800de8c:	e7ee      	b.n	800de6c <__swhatbuf_r+0x1c>
 800de8e:	2340      	movs	r3, #64	; 0x40
 800de90:	2000      	movs	r0, #0
 800de92:	6023      	str	r3, [r4, #0]
 800de94:	b016      	add	sp, #88	; 0x58
 800de96:	bd70      	pop	{r4, r5, r6, pc}

0800de98 <__smakebuf_r>:
 800de98:	898b      	ldrh	r3, [r1, #12]
 800de9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de9c:	079d      	lsls	r5, r3, #30
 800de9e:	4606      	mov	r6, r0
 800dea0:	460c      	mov	r4, r1
 800dea2:	d507      	bpl.n	800deb4 <__smakebuf_r+0x1c>
 800dea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	6123      	str	r3, [r4, #16]
 800deac:	2301      	movs	r3, #1
 800deae:	6163      	str	r3, [r4, #20]
 800deb0:	b002      	add	sp, #8
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	ab01      	add	r3, sp, #4
 800deb6:	466a      	mov	r2, sp
 800deb8:	f7ff ffca 	bl	800de50 <__swhatbuf_r>
 800debc:	9900      	ldr	r1, [sp, #0]
 800debe:	4605      	mov	r5, r0
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7ff faab 	bl	800d41c <_malloc_r>
 800dec6:	b948      	cbnz	r0, 800dedc <__smakebuf_r+0x44>
 800dec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800decc:	059a      	lsls	r2, r3, #22
 800dece:	d4ef      	bmi.n	800deb0 <__smakebuf_r+0x18>
 800ded0:	f023 0303 	bic.w	r3, r3, #3
 800ded4:	f043 0302 	orr.w	r3, r3, #2
 800ded8:	81a3      	strh	r3, [r4, #12]
 800deda:	e7e3      	b.n	800dea4 <__smakebuf_r+0xc>
 800dedc:	4b0d      	ldr	r3, [pc, #52]	; (800df14 <__smakebuf_r+0x7c>)
 800dede:	62b3      	str	r3, [r6, #40]	; 0x28
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	6020      	str	r0, [r4, #0]
 800dee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee8:	81a3      	strh	r3, [r4, #12]
 800deea:	9b00      	ldr	r3, [sp, #0]
 800deec:	6163      	str	r3, [r4, #20]
 800deee:	9b01      	ldr	r3, [sp, #4]
 800def0:	6120      	str	r0, [r4, #16]
 800def2:	b15b      	cbz	r3, 800df0c <__smakebuf_r+0x74>
 800def4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def8:	4630      	mov	r0, r6
 800defa:	f000 f833 	bl	800df64 <_isatty_r>
 800defe:	b128      	cbz	r0, 800df0c <__smakebuf_r+0x74>
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	f023 0303 	bic.w	r3, r3, #3
 800df06:	f043 0301 	orr.w	r3, r3, #1
 800df0a:	81a3      	strh	r3, [r4, #12]
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	431d      	orrs	r5, r3
 800df10:	81a5      	strh	r5, [r4, #12]
 800df12:	e7cd      	b.n	800deb0 <__smakebuf_r+0x18>
 800df14:	0800d235 	.word	0x0800d235

0800df18 <__malloc_lock>:
 800df18:	4770      	bx	lr

0800df1a <__malloc_unlock>:
 800df1a:	4770      	bx	lr

0800df1c <_read_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	4c07      	ldr	r4, [pc, #28]	; (800df3c <_read_r+0x20>)
 800df20:	4605      	mov	r5, r0
 800df22:	4608      	mov	r0, r1
 800df24:	4611      	mov	r1, r2
 800df26:	2200      	movs	r2, #0
 800df28:	6022      	str	r2, [r4, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	f7f3 f874 	bl	8001018 <_read>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d102      	bne.n	800df3a <_read_r+0x1e>
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	b103      	cbz	r3, 800df3a <_read_r+0x1e>
 800df38:	602b      	str	r3, [r5, #0]
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	20006b34 	.word	0x20006b34

0800df40 <_fstat_r>:
 800df40:	b538      	push	{r3, r4, r5, lr}
 800df42:	4c07      	ldr	r4, [pc, #28]	; (800df60 <_fstat_r+0x20>)
 800df44:	2300      	movs	r3, #0
 800df46:	4605      	mov	r5, r0
 800df48:	4608      	mov	r0, r1
 800df4a:	4611      	mov	r1, r2
 800df4c:	6023      	str	r3, [r4, #0]
 800df4e:	f7f3 f8a8 	bl	80010a2 <_fstat>
 800df52:	1c43      	adds	r3, r0, #1
 800df54:	d102      	bne.n	800df5c <_fstat_r+0x1c>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	b103      	cbz	r3, 800df5c <_fstat_r+0x1c>
 800df5a:	602b      	str	r3, [r5, #0]
 800df5c:	bd38      	pop	{r3, r4, r5, pc}
 800df5e:	bf00      	nop
 800df60:	20006b34 	.word	0x20006b34

0800df64 <_isatty_r>:
 800df64:	b538      	push	{r3, r4, r5, lr}
 800df66:	4c06      	ldr	r4, [pc, #24]	; (800df80 <_isatty_r+0x1c>)
 800df68:	2300      	movs	r3, #0
 800df6a:	4605      	mov	r5, r0
 800df6c:	4608      	mov	r0, r1
 800df6e:	6023      	str	r3, [r4, #0]
 800df70:	f7f3 f8a7 	bl	80010c2 <_isatty>
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d102      	bne.n	800df7e <_isatty_r+0x1a>
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	b103      	cbz	r3, 800df7e <_isatty_r+0x1a>
 800df7c:	602b      	str	r3, [r5, #0]
 800df7e:	bd38      	pop	{r3, r4, r5, pc}
 800df80:	20006b34 	.word	0x20006b34

0800df84 <_init>:
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df86:	bf00      	nop
 800df88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8a:	bc08      	pop	{r3}
 800df8c:	469e      	mov	lr, r3
 800df8e:	4770      	bx	lr

0800df90 <_fini>:
 800df90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df92:	bf00      	nop
 800df94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df96:	bc08      	pop	{r3}
 800df98:	469e      	mov	lr, r3
 800df9a:	4770      	bx	lr
